/**
 * @license AngularJS v1.4.7
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
try{
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var SKIP_INDEXES = 2;

    var templateArgs = arguments,
      code = templateArgs[0],
      message = '[' + (module ? module + ':' : '') + code + '] ',
      template = templateArgs[1],
      paramPrefix, i;

    message += template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1),
        shiftedIndex = index + SKIP_INDEXES;

      if (shiftedIndex < templateArgs.length) {
        return toDebugString(templateArgs[shiftedIndex]);
      }

      return match;
    });

    message += '\nhttp://errors.angularjs.org/1.4.7/' +
      (module ? module + '/' : '') + code;

    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
        encodeURIComponent(toDebugString(templateArgs[i]));
    }

    return new ErrorConstructor(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  toInt: true,
  inherit: true,
  merge: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isBlankObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  jq: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  convertTimezoneToLocal: true,
  timezoneToOffset: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_ATTRIBUTE: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    getPrototypeOf    = Object.getPrototypeOf,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  // Support: iOS 8.2 (not reproducible in simulator)
  // "length" in obj used to prevent JIT error (gh-11508)
  var length = "length" in Object(obj) && obj.length;

  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else if (isBlankObject(obj)) {
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
      for (key in obj) {
        iterator.call(context, obj[key], key, obj);
      }
    } else if (typeof obj.hasOwnProperty === 'function') {
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else {
      // Slow path for objects which do not have a method `hasOwnProperty`
      for (key in obj) {
        if (hasOwnProperty.call(obj, key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function forEachSorted(obj, iterator, context) {
  var keys = Object.keys(obj).sort();
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}


function baseExtend(dst, objs, deep) {
  var h = dst.$$hashKey;

  for (var i = 0, ii = objs.length; i < ii; ++i) {
    var obj = objs[i];
    if (!isObject(obj) && !isFunction(obj)) continue;
    var keys = Object.keys(obj);
    for (var j = 0, jj = keys.length; j < jj; j++) {
      var key = keys[j];
      var src = obj[key];

      if (deep && isObject(src)) {
        if (isDate(src)) {
          dst[key] = new Date(src.valueOf());
        } else if (isRegExp(src)) {
          dst[key] = new RegExp(src);
        } else {
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
          baseExtend(dst[key], [src], true);
        }
      } else {
        dst[key] = src;
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 *
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
 * {@link angular.merge} for this.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  return baseExtend(dst, slice.call(arguments, 1), false);
}


/**
* @ngdoc function
* @name angular.merge
* @module ng
* @kind function
*
* @description
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
*
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
* objects, performing a deep copy.
*
* @param {Object} dst Destination object.
* @param {...Object} src Source object(s).
* @returns {Object} Reference to `dst`.
*/
function merge(dst) {
  return baseExtend(dst, slice.call(arguments, 1), true);
}



function toInt(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

function hasCustomToString(obj) {
  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;
}


/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * Determine if a value is an object with a null prototype
 *
 * @returns {boolean} True if `value` is an `Object` with a null prototype
 */
function isBlankObject(value) {
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {
  return TYPED_ARRAY_REGEXP.test(toString.call(value));
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(","), i;
  for (i = 0; i < items.length; i++) {
    obj[items[i]] = true;
  }
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) != -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0) {
    array.splice(index, 1);
  }
  return index;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination, stackSource, stackDest) {
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }
  if (isTypedArray(destination)) {
    throw ngMinErr('cpta',
      "Can't copy! TypedArray destination cannot be mutated.");
  }

  if (!destination) {
    destination = source;
    if (isObject(source)) {
      var index;
      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {
        return stackDest[index];
      }

      // TypedArray, Date and RegExp have specific copy functionality and must be
      // pushed onto the stack before returning.
      // Array and other objects create the base object and recurse to copy child
      // objects. The array/object will be pushed onto the stack when recursed.
      if (isArray(source)) {
        return copy(source, [], stackSource, stackDest);
      } else if (isTypedArray(source)) {
        destination = new source.constructor(source);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        destination.lastIndex = source.lastIndex;
      } else if (isFunction(source.cloneNode)) {
          destination = source.cloneNode(true);
      } else {
        var emptyObject = Object.create(getPrototypeOf(source));
        return copy(source, emptyObject, stackSource, stackDest);
      }

      if (stackDest) {
        stackSource.push(source);
        stackDest.push(destination);
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");

    stackSource = stackSource || [];
    stackDest = stackDest || [];

    if (isObject(source)) {
      stackSource.push(source);
      stackDest.push(destination);
    }

    var result, key;
    if (isArray(source)) {
      destination.length = 0;
      for (var i = 0; i < source.length; i++) {
        destination.push(copy(source[i], null, stackSource, stackDest));
      }
    } else {
      var h = destination.$$hashKey;
      if (isArray(destination)) {
        destination.length = 0;
      } else {
        forEach(destination, function(value, key) {
          delete destination[key];
        });
      }
      if (isBlankObject(source)) {
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
        for (key in source) {
          destination[key] = copy(source[key], null, stackSource, stackDest);
        }
      } else if (source && typeof source.hasOwnProperty === 'function') {
        // Slow path, which must rely on hasOwnProperty
        for (key in source) {
          if (source.hasOwnProperty(key)) {
            destination[key] = copy(source[key], null, stackSource, stackDest);
          }
        }
      } else {
        // Slowest path --- hasOwnProperty can't be called as a method
        for (key in source) {
          if (hasOwnProperty.call(source, key)) {
            destination[key] = copy(source[key], null, stackSource, stackDest);
          }
        }
      }
      setHashKey(destination,h);
    }
  }
  return destination;
}

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for (key = 0; key < length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false;
        return equals(o1.getTime(), o2.getTime());
      } else if (isRegExp(o1)) {
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
        keySet = createMap();
        for (key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for (key in o2) {
          if (!(key in keySet) &&
              key.charAt(0) !== '$' &&
              isDefined(o2[key]) &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}

var csp = function() {
  if (!isDefined(csp.rules)) {


    var ngCspElement = (document.querySelector('[ng-csp]') ||
                    document.querySelector('[data-ng-csp]'));

    if (ngCspElement) {
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
                    ngCspElement.getAttribute('data-ng-csp');
      csp.rules = {
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
      };
    } else {
      csp.rules = {
        noUnsafeEval: noUnsafeEval(),
        noInlineStyle: false
      };
    }
  }

  return csp.rules;

  function noUnsafeEval() {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
      return false;
    } catch (e) {
      return true;
    }
  }
};

/**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} ngJq the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since angular looks for this directive when it is loaded (doesn't wait for the
 * DOMContentLoaded event), it must be placed on an element that comes before the script
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
 * others ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */
var jq = function() {
  if (isDefined(jq.name_)) return jq.name_;
  var el;
  var i, ii = ngAttrPrefixes.length, prefix, name;
  for (i = 0; i < ii; ++i) {
    prefix = ngAttrPrefixes[i];
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
      name = el.getAttribute(prefix + 'jq');
      break;
    }
  }

  return (jq.name_ = name);
};

function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


function timezoneToOffset(timezone, fallback) {
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}


function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}


function convertTimezoneToLocal(date, timezone, reverse) {
  reverse = reverse ? -1 : 1;
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) {}
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {};
  forEach((keyValue || "").split('&'), function(keyValue) {
    var splitPoint, key, val;
    if (keyValue) {
      key = keyValue = keyValue.replace(/\+/g,'%20');
      splitPoint = keyValue.indexOf('=');
      if (splitPoint !== -1) {
        key = keyValue.substring(0, splitPoint);
        val = keyValue.substring(splitPoint + 1);
      }
      key = tryDecodeURIComponent(key);
      if (isDefined(key)) {
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.getAttribute(attr))) {
      return attr;
    }
  }
  return null;
}

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
var skipDestroyOnNextJQueryCleanData;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  var jqName = jq();
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
           !jqName             ? undefined     :   // use jqLite
                                 window[jqName];   // use jQuery specified by `ngJq`

  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      if (!skipDestroyOnNextJQueryCleanData) {
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
          events = jQuery._data(elem, "events");
          if (events && events.$destroy) {
            jQuery(elem).triggerHandler('$destroy');
          }
        }
      } else {
        skipDestroyOnNextJQueryCleanData = false;
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {Array} the inputted object or a jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): update `nodes` instead of creating a new object?
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes;

  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
    if (blockNodes || nodes[i] !== node) {
      if (!blockNodes) {
        blockNodes = jqLite(slice.call(nodes, 0, i));
      }
      blockNodes.push(node);
    }
  }

  return blockNodes || nodes;
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_ATTRIBUTE = 2;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * Passing one argument retrieves an existing {@link angular.Module},
     * whereas passing more than one argument creates a new {@link angular.Module}
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLaterAndSetModuleName('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

           /**
           * @ngdoc method
           * @name angular.Module#decorator
           * @module ng
           * @param {string} The name of the service to decorate.
           * @param {Function} This function will be invoked when the service needs to be
           *                                    instantiated and should return the decorated service instance.
           * @description
           * See {@link auto.$provide#decorator $provide.decorator()}.
           */
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link $animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name - this must be a valid angular expression identifier
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           *
           * <div class="alert alert-warning">
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
           * (`myapp_subsection_filterx`).
           * </div>
           */
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }

        /**
         * @param {string} provider
         * @param {string} method
         * @returns {angular.Module}
         */
        function invokeLaterAndSetModuleName(provider, method) {
          return function(recipeName, factoryFunction) {
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
            invokeQueue.push([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global: toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '...';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (isUndefined(obj)) {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $CoreAnimateCssProvider,
  $$CoreAnimateQueueProvider,
  $$CoreAnimateRunnerProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $$ForceReflowProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $$HashMapProvider,
  $HttpProvider,
  $HttpParamSerializerProvider,
  $HttpParamSerializerJQLikeProvider,
  $HttpBackendProvider,
  $xhrFactoryProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $WindowProvider,
  $$jqLiteProvider,
  $$CookieReaderProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version.
 *
 * This object has the following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.4.7',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 4,
  dot: 7,
  codeName: 'dark-luminescence'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'merge': merge,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    'getTestability': getTestability,
    '$$minErr': minErr,
    '$$csp': csp,
    'reloadWithDebugInfo': reloadWithDebugInfo
  });

  angularModule = setupModuleLoader(window);

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $animateCss: $CoreAnimateCssProvider,
        $$animateQueue: $$CoreAnimateQueueProvider,
        $$AnimateRunner: $$CoreAnimateRunnerProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $$forceReflow: $$ForceReflowProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpParamSerializer: $HttpParamSerializerProvider,
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
        $httpBackend: $HttpBackendProvider,
        $xhrFactory: $xhrFactoryProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$jqLite: $$jqLiteProvider,
        $$HashMap: $$HashMapProvider,
        $$cookieReader: $$CookieReaderProvider
      });
    }
  ]);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = function(element, type, fn) {
      element.addEventListener(type, fn, false);
    },
    removeEventListenerFn = function(element, type, fn) {
      element.removeEventListener(type, fn, false);
    };

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:-]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteHasData(node) {
  for (var key in jqCache[node.ng339]) {
    return true;
  }
  return false;
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = tmp || fragment.appendChild(context.createElement("div"));
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        removeEventListenerFn(element, type, handle);
      }
      delete events[type];
    }
  } else {
    forEach(type.split(' '), function(type) {
      if (isDefined(fn)) {
        var listenerFns = events[type];
        arrayRemove(listenerFns || [], fn);
        if (listenerFns && listenerFns.length > 0) {
          return;
        }
      }

      removeEventListenerFn(element, type, handle);
      delete events[type];
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[key] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[key];
        } else { // mass-setter: data({key1: val1, key2: val2})
          extend(data, key);
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf(" " + selector + " ") > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType == NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if (isDefined(value = jqLite.data(element, names[i]))) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behaviour
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document is already loaded
    if (document.readyState === 'complete') {
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(name) {
  return ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData,
  hasData: jqLiteHasData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var nodeType = element.nodeType;
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
      return;
    }
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name) || noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        eventFns[i].call(element, event);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    while (i--) {
      type = types[i];
      var eventFns = events[type];

      if (!eventFns) {
        events[type] = [];

        if (type === 'mouseenter' || type === 'mouseleave') {
          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8

          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || (related !== target && !target.contains(related))) {
              handle(event, type);
            }
          });

        } else {
          if (type !== '$destroy') {
            addEventListenerFn(element, type, handle);
          }
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT) {
        children.push(element);
      }
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    newElement = new JQLite(newElement);

    for (var i = 0, ii = newElement.length; i < ii; i++) {
      var node = newElement[i];
      parent.insertBefore(node, index.nextSibling);
      index = node;
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});


// Provider for private $$jqLite service
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

var $$HashMapProvider = [function() {
  this.$get = [function() {
    return HashMap;
  }];
}];

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
      args = fnText.match(FN_ARGS);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
 *   injected according to the {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
 *     that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function enforceReturnValue(name, factory) {
    return function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName, caller);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
          length, i,
          key;

      for (i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key, serviceName)
        );
      }
      if (isArray(fn)) {
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      // Object creation: http://jsperf.com/create-constructor/2
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
      var returnedValue = invoke(Type, instance, locals, serviceName);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
   * in the
   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
   *                       {@link ng.$location#hash $location.hash()} will be used.
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll(hash) {
      hash = isString(hash) ? hash : $location.hash();
      var elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');
var ELEMENT_NODE = 1;
var NG_ANIMATE_CLASSNAME = 'ng-animate';

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function extractElementNode(element) {
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType === ELEMENT_NODE) {
      return elm;
    }
  }
}

function splitClasses(classes) {
  if (isString(classes)) {
    classes = classes.split(' ');
  }

  // Use createMap() to prevent class assumptions involving property names in
  // Object.prototype
  var obj = createMap();
  forEach(classes, function(klass) {
    // sometimes the split leaves empty string values
    // incase extra spaces were applied to the options
    if (klass.length) {
      obj[klass] = true;
    }
  });
  return obj;
}

// if any other type of options value besides an Object value is
// passed into the $animate.method() animation then this helper code
// will be run which will ignore it. While this patch is not the
// greatest solution to this, a lot of existing plugins depend on
// $animate to either call the callback (< 1.2) or return a promise
// that can be changed. This helper function ensures that the options
// are wiped clean incase a callback function is provided.
function prepareAnimateOptions(options) {
  return isObject(options)
      ? options
      : {};
}

var $$CoreAnimateRunnerProvider = function() {
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {
    function AnimateRunner() {}
    AnimateRunner.all = noop;
    AnimateRunner.chain = noop;
    AnimateRunner.prototype = {
      end: noop,
      cancel: noop,
      resume: noop,
      pause: noop,
      complete: noop,
      then: function(pass, fail) {
        return $q(function(resolve) {
          $$rAF(function() {
            resolve();
          });
        }).then(pass, fail);
      }
    };
    return AnimateRunner;
  }];
};

// this is prefixed with Core since it conflicts with
// the animateQueueProvider defined in ngAnimate/animateQueue.js
var $$CoreAnimateQueueProvider = function() {
  var postDigestQueue = new HashMap();
  var postDigestElements = [];

  this.$get = ['$$AnimateRunner', '$rootScope',
       function($$AnimateRunner,   $rootScope) {
    return {
      enabled: noop,
      on: noop,
      off: noop,
      pin: noop,

      push: function(element, event, options, domOperation) {
        domOperation        && domOperation();

        options = options || {};
        options.from        && element.css(options.from);
        options.to          && element.css(options.to);

        if (options.addClass || options.removeClass) {
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
        }

        return new $$AnimateRunner(); // jshint ignore:line
      }
    };


    function updateData(data, classes, value) {
      var changed = false;
      if (classes) {
        classes = isString(classes) ? classes.split(' ') :
                  isArray(classes) ? classes : [];
        forEach(classes, function(className) {
          if (className) {
            changed = true;
            data[className] = value;
          }
        });
      }
      return changed;
    }

    function handleCSSClassChanges() {
      forEach(postDigestElements, function(element) {
        var data = postDigestQueue.get(element);
        if (data) {
          var existing = splitClasses(element.attr('class'));
          var toAdd = '';
          var toRemove = '';
          forEach(data, function(status, className) {
            var hasClass = !!existing[className];
            if (status !== hasClass) {
              if (status) {
                toAdd += (toAdd.length ? ' ' : '') + className;
              } else {
                toRemove += (toRemove.length ? ' ' : '') + className;
              }
            }
          });

          forEach(element, function(elm) {
            toAdd    && jqLiteAddClass(elm, toAdd);
            toRemove && jqLiteRemoveClass(elm, toRemove);
          });
          postDigestQueue.remove(element);
        }
      });
      postDigestElements.length = 0;
    }


    function addRemoveClassesPostDigest(element, add, remove) {
      var data = postDigestQueue.get(element) || {};

      var classesAdded = updateData(data, add, true);
      var classesRemoved = updateData(data, remove, false);

      if (classesAdded || classesRemoved) {

        postDigestQueue.put(element, data);
        postDigestElements.push(element);

        if (postDigestElements.length === 1) {
          $rootScope.$$postDigest(handleCSSClassChanges);
        }
      }
    }
  }];
};

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM updates and resolves the returned runner promise.
 *
 * In order to enable animations the `ngAnimate` module has to be loaded.
 *
 * To see the functional implementation check out `src/ngAnimate/animate.js`.
 */
var $AnimateProvider = ['$provide', function($provide) {
  var provider = this;

  this.$$registeredAnimations = Object.create(null);

   /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(element, ... , doneFunction, options)`
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
   *   on the type of animation additional arguments will be injected into the animation function. The
   *   list below explains the function signatures for the different animation methods:
   *
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
   *   - addClass: function(element, addedClasses, doneFunction, options)
   *   - removeClass: function(element, removedClasses, doneFunction, options)
   *   - enter, leave, move: function(element, doneFunction, options)
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
   *
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
   *
   * ```js
   *   return {
   *     //enter, leave, move signature
   *     eventFn : function(element, done, options) {
   *       //code to run the animation
   *       //once complete, then run done()
   *       return function endFunction(wasCancelled) {
   *         //code to cancel the animation
   *       }
   *     }
   *   }
   * ```
   *
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    if (name && name.charAt(0) !== '.') {
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
    }

    var key = name + '-animation';
    provider.$$registeredAnimations[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
   * When setting the `classNameFilter` value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
      if (this.$$classNameFilter) {
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
        if (reservedRegex.test(this.$$classNameFilter.toString())) {
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

        }
      }
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$animateQueue', function($$animateQueue) {
    function domInsert(element, parentElement, afterElement) {
      // if for some reason the previous element was removed
      // from the dom sometime before this code runs then let's
      // just stick to using the parent element as the anchor
      if (afterElement) {
        var afterNode = extractElementNode(afterElement);
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
          afterElement = null;
        }
      }
      afterElement ? afterElement.after(element) : parentElement.prepend(element);
    }

    /**
     * @ngdoc service
     * @name $animate
     * @description The $animate service exposes a series of DOM utility methods that provide support
     * for animation hooks. The default behavior is the application of DOM operations, however,
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
     * to ensure that animation runs with the triggered DOM operation.
     *
     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't
     * included and only when it is active then the animation hooks that `$animate` triggers will be
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
     *
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *
     * To learn more about enabling animation support, click here to visit the
     * {@link ngAnimate ngAnimate module page}.
     */
    return {
      // we don't call it directly since non-existant arguments may
      // be interpreted as null within the sub enabled function

      /**
       *
       * @ngdoc method
       * @name $animate#on
       * @kind function
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:
       *
       * ```js
       * $animate.on('enter', container,
       *    function callback(element, phase) {
       *      // cool we detected an enter animation within the container
       *    }
       * );
       * ```
       *
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children
       * @param {Function} callback the callback function that will be fired when the listener is triggered
       *
       * The arguments present in the callback function are:
       * * `element` - The captured DOM element that the animation was fired on.
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */
      on: $$animateQueue.on,

      /**
       *
       * @ngdoc method
       * @name $animate#off
       * @kind function
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:
       *
       * ```js
       * // remove all the animation event listeners listening for `enter`
       * $animate.off('enter');
       *
       * // remove all the animation event listeners listening for `enter` on the given element and its children
       * $animate.off('enter', container);
       *
       * // remove the event listener function provided by `listenerFn` that is set
       * // to listen for `enter` on the given `element` as well as its children
       * $animate.off('enter', container, callback);
       * ```
       *
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement=} container the container element the event listener was placed on
       * @param {Function=} callback the callback function that was registered as the listener
       */
      off: $$animateQueue.off,

      /**
       * @ngdoc method
       * @name $animate#pin
       * @kind function
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *
       *    Note that this feature is only active when the `ngAnimate` module is used.
       *
       * @param {DOMElement} element the external element that will be pinned
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
       */
      pin: $$animateQueue.pin,

      /**
       *
       * @ngdoc method
       * @name $animate#enabled
       * @kind function
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:
       *
       * ```js
       * // returns true or false
       * $animate.enabled();
       *
       * // changes the enabled state for all animations
       * $animate.enabled(false);
       * $animate.enabled(true);
       *
       * // returns true or false if animations are enabled for an element
       * $animate.enabled(element);
       *
       * // changes the enabled state for an element and its children
       * $animate.enabled(element, true);
       * $animate.enabled(element, false);
       * ```
       *
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
       * @param {boolean=} enabled whether or not the animations will be enabled for the element
       *
       * @return {boolean} whether or not animations are enabled
       */
      enabled: $$animateQueue.enabled,

      /**
       * @ngdoc method
       * @name $animate#cancel
       * @kind function
       * @description Cancels the provided animation.
       *
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
       */
      cancel: function(runner) {
        runner.end && runner.end();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element (if provided) or
       *   as the first child within the `parent` element and then triggers an animation.
       *   A promise is returned that will be resolved during the next digest once the animation
       *   has completed.
       *
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Inserts (moves) the element into its new position in the DOM either after
       *   the `after` element (if provided) or as the first child within the `parent` element
       *   and then triggers an animation. A promise is returned that will be resolved
       *   during the next digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be moved into the new DOM position
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
      },

      /**
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Triggers an animation and then removes the element from the DOM.
       * When the function is called a promise is returned that will be resolved during the next
       * digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
          element.remove();
        });
      },

      /**
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       *
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element already contains the CSS class or if the class is removed at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addclass, className);
        return $$animateQueue.push(element, 'addClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       *
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element does not contain the CSS class or if the class is added at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.removeClass = mergeClasses(options.removeClass, className);
        return $$animateQueue.push(element, 'removeClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       *
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
       *    passed. Note that class-based animations are treated differently compared to structural animations
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
       *    depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addClass, add);
        options.removeClass = mergeClasses(options.removeClass, remove);
        return $$animateQueue.push(element, 'setClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#animate
       * @kind function
       *
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).
       *
       * @param {DOMElement} element the element which the CSS styles will be applied to
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
       *    (Note that if no animation is detected then this value will not be appplied to the element.)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      animate: function(element, from, to, className, options) {
        options = prepareAnimateOptions(options);
        options.from = options.from ? extend(options.from, from) : from;
        options.to   = options.to   ? extend(options.to, to)     : to;

        className = className || 'ng-inline-animate';
        options.tempClasses = mergeClasses(options.tempClasses, className);
        return $$animateQueue.push(element, 'animate', options);
      }
    };
  }];
}];

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
 * then the `$animateCss` service will actually perform animations.
 *
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
 */
var $CoreAnimateCssProvider = function() {
  this.$get = ['$$rAF', '$q', function($$rAF, $q) {

    var RAFPromise = function() {};
    RAFPromise.prototype = {
      done: function(cancel) {
        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();
      },
      end: function() {
        this.done();
      },
      cancel: function() {
        this.done(true);
      },
      getPromise: function() {
        if (!this.defer) {
          this.defer = $q.defer();
        }
        return this.defer.promise;
      },
      then: function(f1,f2) {
        return this.getPromise().then(f1,f2);
      },
      'catch': function(f1) {
        return this.getPromise()['catch'](f1);
      },
      'finally': function(f1) {
        return this.getPromise()['finally'](f1);
      }
    };

    return function(element, options) {
      // there is no point in applying the styles since
      // there is no animation that goes on at all in
      // this version of $animateCss.
      if (options.cleanupStyles) {
        options.from = options.to = null;
      }

      if (options.from) {
        element.css(options.from);
        options.from = null;
      }

      var closed, runner = new RAFPromise();
      return {
        start: run,
        end: run
      };

      function run() {
        $$rAF(function() {
          close();
          if (!closed) {
            runner.done();
          }
          closed = true;
        });
        return runner;
      }

      function close() {
        if (options.addClass) {
          element.addClass(options.addClass);
          options.addClass = null;
        }
        if (options.removeClass) {
          element.removeClass(options.removeClass);
          options.removeClass = null;
        }
        if (options.to) {
          element.css(options.to);
          options.to = null;
        }
      }
    };
  }];
};

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      pendingLocation = null;

  cacheState();
  lastHistoryState = cachedState;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
        // Do the assignment again so that those two variables are referentially identical.
        lastHistoryState = cachedState;
      } else {
        if (!sameBase || pendingLocation) {
          pendingLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
        if (location.href !== url) {
          pendingLocation = url;
        }
      }
      return self;
    // getter
    } else {
      // - pendingLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
      //   https://openradar.appspot.com/22186109).
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return pendingLocation || location.href.replace(/%27/g,"'");
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    pendingLocation = null;
    cacheState();
    fireUrlChange();
  }

  function getCurrentState() {
    try {
      return history.state;
    } catch (e) {
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
    }
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = getCurrentState();
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }
    lastCachedState = cachedState;
  }

  function fireUrlChange() {
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * @private
   * Remove popstate and hashchange handler from window.
   *
   * NOTE: this api is intended for use only by $rootScope.
   */
  self.$$applicationDestroyed = function() {
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if (angular.isUndefined($scope.cache.get(key))) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (isUndefined(value)) return;
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringIdentifier',
 *       bindToController: false,
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioural (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * The scope property can be `true`, an object or a falsy value:
 *
 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
 *
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
 * the directive's element. If multiple directives on the same element request a new scope,
 * only one new scope is created. The new scope rule does not apply for the root of the template
 * since the root of the template always gets a new scope.
 *
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
 * scope. This is useful when creating reusable components, which should not accidentally read or modify
 * data in the parent scope.
 *
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
 * directive's element. These local properties are useful for aliasing values for templates. The keys in
 * the object hash map to the name of the property on the isolate scope; the values define how the property
 * is bound to the parent scope, via matching attributes on the directive's element:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 * In general it's possible to apply more than one directive to one element, but there might be limitations
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
 *
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
 * * **child scope** + **no scope** =>  Both directives will share one single child scope
 * * **child scope** + **child scope** =>  Both directives will share one single child scope
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.
 *
 *
 * #### `bindToController`
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
 * is instantiated, the initial values of the isolate scope bindings are already available.
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and can be accessed by other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement)`.
 *    * `scope`: optional argument to override the scope.
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
 *    * `futureParentElement`:
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised (unless no link function
 * is specified, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. This is especially
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-danger">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *     Note that you can also require the directive's own controller - it will be made available like
 *     any other controller.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
 * ```
 * - $rootScope
 *   - isolate
 *     - transclusion
 * ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
 * ```
 * - $rootScope
 *   - transclusion
 * - isolate
 * ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br/>
      <textarea ng-model="html"></textarea> <br/>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-danger">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to controller instances; if given, it will make the controllers
 *        available to directives.
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  function parseIsolateBindings(scope, directiveName, isController) {
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

    var bindings = {};

    forEach(scope, function(definition, scopeName) {
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            "Invalid {3} for directive '{0}'." +
            " Definition: {... {1}: '{2}' ...}",
            directiveName, scopeName, definition,
            (isController ? "controller bindings definition" :
            "isolate scope definition"));
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
    });

    return bindings;
  }

  function parseDirectiveBindings(directive, directiveName) {
    var bindings = {
      isolateScope: null,
      bindToController: null
    };
    if (isObject(directive.scope)) {
      if (directive.bindToController === true) {
        bindings.bindToController = parseIsolateBindings(directive.scope,
                                                         directiveName, true);
        bindings.isolateScope = {};
      } else {
        bindings.isolateScope = parseIsolateBindings(directive.scope,
                                                     directiveName, false);
      }
    }
    if (isObject(directive.bindToController)) {
      bindings.bindToController =
          parseIsolateBindings(directive.bindToController, directiveName, true);
    }
    if (isObject(bindings.bindToController)) {
      var controller = directive.controller;
      var controllerAs = directive.controllerAs;
      if (!controller) {
        // There is no controller, there may or may not be a controllerAs property
        throw $compileMinErr('noctrl',
              "Cannot bind to controller without directive '{0}'s controller.",
              directiveName);
      } else if (!identifierForController(controller, controllerAs)) {
        // There is a controller, but no identifier or controllerAs property
        throw $compileMinErr('noident',
              "Cannot bind to controller without identifier for directive '{0}'.",
              directiveName);
      }
    }
    return bindings;
  }

  function assertValidDirectiveName(name) {
    var letter = name.charAt(0);
    if (!letter || letter !== lowercase(letter)) {
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }
    if (name !== name.trim()) {
      throw $compileMinErr('baddir',
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
            name);
    }
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertValidDirectiveName(name);
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'EA';
                var bindings = directive.$$bindings =
                    parseDirectiveBindings(directive, directive.name);
                if (isObject(bindings.isolateScope)) {
                  directive.$$isolateBindings = bindings.isolateScope;
                }
                directive.$$moduleName = directiveFactory.$$moduleName;
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    };

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && key === 'href') ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset') {
          // sanitize img[srcset] values
          var result = "";

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (" " + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (" " + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || isUndefined(value)) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[observer], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };


    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index) {
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        assertArg(scope, 'scope');

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i+=3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
              var destroyBindings = nodeLinkFn.$$destroyBindings;
              if (destroyBindings) {
                nodeLinkFn.$$destroyBindings = null;
                childScope.$on('$destroyed', destroyBindings);
              }
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,
                       nodeLinkFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      };

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = trim(attr.value);

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
            if (directiveIsMultiElement(directiveNName)) {
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          // use class as directive
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          if (msie === 11) {
            // Workaround for #11781
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
              node.parentNode.removeChild(node.nextSibling);
            }
          }
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective = previousCompileContext.newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || createMap();
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value;

        if (isString(require)) {
          var match = require.match(REQUIRE_PREFIX_REGEXP);
          var name = require.substring(match[0].length);
          var inheritType = match[1] || match[3];
          var optional = match[2] === '?';

          //If only parents then start at the parent element
          if (inheritType === '^^') {
            $element = $element.parent();
          //Otherwise attempt getting the controller from elementControllers in case
          //the element is transcluded (and has no data) and to avoid .data if possible
          } else {
            value = elementControllers && elementControllers[name];
            value = value && value.instance;
          }

          if (!value) {
            var dataName = '$' + name + 'Controller';
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
          }

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                name, directiveName);
          }
        } else if (isArray(require)) {
          value = [];
          for (var i = 0, ii = require.length; i < ii; i++) {
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);
          }
        }

        return value || null;
      }

      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
        var elementControllers = createMap();
        for (var controllerKey in controllerDirectives) {
          var directive = controllerDirectives[controllerKey];
          var locals = {
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
            $element: $element,
            $attrs: attrs,
            $transclude: transcludeFn
          };

          var controller = directive.controller;
          if (controller == '@') {
            controller = attrs[directive.name];
          }

          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

          // For directives with element transclusion the element is a comment,
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
          // clean up (http://bugs.jquery.com/ticket/8335).
          // Instead, we save the controllers for the element in a local hash and attach to .data
          // later, once we have the actual element.
          elementControllers[directive.name] = controllerInstance;
          if (!hasElementTranscludeDirective) {
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
          }
        }
        return elementControllers;
      }

      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,
                          thisLinkFn) {
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
            attrs;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
        }

        if (controllerDirectives) {
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }

        if (newIsolateScopeDirective) {
          // Initialize isolate scope bindings for new isolate scope directive.
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);
          isolateScope.$$isolateBindings =
              newIsolateScopeDirective.$$isolateBindings;
          initializeDirectiveBindings(scope, attrs, isolateScope,
                                      isolateScope.$$isolateBindings,
                                      newIsolateScopeDirective, isolateScope);
        }
        if (elementControllers) {
          // Initialize bindToController bindings for new/isolate scopes
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;
          var bindings;
          var controllerForBindings;
          if (scopeDirective && elementControllers[scopeDirective.name]) {
            bindings = scopeDirective.$$bindings.bindToController;
            controller = elementControllers[scopeDirective.name];

            if (controller && controller.identifier && bindings) {
              controllerForBindings = controller;
              thisLinkFn.$$destroyBindings =
                  initializeDirectiveBindings(scope, attrs, controller.instance,
                                              bindings, scopeDirective);
            }
          }
          for (i in elementControllers) {
            controller = elementControllers[i];
            var controllerResult = controller();

            if (controllerResult !== controller.instance) {
              // If the controller constructor has a return value, overwrite the instance
              // from setupControllers and update the element data
              controller.instance = controllerResult;
              $element.data('$' + i + 'Controller', controllerResult);
              if (controller === controllerForBindings) {
                // Remove and re-install bindToController bindings
                thisLinkFn.$$destroyBindings();
                thisLinkFn.$$destroyBindings =
                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);
              }
            }
          }
        }

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
          var transcludeControllers;

          // No scope passed in:
          if (!isScope(scope)) {
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          try {
            directive = directives[i];
            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch (e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest(templateUrl)
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn, afterTemplateNodeLinkFn);
          }
          linkQueue = null;
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,
                                  afterTemplateNodeLinkFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }

    function assertNoDuplicate(what, previousDirective, directive, element) {

      function wrapModuleNameIfDefined(moduleName) {
        return moduleName ?
          (' (module: ' + moduleName + ')') :
          '';
      }

      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "form" && attrNormalizedName == "action") ||
          (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
      var trustedContext = getTrustedContext(node, name);
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "select") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);

      if (jqLite.hasData(firstElementToRemove)) {
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
        // data here because there's no public interface in jQuery to do that and copying over
        // event listeners (which is the main use of private data) wouldn't work anyway.
        jqLite(newNode).data(jqLite(firstElementToRemove).data());

        // Remove data of the replaced element. We cannot just call .remove()
        // on the element it since that would deallocate scope that is needed
        // for the new node. Instead, remove the data "manually".
        if (!jQuery) {
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];
        } else {
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
          // the replaced element. The cleanData version monkey-patched by Angular would cause
          // the scope to be trashed and we do need the very same scope to work with the new
          // element. However, we cannot just cache the non-patched version and use it here as
          // that would break if another library patches the method after Angular does (one
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be
          // skipped this one time.
          skipDestroyOnNextJQueryCleanData = true;
          jQuery.cleanData([firstElementToRemove]);
        }
      }

      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }


    // Set up $watches for isolate scope and controller bindings. This process
    // only occurs for isolate scopes and new scopes with controllerAs.
    function initializeDirectiveBindings(scope, attrs, destination, bindings,
                                         directive, newScope) {
      var onNewScopeDestroyed;
      forEach(bindings, function(definition, scopeName) {
        var attrName = definition.attrName,
        optional = definition.optional,
        mode = definition.mode, // @, =, or &
        lastValue,
        parentGet, parentSet, compare;

        switch (mode) {

          case '@':
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
              destination[scopeName] = attrs[attrName] = void 0;
            }
            attrs.$observe(attrName, function(value) {
              if (isString(value)) {
                destination[scopeName] = value;
              }
            });
            attrs.$$observers[attrName].$$scope = scope;
            if (isString(attrs[attrName])) {
              // If the attribute has been provided then we trigger an interpolation to ensure
              // the value is there for use in the link fn
              destination[scopeName] = $interpolate(attrs[attrName])(scope);
            }
            break;

          case '=':
            if (!hasOwnProperty.call(attrs, attrName)) {
              if (optional) break;
              attrs[attrName] = void 0;
            }
            if (optional && !attrs[attrName]) break;

            parentGet = $parse(attrs[attrName]);
            if (parentGet.literal) {
              compare = equals;
            } else {
              compare = function(a, b) { return a === b || (a !== a && b !== b); };
            }
            parentSet = parentGet.assign || function() {
              // reset the change, or we will throw this exception on every $digest
              lastValue = destination[scopeName] = parentGet(scope);
              throw $compileMinErr('nonassign',
                  "Expression '{0}' used with directive '{1}' is non-assignable!",
                  attrs[attrName], directive.name);
            };
            lastValue = destination[scopeName] = parentGet(scope);
            var parentValueWatch = function parentValueWatch(parentValue) {
              if (!compare(parentValue, destination[scopeName])) {
                // we are out of sync and need to copy
                if (!compare(parentValue, lastValue)) {
                  // parent changed and it has precedence
                  destination[scopeName] = parentValue;
                } else {
                  // if the parent can be assigned then do so
                  parentSet(scope, parentValue = destination[scopeName]);
                }
              }
              return lastValue = parentValue;
            };
            parentValueWatch.$stateful = true;
            var unwatch;
            if (definition.collection) {
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
            } else {
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
            }
            onNewScopeDestroyed = (onNewScopeDestroyed || []);
            onNewScopeDestroyed.push(unwatch);
            break;

          case '&':
            // Don't assign Object.prototype method to scope
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

            // Don't assign noop to destination if expression is not valid
            if (parentGet === noop && optional) break;

            destination[scopeName] = function(locals) {
              return parentGet(scope, locals);
            };
            break;
        }
      });
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {
          onNewScopeDestroyed[i]();
        }
      } : noop;
      if (newScope && destroyBindings !== noop) {
        newScope.$on('$destroy', destroyBindings);
        return noop;
      }
      return destroyBindings;
    }
  }];
}

var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT) {
      splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');


var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
function identifierForController(controller, ident) {
  if (ident && isString(ident)) return ident;
  if (isString(controller)) {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
}


/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false;

  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            "Badly formed controller string '{0}'. " +
            "Must match `__name__ as __id__` or `__name__`.", expression);
        }
        constructor = match[1],
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        var instantiate;
        return instantiate = extend(function() {
          var result = $injector.invoke(expression, instance, locals, constructor);
          if (result !== instance && (isObject(result) || isFunction(result))) {
            instance = result;
            if (identifier) {
              // If result changed, re-assign controllerAs value to scope.
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }
          }
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var $$ForceReflowProvider = function() {
  this.$get = ['$document', function($document) {
    return function(domNode) {
      //the line below will force the browser to perform a repaint so
      //that all the animated elements within the animation frame will
      //be properly updated and drawn on screen. This is required to
      //ensure that the preparation animation is properly flushed so that
      //the active state picks up from there. DO NOT REMOVE THIS LINE.
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
      if (domNode) {
        if (!domNode.nodeType && domNode instanceof jqLite) {
          domNode = domNode[0];
        }
      } else {
        domNode = $document[0].body;
      }
      return domNode.offsetWidth + 1;
    };
  }];
};

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
var $httpMinErr = minErr('$http');
var $httpMinErrLegacyFn = function(method) {
  return function() {
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
  };
};

function serializeValue(v) {
  if (isObject(v)) {
    return isDate(v) ? v.toISOString() : toJson(v);
  }
  return v;
}


function $HttpParamSerializerProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializer
   * @description
   *
   * Default {@link $http `$http`} params serializer that converts objects to strings
   * according to the following rules:
   *
   * * `{'foo': 'bar'}` results in `foo=bar`
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *
   * Note that serializer will sort the request parameters alphabetically.
   * */

  this.$get = function() {
    return function ngParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (isArray(value)) {
          forEach(value, function(v, k) {
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
          });
        } else {
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
        }
      });

      return parts.join('&');
    };
  };
}

function $HttpParamSerializerJQLikeProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializerJQLike
   * @description
   *
   * Alternative {@link $http `$http`} params serializer that follows
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
   * The serializer will also sort the params alphabetically.
   *
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
   *
   * ```js
   * $http({
   *   url: myUrl,
   *   method: 'GET',
   *   params: myParams,
   *   paramSerializer: '$httpParamSerializerJQLike'
   * });
   * ```
   *
   * It is also possible to set it as the default `paramSerializer` in the
   * {@link $httpProvider#defaults `$httpProvider`}.
   *
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
   * form data for submission:
   *
   * ```js
   * .controller(function($http, $httpParamSerializerJQLike) {
   *   //...
   *
   *   $http({
   *     url: myUrl,
   *     method: 'POST',
   *     data: $httpParamSerializerJQLike(myData),
   *     headers: {
   *       'Content-Type': 'application/x-www-form-urlencoded'
   *     }
   *   });
   *
   * });
   * ```
   *
   * */
  this.$get = function() {
    return function jQueryLikeParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      serialize(params, '', true);
      return parts.join('&');

      function serialize(toSerialize, prefix, topLevel) {
        if (toSerialize === null || isUndefined(toSerialize)) return;
        if (isArray(toSerialize)) {
          forEach(toSerialize, function(value, index) {
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
          });
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
          forEachSorted(toSerialize, function(value, key) {
            serialize(value, prefix +
                (topLevel ? '' : '[') +
                key +
                (topLevel ? '' : ']'));
          });
        } else {
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
        }
      }
    };
  };
}

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), i;

  function fillInParsed(key, val) {
    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  }

  if (isString(headers)) {
    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
    });
  } else if (isObject(headers)) {
    forEach(headers, function(headerVal, headerKey) {
      fillInParsed(lowercase(headerKey), trim(headerVal));
    });
  }

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === void 0) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns)) {
    return fns(data, headers, status);
  }

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `defaults.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   *
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
   *  used to the prepare string representation of request parameters (specified as an object).
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    paramSerializer: '$httpParamSerializer'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  var useLegacyPromise = true;
  /**
   * @ngdoc method
   * @name $httpProvider#useLegacyPromiseExtensions
   * @description
   *
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
   * This should be used to make sure that applications work without these methods.
   *
   * Defaults to false. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useLegacyPromiseExtensions = function(value) {
    if (isDefined(value)) {
      useLegacyPromise = !!value;
      return this;
    }
    return useLegacyPromise;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Make sure that default param serializer is exposed as a function
     */
    defaults.paramSerializer = isString(defaults.paramSerializer) ?
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
     *
     * ```js
     *   // Simple GET request example:
     *   $http({
     *     method: 'GET',
     *     url: '/someUrl'
     *   }).then(function successCallback(response) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }, function errorCallback(response) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
     * last argument.
     *
     * ```js
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Deprecation Notice
     * <div class="alert alert-danger">
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
     *   Use the standard `then` method instead.
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
     * </div>
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).then(function(){...}, function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     * In order to prevent collisions in environments where multiple Angular apps share the
     * same domain or subdomain, we recommend that each application uses unique cookie name.
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
     *      with the `paramSerializer` and appended as GET parameters.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default TransformationjqLiks}
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
     *      prepare the string representation of request parameters (specified as an object).
     *      If specified as string, it is interpreted as function registered with the
     *      {@link $injector $injector}, which means you can create your own serializer
     *      by registering it as a {@link auto.$provide#service service}.
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
     *                        when the request succeeds or fails.
     *
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method" aria-label="Request method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80" aria-label="URL" />
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            then(function(response) {
              $scope.status = response.status;
              $scope.data = response.data;
            }, function(response) {
              $scope.data = response.data || "Request failed";
              $scope.status = response.status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!angular.isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse,
        paramSerializer: defaults.paramSerializer
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);
      config.paramSerializer = isString(config.paramSerializer) ?
        $injector.get(config.paramSerializer) : config.paramSerializer;

      var serverRequest = function(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while (chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      if (useLegacyPromise) {
        promise.success = function(fn) {
          assertArgFn(fn, 'fn');

          promise.then(function(response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };

        promise.error = function(fn) {
          assertArgFn(fn, 'fn');

          promise.then(null, function(response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };
      } else {
        promise.success = $httpMinErrLegacyFn('success');
        promise.error = $httpMinErrLegacyFn('error');
      }

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        if (!response.data) {
          resp.data = response.data;
        } else {
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
        }
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function executeHeaderFns(headers, config) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn(config);
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders, shallowCopy(config));
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          url = buildUrl(config.url, config.paramSerializer(config.params));

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
        status = status >= -1 ? status : 0;

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, serializedParams) {
      if (serializedParams.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
      }
      return url;
    }
  }];
}

/**
 * @ngdoc service
 * @name $xhrFactory
 *
 * @description
 * Factory function used to create XMLHttpRequest objects.
 *
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
 *
 * ```
 * angular.module('myApp', [])
 * .factory('$xhrFactory', function() {
 *   return function createXhr(method, url) {
 *     return new window.XMLHttpRequest({mozSystem: true});
 *   };
 * });
 * ```
 *
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
 * @param {string} url URL of the request.
 */
function $xhrFactoryProvider() {
  this.$get = function() {
    return function createXhr() {
      return new window.XMLHttpRequest();
    };
  };
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 * @requires $xhrFactory
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr(method, url);

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;
      xhr.ontimeout = requestError;
      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(isUndefined(post) ? null : post);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (isDefined(timeoutId)) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
$interpolateMinErr.throwNoconcat = function(text) {
  throw $interpolateMinErr('noconcat',
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
      "interpolations that concatenate multiple expressions when a trusted value is " +
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
};

$interpolateMinErr.interr = function(text, err) {
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
};

/**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    function unescapeText(text) {
      return text.replace(escapedStartRegexp, startSymbol).
        replace(escapedEndRegexp, endSymbol);
    }

    function stringify(value) {
      if (value == null) { // null || undefined
        return '';
      }
      switch (typeof value) {
        case 'string':
          break;
        case 'number':
          value = '' + value;
          break;
        default:
          value = toJson(value);
      }

      return value;
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          $interpolateMinErr.throwNoconcat(text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              $exceptionHandler($interpolateMinErr.interr(text, err));
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener) {
            var lastValue;
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            });
          }
        });
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          $exceptionHandler($interpolateMinErr.interr(text, err));
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q',
       function($rootScope,   $window,   $q,   $$q) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       <label>Date format: <input ng-model="format"></label> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var hasParams = arguments.length > 4,
          args = hasParams ? sliceArgs(arguments, 4) : [],
          setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.then(null, null, (!hasParams) ? fn : function() {
        fn.apply(null, args);
      });

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {Promise=} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;

    if (isDefined(appUrl = beginsWith(appBase, url))) {
      prevAppUrl = appUrl;
      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl;

    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

      // The rest of the url starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      if (this.$$html5) {
        withoutHashUrl = withoutBaseUrl;
      } else {
        withoutHashUrl = '';
        if (isUndefined(withoutBaseUrl)) {
          appBase = url;
          this.replace();
        }
      }
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) == stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase == stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


var locationPrototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url)) {
      return this.$$url;
    }

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   *
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
   * host = $location.host();
   * // => "example.com"
   * host = location.host;
   * // => "example.com:8080"
   * ```
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length) {
      return this.$$state;
    }

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;

    return this;
  };
});


function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value)) {
      return this[property];
    }

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          "$location in HTML5 mode requires a <base> tag to be present!");
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    var appBaseNoFile = stripFile(appBase);

    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() != $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {

      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
        // If we are navigating outside of the app then force a reload
        $window.location.href = newUrl;
        return;
      }

      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;

        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = trimEmptyHash($browser.url());
      var newUrl = trimEmptyHash($location.absUrl());
      var oldState = $browser.state();
      var currentReplace = $location.$$replace;
      var urlOrStateChanged = oldUrl !== newUrl ||
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

      if (initializing || urlOrStateChanged) {
        initializing = false;

        $rootScope.$evalAsync(function() {
          var newUrl = $location.absUrl();
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
              $location.$$state, oldState).defaultPrevented;

          // if the location was changed by a `$locationChangeStart` handler then stop
          // processing this location change
          if ($location.absUrl() !== newUrl) return;

          if (defaultPrevented) {
            $location.$$parse(oldUrl);
            $location.$$state = oldState;
          } else {
            if (urlOrStateChanged) {
              setBrowserUrlWithFallback(newUrl, currentReplace,
                                        oldState === $location.$$state ? null : $location.$$state);
            }
            afterLocationChange(oldUrl, oldState);
          }
        });
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         <label>Message:
         <input type="text" ng-model="message" /></label>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function getStringValue(name, fullExpression) {
  // From the JavaScript docs:
  // Property names must be strings. This means that non-string objects cannot be used
  // as keys in an object. Any non-string object, including a number, is typecasted
  // into a string via the toString method.
  //
  // So, to ensure that we are checking the same `name` that JavaScript would use,
  // we cast it to a string, if possible.
  // Doing `name + ''` can cause a repl error if the result to `toString` is not a string,
  // this is, this will handle objects that misbehave.
  name = name + '';
  if (!isString(name)) {
    throw $parseMinErr('iseccst',
        'Cannot convert object to primitive value! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.window === obj) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || obj === BIND) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

function ensureSafeAssignContext(obj, fullExpression) {
  if (obj) {
    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
      throw $parseMinErr('isecaf',
        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
    }
  }
}

var OPERATORS = createMap();
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === "'") {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(ch)) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === "string";
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (!(this.isIdent(ch) || this.isNumber(ch))) {
        break;
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i)) {
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          }
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};

var AST = function(lexer, options) {
  this.lexer = lexer;
  this.options = options;
};

AST.Program = 'Program';
AST.ExpressionStatement = 'ExpressionStatement';
AST.AssignmentExpression = 'AssignmentExpression';
AST.ConditionalExpression = 'ConditionalExpression';
AST.LogicalExpression = 'LogicalExpression';
AST.BinaryExpression = 'BinaryExpression';
AST.UnaryExpression = 'UnaryExpression';
AST.CallExpression = 'CallExpression';
AST.MemberExpression = 'MemberExpression';
AST.Identifier = 'Identifier';
AST.Literal = 'Literal';
AST.ArrayExpression = 'ArrayExpression';
AST.Property = 'Property';
AST.ObjectExpression = 'ObjectExpression';
AST.ThisExpression = 'ThisExpression';

// Internal use only
AST.NGValueParameter = 'NGValueParameter';

AST.prototype = {
  ast: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.program();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    return value;
  },

  program: function() {
    var body = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        body.push(this.expressionStatement());
      if (!this.expect(';')) {
        return { type: AST.Program, body: body};
      }
    }
  },

  expressionStatement: function() {
    return { type: AST.ExpressionStatement, expression: this.filterChain() };
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while ((token = this.expect('|'))) {
      left = this.filter(left);
    }
    return left;
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var result = this.ternary();
    if (this.expect('=')) {
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
    }
    return result;
  },

  ternary: function() {
    var test = this.logicalOR();
    var alternate;
    var consequent;
    if (this.expect('?')) {
      alternate = this.expression();
      if (this.consume(':')) {
        consequent = this.expression();
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
      }
    }
    return test;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    while (this.expect('||')) {
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    while (this.expect('&&')) {
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
    }
    return left;
  },

  unary: function() {
    var token;
    if ((token = this.expect('+', '-', '!'))) {
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
    } else {
      return this.primary();
    }
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.constants.hasOwnProperty(this.peek().text)) {
      primary = copy(this.constants[this.consume().text]);
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
        this.consume(')');
      } else if (next.text === '[') {
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
        this.consume(']');
      } else if (next.text === '.') {
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  filter: function(baseExpression) {
    var args = [baseExpression];
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

    while (this.expect(':')) {
      args.push(this.expression());
    }

    return result;
  },

  parseArguments: function() {
    var args = [];
    if (this.peekToken().text !== ')') {
      do {
        args.push(this.expression());
      } while (this.expect(','));
    }
    return args;
  },

  identifier: function() {
    var token = this.consume();
    if (!token.identifier) {
      this.throwError('is not a valid identifier', token);
    }
    return { type: AST.Identifier, name: token.text };
  },

  constant: function() {
    // TODO check that it is a constant
    return { type: AST.Literal, value: this.consume().value };
  },

  arrayDeclaration: function() {
    var elements = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elements.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return { type: AST.ArrayExpression, elements: elements };
  },

  object: function() {
    var properties = [], property;
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        property = {type: AST.Property, kind: 'init'};
        if (this.peek().constant) {
          property.key = this.constant();
        } else if (this.peek().identifier) {
          property.key = this.identifier();
        } else {
          this.throwError("invalid key", this.peek());
        }
        this.consume(':');
        property.value = this.expression();
        properties.push(property);
      } while (this.expect(','));
    }
    this.consume('}');

    return {type: AST.ObjectExpression, properties: properties };
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  peekToken: function() {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },

  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },


  /* `undefined` is not a constant, it is an identifier,
   * but using it as an identifier is not supported
   */
  constants: {
    'true': { type: AST.Literal, value: true },
    'false': { type: AST.Literal, value: false },
    'null': { type: AST.Literal, value: null },
    'undefined': {type: AST.Literal, value: undefined },
    'this': {type: AST.ThisExpression }
  }
};

function ifDefined(v, d) {
  return typeof v !== 'undefined' ? v : d;
}

function plusFn(l, r) {
  if (typeof l === 'undefined') return r;
  if (typeof r === 'undefined') return l;
  return l + r;
}

function isStateless($filter, filterName) {
  var fn = $filter(filterName);
  return !fn.$stateful;
}

function findConstantAndWatchExpressions(ast, $filter) {
  var allConstants;
  var argsToWatch;
  switch (ast.type) {
  case AST.Program:
    allConstants = true;
    forEach(ast.body, function(expr) {
      findConstantAndWatchExpressions(expr.expression, $filter);
      allConstants = allConstants && expr.expression.constant;
    });
    ast.constant = allConstants;
    break;
  case AST.Literal:
    ast.constant = true;
    ast.toWatch = [];
    break;
  case AST.UnaryExpression:
    findConstantAndWatchExpressions(ast.argument, $filter);
    ast.constant = ast.argument.constant;
    ast.toWatch = ast.argument.toWatch;
    break;
  case AST.BinaryExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
    break;
  case AST.LogicalExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.ConditionalExpression:
    findConstantAndWatchExpressions(ast.test, $filter);
    findConstantAndWatchExpressions(ast.alternate, $filter);
    findConstantAndWatchExpressions(ast.consequent, $filter);
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.Identifier:
    ast.constant = false;
    ast.toWatch = [ast];
    break;
  case AST.MemberExpression:
    findConstantAndWatchExpressions(ast.object, $filter);
    if (ast.computed) {
      findConstantAndWatchExpressions(ast.property, $filter);
    }
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
    ast.toWatch = [ast];
    break;
  case AST.CallExpression:
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
    argsToWatch = [];
    forEach(ast.arguments, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
    break;
  case AST.AssignmentExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = [ast];
    break;
  case AST.ArrayExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.elements, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ObjectExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.properties, function(property) {
      findConstantAndWatchExpressions(property.value, $filter);
      allConstants = allConstants && property.value.constant;
      if (!property.value.constant) {
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ThisExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  }
}

function getInputs(body) {
  if (body.length != 1) return;
  var lastExpression = body[0].expression;
  var candidate = lastExpression.toWatch;
  if (candidate.length !== 1) return candidate;
  return candidate[0] !== lastExpression ? candidate : undefined;
}

function isAssignable(ast) {
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
}

function assignableAST(ast) {
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }
}

function isLiteral(ast) {
  return ast.body.length === 0 ||
      ast.body.length === 1 && (
      ast.body[0].expression.type === AST.Literal ||
      ast.body[0].expression.type === AST.ArrayExpression ||
      ast.body[0].expression.type === AST.ObjectExpression);
}

function isConstant(ast) {
  return ast.constant;
}

function ASTCompiler(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTCompiler.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.state = {
      nextId: 0,
      filters: {},
      expensiveChecks: expensiveChecks,
      fn: {vars: [], body: [], own: {}},
      assign: {vars: [], body: [], own: {}},
      inputs: []
    };
    findConstantAndWatchExpressions(ast, self.$filter);
    var extra = '';
    var assignable;
    this.stage = 'assign';
    if ((assignable = assignableAST(ast))) {
      this.state.computing = 'assign';
      var result = this.nextId();
      this.recurse(assignable, result);
      this.return_(result);
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
    }
    var toWatch = getInputs(ast.body);
    self.stage = 'inputs';
    forEach(toWatch, function(watch, key) {
      var fnKey = 'fn' + key;
      self.state[fnKey] = {vars: [], body: [], own: {}};
      self.state.computing = fnKey;
      var intoId = self.nextId();
      self.recurse(watch, intoId);
      self.return_(intoId);
      self.state.inputs.push(fnKey);
      watch.watchId = key;
    });
    this.state.computing = 'fn';
    this.stage = 'main';
    this.recurse(ast);
    var fnString =
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
      '"' + this.USE + ' ' + this.STRICT + '";\n' +
      this.filterPrefix() +
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
      extra +
      this.watchFns() +
      'return fn;';

    /* jshint -W054 */
    var fn = (new Function('$filter',
        'ensureSafeMemberName',
        'ensureSafeObject',
        'ensureSafeFunction',
        'getStringValue',
        'ensureSafeAssignContext',
        'ifDefined',
        'plus',
        'text',
        fnString))(
          this.$filter,
          ensureSafeMemberName,
          ensureSafeObject,
          ensureSafeFunction,
          getStringValue,
          ensureSafeAssignContext,
          ifDefined,
          plusFn,
          expression);
    /* jshint +W054 */
    this.state = this.stage = undefined;
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  USE: 'use',

  STRICT: 'strict',

  watchFns: function() {
    var result = [];
    var fns = this.state.inputs;
    var self = this;
    forEach(fns, function(name) {
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
    });
    if (fns.length) {
      result.push('fn.inputs=[' + fns.join(',') + '];');
    }
    return result.join('');
  },

  generateFunction: function(name, params) {
    return 'function(' + params + '){' +
        this.varsPrefix(name) +
        this.body(name) +
        '};';
  },

  filterPrefix: function() {
    var parts = [];
    var self = this;
    forEach(this.state.filters, function(id, filter) {
      parts.push(id + '=$filter(' + self.escape(filter) + ')');
    });
    if (parts.length) return 'var ' + parts.join(',') + ';';
    return '';
  },

  varsPrefix: function(section) {
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
  },

  body: function(section) {
    return this.state[section].body.join('');
  },

  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var left, right, self = this, args, expression;
    recursionFn = recursionFn || noop;
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
      intoId = intoId || this.nextId();
      this.if_('i',
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
      );
      return;
    }
    switch (ast.type) {
    case AST.Program:
      forEach(ast.body, function(expression, pos) {
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
        if (pos !== ast.body.length - 1) {
          self.current().body.push(right, ';');
        } else {
          self.return_(right);
        }
      });
      break;
    case AST.Literal:
      expression = this.escape(ast.value);
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.UnaryExpression:
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.BinaryExpression:
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
      if (ast.operator === '+') {
        expression = this.plus(left, right);
      } else if (ast.operator === '-') {
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
      } else {
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
      }
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.LogicalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.left, intoId);
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
      recursionFn(intoId);
      break;
    case AST.ConditionalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.test, intoId);
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
      recursionFn(intoId);
      break;
    case AST.Identifier:
      intoId = intoId || this.nextId();
      if (nameId) {
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;
        nameId.name = ast.name;
      }
      ensureSafeMemberName(ast.name);
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
        function() {
          self.if_(self.stage === 'inputs' || 's', function() {
            if (create && create !== 1) {
              self.if_(
                self.not(self.nonComputedMember('s', ast.name)),
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
            }
            self.assign(intoId, self.nonComputedMember('s', ast.name));
          });
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
        );
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
        self.addEnsureSafeObject(intoId);
      }
      recursionFn(intoId);
      break;
    case AST.MemberExpression:
      left = nameId && (nameId.context = this.nextId()) || this.nextId();
      intoId = intoId || this.nextId();
      self.recurse(ast.object, left, undefined, function() {
        self.if_(self.notNull(left), function() {
          if (ast.computed) {
            right = self.nextId();
            self.recurse(ast.property, right);
            self.getStringValue(right);
            self.addEnsureSafeMemberName(right);
            if (create && create !== 1) {
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }
            expression = self.ensureSafeObject(self.computedMember(left, right));
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = true;
              nameId.name = right;
            }
          } else {
            ensureSafeMemberName(ast.property.name);
            if (create && create !== 1) {
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }
            expression = self.nonComputedMember(left, ast.property.name);
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
              expression = self.ensureSafeObject(expression);
            }
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = false;
              nameId.name = ast.property.name;
            }
          }
        }, function() {
          self.assign(intoId, 'undefined');
        });
        recursionFn(intoId);
      }, !!create);
      break;
    case AST.CallExpression:
      intoId = intoId || this.nextId();
      if (ast.filter) {
        right = self.filter(ast.callee.name);
        args = [];
        forEach(ast.arguments, function(expr) {
          var argument = self.nextId();
          self.recurse(expr, argument);
          args.push(argument);
        });
        expression = right + '(' + args.join(',') + ')';
        self.assign(intoId, expression);
        recursionFn(intoId);
      } else {
        right = self.nextId();
        left = {};
        args = [];
        self.recurse(ast.callee, right, left, function() {
          self.if_(self.notNull(right), function() {
            self.addEnsureSafeFunction(right);
            forEach(ast.arguments, function(expr) {
              self.recurse(expr, self.nextId(), undefined, function(argument) {
                args.push(self.ensureSafeObject(argument));
              });
            });
            if (left.name) {
              if (!self.state.expensiveChecks) {
                self.addEnsureSafeObject(left.context);
              }
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
            } else {
              expression = right + '(' + args.join(',') + ')';
            }
            expression = self.ensureSafeObject(expression);
            self.assign(intoId, expression);
          }, function() {
            self.assign(intoId, 'undefined');
          });
          recursionFn(intoId);
        });
      }
      break;
    case AST.AssignmentExpression:
      right = this.nextId();
      left = {};
      if (!isAssignable(ast.left)) {
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');
      }
      this.recurse(ast.left, undefined, left, function() {
        self.if_(self.notNull(left.context), function() {
          self.recurse(ast.right, right);
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
          self.addEnsureSafeAssignContext(left.context);
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
          self.assign(intoId, expression);
          recursionFn(intoId || expression);
        });
      }, 1);
      break;
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        self.recurse(expr, self.nextId(), undefined, function(argument) {
          args.push(argument);
        });
      });
      expression = '[' + args.join(',') + ']';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        self.recurse(property.value, self.nextId(), undefined, function(expr) {
          args.push(self.escape(
              property.key.type === AST.Identifier ? property.key.name :
                ('' + property.key.value)) +
              ':' + expr);
        });
      });
      expression = '{' + args.join(',') + '}';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ThisExpression:
      this.assign(intoId, 's');
      recursionFn('s');
      break;
    case AST.NGValueParameter:
      this.assign(intoId, 'v');
      recursionFn('v');
      break;
    }
  },

  getHasOwnProperty: function(element, property) {
    var key = element + '.' + property;
    var own = this.current().own;
    if (!own.hasOwnProperty(key)) {
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
    }
    return own[key];
  },

  assign: function(id, value) {
    if (!id) return;
    this.current().body.push(id, '=', value, ';');
    return id;
  },

  filter: function(filterName) {
    if (!this.state.filters.hasOwnProperty(filterName)) {
      this.state.filters[filterName] = this.nextId(true);
    }
    return this.state.filters[filterName];
  },

  ifDefined: function(id, defaultValue) {
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
  },

  plus: function(left, right) {
    return 'plus(' + left + ',' + right + ')';
  },

  return_: function(id) {
    this.current().body.push('return ', id, ';');
  },

  if_: function(test, alternate, consequent) {
    if (test === true) {
      alternate();
    } else {
      var body = this.current().body;
      body.push('if(', test, '){');
      alternate();
      body.push('}');
      if (consequent) {
        body.push('else{');
        consequent();
        body.push('}');
      }
    }
  },

  not: function(expression) {
    return '!(' + expression + ')';
  },

  notNull: function(expression) {
    return expression + '!=null';
  },

  nonComputedMember: function(left, right) {
    return left + '.' + right;
  },

  computedMember: function(left, right) {
    return left + '[' + right + ']';
  },

  member: function(left, right, computed) {
    if (computed) return this.computedMember(left, right);
    return this.nonComputedMember(left, right);
  },

  addEnsureSafeObject: function(item) {
    this.current().body.push(this.ensureSafeObject(item), ';');
  },

  addEnsureSafeMemberName: function(item) {
    this.current().body.push(this.ensureSafeMemberName(item), ';');
  },

  addEnsureSafeFunction: function(item) {
    this.current().body.push(this.ensureSafeFunction(item), ';');
  },

  addEnsureSafeAssignContext: function(item) {
    this.current().body.push(this.ensureSafeAssignContext(item), ';');
  },

  ensureSafeObject: function(item) {
    return 'ensureSafeObject(' + item + ',text)';
  },

  ensureSafeMemberName: function(item) {
    return 'ensureSafeMemberName(' + item + ',text)';
  },

  ensureSafeFunction: function(item) {
    return 'ensureSafeFunction(' + item + ',text)';
  },

  getStringValue: function(item) {
    this.assign(item, 'getStringValue(' + item + ',text)');
  },

  ensureSafeAssignContext: function(item) {
    return 'ensureSafeAssignContext(' + item + ',text)';
  },

  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var self = this;
    return function() {
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
    };
  },

  lazyAssign: function(id, value) {
    var self = this;
    return function() {
      self.assign(id, value);
    };
  },

  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

  stringEscapeFn: function(c) {
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
  },

  escape: function(value) {
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
    if (isNumber(value)) return value.toString();
    if (value === true) return 'true';
    if (value === false) return 'false';
    if (value === null) return 'null';
    if (typeof value === 'undefined') return 'undefined';

    throw $parseMinErr('esc', 'IMPOSSIBLE');
  },

  nextId: function(skip, init) {
    var id = 'v' + (this.state.nextId++);
    if (!skip) {
      this.current().vars.push(id + (init ? '=' + init : ''));
    }
    return id;
  },

  current: function() {
    return this.state[this.state.computing];
  }
};


function ASTInterpreter(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTInterpreter.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.expression = expression;
    this.expensiveChecks = expensiveChecks;
    findConstantAndWatchExpressions(ast, self.$filter);
    var assignable;
    var assign;
    if ((assignable = assignableAST(ast))) {
      assign = this.recurse(assignable);
    }
    var toWatch = getInputs(ast.body);
    var inputs;
    if (toWatch) {
      inputs = [];
      forEach(toWatch, function(watch, key) {
        var input = self.recurse(watch);
        watch.input = input;
        inputs.push(input);
        watch.watchId = key;
      });
    }
    var expressions = [];
    forEach(ast.body, function(expression) {
      expressions.push(self.recurse(expression.expression));
    });
    var fn = ast.body.length === 0 ? function() {} :
             ast.body.length === 1 ? expressions[0] :
             function(scope, locals) {
               var lastValue;
               forEach(expressions, function(exp) {
                 lastValue = exp(scope, locals);
               });
               return lastValue;
             };
    if (assign) {
      fn.assign = function(scope, value, locals) {
        return assign(scope, locals, value);
      };
    }
    if (inputs) {
      fn.inputs = inputs;
    }
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  recurse: function(ast, context, create) {
    var left, right, self = this, args, expression;
    if (ast.input) {
      return this.inputs(ast.input, ast.watchId);
    }
    switch (ast.type) {
    case AST.Literal:
      return this.value(ast.value, context);
    case AST.UnaryExpression:
      right = this.recurse(ast.argument);
      return this['unary' + ast.operator](right, context);
    case AST.BinaryExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.LogicalExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.ConditionalExpression:
      return this['ternary?:'](
        this.recurse(ast.test),
        this.recurse(ast.alternate),
        this.recurse(ast.consequent),
        context
      );
    case AST.Identifier:
      ensureSafeMemberName(ast.name, self.expression);
      return self.identifier(ast.name,
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
                             context, create, self.expression);
    case AST.MemberExpression:
      left = this.recurse(ast.object, false, !!create);
      if (!ast.computed) {
        ensureSafeMemberName(ast.property.name, self.expression);
        right = ast.property.name;
      }
      if (ast.computed) right = this.recurse(ast.property);
      return ast.computed ?
        this.computedMember(left, right, context, create, self.expression) :
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
    case AST.CallExpression:
      args = [];
      forEach(ast.arguments, function(expr) {
        args.push(self.recurse(expr));
      });
      if (ast.filter) right = this.$filter(ast.callee.name);
      if (!ast.filter) right = this.recurse(ast.callee, true);
      return ast.filter ?
        function(scope, locals, assign, inputs) {
          var values = [];
          for (var i = 0; i < args.length; ++i) {
            values.push(args[i](scope, locals, assign, inputs));
          }
          var value = right.apply(undefined, values, inputs);
          return context ? {context: undefined, name: undefined, value: value} : value;
        } :
        function(scope, locals, assign, inputs) {
          var rhs = right(scope, locals, assign, inputs);
          var value;
          if (rhs.value != null) {
            ensureSafeObject(rhs.context, self.expression);
            ensureSafeFunction(rhs.value, self.expression);
            var values = [];
            for (var i = 0; i < args.length; ++i) {
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
            }
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
          }
          return context ? {value: value} : value;
        };
    case AST.AssignmentExpression:
      left = this.recurse(ast.left, true, 1);
      right = this.recurse(ast.right);
      return function(scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs);
        var rhs = right(scope, locals, assign, inputs);
        ensureSafeObject(lhs.value, self.expression);
        ensureSafeAssignContext(lhs.context);
        lhs.context[lhs.name] = rhs;
        return context ? {value: rhs} : rhs;
      };
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        args.push(self.recurse(expr));
      });
      return function(scope, locals, assign, inputs) {
        var value = [];
        for (var i = 0; i < args.length; ++i) {
          value.push(args[i](scope, locals, assign, inputs));
        }
        return context ? {value: value} : value;
      };
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        args.push({key: property.key.type === AST.Identifier ?
                        property.key.name :
                        ('' + property.key.value),
                   value: self.recurse(property.value)
        });
      });
      return function(scope, locals, assign, inputs) {
        var value = {};
        for (var i = 0; i < args.length; ++i) {
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
        }
        return context ? {value: value} : value;
      };
    case AST.ThisExpression:
      return function(scope) {
        return context ? {value: scope} : scope;
      };
    case AST.NGValueParameter:
      return function(scope, locals, assign, inputs) {
        return context ? {value: assign} : assign;
      };
    }
  },

  'unary+': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = +arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary-': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = -arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary!': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = !argument(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary+': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = plusFn(lhs, rhs);
      return context ? {value: arg} : arg;
    };
  },
  'binary-': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
      return context ? {value: arg} : arg;
    };
  },
  'binary*': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary/': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary%': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary===': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary&&': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary||': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'ternary?:': function(test, alternate, consequent, context) {
    return function(scope, locals, assign, inputs) {
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  value: function(value, context) {
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
  },
  identifier: function(name, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var base = locals && (name in locals) ? locals : scope;
      if (create && create !== 1 && base && !(base[name])) {
        base[name] = {};
      }
      var value = base ? base[name] : undefined;
      if (expensiveChecks) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: base, name: name, value: value};
      } else {
        return value;
      }
    };
  },
  computedMember: function(left, right, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs;
      var value;
      if (lhs != null) {
        rhs = right(scope, locals, assign, inputs);
        rhs = getStringValue(rhs);
        ensureSafeMemberName(rhs, expression);
        if (create && create !== 1 && lhs && !(lhs[rhs])) {
          lhs[rhs] = {};
        }
        value = lhs[rhs];
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: rhs, value: value};
      } else {
        return value;
      }
    };
  },
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      if (create && create !== 1 && lhs && !(lhs[right])) {
        lhs[right] = {};
      }
      var value = lhs != null ? lhs[right] : undefined;
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: right, value: value};
      } else {
        return value;
      }
    };
  },
  inputs: function(input, watchId) {
    return function(scope, value, locals, inputs) {
      if (inputs) return inputs[watchId];
      return input(scope, value, locals);
    };
  }
};

/**
 * @constructor
 */
var Parser = function(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
  this.ast = new AST(this.lexer);
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
                                   new ASTCompiler(this.ast, $filter);
};

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    return this.astCompiler.compile(text, this.options.expensiveChecks);
  }
};

var getterFnCacheDefault = createMap();
var getterFnCacheExpensive = createMap();

function isPossiblyDangerousMemberName(name) {
  return name == 'constructor';
}

var objectValueOf = Object.prototype.valueOf;

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cacheDefault = createMap();
  var cacheExpensive = createMap();

  this.$get = ['$filter', function($filter) {
    var noUnsafeEval = csp().noUnsafeEval;
    var $parseOptions = {
          csp: noUnsafeEval,
          expensiveChecks: false
        },
        $parseOptionsExpensive = {
          csp: noUnsafeEval,
          expensiveChecks: true
        };

    return function $parse(exp, interceptorFn, expensiveChecks) {
      var parsedExpression, oneTime, cacheKey;

      switch (typeof exp) {
        case 'string':
          exp = exp.trim();
          cacheKey = exp;

          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);
            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }
            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return noop;
      }
    };

    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object') {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
      var inputExpressions = parsedExpression.inputs;
      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
            oldInputValueOf = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality, prettyPrintExpression);
      }

      var oldInputValueOfValues = [];
      var oldInputValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
        oldInputValues[i] = null;
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
            oldInputValues[i] = newInputValue;
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
        }

        return lastResult;
      }, listener, objectEquality, prettyPrintExpression);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }, objectEquality);
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.call(this, value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch;
      return unwatch = scope.$watch(function constantWatch(scope) {
        return parsedExpression(scope);
      }, function constantListener(value, old, scope) {
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        unwatch();
      }, objectEquality);
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
 *   with the value which is resolved in that promise using
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
 *   resolved or rejected from the notifyCallback method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}

function $$QProvider() {
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler);
  }];
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {
  var $qMinErr = minErr('$q', TypeError);
  function callOnce(self, resolveFn, rejectFn) {
    var called = false;
    function wrap(fn) {
      return function(value) {
        if (called) return;
        called = true;
        fn.call(self, value);
      };
    }

    return [wrap(resolveFn), wrap(rejectFn)];
  }

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    return new Deferred();
  };

  function Promise() {
    this.$$state = { status: 0 };
  }

  extend(Promise.prototype, {
    then: function(onFulfilled, onRejected, progressBack) {
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
        return this;
      }
      var result = new Deferred();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result.promise;
    },

    "catch": function(callback) {
      return this.then(null, callback);
    },

    "finally": function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, true, callback);
      }, function(error) {
        return handleCallback(error, false, callback);
      }, progressBack);
    }
  });

  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
  function simpleBind(context, fn) {
    return function(value) {
      fn.call(context, value);
    };
  }

  function processQueue(state) {
    var fn, deferred, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      deferred = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          deferred.resolve(fn(state.value));
        } else if (state.status === 1) {
          deferred.resolve(state.value);
        } else {
          deferred.reject(state.value);
        }
      } catch (e) {
        deferred.reject(e);
        exceptionHandler(e);
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    nextTick(function() { processQueue(state); });
  }

  function Deferred() {
    this.promise = new Promise();
    //Necessary to support unbound execution :/
    this.resolve = simpleBind(this, this.resolve);
    this.reject = simpleBind(this, this.reject);
    this.notify = simpleBind(this, this.notify);
  }

  extend(Deferred.prototype, {
    resolve: function(val) {
      if (this.promise.$$state.status) return;
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
        this.$$resolve(val);
      }

    },

    $$resolve: function(val) {
      var then, fns;

      fns = callOnce(this, this.$$resolve, this.$$reject);
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, fns[0], fns[1], this.notify);
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        fns[1](e);
        exceptionHandler(e);
      }
    },

    reject: function(reason) {
      if (this.promise.$$state.status) return;
      this.$$reject(reason);
    },

    $$reject: function(reason) {
      this.promise.$$state.value = reason;
      this.promise.$$state.status = 2;
      scheduleProcessQueue(this.promise.$$state);
    },

    notify: function(progress) {
      var callbacks = this.promise.$$state.pending;

      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
        nextTick(function() {
          var callback, result;
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0];
            callback = callbacks[i][3];
            try {
              result.notify(isFunction(callback) ? callback(progress) : progress);
            } catch (e) {
              exceptionHandler(e);
            }
          }
        });
      }
    }
  });

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = new Deferred();
    result.reject(reason);
    return result.promise;
  };

  var makePromise = function makePromise(value, resolved) {
    var result = new Deferred();
    if (resolved) {
      result.resolve(value);
    } else {
      result.reject(value);
    }
    return result.promise;
  };

  var handleCallback = function handleCallback(value, isResolved, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return makePromise(e, false);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return makePromise(value, isResolved);
      }, function(error) {
        return makePromise(error, false);
      });
    } else {
      return makePromise(value, isResolved);
    }
  };

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  var when = function(value, callback, errback, progressBack) {
    var result = new Deferred();
    result.resolve(value);
    return result.promise.then(callback, errback, progressBack);
  };

  /**
   * @ngdoc method
   * @name $q#resolve
   * @kind function
   *
   * @description
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var resolve = when;

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var deferred = new Deferred(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  var $Q = function Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
    }

    if (!(this instanceof Q)) {
      // More useful when $Q is the Promise itself.
      return new Q(resolver);
    }

    var deferred = new Deferred();

    function resolveFn(value) {
      deferred.resolve(value);
    }

    function rejectFn(reason) {
      deferred.reject(reason);
    }

    resolver(resolveFn, rejectFn);

    return deferred.promise;
  };

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.resolve = resolve;
  $Q.all = all;

  return $Q;
}

function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  function createChildScopeClass(parent) {
    function ChildScope() {
      this.$$watchers = this.$$nextSibling =
          this.$$childHead = this.$$childTail = null;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$id = nextUid();
      this.$$ChildScope = null;
    }
    ChildScope.prototype = parent;
    return ChildScope;
  }

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function($injector, $exceptionHandler, $parse, $browser) {

    function destroyChildScope($event) {
        $event.currentScope.$$destroyed = true;
    }

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
     * an in-depth introduction and usage examples.
     *
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = createChildScopeClass(this);
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
       *   its value when executed multiple times with the same input because it may be executed multiple
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Be prepared for
       * multiple calls to your `watchExpression` because it will execute multiple times in a
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: prettyPrintExpression || watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);
        incrementWatchersCount(this, 1);

        return function deregisterWatch() {
          if (arrayRemove(array, watcher) >= 0) {
            incrementWatchersCount(scope, -1);
          }
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (hasOwnProperty.call(newValue, key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!hasOwnProperty.call(newValue, key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while (asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while (postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // We can't destroy a scope that has been already destroyed.
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;

        if (this === $rootScope) {
          //Remove handlers attached to window when $rootScope is removed
          $browser.$$applicationDestroyed();
        }

        incrementWatchersCount(this, -this.$$watchersCount);
        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // All of the code below is bogus code that works around V8's memory leak via optimized code
        // and inline caches.
        //
        // see:
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = this.$root = this.$$watchers = null;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: expr, locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          try {
            return this.$eval(expr);
          } finally {
            clearPhase();
          }
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        expr && applyAsyncQueue.push($applyAsyncExpression);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function incrementWatchersCount(current, count) {
      do {
        current.$$watchersCount += count;
      } while ((current = current.$parent));
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml" aria-label="User input">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  E.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for (var prop in bodyStyle) {
        if (match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if (!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions ||  !animations)) {
        transitions = isString(bodyStyle.webkitTransition);
        animations = isString(bodyStyle.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie <= 11) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name $templateRequest
 *
 * @description
 * The `$templateRequest` service runs security checks then downloads the provided template using
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
 * when `tpl` is of type string and `$templateCache` has the matching entry.
 *
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *
 * @return {Promise} a promise for the HTTP response data of the given URL.
 *
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
 */
function $TemplateRequestProvider() {
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {
    function handleRequestFn(tpl, ignoreRequestError) {
      handleRequestFn.totalPendingRequests++;

      // We consider the template cache holds only trusted templates, so
      // there's no need to go through whitelisting again for keys that already
      // are included in there. This also makes Angular accept any script
      // directive, no matter its name. However, we still need to unwrap trusted
      // types.
      if (!isString(tpl) || !$templateCache.get(tpl)) {
        tpl = $sce.getTrustedResourceUrl(tpl);
      }

      var transformResponse = $http.defaults && $http.defaults.transformResponse;

      if (isArray(transformResponse)) {
        transformResponse = transformResponse.filter(function(transformer) {
          return transformer !== defaultHttpResponseTransform;
        });
      } else if (transformResponse === defaultHttpResponseTransform) {
        transformResponse = null;
      }

      var httpOptions = {
        cache: $templateCache,
        transformResponse: transformResponse
      };

      return $http.get(tpl, httpOptions)
        ['finally'](function() {
          handleRequestFn.totalPendingRequests--;
        })
        .then(function(response) {
          $templateCache.put(tpl, response.data);
          return response.data;
        }, handleError);

      function handleError(resp) {
        if (!ignoreRequestError) {
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
            tpl, resp.status, resp.statusText);
        }
        return $q.reject(resp);
      }
    }

    handleRequestFn.totalPendingRequests = 0;

    return handleRequestFn;
  }];
}

function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) != -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of calling `$timeout` is a promise, which will be resolved when
      * the delay has passed and the timeout function, if provided, is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * If you only want a promise that will be resolved after some specified delay
      * then you can call `$timeout` without the `fn` function.
      *
      * @param {function()=} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      if (!isFunction(fn)) {
        invokeApply = delay;
        delay = fn;
        fn = noop;
      }

      var args = sliceArgs(arguments, 3),
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn.apply(null, args));
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" aria-label="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/**
 * @name $$cookieReader
 * @requires $document
 *
 * @description
 * This is a private service for reading cookies used by $http and ngCookies
 *
 * @return {Object} a key/value map of the current cookies
 */
function $$CookieReader($document) {
  var rawDocument = $document[0] || {};
  var lastCookies = {};
  var lastCookieString = '';

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  return function() {
    var cookieArray, cookie, i, index, name;
    var currentCookieString = rawDocument.cookie || '';

    if (currentCookieString !== lastCookieString) {
      lastCookieString = currentCookieString;
      cookieArray = lastCookieString.split('; ');
      lastCookies = {};

      for (i = 0; i < cookieArray.length; i++) {
        cookie = cookieArray[i];
        index = cookie.indexOf('=');
        if (index > 0) { //ignore nameless cookies
          name = safeDecodeURIComponent(cookie.substring(0, index));
          // the first value that is seen for a cookie is the most
          // specific one.  values for the same cookie name that
          // follow are for less specific paths.
          if (isUndefined(lastCookies[name])) {
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
          }
        }
      }
    }
    return lastCookies;
  };
}

$$CookieReader.$inject = ['$document'];

function $$CookieReaderProvider() {
  this.$get = $$CookieReader;
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <div class="alert alert-warning">
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
 * (`myapp_subsection_filterx`).
 * </div>
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   *
   *    <div class="alert alert-warning">
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   *    (`myapp_subsection_filterx`).
   *    </div>
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
 *     The function is called for each element of the array, with the element, its index, and
 *     the entire array itself as arguments.
 *
 *     The final result is an array of those elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 *     Primitive values are converted to strings. Objects are not compared against primitives,
 *     unless they have a custom `toString` method (e.g. `Date` objects).
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       <label>Search: <input ng-model="searchText"></label>
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       <label>Any: <input ng-model="search.$"></label> <br>
       <label>Name only <input ng-model="search.name"></label><br>
       <label>Phone only <input ng-model="search.phone"></label><br>
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArrayLike(array)) {
      if (array == null) {
        return array;
      } else {
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
      }
    }

    var expressionType = getTypeForFilter(expression);
    var predicateFn;
    var matchAgainstAnyProp;

    switch (expressionType) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'null':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return Array.prototype.filter.call(array, predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isUndefined(actual)) {
        // No substring matching against `undefined`
        return false;
      }
      if ((actual === null) || (expected === null)) {
        // No substring matching against `null`; only match against `null`
        return actual === expected;
      }
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
        // Should not compare primitives against objects, unless they have custom `toString` method
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression.$, comparator, false);
    }
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = getTypeForFilter(actual);
  var expectedType = getTypeForFilter(expected);

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

// Used for easily differentiating between `null` and actual `object`
function getTypeForFilter(val) {
  return (val === null) ? 'null' : typeof val;
}

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount" aria-label="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
 * If the input is not a number an empty string is returned.
 *
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter number: <input ng-model='val'></label><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (isObject(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);

  var isInfinity = number === Infinity;
  if (!isInfinity && !isFinite(number)) return '';

  var numStr = number + '',
      formatedText = '',
      hasExponent = false,
      parts = [];

  if (isInfinity) formatedText = '\u221e';

  if (!isInfinity && numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      number = 0;
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!isInfinity && !hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
    // inspired by:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i) % group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i) % lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while (fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {
    if (fractionSize > 0 && number < 1) {
      formatedText = number.toFixed(fractionSize);
      number = parseFloat(formatedText);
      formatedText = formatedText.replace(DECIMAL_SEP, decimalSep);
    }
  }

  if (number === 0) {
    isNegative = false;
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre,
             formatedText,
             isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim) {
    num = num.substr(num.length - digits);
  }
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset) {
      value += offset;
    }
    if (value === 0 && offset == -12) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date, formats, offset) {
  var zone = -1 * offset;
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

function eraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
}

function longEraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1),
     G: eraGetter,
     GG: eraGetter,
     GGG: eraGetter,
     GGGG: longEraGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
      }
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
      var h = toInt(match[4] || 0) - tzHour;
      var m = toInt(match[5] || 0) - tzMin;
      var s = toInt(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date) || !isFinite(date.getTime())) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    var dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());
      date = convertTimezoneToLocal(date, timezone, true);
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
 *     indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>
            Limit {{numbers}} to:
            <input type="number" step="1" ng-model="numLimit">
         </label>
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         <label>
            Limit {{letters}} to:
            <input type="number" step="1" ng-model="letterLimit">
         </label>
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         <label>
            Limit {{longNumber}} to:
            <input type="number" step="1" ng-model="longNumberLimit">
         </label>
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit, begin) {
    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = toInt(limit);
    }
    if (isNaN(limit)) return input;

    if (isNumber(input)) input = input.toString();
    if (!isArray(input) && !isString(input)) return input;

    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;

    if (limit >= 0) {
      return input.slice(begin, begin + limit);
    } else {
      if (begin === 0) {
        return input.slice(limit, input.length);
      } else {
        return input.slice(Math.max(0, begin + limit), begin);
      }
    }
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * as expected, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `===`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 *
 * @example
 * The example below demonstrates a simple ngRepeat, where the data is sorted
 * by age in descending order (predicate is set to `'-age'`).
 * `reverse` is not set, which means it defaults to `false`.
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
           }]);
       </script>
       <div ng-controller="ExampleController">
         <table class="friend">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * The predicate and reverse parameters can be controlled dynamically through scope properties,
 * as shown in the next example.
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = 'age';
             $scope.reverse = true;
             $scope.order = function(predicate) {
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
               $scope.predicate = predicate;
             };
           }]);
       </script>
       <style type="text/css">
         .sortorder:after {
           content: '\25b2';
         }
         .sortorder.reverse:after {
           content: '\25bc';
         }
       </style>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th>
               <a href="" ng-click="order('name')">Name</a>
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
             </th>
             <th>
               <a href="" ng-click="order('phone')">Phone Number</a>
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
             </th>
             <th>
               <a href="" ng-click="order('age')">Age</a>
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder) {

    if (!(isArrayLike(array))) return array;

    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

    var predicates = processPredicates(sortPredicate, reverseOrder);
    // Add a predicate at the end that evaluates to the element index. This makes the
    // sort stable as it works as a tie-breaker when all the input predicates cannot
    // distinguish between two elements.
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});

    // The next three lines are a version of a Swartzian Transform idiom from Perl
    // (sometimes called the Decorate-Sort-Undecorate idiom)
    // See https://en.wikipedia.org/wiki/Schwartzian_transform
    var compareValues = Array.prototype.map.call(array, getComparisonObject);
    compareValues.sort(doComparison);
    array = compareValues.map(function(item) { return item.value; });

    return array;

    function getComparisonObject(value, index) {
      return {
        value: value,
        predicateValues: predicates.map(function(predicate) {
          return getPredicateValue(predicate.get(value), index);
        })
      };
    }

    function doComparison(v1, v2) {
      var result = 0;
      for (var index=0, length = predicates.length; index < length; ++index) {
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
        if (result) break;
      }
      return result;
    }
  };

  function processPredicates(sortPredicate, reverseOrder) {
    reverseOrder = reverseOrder ? -1 : 1;
    return sortPredicate.map(function(predicate) {
      var descending = 1, get = identity;

      if (isFunction(predicate)) {
        get = predicate;
      } else if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-' ? -1 : 1;
          predicate = predicate.substring(1);
        }
        if (predicate !== '') {
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            get = function(value) { return value[key]; };
          }
        }
      }
      return { get: get, descending: descending * reverseOrder };
    });
  }

  function isPrimitive(value) {
    switch (typeof value) {
      case 'number': /* falls through */
      case 'boolean': /* falls through */
      case 'string':
        return true;
      default:
        return false;
    }
  }

  function objectValue(value, index) {
    // If `valueOf` is a valid function use that
    if (typeof value.valueOf === 'function') {
      value = value.valueOf();
      if (isPrimitive(value)) return value;
    }
    // If `toString` is a valid function and not the one from `Object.prototype` use that
    if (hasCustomToString(value)) {
      value = value.toString();
      if (isPrimitive(value)) return value;
    }
    // We have a basic object so we use the position of the object in the collection
    return index;
  }

  function getPredicateValue(value, index) {
    var type = typeof value;
    if (value === null) {
      type = 'string';
      value = 'null';
    } else if (type === 'string') {
      value = value.toLowerCase();
    } else if (type === 'object') {
      value = objectValue(value, index);
    }
    return { value: value, type: type };
  }

  function compare(v1, v2) {
    var result = 0;
    if (v1.type === v2.type) {
      if (v1.value !== v2.value) {
        result = v1.value < v2.value ? -1 : 1;
      }
    } else {
      result = v1.type < v2.type ? -1 : 1;
    }
    return result;
  }
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute.  The following example would make the button enabled on Chrome/Firefox
 * but not on older IEs:
 *
 * ```html
 * <!-- See below for an example of ng-disabled being used correctly -->
 * <div ng-init="isDisabled = false">
 *  <button disabled="{{isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * This is because the HTML specification does not require browsers to preserve the values of
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
 *
 * Note that this directive should not be used together with {@link ngModel `ngModel`},
 * as this can lead to unexpected behavior.
 *
 * ### Why do we need `ngChecked`?
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then the `checked` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
        <select aria-label="ngSelected demo">
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};

// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  function defaultLinkFn(scope, element, attr) {
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
      attr.$set(attrName, !!value);
    });
  }

  var normalized = directiveNormalize('ng-' + attrName);
  var linkFn = defaultLinkFn;

  if (propName === 'checked') {
    linkFn = function(scope, element, attr) {
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
      if (attr.ngModel !== attr[normalized]) {
        defaultLinkFn(scope, element, attr);
      }
    };
  }

  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: linkFn
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set("ngPattern", new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $pending True if at least one containing control or form is pending.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController(element, attrs, $scope, $animate, $interpolate) {
  var form = this,
      controls = [];

  // init state
  form.$error = {};
  form.$$success = {};
  form.$pending = undefined;
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;
  form.$submitted = false;
  form.$$parentForm = nullFormCtrl;

  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  form.$rollbackViewValue = function() {
    forEach(controls, function(control) {
      control.$rollbackViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  form.$commitViewValue = function() {
    forEach(controls, function(control) {
      control.$commitViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Register a control with the form. Input elements using ngModelController do this automatically
   * when they are linked.
   *
   * Note that the current state of the control will not be reflected on the new parent form. This
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
   * state.
   *
   * However, if the method is used programmatically, for example by adding dynamically created controls,
   * or controls that have been previously removed without destroying their corresponding DOM element,
   * it's the developers responsiblity to make sure the current state propagates to the parent form.
   *
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }

    control.$$parentForm = form;
  };

  // Private API: rename a form control
  form.$$renameControl = function(control, newName) {
    var oldName = control.$name;

    if (form[oldName] === control) {
      delete form[oldName];
    }
    form[newName] = control;
    control.$name = newName;
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   *
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
   * different from case to case. For example, removing the only `$dirty` control from a form may or
   * may not mean that the form is still `$dirty`.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(form.$pending, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$error, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$$success, function(value, name) {
      form.$setValidity(name, null, control);
    });

    arrayRemove(controls, control);
    control.$$parentForm = nullFormCtrl;
  };


  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: element,
    set: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        object[property] = [controller];
      } else {
        var index = list.indexOf(controller);
        if (index === -1) {
          list.push(controller);
        }
      }
    },
    unset: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        return;
      }
      arrayRemove(list, controller);
      if (list.length === 0) {
        delete object[property];
      }
    },
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    form.$$parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function() {
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    form.$submitted = false;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  form.$setUntouched = function() {
    forEach(controls, function(control) {
      control.$setUntouched();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  form.$setSubmitted = function() {
    $animate.addClass(element, SUBMITTED_CLASS);
    form.$submitted = true;
    form.$$parentForm.$setSubmitted();
  };
}

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pending` is set if the form is pending.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', '$parse', function($timeout, $parse) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
      controller: FormController,
      compile: function ngFormCompile(formElement, attr) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
            var controller = ctrls[0];

            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
            parentFormCtrl.$addControl(controller);

            var setter = nameAttr ? getSetter(controller.$name) : noop;

            if (nameAttr) {
              setter(scope, controller);
              attr.$observe(nameAttr, function(newValue) {
                if (controller.$name === newValue) return;
                setter(scope, undefined);
                controller.$$parentForm.$$renameControl(controller, newValue);
                setter = getSetter(controller.$name);
                setter(scope, controller);
              });
            }
            formElement.on('$destroy', function() {
              controller.$$parentForm.$removeControl(controller);
              setter(scope, undefined);
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;

    function getSetter(expression) {
      if (expression === '') {
        //create an assignable expression, so forms with an empty name can be renamed later
        return $parse('this[""]').assign;
      }
      return $parse(expression).assign || noop;
    }
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  ngModelMinErr: false,
*/

// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Single word:
             <input type="text" name="input" ng-model="example.text"
                    ng-pattern="example.word" required ng-trim="false">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.pattern">
               Single word only!</span>
           </div>
           <tt>text = {{example.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
     *   constraint validation.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
     *   constraint validation.
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          <label for="exampleInput">Pick a date in 2013:</label>
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <div role="alert">
            <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
            <span class="error" ng-show="myForm.input.$error.date">
                Not a valid date!</span>
           </div>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));
        var input = element(by.model('example.value'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `min` will also add native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `max` will also add native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a date between in 2013:</label>
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.datetimelocal">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a between 8am and 5pm:</label>
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.time">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
    *   native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
    *   native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label>Pick a date between in 2013:
          <input id="exampleInput" type="week" name="input" ng-model="example.value"
                 placeholder="YYYY-W##" min="2012-W32"
                 max="2013-W52" required />
        </label>
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.week">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       <label for="exampleInput">Pick a month in 2013:</label>
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <div role="alert">
         <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
         <span class="error" ng-show="myForm.input.$error.month">
            Not a valid month!</span>
       </div>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise Angular will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   * ## Issues with HTML5 constraint validation
   *
   * In browsers that follow the
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
   * If a non-number is entered in the input, the browser will report the value as an empty string,
   * which means the view / model values in `ngModel` and subsequently the scope value
   * will also be an empty string.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Number:
             <input type="number" name="input" ng-model="example.value"
                    min="0" max="99" required>
          </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.number">
               Not valid number!</span>
           </div>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>URL:
             <input type="url" name="input" ng-model="url.text" required>
           <label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.url">
               Not valid url!</span>
           </div>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             <label>Email:
               <input type="email" name="input" ng-model="email.text" required>
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
               <span class="error" ng-show="myForm.input.$error.email">
                 Not valid email!</span>
             </div>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the `ngModel` expression should be set when selected.
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
   *    is selected. Should be used instead of the `value` attribute if you need
   *    a non-string `ngModel` (`boolean`, `array`, ...).
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>
             <input type="radio" ng-model="color.name" value="red">
             Red
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" ng-value="specialValue">
             Green
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" value="blue">
             Blue
           </label><br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color.name')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Value1:
             <input type="checkbox" ng-model="checkboxModel.value1">
           </label><br/>
           <label>Value2:
             <input type="checkbox" ng-model="checkboxModel.value2"
                    ng-true-value="'YES'" ng-false-value="'NO'">
            </label><br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    // Workaround for Firefox validation #12102.
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
    if (element.val() !== value) {
      element.val(value);
    }
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone) {
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone) {
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
      // - also sets validity.badInput (should only be validity.typeMismatch).
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
      // - can ignore this case as we can still read out the erroneous email...
      return validity.badInput && !validity.typeMismatch ? undefined : value;
    });
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });

  if (isDefined(attr.min) || attr.ngMin) {
    var minVal;
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    var maxVal;
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    if (element[0].checked) {
      ctrl.$setViewValue(attr.value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
 *    a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
 *    a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           <label>
              User name:
              <input type="text" name="userName" ng-model="user.name" required>
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.userName.$error.required">
              Required!</span>
           </div>
           <label>
              Last name:
              <input type="text" name="lastName" ng-model="user.last"
              ng-minlength="3" ng-maxlength="10">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.lastName.$error.minlength">
               Too short!</span>
             <span class="error" ng-show="myForm.lastName.$error.maxlength">
               Too long!</span>
           </div>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter name: <input type="text" ng-model="name"></label><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = isUndefined(value) ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
        <label>Name: <input type="text" ng-model="name"></label><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = isUndefined(value) ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
        return (value || '').toString();
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // we re-evaluate the expr because we want a TrustedValueHolderType
          // for $sce, not a string
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts(classes, count) {
          // Use createMap() to prevent class assumptions involving property
          // names in Object.prototype
          var classCounts = element.data('$classCounts') || createMap();
          var classesToUpdate = [];
          forEach(classes, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses(oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toAdd = digestClassCounts(toAdd, 1);
          toRemove = digestClassCounts(toRemove, -1);
          if (toAdd && toAdd.length) {
            $animate.addClass(element, toAdd);
          }
          if (toRemove && toRemove.length) {
            $animate.removeClass(element, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses(classVal) {
      var classes = [];
      if (isArray(classVal)) {
        forEach(classVal, function(v) {
          classes = classes.concat(arrayClasses(v));
        });
        return classes;
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
 * to give you more control over what CSS classes appear. See the code below for an example of this.
 *
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then are the
 * new classes added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
       <label>
          <input type="checkbox" ng-model="deleted">
          deleted (apply "strike" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="important">
          important (apply "bold" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="error">
          error (apply "has-error" class)
       </label>
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style"
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
       <input ng-model="style2"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
       <input ng-model="style3"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
       <hr>
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
     </file>
     <file name="style.css">
       .strike {
           text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
       .has-error {
           color: red;
           background-color: yellow;
       }
       .orange {
           color: orange;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.get(2).getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
       });

       it('array with map example should have 2 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style4')).sendKeys('bold');
         element(by.model('warning')).click();
         expect(ps.last().getAttribute('class')).toBe('bold orange');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and
   {@link $animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
 *      <button ng-click="settings.greet()">greet</button><br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *          <button ng-click="settings.clearContact(contact)">clear</button>
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
 *        </li>
 *        <li><button ng-click="settings.addContact()">add</button></li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.buttonText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.buttonText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     <label>Name: <input type="text" ng-model="name"/></label>
 *     <button ng-click="greet()">greet</button><br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type" id="select_{{$index}}">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *         <button ng-click="clearContact(contact)">clear</button>
 *         <button ng-click="removeContact(contact)">X</button>
 *       </li>
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.buttonText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.buttonText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 *
 * Angular has some features that can break certain
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
 *
 * If you intend to implement these rules then you must tell Angular not to use these features.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 *
 * The following rules affect Angular:
 *
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
 * increase in the speed of evaluating Angular expressions.
 *
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
 * `angular-csp.css` in your HTML manually.
 *
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
 * however, triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on an element of the HTML document that appears before the `<script>` tag that loads
 * the `angular.js` file.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * You can specify which of the CSP related Angular features should be deactivated by providing
 * a value for the `ng-csp` attribute. The options are as follows:
 *
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
 *
 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings
 *
 * You can use these values in the following combinations:
 *
 *
 * * No declaration means that Angular will assume that you can do inline styles, but it will do
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
 * of Angular.
 *
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
 * of Angular.
 *
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
 *
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
 *
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
 * styles nor use eval, which is the same as an empty: ng-csp.
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // We expose the powerful $event object on the scope that provides access to the Window,
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
          // checks at the cost of speed since event handler expressions are not executed as
          // frequently as regular change detection.
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event:event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 * @multiElement
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).then(function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
                  function($templateRequest,   $anchorScroll,   $animate) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).then(function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).then(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (/SVG/.test($element[0].toString())) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-danger">
 * This directive can be abused to add unnecessary amounts of logic into your templates.
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
 * rather than `ngInit` to initialize values on a scope.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
 * sure you have parentheses to ensure correct operator precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = ($index | toString)"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
 *      <span role="alert">
 *        <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      </span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on newline
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      // We want to control whitespace trimming so we use this convoluted approach
      // to access the ngList attribute, which doesn't pre-trim the attribute
      var ngList = element.attr(attr.$attr.ngList) || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    PENDING_CLASS = 'ng-pending';

var ngModelMinErr = minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
 * is set.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);
  this.$$parentForm = nullFormCtrl;

  var parsedNgModel = $parse($attr.ngModel),
      parsedNgModelAssign = parsedNgModel.assign,
      ngModelGet = parsedNgModel,
      ngModelSet = parsedNgModelAssign,
      pendingDebounce = null,
      parserValid,
      ctrl = this;

  this.$$setOptions = function(options) {
    ctrl.$options = options;
    if (options && options.getterSetter) {
      var invokeModelGetter = $parse($attr.ngModel + '()'),
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

      ngModelGet = function($scope) {
        var modelValue = parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      ngModelSet = function($scope, newValue) {
        if (isFunction(parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
        } else {
          parsedNgModelAssign($scope, ctrl.$modelValue);
        }
      };
    } else if (!parsedNgModel.assign) {
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different from last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different from the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var currentValidationRunId = 0;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: $element,
    set: function(object, property) {
      object[property] = true;
    },
    unset: function(object, property) {
      delete object[property];
    },
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  this.$setPristine = function() {
    ctrl.$dirty = false;
    ctrl.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  this.$setDirty = function() {
    ctrl.$dirty = true;
    ctrl.$pristine = false;
    $animate.removeClass($element, PRISTINE_CLASS);
    $animate.addClass($element, DIRTY_CLASS);
    ctrl.$$parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  this.$setUntouched = function() {
    ctrl.$touched = false;
    ctrl.$untouched = true;
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  this.$setTouched = function() {
    ctrl.$touched = true;
    ctrl.$untouched = false;
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced events or events such
   * as blur you can have a situation where there is a period when the `$viewValue`
   * is out of synch with the ngModel's `$modelValue`.
   *
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.resetWithCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myForm.myInput1.$rollbackViewValue();
   *           $scope.myValue = '';
   *         }
   *       };
   *       $scope.resetWithoutCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myValue = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Try typing something in each input.  See that the model only updates when you
   *          blur off the input.
   *        </p>
   *        <p>Now see what happens if you start typing then press the Escape key</p>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <p id="inputDescription1">With $rollbackViewValue()</p>
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"
   *                ng-keydown="resetWithCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"
   *                ng-keydown="resetWithoutCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *       </form>
   *     </div>
   *   </file>
   * </example>
   */
  this.$rollbackViewValue = function() {
    $timeout.cancel(pendingDebounce);
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
    ctrl.$render();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
   */
  this.$validate = function() {
    // ignore $validate before model is initialized
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      return;
    }

    var viewValue = ctrl.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = ctrl.$$rawModelValue;

    var prevValid = ctrl.$valid;
    var prevModelValue = ctrl.$modelValue;

    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;

        if (ctrl.$modelValue !== prevModelValue) {
          ctrl.$$writeModelToScope();
        }
      }
    });

  };

  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
    currentValidationRunId++;
    var localValidationRunId = currentValidationRunId;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = ctrl.$$parserName || 'parse';
      if (isUndefined(parserValid)) {
        setValidity(errorKey, null);
      } else {
        if (!parserValid) {
          forEach(ctrl.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(ctrl.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, parserValid);
        return parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(ctrl.$validators, function(validator, name) {
        var result = validator(modelValue, viewValue);
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(ctrl.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(ctrl.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw ngModelMinErr("$asyncValidators",
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function(error) {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        $q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === currentValidationRunId) {
        ctrl.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  this.$commitViewValue = function() {
    var viewValue = ctrl.$viewValue;

    $timeout.cancel(pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
      return;
    }
    ctrl.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (ctrl.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  };

  this.$$parseAndValidate = function() {
    var viewValue = ctrl.$$lastCommittedViewValue;
    var modelValue = viewValue;
    parserValid = isUndefined(modelValue) ? undefined : true;

    if (parserValid) {
      for (var i = 0; i < ctrl.$parsers.length; i++) {
        modelValue = ctrl.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          parserValid = false;
          break;
        }
      }
    }
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      // ctrl.$modelValue has not been touched yet...
      ctrl.$modelValue = ngModelGet($scope);
    }
    var prevModelValue = ctrl.$modelValue;
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
    ctrl.$$rawModelValue = modelValue;

    if (allowInvalid) {
      ctrl.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (ctrl.$modelValue !== prevModelValue) {
        ctrl.$$writeModelToScope();
      }
    }
  };

  this.$$writeModelToScope = function() {
    ngModelSet($scope, ctrl.$modelValue);
    forEach(ctrl.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        $exceptionHandler(e);
      }
    });
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when a control wants to change the view value; typically,
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
   * directive calls it when the value of the input changes and {@link ng.directive:select select}
   * calls it when an option is selected.
   *
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
   * in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
   * is specified, once the timer runs out.
   *
   * When used with standard inputs, the view value will always be a string (which is in some cases
   * parsed into another type, such as a `Date` object for `input[date]`.)
   * However, custom controls might also pass objects to this method. In this case, we should make
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
   * perform a deep watch of objects, it only looks for a change of identity. If you only change
   * the property of the object then ngModel will not realise that the object has changed and
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
   * not change properties of the copy once it has been passed to `$setViewValue`.
   * Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * <div class="alert alert-info">
   * In any case, the value passed to the method should always reflect the current value
   * of the control. For example, if you are calling `$setViewValue` for an input element,
   * you should pass the input DOM value. Otherwise, the control and the scope model become
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
   * the control's DOM value in any way. If we want to change the control's DOM value
   * programmatically, we should update the `ngModel` scope expression. Its new value will be
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
   * to update the DOM, and finally call `$validate` on it.
   * </div>
   *
   * @param {*} value value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  this.$setViewValue = function(value, trigger) {
    ctrl.$viewValue = value;
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
      ctrl.$$debounceViewValueCommit(trigger);
    }
  };

  this.$$debounceViewValueCommit = function(trigger) {
    var debounceDelay = 0,
        options = ctrl.$options,
        debounce;

    if (options && isDefined(options.debounce)) {
      debounce = options.debounce;
      if (isNumber(debounce)) {
        debounceDelay = debounce;
      } else if (isNumber(debounce[trigger])) {
        debounceDelay = debounce[trigger];
      } else if (isNumber(debounce['default'])) {
        debounceDelay = debounce['default'];
      }
    }

    $timeout.cancel(pendingDebounce);
    if (debounceDelay) {
      pendingDebounce = $timeout(function() {
        ctrl.$commitViewValue();
      }, debounceDelay);
    } else if ($rootScope.$$phase) {
      ctrl.$commitViewValue();
    } else {
      $scope.$apply(function() {
        ctrl.$commitViewValue();
      });
    }
  };

  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  $scope.$watch(function ngModelWatch() {
    var modelValue = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue &&
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
    ) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        ctrl.$$runValidators(modelValue, viewValue, noop);
      }
    }

    return modelValue;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       <p id="inputDescription">
        Update input to see transitions when valid/invalid.
        Integer is a valid value.
       </p>
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                aria-describedby="inputDescription" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           <label>Name:
             <input type="text" name="userName"
                    ng-model="user.name"
                    ng-model-options="{ getterSetter: true }" />
           </label>
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || modelCtrl.$$parentForm;

          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            modelCtrl.$$parentForm.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
            element.on(modelCtrl.$options.updateOn, function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          element.on('blur', function(ev) {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(modelCtrl.$setTouched);
            } else {
              scope.$apply(modelCtrl.$setTouched);
            }
          });
        }
      };
    }
  };
}];

var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *     If not specified, the timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ updateOn: 'blur' }"
                   ng-keyup="cancel($event)" />
          </label><br />
          <label>Other data:
            <input type="text" ng-model="user.data" />
          </label><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' hello');
        input.click();
        expect(model.getText()).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say hello');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' hello');
        expect(input.getAttribute('value')).toEqual('say hello');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ debounce: 1000 }" />
          </label>
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
          <br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ getterSetter: true }" />
          </label>
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
var ngModelOptionsDirective = function() {
  return {
    restrict: 'A',
    controller: ['$scope', '$attrs', function($scope, $attrs) {
      var that = this;
      this.$options = copy($scope.$eval($attrs.ngModelOptions));
      // Allow adding/overriding bound events
      if (isDefined(this.$options.updateOn)) {
        this.$options.updateOnDefault = false;
        // extract "default" pseudo-event from list of events that can trigger a model update
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
          that.$options.updateOnDefault = true;
          return ' ';
        }));
      } else {
        this.$options.updateOnDefault = true;
      }
    }]
  };
};



// helper methods
function addSetValidityMethod(context) {
  var ctrl = context.ctrl,
      $element = context.$element,
      classCache = {},
      set = context.set,
      unset = context.unset,
      $animate = context.$animate;

  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

  ctrl.$setValidity = setValidity;

  function setValidity(validationErrorKey, state, controller) {
    if (isUndefined(state)) {
      createAndSet('$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup('$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(ctrl.$error, validationErrorKey, controller);
      unset(ctrl.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(ctrl.$error, validationErrorKey, controller);
        set(ctrl.$$success, validationErrorKey, controller);
      } else {
        set(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      }
    }
    if (ctrl.$pending) {
      cachedToggleClass(PENDING_CLASS, true);
      ctrl.$valid = ctrl.$invalid = undefined;
      toggleValidationCss('', null);
    } else {
      cachedToggleClass(PENDING_CLASS, false);
      ctrl.$valid = isObjectEmpty(ctrl.$error);
      ctrl.$invalid = !ctrl.$valid;
      toggleValidationCss('', ctrl.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in ctrl.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (ctrl.$error[validationErrorKey]) {
      combinedState = false;
    } else if (ctrl.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(validationErrorKey, combinedState);
    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
  }

  function createAndSet(name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(className, switchValue) {
    if (switchValue && !classCache[className]) {
      $animate.addClass($element, className);
      classCache[className] = true;
    } else if (!switchValue && classCache[className]) {
      $animate.removeClass($element, className);
      classCache[className] = false;
    }
  }

  function toggleValidationCss(validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
  }
  return true;
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/* global jqLiteRemove */

var ngOptionsMinErr = minErr('ngOptions');

/**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Complex Models (objects or collections)
 *
 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when
 * binding any input directive to a model that is an object or a collection.
 *
 * Since this is a common situation for `ngOptions` the directive additionally watches the model using
 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in
 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual
 * object/collection has not changed identity but only a property on the object or an item in the collection
 * changes.
 *
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper inside the object/collection that the
 * first level will not trigger a re-rendering.
 *
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
 * </div>
 *
 * Consider the following example:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>
 * ```
 *
 * ```js
 * $scope.values = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 *
 * $scope.selected = { name: 'aSubItem' };
 * ```
 *
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
 * following:
 *
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
 * 2. Apply **`track by`** to the already selected value in `ngModel`.
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
 *    selected" option.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              <label>Name: <input ng-model="color.name"></label>
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
            </li>
            <li>
              <button ng-click="colors.push({})">add</button>
            </li>
          </ul>
          <hr/>
          <label>Color (null not allowed):
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
          </label><br/>
          <label>Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span></label><br/>

          <label>Color grouped by shade:
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
            </select>
          </label><br/>

          <label>Color grouped by shade, with some disabled:
            <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
            </select>
          </label><br/>



          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
          <br/>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

// jshint maxlen: false
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)
                        // 2: label expression (displayFn)
                        // 3: group by expression (groupByFn)
                        // 4: disable when expression (disableWhenFn)
                        // 5: array item variable name
                        // 6: object item key variable name
                        // 7: object item value variable name
                        // 8: collection expression
                        // 9: track by expression
// jshint maxlen: 100


var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {

  function parseOptionsExpression(optionsExp, selectElement, scope) {

    var match = optionsExp.match(NG_OPTIONS_REGEXP);
    if (!(match)) {
      throw ngOptionsMinErr('iexp',
        "Expected expression in form of " +
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
        " but got '{0}'. Element: {1}",
        optionsExp, startingTag(selectElement));
    }

    // Extract the parts from the ngOptions expression

    // The variable name for the value of the item in the collection
    var valueName = match[5] || match[7];
    // The variable name for the key of the item in the collection
    var keyName = match[6];

    // An expression that generates the viewValue for an option if there is a label expression
    var selectAs = / as /.test(match[0]) && match[1];
    // An expression that is used to track the id of each object in the options collection
    var trackBy = match[9];
    // An expression that generates the viewValue for an option if there is no label expression
    var valueFn = $parse(match[2] ? match[1] : valueName);
    var selectAsFn = selectAs && $parse(selectAs);
    var viewValueFn = selectAsFn || valueFn;
    var trackByFn = trackBy && $parse(trackBy);

    // Get the value by which we are going to track the option
    // if we have a trackFn then use that (passing scope and locals)
    // otherwise just hash the given viewValue
    var getTrackByValueFn = trackBy ?
                              function(value, locals) { return trackByFn(scope, locals); } :
                              function getHashOfValue(value) { return hashKey(value); };
    var getTrackByValue = function(value, key) {
      return getTrackByValueFn(value, getLocals(value, key));
    };

    var displayFn = $parse(match[2] || match[1]);
    var groupByFn = $parse(match[3] || '');
    var disableWhenFn = $parse(match[4] || '');
    var valuesFn = $parse(match[8]);

    var locals = {};
    var getLocals = keyName ? function(value, key) {
      locals[keyName] = key;
      locals[valueName] = value;
      return locals;
    } : function(value) {
      locals[valueName] = value;
      return locals;
    };


    function Option(selectValue, viewValue, label, group, disabled) {
      this.selectValue = selectValue;
      this.viewValue = viewValue;
      this.label = label;
      this.group = group;
      this.disabled = disabled;
    }

    function getOptionValuesKeys(optionValues) {
      var optionValuesKeys;

      if (!keyName && isArrayLike(optionValues)) {
        optionValuesKeys = optionValues;
      } else {
        // if object, extract keys, in enumeration order, unsorted
        optionValuesKeys = [];
        for (var itemKey in optionValues) {
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
            optionValuesKeys.push(itemKey);
          }
        }
      }
      return optionValuesKeys;
    }

    return {
      trackBy: trackBy,
      getTrackByValue: getTrackByValue,
      getWatchables: $parse(valuesFn, function(optionValues) {
        // Create a collection of things that we would like to watch (watchedArray)
        // so that they can all be watched using a single $watchCollection
        // that only runs the handler once if anything changes
        var watchedArray = [];
        optionValues = optionValues || [];

        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;
        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];

          var locals = getLocals(optionValues[key], key);
          var selectValue = getTrackByValueFn(optionValues[key], locals);
          watchedArray.push(selectValue);

          // Only need to watch the displayFn if there is a specific label expression
          if (match[2] || match[1]) {
            var label = displayFn(scope, locals);
            watchedArray.push(label);
          }

          // Only need to watch the disableWhenFn if there is a specific disable expression
          if (match[4]) {
            var disableWhen = disableWhenFn(scope, locals);
            watchedArray.push(disableWhen);
          }
        }
        return watchedArray;
      }),

      getOptions: function() {

        var optionItems = [];
        var selectValueMap = {};

        // The option values were already computed in the `getWatchables` fn,
        // which must have been called to trigger `getOptions`
        var optionValues = valuesFn(scope) || [];
        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;

        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];
          var locals = getLocals(value, key);
          var viewValue = viewValueFn(scope, locals);
          var selectValue = getTrackByValueFn(viewValue, locals);
          var label = displayFn(scope, locals);
          var group = groupByFn(scope, locals);
          var disabled = disableWhenFn(scope, locals);
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

          optionItems.push(optionItem);
          selectValueMap[selectValue] = optionItem;
        }

        return {
          items: optionItems,
          selectValueMap: selectValueMap,
          getOptionFromViewValue: function(value) {
            return selectValueMap[getTrackByValue(value)];
          },
          getViewValueFromOption: function(option) {
            // If the viewValue could be an object that may be mutated by the application,
            // we need to make a copy and not return the reference to the value on the option.
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
          }
        };
      }
    };
  }


  // we can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  var optionTemplate = document.createElement('option'),
      optGroupTemplate = document.createElement('optgroup');

  return {
    restrict: 'A',
    terminal: true,
    require: ['select', '?ngModel'],
    link: function(scope, selectElement, attr, ctrls) {

      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];
      var multiple = attr.multiple;

      // The emptyOption allows the application developer to provide their own custom "empty"
      // option when the viewValue does not match any of the option values.
      var emptyOption;
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = children.eq(i);
          break;
        }
      }

      var providedEmptyOption = !!emptyOption;

      var unknownOption = jqLite(optionTemplate.cloneNode(false));
      unknownOption.val('?');

      var options;
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


      var renderEmptyOption = function() {
        if (!providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }
        selectElement.val('');
        emptyOption.prop('selected', true); // needed for IE
        emptyOption.attr('selected', true);
      };

      var removeEmptyOption = function() {
        if (!providedEmptyOption) {
          emptyOption.remove();
        }
      };


      var renderUnknownOption = function() {
        selectElement.prepend(unknownOption);
        selectElement.val('?');
        unknownOption.prop('selected', true); // needed for IE
        unknownOption.attr('selected', true);
      };

      var removeUnknownOption = function() {
        unknownOption.remove();
      };


      // Update the controller methods for multiple selectable options
      if (!multiple) {

        selectCtrl.writeValue = function writeNgOptionsValue(value) {
          var option = options.getOptionFromViewValue(value);

          if (option && !option.disabled) {
            if (selectElement[0].value !== option.selectValue) {
              removeUnknownOption();
              removeEmptyOption();

              selectElement[0].value = option.selectValue;
              option.element.selected = true;
              option.element.setAttribute('selected', 'selected');
            }
          } else {
            if (value === null || providedEmptyOption) {
              removeUnknownOption();
              renderEmptyOption();
            } else {
              removeEmptyOption();
              renderUnknownOption();
            }
          }
        };

        selectCtrl.readValue = function readNgOptionsValue() {

          var selectedOption = options.selectValueMap[selectElement.val()];

          if (selectedOption && !selectedOption.disabled) {
            removeEmptyOption();
            removeUnknownOption();
            return options.getViewValueFromOption(selectedOption);
          }
          return null;
        };

        // If we are using `track by` then we must watch the tracked value on the model
        // since ngModel only watches for object identity change
        if (ngOptions.trackBy) {
          scope.$watch(
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
            function() { ngModelCtrl.$render(); }
          );
        }

      } else {

        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };


        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
          options.items.forEach(function(option) {
            option.element.selected = false;
          });

          if (value) {
            value.forEach(function(item) {
              var option = options.getOptionFromViewValue(item);
              if (option && !option.disabled) option.element.selected = true;
            });
          }
        };


        selectCtrl.readValue = function readNgOptionsMultiple() {
          var selectedValues = selectElement.val() || [],
              selections = [];

          forEach(selectedValues, function(value) {
            var option = options.selectValueMap[value];
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
          });

          return selections;
        };

        // If we are using `track by` then we must watch these tracked values on the model
        // since ngModel only watches for object identity change
        if (ngOptions.trackBy) {

          scope.$watchCollection(function() {
            if (isArray(ngModelCtrl.$viewValue)) {
              return ngModelCtrl.$viewValue.map(function(value) {
                return ngOptions.getTrackByValue(value);
              });
            }
          }, function() {
            ngModelCtrl.$render();
          });

        }
      }


      if (providedEmptyOption) {

        // we need to remove it before calling selectElement.empty() because otherwise IE will
        // remove the label from the element. wtf?
        emptyOption.remove();

        // compile the element since there might be bindings in it
        $compile(emptyOption)(scope);

        // remove the class, which is added automatically because we recompile the element and it
        // becomes the compilation root
        emptyOption.removeClass('ng-scope');
      } else {
        emptyOption = jqLite(optionTemplate.cloneNode(false));
      }

      // We need to do this here to ensure that the options object is defined
      // when we first hit it in writeNgOptionsValue
      updateOptions();

      // We will re-render the option elements if the option values or labels change
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

      // ------------------------------------------------------------------ //


      function updateOptionElement(option, element) {
        option.element = element;
        element.disabled = option.disabled;
        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
        // selects in certain circumstances when multiple selects are next to each other and display
        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
        // See https://github.com/angular/angular.js/issues/11314 for more info.
        // This is unfortunately untestable with unit / e2e tests
        if (option.label !== element.label) {
          element.label = option.label;
          element.textContent = option.label;
        }
        if (option.value !== element.value) element.value = option.selectValue;
      }

      function addOrReuseElement(parent, current, type, templateElement) {
        var element;
        // Check whether we can reuse the next element
        if (current && lowercase(current.nodeName) === type) {
          // The next element is the right type so reuse it
          element = current;
        } else {
          // The next element is not the right type so create a new one
          element = templateElement.cloneNode(false);
          if (!current) {
            // There are no more elements so just append it to the select
            parent.appendChild(element);
          } else {
            // The next element is not a group so insert the new one
            parent.insertBefore(element, current);
          }
        }
        return element;
      }


      function removeExcessElements(current) {
        var next;
        while (current) {
          next = current.nextSibling;
          jqLiteRemove(current);
          current = next;
        }
      }


      function skipEmptyAndUnknownOptions(current) {
        var emptyOption_ = emptyOption && emptyOption[0];
        var unknownOption_ = unknownOption && unknownOption[0];

        if (emptyOption_ || unknownOption_) {
          while (current &&
                (current === emptyOption_ ||
                current === unknownOption_ ||
                emptyOption_ && emptyOption_.nodeType === NODE_TYPE_COMMENT)) {
            // Empty options might have directives that transclude
            // and insert comments (e.g. ngIf)
            current = current.nextSibling;
          }
        }
        return current;
      }


      function updateOptions() {

        var previousValue = options && selectCtrl.readValue();

        options = ngOptions.getOptions();

        var groupMap = {};
        var currentElement = selectElement[0].firstChild;

        // Ensure that the empty option is always there if it was explicitly provided
        if (providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }

        currentElement = skipEmptyAndUnknownOptions(currentElement);

        options.items.forEach(function updateOption(option) {
          var group;
          var groupElement;
          var optionElement;

          if (option.group) {

            // This option is to live in a group
            // See if we have already created this group
            group = groupMap[option.group];

            if (!group) {

              // We have not already created this group
              groupElement = addOrReuseElement(selectElement[0],
                                               currentElement,
                                               'optgroup',
                                               optGroupTemplate);
              // Move to the next element
              currentElement = groupElement.nextSibling;

              // Update the label on the group element
              groupElement.label = option.group;

              // Store it for use later
              group = groupMap[option.group] = {
                groupElement: groupElement,
                currentOptionElement: groupElement.firstChild
              };

            }

            // So now we have a group for this option we add the option to the group
            optionElement = addOrReuseElement(group.groupElement,
                                              group.currentOptionElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            group.currentOptionElement = optionElement.nextSibling;

          } else {

            // This option is not in a group
            optionElement = addOrReuseElement(selectElement[0],
                                              currentElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            currentElement = optionElement.nextSibling;
          }
        });


        // Now remove all excess options and group
        Object.keys(groupMap).forEach(function(key) {
          removeExcessElements(groupMap[key].currentOptionElement);
        });
        removeExcessElements(currentElement);

        ngModelCtrl.$render();

        // Check to see if the value has changed due to the update to the options
        if (!ngModelCtrl.$isEmpty(previousValue)) {
          var nextValue = selectCtrl.readValue();
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
            ngModelCtrl.$setViewValue(nextValue);
            ngModelCtrl.$render();
          }
        }

      }

    }
  };
}];

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to exlicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
          watchRemover();
          var whenExpFn = whensExpFns[count];
          if (isUndefined(whenExpFn)) {
            if (newVal != null) {
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
            }
            watchRemover = noop;
            updateElementText();
          } else {
            watchRemover = scope.$watch(whenExpFn, updateElementText);
          }
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 * @multiElement
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * <div class="alert alert-info">
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 *   This may be useful when, for instance, nesting ngRepeats.
 * </div>
 *
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define the order of keys
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
 * used to sort the keys alphabetically.)
 *
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
 * keys in the order in which they were defined, although there are exceptions when keys are deleted
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * # Tracking and Duplicates
 *
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
 * items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * If you are working with objects that have an identifier property, you can track
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones:
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** `track by` must always be the last expression:
 * </div>
 * ```
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
 *     {{model.name}}
 * </div>
 * ```
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)
 *
 *     Note that the tracking expression must come last, after any filters, and the alias expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // jshint bitwise: false
    scope.$odd = !(scope.$even = (index&1) === 0);
    // jshint bitwise: true
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, in enumeration order, unsorted
            collectionKeys = [];
            for (var itemKey in collection) {
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                collectionKeys.push(itemKey);
              }
            }
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 * @multiElement
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 * @multiElement
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function() { array.splice(index, 1); };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
          $animate.cancel(previousLeaveAnimations[i]);
        }
        previousLeaveAnimations.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
          promise.then(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<ng-transclude></ng-transclude>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title" aria-label="title"> <br/>
         <textarea ng-model="text" aria-label="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
var ngTranscludeDirective = ngDirective({
  restrict: 'EAC',
  link: function($scope, $element, $attrs, controller, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    $transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var noopNgModelController = { $setViewValue: noop, $render: noop };

/**
 * @ngdoc type
 * @name  select.SelectController
 * @description
 * The controller for the `<select>` directive. This provides support for reading
 * and writing the selected value(s) of the control and also coordinates dynamically
 * added `<option>` elements, perhaps by an `ngRepeat` directive.
 */
var SelectController =
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {

  var self = this,
      optionsMap = new HashMap();

  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
  self.ngModelCtrl = noopNgModelController;

  // The "unknown" option is one that is prepended to the list if the viewValue
  // does not match any of the options. When it is rendered the value of the unknown
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
  //
  // We can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  self.unknownOption = jqLite(document.createElement('option'));
  self.renderUnknownOption = function(val) {
    var unknownVal = '? ' + hashKey(val) + ' ?';
    self.unknownOption.val(unknownVal);
    $element.prepend(self.unknownOption);
    $element.val(unknownVal);
  };

  $scope.$on('$destroy', function() {
    // disable unknown option so that we don't do work when the whole select is being destroyed
    self.renderUnknownOption = noop;
  });

  self.removeUnknownOption = function() {
    if (self.unknownOption.parent()) self.unknownOption.remove();
  };


  // Read the value of the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.readValue = function readSingleValue() {
    self.removeUnknownOption();
    return $element.val();
  };


  // Write the value to the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.writeValue = function writeSingleValue(value) {
    if (self.hasOption(value)) {
      self.removeUnknownOption();
      $element.val(value);
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
    } else {
      if (value == null && self.emptyOption) {
        self.removeUnknownOption();
        $element.val('');
      } else {
        self.renderUnknownOption(value);
      }
    }
  };


  // Tell the select control that an option, with the given value, has been added
  self.addOption = function(value, element) {
    assertNotHasOwnProperty(value, '"option value"');
    if (value === '') {
      self.emptyOption = element;
    }
    var count = optionsMap.get(value) || 0;
    optionsMap.put(value, count + 1);
  };

  // Tell the select control that an option, with the given value, has been removed
  self.removeOption = function(value) {
    var count = optionsMap.get(value);
    if (count) {
      if (count === 1) {
        optionsMap.remove(value);
        if (value === '') {
          self.emptyOption = undefined;
        }
      } else {
        optionsMap.put(value, count - 1);
      }
    }
  };

  // Check whether the select control has an option matching the given value
  self.hasOption = function(value) {
    return !!optionsMap.get(value);
  };
}];

/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
 * between the scope and the `<select>` control (including setting default values).
 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
 * {@link ngOptions `ngOptions`} directives.
 *
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
 * to the model identified by the `ngModel` directive. With static or repeated options, this is
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
 *
 * <div class="alert alert-warning">
 * Note that the value of a `select` directive used without `ngOptions` is always a string.
 * When the model needs to be bound to a non-string value, you must either explictly convert it
 * using a directive (see example below) or use `ngOptions` to specify the set of options.
 * This is because an option element can only be bound to string values at present.
 * </div>
 *
 * If the viewValue of `ngModel` does not match any of the options, then the control
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-info">
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
 * a new scope for each repeated instance.
 * </div>
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds required attribute and required validation constraint to
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
 * when you want to data-bind to the required attribute.
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
 *    interaction with the select element.
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
 * set on the model on selection. See {@link ngOptions `ngOptions`}.
 *
 * @example
 * ### Simple `select` elements with static options
 *
 * <example name="static-select" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="singleSelect"> Single select: </label><br>
 *     <select name="singleSelect" ng-model="data.singleSelect">
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *     <tt>singleSelect = {{data.singleSelect}}</tt>
 *
 *     <hr>
 *     <label for="multipleSelect"> Multiple select: </label><br>
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *       <option value="option-3">Option 3</option>
 *     </select><br>
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       singleSelect: null,
 *       multipleSelect: [],
 *       option1: 'option-1',
 *      };
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.data.singleSelect = 'nonsense';
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngRepeat` to generate `select` options
 * <example name="ngrepeat-select" module="ngrepeatSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="repeatSelect"> Repeat select: </label>
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngrepeatSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       repeatSelect: null,
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *      };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Using `select` with `ngOptions` and setting a default value
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
 *
 * <example name="select-with-default-values" module="defaultValueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="mySelect">Make a choice:</label>
 *     <select name="mySelect" id="mySelect"
 *       ng-options="option.name for option in data.availableOptions track by option.id"
 *       ng-model="data.selectedOption"></select>
 *   </form>
 *   <hr>
 *   <tt>option = {{data.selectedOption}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('defaultValueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
 *       };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
 *
 * <example name="select-with-non-string-options" module="nonStringSelect">
 *   <file name="index.html">
 *     <select ng-model="model.id" convert-to-number>
 *       <option value="0">Zero</option>
 *       <option value="1">One</option>
 *       <option value="2">Two</option>
 *     </select>
 *     {{ model }}
 *   </file>
 *   <file name="app.js">
 *     angular.module('nonStringSelect', [])
 *       .run(function($rootScope) {
 *         $rootScope.model = { id: 2 };
 *       })
 *       .directive('convertToNumber', function() {
 *         return {
 *           require: 'ngModel',
 *           link: function(scope, element, attrs, ngModel) {
 *             ngModel.$parsers.push(function(val) {
 *               return parseInt(val, 10);
 *             });
 *             ngModel.$formatters.push(function(val) {
 *               return '' + val;
 *             });
 *           }
 *         };
 *       });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should initialize to model', function() {
 *       var select = element(by.css('select'));
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
 *     });
 *   </file>
 * </example>
 *
 */
var selectDirective = function() {

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: SelectController,
    link: function(scope, element, attr, ctrls) {

      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];

      selectCtrl.ngModelCtrl = ngModelCtrl;

      // We delegate rendering to the `writeValue` method, which can be changed
      // if the select can have multiple selected values or if the options are being
      // generated by `ngOptions`
      ngModelCtrl.$render = function() {
        selectCtrl.writeValue(ngModelCtrl.$viewValue);
      };

      // When the selected item(s) changes we delegate getting the value of the select control
      // to the `readValue` method, which can be changed if the select can have multiple
      // selected values or if the options are being generated by `ngOptions`
      element.on('change', function() {
        scope.$apply(function() {
          ngModelCtrl.$setViewValue(selectCtrl.readValue());
        });
      });

      // If the select allows multiple values then we need to modify how we read and write
      // values from and to the control; also what it means for the value to be empty and
      // we have to add an extra watch since ngModel doesn't work well with arrays - it
      // doesn't trigger rendering if only an item in the array changes.
      if (attr.multiple) {

        // Read value now needs to check each option to see if it is selected
        selectCtrl.readValue = function readMultipleValue() {
          var array = [];
          forEach(element.find('option'), function(option) {
            if (option.selected) {
              array.push(option.value);
            }
          });
          return array;
        };

        // Write value now needs to set the selected property of each matching option
        selectCtrl.writeValue = function writeMultipleValue(value) {
          var items = new HashMap(value);
          forEach(element.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        var lastView, lastViewRef = NaN;
        scope.$watch(function selectMultipleWatch() {
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
            lastView = shallowCopy(ngModelCtrl.$viewValue);
            ngModelCtrl.$render();
          }
          lastViewRef = ngModelCtrl.$viewValue;
        });

        // If we are a multiple select then value is now a collection
        // so the meaning of $isEmpty changes
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };

      }
    }
  };
};


// The option directive is purely designed to communicate the existence (or lack of)
// of dynamically created (and destroyed) option elements to their containing select
// directive via its controller.
var optionDirective = ['$interpolate', function($interpolate) {

  function chromeHack(optionElement) {
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
    // Adding an <option selected="selected"> element to a <select required="required"> should
    // automatically select the new element
    if (optionElement[0].hasAttribute('selected')) {
      optionElement[0].selected = true;
    }
  }

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {

      if (isDefined(attr.value)) {
        // If the value attribute is defined, check if it contains an interpolation
        var valueInterpolated = $interpolate(attr.value, true);
      } else {
        // If the value attribute is not defined then we fall back to the
        // text content of the option element, which may be interpolated
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {

        // This is an optimization over using ^^ since we don't want to have to search
        // all the way to the root of the DOM for every single option element
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        function addOption(optionValue) {
          selectCtrl.addOption(optionValue, element);
          selectCtrl.ngModelCtrl.$render();
          chromeHack(element);
        }

        // Only update trigger option updates if this is an option within a `select`
        // that also has `ngModel` attached
        if (selectCtrl && selectCtrl.ngModelCtrl) {

          if (valueInterpolated) {
            // The value attribute is interpolated
            var oldVal;
            attr.$observe('value', function valueAttributeObserveAction(newVal) {
              if (isDefined(oldVal)) {
                selectCtrl.removeOption(oldVal);
              }
              oldVal = newVal;
              addOption(newVal);
            });
          } else if (interpolateFn) {
            // The text content is interpolated
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
              attr.$set('value', newVal);
              if (oldVal !== newVal) {
                selectCtrl.removeOption(oldVal);
              }
              addOption(newVal);
            });
          } else {
            // The value attribute is static
            addOption(attr.value);
          }

          element.on('$destroy', function() {
            selectCtrl.removeOption(attr.value);
            selectCtrl.ngModelCtrl.$render();
          });
        }
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: false
});

var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};


var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(modelValue, viewValue) {
        // HTML5 pattern constraint validates the input value, so we validate the viewValue
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
      };
    }
  };
};


var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = toInt(value);
        maxlength = isNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = toInt(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

if (window.angular.bootstrap) {
  //AngularJS is already loaded, so we can return here...
  console.log('WARNING: Tried to load angular more than once.');
  return;
}

//try to bind to jquery now so that one can write jqLite(document).ready()
//but we will rebind on bootstrap again.
bindJQuery();

publishExternalAPI(angular);

angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "AM",
      "PM"
    ],
    "DAY": [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    "ERANAMES": [
      "Before Christ",
      "Anno Domini"
    ],
    "ERAS": [
      "BC",
      "AD"
    ],
    "FIRSTDAYOFWEEK": 6,
    "MONTH": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "SHORTDAY": [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    "SHORTMONTH": [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, MMMM d, y",
    "longDate": "MMMM d, y",
    "medium": "MMM d, y h:mm:ss a",
    "mediumDate": "MMM d, y",
    "mediumTime": "h:mm:ss a",
    "short": "M/d/yy h:mm a",
    "shortDate": "M/d/yy",
    "shortTime": "h:mm a"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "$",
    "DECIMAL_SEP": ".",
    "GROUP_SEP": ",",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-\u00a4",
        "negSuf": "",
        "posPre": "\u00a4",
        "posSuf": ""
      }
    ]
  },
  "id": "en-us",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/*! onsenui - v1.3.11 - 2015-09-28 */
// Copyright (c) Microsoft Open Technologies, Inc.  All rights reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
// JavaScript Dynamic Content shim for Windows Store apps
(function () {

    if (window.MSApp && MSApp.execUnsafeLocalFunction) {

        // Some nodes will have an "attributes" property which shadows the Node.prototype.attributes property
        //  and means we don't actually see the attributes of the Node (interestingly the VS debug console
        //  appears to suffer from the same issue).
        //
        var Element_setAttribute = Object.getOwnPropertyDescriptor(Element.prototype, "setAttribute").value;
        var Element_removeAttribute = Object.getOwnPropertyDescriptor(Element.prototype, "removeAttribute").value;
        var HTMLElement_insertAdjacentHTMLPropertyDescriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, "insertAdjacentHTML");
        var Node_get_attributes = Object.getOwnPropertyDescriptor(Node.prototype, "attributes").get;
        var Node_get_childNodes = Object.getOwnPropertyDescriptor(Node.prototype, "childNodes").get;
        var detectionDiv = document.createElement("div");

        function getAttributes(element) {
            return Node_get_attributes.call(element);
        }

        function setAttribute(element, attribute, value) {
            try {
                Element_setAttribute.call(element, attribute, value);
            } catch (e) {
                // ignore
            }
        }

        function removeAttribute(element, attribute) {
            Element_removeAttribute.call(element, attribute);
        }

        function childNodes(element) {
            return Node_get_childNodes.call(element);
        }

        function empty(element) {
            while (element.childNodes.length) {
                element.removeChild(element.lastChild);
            }
        }

        function insertAdjacentHTML(element, position, html) {
            HTMLElement_insertAdjacentHTMLPropertyDescriptor.value.call(element, position, html);
        }

        function inUnsafeMode() {
            var isUnsafe = true;
            try {
                detectionDiv.innerHTML = "<test/>";
            }
            catch (ex) {
                isUnsafe = false;
            }

            return isUnsafe;
        }

        function cleanse(html, targetElement) {
            var cleaner = document.implementation.createHTMLDocument("cleaner");
            empty(cleaner.documentElement);
            MSApp.execUnsafeLocalFunction(function () {
                insertAdjacentHTML(cleaner.documentElement, "afterbegin", html);
            });

            var scripts = cleaner.documentElement.querySelectorAll("script");
            Array.prototype.forEach.call(scripts, function (script) {
                switch (script.type.toLowerCase()) {
                    case "":
                        script.type = "text/inert";
                        break;
                    case "text/javascript":
                    case "text/ecmascript":
                    case "text/x-javascript":
                    case "text/jscript":
                    case "text/livescript":
                    case "text/javascript1.1":
                    case "text/javascript1.2":
                    case "text/javascript1.3":
                        script.type = "text/inert-" + script.type.slice("text/".length);
                        break;
                    case "application/javascript":
                    case "application/ecmascript":
                    case "application/x-javascript":
                        script.type = "application/inert-" + script.type.slice("application/".length);
                        break;

                    default:
                        break;
                }
            });

            function cleanseAttributes(element) {
                var attributes = getAttributes(element);
                if (attributes && attributes.length) {
                    // because the attributes collection is live it is simpler to queue up the renames
                    var events;
                    for (var i = 0, len = attributes.length; i < len; i++) {
                        var attribute = attributes[i];
                        var name = attribute.name;
                        if ((name[0] === "o" || name[0] === "O") &&
                            (name[1] === "n" || name[1] === "N")) {
                            events = events || [];
                            events.push({name: attribute.name, value: attribute.value});
                        }
                    }
                    if (events) {
                        for (var i = 0, len = events.length; i < len; i++) {
                            var attribute = events[i];
                            removeAttribute(element, attribute.name);
                            setAttribute(element, "x-" + attribute.name, attribute.value);
                        }
                    }
                }
                var children = childNodes(element);
                for (var i = 0, len = children.length; i < len; i++) {
                    cleanseAttributes(children[i]);
                }
            }

            cleanseAttributes(cleaner.documentElement);

            var cleanedNodes = [];

            if (targetElement.tagName === 'HTML') {
                cleanedNodes = Array.prototype.slice.call(document.adoptNode(cleaner.documentElement).childNodes);
            } else {
                if (cleaner.head) {
                    cleanedNodes = cleanedNodes.concat(Array.prototype.slice.call(document.adoptNode(cleaner.head).childNodes));
                }
                if (cleaner.body) {
                    cleanedNodes = cleanedNodes.concat(Array.prototype.slice.call(document.adoptNode(cleaner.body).childNodes));
                }
            }

            return cleanedNodes;
        }

        function cleansePropertySetter(property, setter) {
            var propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, property);
            var originalSetter = propertyDescriptor.set;
            Object.defineProperty(HTMLElement.prototype, property, {
                get: propertyDescriptor.get,
                set: function (value) {
                    if (window.WinJS && window.WinJS._execUnsafe && inUnsafeMode()) {
                        originalSetter.call(this, value);
                    } else {
                        var that = this;
                        var nodes = cleanse(value, that);
                        MSApp.execUnsafeLocalFunction(function () {
                            setter(propertyDescriptor, that, nodes);
                        });
                    }
                },
                enumerable: propertyDescriptor.enumerable,
                configurable: propertyDescriptor.configurable,
            });
        }

        cleansePropertySetter("innerHTML", function (propertyDescriptor, target, elements) {
            empty(target);
            for (var i = 0, len = elements.length; i < len; i++) {
                target.appendChild(elements[i]);
            }
        });
        cleansePropertySetter("outerHTML", function (propertyDescriptor, target, elements) {
            for (var i = 0, len = elements.length; i < len; i++) {
                target.insertAdjacentElement("afterend", elements[i]);
            }
            target.parentNode.removeChild(target);
        });

    }

}());
/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
(function () {
    var initializing = false, fnTest = /xyz/.test(function () {
        xyz;
    }) ? /\b_super\b/ : /.*/;

    // The base Class implementation (does nothing)
    this.Class = function () {
    };

    // Create a new Class that inherits from this class
    Class.extend = function (prop) {
        var _super = this.prototype;

        // Instantiate a base class (but only create the instance,
        // don't run the init constructor)
        initializing = true;
        var prototype = new this();
        initializing = false;

        // Copy the properties over onto the new prototype
        for (var name in prop) {
            // Check if we're overwriting an existing function
            prototype[name] = typeof prop[name] == "function" &&
            typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                (function (name, fn) {
                    return function () {
                        var tmp = this._super;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this._super = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this._super = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
                prop[name];
        }

        // The dummy class constructor
        function Class() {
            // All construction is actually done in the init method
            if (!initializing && this.init)
                this.init.apply(this, arguments);
        }

        // Populate our constructed prototype object
        Class.prototype = prototype;

        // Enforce the constructor to be what we expect
        Class.prototype.constructor = Class;

        // And make this class extendable
        Class.extend = arguments.callee;

        return Class;
    };
})();
;(function () {
    'use strict';

    /**
     * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
     *
     * @codingstandard ftlabs-jsv2
     * @copyright The Financial Times Limited [All Rights Reserved]
     * @license MIT License (see LICENSE.txt)
     */

    /*jslint browser:true, node:true*/
    /*global define, Event, Node*/


    /**
     * Instantiate fast-clicking listeners on the specified layer.
     *
     * @constructor
     * @param {Element} layer The layer to listen on
     * @param {Object} [options={}] The options to override the defaults
     */
    function FastClick(layer, options) {
        var oldOnClick;

        options = options || {};

        /**
         * Whether a click is currently being tracked.
         *
         * @type boolean
         */
        this.trackingClick = false;


        /**
         * Timestamp for when click tracking started.
         *
         * @type number
         */
        this.trackingClickStart = 0;


        /**
         * The element being tracked for a click.
         *
         * @type EventTarget
         */
        this.targetElement = null;


        /**
         * X-coordinate of touch start event.
         *
         * @type number
         */
        this.touchStartX = 0;


        /**
         * Y-coordinate of touch start event.
         *
         * @type number
         */
        this.touchStartY = 0;


        /**
         * ID of the last touch, retrieved from Touch.identifier.
         *
         * @type number
         */
        this.lastTouchIdentifier = 0;


        /**
         * Touchmove boundary, beyond which a click will be cancelled.
         *
         * @type number
         */
        this.touchBoundary = options.touchBoundary || 10;


        /**
         * The FastClick layer.
         *
         * @type Element
         */
        this.layer = layer;

        /**
         * The minimum time between tap(touchstart and touchend) events
         *
         * @type number
         */
        this.tapDelay = options.tapDelay || 200;

        /**
         * The maximum time for a tap
         *
         * @type number
         */
        this.tapTimeout = options.tapTimeout || 700;

        if (FastClick.notNeeded(layer)) {
            return;
        }

        // Some old versions of Android don't have Function.prototype.bind
        function bind(method, context) {
            return function () {
                return method.apply(context, arguments);
            };
        }


        var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
        var context = this;
        for (var i = 0, l = methods.length; i < l; i++) {
            context[methods[i]] = bind(context[methods[i]], context);
        }

        // Set up event handlers as required
        if (deviceIsAndroid) {
            layer.addEventListener('mouseover', this.onMouse, true);
            layer.addEventListener('mousedown', this.onMouse, true);
            layer.addEventListener('mouseup', this.onMouse, true);
        }

        layer.addEventListener('click', this.onClick, true);
        layer.addEventListener('touchstart', this.onTouchStart, false);
        layer.addEventListener('touchmove', this.onTouchMove, false);
        layer.addEventListener('touchend', this.onTouchEnd, false);
        layer.addEventListener('touchcancel', this.onTouchCancel, false);

        // Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
        // which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
        // layer when they are cancelled.
        if (!Event.prototype.stopImmediatePropagation) {
            layer.removeEventListener = function (type, callback, capture) {
                var rmv = Node.prototype.removeEventListener;
                if (type === 'click') {
                    rmv.call(layer, type, callback.hijacked || callback, capture);
                } else {
                    rmv.call(layer, type, callback, capture);
                }
            };

            layer.addEventListener = function (type, callback, capture) {
                var adv = Node.prototype.addEventListener;
                if (type === 'click') {
                    adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
                            if (!event.propagationStopped) {
                                callback(event);
                            }
                        }), capture);
                } else {
                    adv.call(layer, type, callback, capture);
                }
            };
        }

        // If a handler is already declared in the element's onclick attribute, it will be fired before
        // FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
        // adding it as listener.
        if (typeof layer.onclick === 'function') {

            // Android browser on at least 3.2 requires a new reference to the function in layer.onclick
            // - the old one won't work if passed to addEventListener directly.
            oldOnClick = layer.onclick;
            layer.addEventListener('click', function (event) {
                oldOnClick(event);
            }, false);
            layer.onclick = null;
        }
    }

    /**
     * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
     *
     * @type boolean
     */
    var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

    /**
     * Android requires exceptions.
     *
     * @type boolean
     */
    var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


    /**
     * iOS requires exceptions.
     *
     * @type boolean
     */
    var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


    /**
     * iOS 4 requires an exception for select elements.
     *
     * @type boolean
     */
    var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


    /**
     * iOS 6.0-7.* requires the target element to be manually derived
     *
     * @type boolean
     */
    var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

    /**
     * BlackBerry requires exceptions.
     *
     * @type boolean
     */
    var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

    /**
     * Determine whether a given element requires a native click.
     *
     * @param {EventTarget|Element} target Target DOM element
     * @returns {boolean} Returns true if the element needs a native click
     */
    FastClick.prototype.needsClick = function (target) {
        switch (target.nodeName.toLowerCase()) {

            // Don't send a synthetic click to disabled inputs (issue #62)
            case 'button':
            case 'select':
            case 'textarea':
                if (target.disabled) {
                    return true;
                }

                break;
            case 'input':

                // File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
                if ((deviceIsIOS && target.type === 'file') || target.disabled) {
                    return true;
                }

                break;
            case 'label':
            case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
            case 'video':
                return true;
        }

        return (/\bneedsclick\b/).test(target.className);
    };


    /**
     * Determine whether a given element requires a call to focus to simulate click into element.
     *
     * @param {EventTarget|Element} target Target DOM element
     * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
     */
    FastClick.prototype.needsFocus = function (target) {
        switch (target.nodeName.toLowerCase()) {
            case 'textarea':
                return true;
            case 'select':
                return !deviceIsAndroid;
            case 'input':
                switch (target.type) {
                    case 'button':
                    case 'checkbox':
                    case 'file':
                    case 'image':
                    case 'radio':
                    case 'submit':
                        return false;
                }

                // No point in attempting to focus disabled inputs
                return !target.disabled && !target.readOnly;
            default:
                return (/\bneedsfocus\b/).test(target.className);
        }
    };


    /**
     * Send a click event to the specified element.
     *
     * @param {EventTarget|Element} targetElement
     * @param {Event} event
     */
    FastClick.prototype.sendClick = function (targetElement, event) {
        var clickEvent, touch;

        // On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
        if (document.activeElement && document.activeElement !== targetElement) {
            document.activeElement.blur();
        }

        touch = event.changedTouches[0];

        // Synthesise a click event, with an extra attribute so it can be tracked
        clickEvent = document.createEvent('MouseEvents');
        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
    };

    FastClick.prototype.determineEventType = function (targetElement) {

        //Issue #159: Android Chrome Select Box does not open with a synthetic click event
        if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
            return 'mousedown';
        }

        return 'click';
    };


    /**
     * @param {EventTarget|Element} targetElement
     */
    FastClick.prototype.focus = function (targetElement) {
        var length;

        // Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
            length = targetElement.value.length;
            targetElement.setSelectionRange(length, length);
        } else {
            targetElement.focus();
        }
    };


    /**
     * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
     *
     * @param {EventTarget|Element} targetElement
     */
    FastClick.prototype.updateScrollParent = function (targetElement) {
        var scrollParent, parentElement;

        scrollParent = targetElement.fastClickScrollParent;

        // Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
        // target element was moved to another parent.
        if (!scrollParent || !scrollParent.contains(targetElement)) {
            parentElement = targetElement;
            do {
                if (parentElement.scrollHeight > parentElement.offsetHeight) {
                    scrollParent = parentElement;
                    targetElement.fastClickScrollParent = parentElement;
                    break;
                }

                parentElement = parentElement.parentElement;
            } while (parentElement);
        }

        // Always update the scroll top tracker if possible.
        if (scrollParent) {
            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
    };


    /**
     * @param {EventTarget} targetElement
     * @returns {Element|EventTarget}
     */
    FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {

        // On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
        if (eventTarget.nodeType === Node.TEXT_NODE) {
            return eventTarget.parentNode;
        }

        return eventTarget;
    };


    /**
     * On touch start, record the position and scroll offset.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.onTouchStart = function (event) {
        var targetElement, touch, selection;

        // Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
        if (event.targetTouches.length > 1) {
            return true;
        }

        targetElement = this.getTargetElementFromEventTarget(event.target);
        touch = event.targetTouches[0];

        if (deviceIsIOS) {

            // Only trusted events will deselect text on iOS (issue #49)
            selection = window.getSelection();
            if (selection.rangeCount && !selection.isCollapsed) {
                return true;
            }

            if (!deviceIsIOS4) {

                // Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
                // when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
                // with the same identifier as the touch event that previously triggered the click that triggered the alert.
                // Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
                // immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
                // Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
                // which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
                // random integers, it's safe to to continue if the identifier is 0 here.
                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                    event.preventDefault();
                    return false;
                }

                this.lastTouchIdentifier = touch.identifier;

                // If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
                // 1) the user does a fling scroll on the scrollable layer
                // 2) the user stops the fling scroll with another tap
                // then the event.target of the last 'touchend' event will be the element that was under the user's finger
                // when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
                // is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
                this.updateScrollParent(targetElement);
            }
        }

        this.trackingClick = true;
        this.trackingClickStart = event.timeStamp;
        this.targetElement = targetElement;

        this.touchStartX = touch.pageX;
        this.touchStartY = touch.pageY;

        // Prevent phantom clicks on fast double-tap (issue #36)
        if ((event.timeStamp - this.lastClickTime) < this.tapDelay && (event.timeStamp - this.lastClickTime) > -1) {
            event.preventDefault();
        }

        return true;
    };


    /**
     * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.touchHasMoved = function (event) {
        var touch = event.changedTouches[0], boundary = this.touchBoundary;

        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
            return true;
        }

        return false;
    };


    /**
     * Update the last position.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.onTouchMove = function (event) {
        if (!this.trackingClick) {
            return true;
        }

        // If the touch has moved, cancel the click tracking
        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
            this.trackingClick = false;
            this.targetElement = null;
        }

        return true;
    };


    /**
     * Attempt to find the labelled control for the given label element.
     *
     * @param {EventTarget|HTMLLabelElement} labelElement
     * @returns {Element|null}
     */
    FastClick.prototype.findControl = function (labelElement) {

        // Fast path for newer browsers supporting the HTML5 control attribute
        if (labelElement.control !== undefined) {
            return labelElement.control;
        }

        // All browsers under test that support touch events also support the HTML5 htmlFor attribute
        if (labelElement.htmlFor) {
            return document.getElementById(labelElement.htmlFor);
        }

        // If no for attribute exists, attempt to retrieve the first labellable descendant element
        // the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
        return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
    };


    /**
     * On touch end, determine whether to send a click event at once.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.onTouchEnd = function (event) {
        var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

        if (!this.trackingClick) {
            return true;
        }

        // Prevent phantom clicks on fast double-tap (issue #36)
        if ((event.timeStamp - this.lastClickTime) < this.tapDelay && (event.timeStamp - this.lastClickTime) > -1) {
            this.cancelNextClick = true;
            return true;
        }

        if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
            return true;
        }

        // Reset to prevent wrong click cancel on input (issue #156).
        this.cancelNextClick = false;

        this.lastClickTime = event.timeStamp;

        trackingClickStart = this.trackingClickStart;
        this.trackingClick = false;
        this.trackingClickStart = 0;

        // On some iOS devices, the targetElement supplied with the event is invalid if the layer
        // is performing a transition or scroll, and has to be re-detected manually. Note that
        // for this to function correctly, it must be called *after* the event target is checked!
        // See issue #57; also filed as rdar://13048589 .
        if (deviceIsIOSWithBadTarget) {
            touch = event.changedTouches[0];

            // In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
            targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
            targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
        }

        targetTagName = targetElement.tagName.toLowerCase();
        if (targetTagName === 'label') {
            forElement = this.findControl(targetElement);
            if (forElement) {
                this.focus(targetElement);
                if (deviceIsAndroid) {
                    return false;
                }

                targetElement = forElement;
            }
        } else if (this.needsFocus(targetElement)) {

            // Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
            // Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
            if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
                this.targetElement = null;
                return false;
            }

            this.focus(targetElement);
            this.sendClick(targetElement, event);

            // Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
            // Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
            if (!deviceIsIOS || targetTagName !== 'select') {
                this.targetElement = null;
                event.preventDefault();
            }

            return false;
        }

        if (deviceIsIOS && !deviceIsIOS4) {

            // Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
            // and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
            scrollParent = targetElement.fastClickScrollParent;
            if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
                return true;
            }
        }

        // Prevent the actual click from going though - unless the target node is marked as requiring
        // real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
        if (!this.needsClick(targetElement)) {
            event.preventDefault();
            this.sendClick(targetElement, event);
        }

        return false;
    };


    /**
     * On touch cancel, stop tracking the click.
     *
     * @returns {void}
     */
    FastClick.prototype.onTouchCancel = function () {
        this.trackingClick = false;
        this.targetElement = null;
    };


    /**
     * Determine mouse events which should be permitted.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.onMouse = function (event) {

        // If a target element was never set (because a touch event was never fired) allow the event
        if (!this.targetElement) {
            return true;
        }

        if (event.forwardedTouchEvent) {
            return true;
        }

        // Programmatically generated events targeting a specific element should be permitted
        if (!event.cancelable) {
            return true;
        }

        // Derive and check the target element to see whether the mouse event needs to be permitted;
        // unless explicitly enabled, prevent non-touch click events from triggering actions,
        // to prevent ghost/doubleclicks.
        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

            // Prevent any user-added listeners declared on FastClick element from being fired.
            if (event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            } else {

                // Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
                event.propagationStopped = true;
            }

            // Cancel the event
            event.stopPropagation();
            event.preventDefault();

            return false;
        }

        // If the mouse event is permitted, return true for the action to go through.
        return true;
    };


    /**
     * On actual clicks, determine whether this is a touch-generated click, a click action occurring
     * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
     * an actual click which should be permitted.
     *
     * @param {Event} event
     * @returns {boolean}
     */
    FastClick.prototype.onClick = function (event) {
        var permitted;

        // It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
        if (this.trackingClick) {
            this.targetElement = null;
            this.trackingClick = false;
            return true;
        }

        // Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
        if (event.target.type === 'submit' && event.detail === 0) {
            return true;
        }

        permitted = this.onMouse(event);

        // Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
        if (!permitted) {
            this.targetElement = null;
        }

        // If clicks are permitted, return true for the action to go through.
        return permitted;
    };


    /**
     * Remove all FastClick's event listeners.
     *
     * @returns {void}
     */
    FastClick.prototype.destroy = function () {
        var layer = this.layer;

        if (deviceIsAndroid) {
            layer.removeEventListener('mouseover', this.onMouse, true);
            layer.removeEventListener('mousedown', this.onMouse, true);
            layer.removeEventListener('mouseup', this.onMouse, true);
        }

        layer.removeEventListener('click', this.onClick, true);
        layer.removeEventListener('touchstart', this.onTouchStart, false);
        layer.removeEventListener('touchmove', this.onTouchMove, false);
        layer.removeEventListener('touchend', this.onTouchEnd, false);
        layer.removeEventListener('touchcancel', this.onTouchCancel, false);
    };


    /**
     * Check whether FastClick is needed.
     *
     * @param {Element} layer The layer to listen on
     */
    FastClick.notNeeded = function (layer) {
        var metaViewport;
        var chromeVersion;
        var blackberryVersion;
        var firefoxVersion;

        // Devices that don't support touch don't need FastClick
        if (typeof window.ontouchstart === 'undefined') {
            return true;
        }

        // Chrome version - zero for other browsers
        chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

        if (chromeVersion) {

            if (deviceIsAndroid) {
                metaViewport = document.querySelector('meta[name=viewport]');

                if (metaViewport) {
                    // Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    // Chrome 32 and above with width=device-width or less don't need FastClick
                    if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }

                // Chrome desktop doesn't need FastClick (issue #15)
            } else {
                return true;
            }
        }

        if (deviceIsBlackBerry10) {
            blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

            // BlackBerry 10.3+ does not require Fastclick library.
            // https://github.com/ftlabs/fastclick/issues/251
            if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
                metaViewport = document.querySelector('meta[name=viewport]');

                if (metaViewport) {
                    // user-scalable=no eliminates click delay.
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    // width=device-width (or less than device-width) eliminates click delay.
                    if (document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            }
        }

        // IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
        if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }

        // Firefox version - zero for other browsers
        firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

        if (firefoxVersion >= 27) {
            // Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

            metaViewport = document.querySelector('meta[name=viewport]');
            if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
                return true;
            }
        }

        // IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
        // http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
        if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }

        return false;
    };


    /**
     * Factory method for creating a FastClick object
     *
     * @param {Element} layer The layer to listen on
     * @param {Object} [options={}] The options to override the defaults
     */
    FastClick.attach = function (layer, options) {
        return new FastClick(layer, options);
    };


    if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

        // AMD. Register as an anonymous module.
        define(function () {
            return FastClick;
        });
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = FastClick.attach;
        module.exports.FastClick = FastClick;
    } else {
        window.FastClick = FastClick;
    }
}());


/*! Hammer.JS - v2.0.6 - 2016-01-06
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the  license */
(function (window, document, exportName, undefined) {
    'use strict';

    var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
    var TEST_ELEMENT = document.createElement('div');

    var TYPE_FUNCTION = 'function';

    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;

    /**
     * set a timeout with a given scope
     * @param {Function} fn
     * @param {Number} timeout
     * @param {Object} context
     * @returns {number}
     */
    function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }

    /**
     * if the argument is an array, we want to execute the fn on each entry
     * if it aint an array we don't want to do a thing.
     * this is used by all the methods that accept a single and array argument.
     * @param {*|Array} arg
     * @param {String} fn
     * @param {Object} [context]
     * @returns {Boolean}
     */
    function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }

    /**
     * walk objects and arrays
     * @param {Object} obj
     * @param {Function} iterator
     * @param {Object} context
     */
    function each(obj, iterator, context) {
        var i;

        if (!obj) {
            return;
        }

        if (obj.forEach) {
            obj.forEach(iterator, context);
        } else if (obj.length !== undefined) {
            i = 0;
            while (i < obj.length) {
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else {
            for (i in obj) {
                obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
            }
        }
    }

    /**
     * wrap a method with a deprecation warning and stack trace
     * @param {Function} method
     * @param {String} name
     * @param {String} message
     * @returns {Function} A new function wrapping the supplied method.
     */
    function deprecate(method, name, message) {
        var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
        return function () {
            var e = new Error('get-stack-trace');
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
                    .replace(/^\s+at\s+/gm, '')
                    .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

            var log = window.console && (window.console.warn || window.console.log);
            if (log) {
                log.call(window.console, deprecationMessage, stack);
            }
            return method.apply(this, arguments);
        };
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} target
     * @param {...Object} objects_to_assign
     * @returns {Object} target
     */
    var assign;
    if (typeof Object.assign !== 'function') {
        assign = function assign(target) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }

            var output = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var source = arguments[index];
                if (source !== undefined && source !== null) {
                    for (var nextKey in source) {
                        if (source.hasOwnProperty(nextKey)) {
                            output[nextKey] = source[nextKey];
                        }
                    }
                }
            }
            return output;
        };
    } else {
        assign = Object.assign;
    }

    /**
     * extend object.
     * means that properties in dest will be overwritten by the ones in src.
     * @param {Object} dest
     * @param {Object} src
     * @param {Boolean} [merge=false]
     * @returns {Object} dest
     */
    var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
            if (!merge || (merge && dest[keys[i]] === undefined)) {
                dest[keys[i]] = src[keys[i]];
            }
            i++;
        }
        return dest;
    }, 'extend', 'Use `assign`.');

    /**
     * merge the values from src in the dest.
     * means that properties that exist in dest will not be overwritten by src
     * @param {Object} dest
     * @param {Object} src
     * @returns {Object} dest
     */
    var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, 'merge', 'Use `assign`.');

    /**
     * simple class inheritance
     * @param {Function} child
     * @param {Function} base
     * @param {Object} [properties]
     */
    function inherit(child, base, properties) {
        var baseP = base.prototype,
            childP;

        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;

        if (properties) {
            assign(childP, properties);
        }
    }

    /**
     * simple function bind
     * @param {Function} fn
     * @param {Object} context
     * @returns {Function}
     */
    function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }

    /**
     * let a boolean value also be a function that must return a boolean
     * this first item in args will be used as the context
     * @param {Boolean|Function} val
     * @param {Array} [args]
     * @returns {Boolean}
     */
    function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
            return val.apply(args ? args[0] || undefined : undefined, args);
        }
        return val;
    }

    /**
     * use the val2 when val1 is undefined
     * @param {*} val1
     * @param {*} val2
     * @returns {*}
     */
    function ifUndefined(val1, val2) {
        return (val1 === undefined) ? val2 : val1;
    }

    /**
     * addEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function addEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.addEventListener(type, handler, false);
        });
    }

    /**
     * removeEventListener with multiple events at once
     * @param {EventTarget} target
     * @param {String} types
     * @param {Function} handler
     */
    function removeEventListeners(target, types, handler) {
        each(splitStr(types), function (type) {
            target.removeEventListener(type, handler, false);
        });
    }

    /**
     * find if a node is in the given parent
     * @method hasParent
     * @param {HTMLElement} node
     * @param {HTMLElement} parent
     * @return {Boolean} found
     */
    function hasParent(node, parent) {
        while (node) {
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    /**
     * small indexOf wrapper
     * @param {String} str
     * @param {String} find
     * @returns {Boolean} found
     */
    function inStr(str, find) {
        return str.indexOf(find) > -1;
    }

    /**
     * split string on whitespace
     * @param {String} str
     * @returns {Array} words
     */
    function splitStr(str) {
        return str.trim().split(/\s+/g);
    }

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }

    /**
     * convert array-like objects to real arrays
     * @param {Object} obj
     * @returns {Array}
     */
    function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }

    /**
     * unique array with objects based on a key (like 'id') or just by the array's value
     * @param {Array} src [{id:1},{id:2},{id:1}]
     * @param {String} [key]
     * @param {Boolean} [sort=False]
     * @returns {Array} [{id:1},{id:2}]
     */
    function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;

        while (i < src.length) {
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) {
                results.push(src[i]);
            }
            values[i] = val;
            i++;
        }

        if (sort) {
            if (!key) {
                results = results.sort();
            } else {
                results = results.sort(function sortUniqueArray(a, b) {
                    return a[key] > b[key];
                });
            }
        }

        return results;
    }

    /**
     * get the prefixed property
     * @param {Object} obj
     * @param {String} property
     * @returns {String|Undefined} prefixed
     */
    function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);

        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
            prefix = VENDOR_PREFIXES[i];
            prop = (prefix) ? prefix + camelProp : property;

            if (prop in obj) {
                return prop;
            }
            i++;
        }
        return undefined;
    }

    /**
     * get a unique id
     * @returns {number} uniqueId
     */
    var _uniqueId = 1;

    function uniqueId() {
        return _uniqueId++;
    }

    /**
     * get the window object of an element
     * @param {HTMLElement} element
     * @returns {DocumentView|Window}
     */
    function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return (doc.defaultView || doc.parentWindow || window);
    }

    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

    var SUPPORT_TOUCH = ('ontouchstart' in window);
    var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

    var INPUT_TYPE_TOUCH = 'touch';
    var INPUT_TYPE_PEN = 'pen';
    var INPUT_TYPE_MOUSE = 'mouse';
    var INPUT_TYPE_KINECT = 'kinect';

    var COMPUTE_INTERVAL = 25;

    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;

    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;

    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

    var PROPS_XY = ['x', 'y'];
    var PROPS_CLIENT_XY = ['clientX', 'clientY'];

    /**
     * create new input type manager
     * @param {Manager} manager
     * @param {Function} callback
     * @returns {Input}
     * @constructor
     */
    function Input(manager, callback) {
        var self = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;

        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function (ev) {
            if (boolOrFn(manager.options.enable, [manager])) {
                self.handler(ev);
            }
        };

        this.init();

    }

    Input.prototype = {
        /**
         * should handle the inputEvent data and trigger the callback
         * @virtual
         */
        handler: function () {
        },

        /**
         * bind the events
         */
        init: function () {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },

        /**
         * unbind the events
         */
        destroy: function () {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };

    /**
     * create new input type manager
     * called by the Manager constructor
     * @param {Hammer} manager
     * @returns {Input}
     */
    function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;

        if (inputClass) {
            Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
            Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
            Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
            Type = MouseInput;
        } else {
            Type = TouchMouseInput;
        }
        return new (Type)(manager, inputHandler);
    }

    /**
     * handle input events
     * @param {Manager} manager
     * @param {String} eventType
     * @param {Object} input
     */
    function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
        var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;

        if (isFirst) {
            manager.session = {};
        }

        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;

        // compute scale, rotation etc
        computeInputData(manager, input);

        // emit secret event
        manager.emit('hammer.input', input);

        manager.recognize(input);
        manager.session.prevInput = input;
    }

    /**
     * extend the data with some usable properties like scale, rotate, velocity etc
     * @param {Object} manager
     * @param {Object} input
     */
    function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;

        // store the first input to calculate the distance and direction
        if (!session.firstInput) {
            session.firstInput = simpleCloneInputData(input);
        }

        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) {
            session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
            session.firstMultiple = false;
        }

        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;

        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);

        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);

        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

        input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
            session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

        computeIntervalInputData(session, input);

        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
            target = input.srcEvent.target;
        }
        input.target = target;
        input.startEvent = firstInput;
    }

    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};

        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };

            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }

        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }

    /**
     * velocity is calculated every x ms
     * @param {Object} session
     * @param {Object} input
     */
    function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input,
            deltaTime = input.timeStamp - last.timeStamp,
            velocity, velocityX, velocityY, direction;

        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;

            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);

            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }

        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }

    /**
     * create a simple clone from the input used for storage of firstInput and firstMultiple
     * @param {Object} input
     * @returns {Object} clonedInputData
     */
    function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }

        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }

    /**
     * get the center of all the pointers
     * @param {Array} pointers
     * @return {Object} center contains `x` and `y` properties
     */
    function getCenter(pointers) {
        var pointersLength = pointers.length;

        // no need to loop when only one touch
        if (pointersLength === 1) {
            return {
                x: round(pointers[0].clientX),
                y: round(pointers[0].clientY)
            };
        }

        var x = 0, y = 0, i = 0;
        while (i < pointersLength) {
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }

        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }

    /**
     * calculate the velocity between two points. unit is in px per ms.
     * @param {Number} deltaTime
     * @param {Number} x
     * @param {Number} y
     * @return {Object} velocity `x` and `y`
     */
    function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }

    /**
     * get the direction between two points
     * @param {Number} x
     * @param {Number} y
     * @return {Number} direction
     */
    function getDirection(x, y) {
        if (x === y) {
            return DIRECTION_NONE;
        }

        if (abs(x) >= abs(y)) {
            return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }

    /**
     * calculate the absolute distance between two points
     * @param {Object} p1 {x, y}
     * @param {Object} p2 {x, y}
     * @param {Array} [props] containing x and y keys
     * @return {Number} distance
     */
    function getDistance(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];

        return Math.sqrt((x * x) + (y * y));
    }

    /**
     * calculate the angle between two coordinates
     * @param {Object} p1
     * @param {Object} p2
     * @param {Array} [props] containing x and y keys
     * @return {Number} angle
     */
    function getAngle(p1, p2, props) {
        if (!props) {
            props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]],
            y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }

    /**
     * calculate the rotation degrees between two pointersets
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} rotation
     */
    function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }

    /**
     * calculate the scale factor between two pointersets
     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
     * @param {Array} start array of pointers
     * @param {Array} end array of pointers
     * @return {Number} scale
     */
    function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }

    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };

    var MOUSE_ELEMENT_EVENTS = 'mousedown';
    var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

    /**
     * Mouse events input
     * @constructor
     * @extends Input
     */
    function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;

        this.allow = true; // used by Input.TouchMouse to disable mouse events
        this.pressed = false; // mousedown state

        Input.apply(this, arguments);
    }

    inherit(MouseInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];

            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) {
                this.pressed = true;
            }

            if (eventType & INPUT_MOVE && ev.which !== 1) {
                eventType = INPUT_END;
            }

            // mouse must be down, and mouse events are allowed (see the TouchMouse input)
            if (!this.pressed || !this.allow) {
                return;
            }

            if (eventType & INPUT_END) {
                this.pressed = false;
            }

            this.callback(this.manager, eventType, {
                pointers: [ev],
                changedPointers: [ev],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });

    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };

// in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };

    var POINTER_ELEMENT_EVENTS = 'pointerdown';
    var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

// IE10 has prefixed support, and case-sensitive
    if (window.MSPointerEvent && !window.PointerEvent) {
        POINTER_ELEMENT_EVENTS = 'MSPointerDown';
        POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
    }

    /**
     * Pointer events input
     * @constructor
     * @extends Input
     */
    function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;

        Input.apply(this, arguments);

        this.store = (this.manager.session.pointerEvents = []);
    }

    inherit(PointerEventInput, Input, {
        /**
         * handle mouse events
         * @param {Object} ev
         */
        handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;

            var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

            var isTouch = (pointerType == INPUT_TYPE_TOUCH);

            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, 'pointerId');

            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
                removePointer = true;
            }

            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) {
                return;
            }

            // update the event in the store
            store[storeIndex] = ev;

            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [ev],
                pointerType: pointerType,
                srcEvent: ev
            });

            if (removePointer) {
                // remove from the store
                store.splice(storeIndex, 1);
            }
        }
    });

    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
    var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Touch events input
     * @constructor
     * @extends Input
     */
    function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;

        Input.apply(this, arguments);
    }

    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

            // should we handle the touch events?
            if (type === INPUT_START) {
                this.started = true;
            }

            if (!this.started) {
                return;
            }

            var touches = normalizeSingleTouches.call(this, ev, type);

            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
                this.started = false;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);

        if (type & (INPUT_END | INPUT_CANCEL)) {
            all = uniqueArray(all.concat(changed), 'identifier', true);
        }

        return [all, changed];
    }

    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };

    var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

    /**
     * Multi-user touch events input
     * @constructor
     * @extends Input
     */
    function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};

        Input.apply(this, arguments);
    }

    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) {
                return;
            }

            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });

    /**
     * @this {TouchInput}
     * @param {Object} ev
     * @param {Number} type flag
     * @returns {undefined|Array} [all, changed]
     */
    function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;

        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [allTouches, allTouches];
        }

        var i,
            targetTouches,
            changedTouches = toArray(ev.changedTouches),
            changedTargetTouches = [],
            target = this.target;

        // get target touches from touches
        targetTouches = allTouches.filter(function (touch) {
            return hasParent(touch.target, target);
        });

        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while (i < targetTouches.length) {
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }

        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while (i < changedTouches.length) {
            if (targetIds[changedTouches[i].identifier]) {
                changedTargetTouches.push(changedTouches[i]);
            }

            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) {
                delete targetIds[changedTouches[i].identifier];
            }
            i++;
        }

        if (!changedTargetTouches.length) {
            return;
        }

        return [
            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
            uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
            changedTargetTouches
        ];
    }

    /**
     * Combined touch and mouse input
     *
     * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
     * This because touch devices also emit mouse events while doing a touch.
     *
     * @constructor
     * @extends Input
     */
    function TouchMouseInput() {
        Input.apply(this, arguments);

        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
    }

    inherit(TouchMouseInput, Input, {
        /**
         * handle mouse and touch events
         * @param {Hammer} manager
         * @param {String} inputEvent
         * @param {Object} inputData
         */
        handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
                isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

            // when we're in a touch event, so  block all upcoming mouse events
            // most mobile browser also emit mouseevents, right after touchstart
            if (isTouch) {
                this.mouse.allow = false;
            } else if (isMouse && !this.mouse.allow) {
                return;
            }

            // reset the allowMouse when we're done
            if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
                this.mouse.allow = true;
            }

            this.callback(manager, inputEvent, inputData);
        },

        /**
         * remove the event listeners
         */
        destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });

    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

// magical touchAction value
    var TOUCH_ACTION_COMPUTE = 'compute';
    var TOUCH_ACTION_AUTO = 'auto';
    var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
    var TOUCH_ACTION_NONE = 'none';
    var TOUCH_ACTION_PAN_X = 'pan-x';
    var TOUCH_ACTION_PAN_Y = 'pan-y';

    /**
     * Touch Action
     * sets the touchAction property or uses the js alternative
     * @param {Manager} manager
     * @param {String} value
     * @constructor
     */
    function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }

    TouchAction.prototype = {
        /**
         * set the touchAction value on the element or enable the polyfill
         * @param {String} value
         */
        set: function (value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) {
                value = this.compute();
            }

            if (NATIVE_TOUCH_ACTION && this.manager.element.style) {
                this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            }
            this.actions = value.toLowerCase().trim();
        },

        /**
         * just re-set the touchAction value
         */
        update: function () {
            this.set(this.manager.options.touchAction);
        },

        /**
         * compute the value for the touchAction property based on the recognizer's settings
         * @returns {String} value
         */
        compute: function () {
            var actions = [];
            each(this.manager.recognizers, function (recognizer) {
                if (boolOrFn(recognizer.options.enable, [recognizer])) {
                    actions = actions.concat(recognizer.getTouchAction());
                }
            });
            return cleanTouchActions(actions.join(' '));
        },

        /**
         * this method is called on each input cycle and provides the preventing of the browser behavior
         * @param {Object} input
         */
        preventDefaults: function (input) {
            // not needed with native support for the touchAction property
            if (NATIVE_TOUCH_ACTION) {
                return;
            }

            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;

            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }

            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE);
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);

            if (hasNone) {
                //do not prevent defaults if this is a tap gesture

                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;

                if (isTapPointer && isTapMovement && isTapTouchTime) {
                    return;
                }
            }

            if (hasPanX && hasPanY) {
                // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
                return;
            }

            if (hasNone ||
                (hasPanY && direction & DIRECTION_HORIZONTAL) ||
                (hasPanX && direction & DIRECTION_VERTICAL)) {
                return this.preventSrc(srcEvent);
            }
        },

        /**
         * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
         * @param {Object} srcEvent
         */
        preventSrc: function (srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };

    /**
     * when the touchActions are collected they are not a valid value, so we need to clean things up. *
     * @param {String} actions
     * @returns {*}
     */
    function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) {
            return TOUCH_ACTION_NONE;
        }

        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) {
            return TOUCH_ACTION_NONE;
        }

        // pan-x OR pan-y
        if (hasPanX || hasPanY) {
            return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }

        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
            return TOUCH_ACTION_MANIPULATION;
        }

        return TOUCH_ACTION_AUTO;
    }

    /**
     * Recognizer flow explained; *
     * All recognizers have the initial state of POSSIBLE when a input session starts.
     * The definition of a input session is from the first input until the last input, with all it's movement in it. *
     * Example session for mouse-input: mousedown -> mousemove -> mouseup
     *
     * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
     * which determines with state it should be.
     *
     * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
     * POSSIBLE to give it another change on the next cycle.
     *
     *               Possible
     *                  |
     *            +-----+---------------+
     *            |                     |
     *      +-----+-----+               |
     *      |           |               |
     *   Failed      Cancelled          |
     *                          +-------+------+
     *                          |              |
     *                      Recognized       Began
     *                                         |
     *                                      Changed
     *                                         |
     *                                  Ended/Recognized
     */
    var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;

    /**
     * Recognizer
     * Every recognizer needs to extend from this class.
     * @constructor
     * @param {Object} options
     */
    function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});

        this.id = uniqueId();

        this.manager = null;

        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);

        this.state = STATE_POSSIBLE;

        this.simultaneous = {};
        this.requireFail = [];
    }

    Recognizer.prototype = {
        /**
         * @virtual
         * @type {Object}
         */
        defaults: {},

        /**
         * set options
         * @param {Object} options
         * @return {Recognizer}
         */
        set: function (options) {
            assign(this.options, options);

            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },

        /**
         * recognize simultaneous with an other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        recognizeWith: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
                return this;
            }

            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },

        /**
         * drop the simultaneous link. it doesnt remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRecognizeWith: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },

        /**
         * recognizer can only run when an other is failing
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        requireFailure: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
                return this;
            }

            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },

        /**
         * drop the requireFailure link. it does not remove the link on the other recognizer.
         * @param {Recognizer} otherRecognizer
         * @returns {Recognizer} this
         */
        dropRequireFailure: function (otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
                return this;
            }

            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) {
                this.requireFail.splice(index, 1);
            }
            return this;
        },

        /**
         * has require failures boolean
         * @returns {boolean}
         */
        hasRequireFailures: function () {
            return this.requireFail.length > 0;
        },

        /**
         * if the recognizer can recognize simultaneous with an other recognizer
         * @param {Recognizer} otherRecognizer
         * @returns {Boolean}
         */
        canRecognizeWith: function (otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },

        /**
         * You should use `tryEmit` instead of `emit` directly to check
         * that all the needed recognizers has failed before emitting.
         * @param {Object} input
         */
        emit: function (input) {
            var self = this;
            var state = this.state;

            function emit(event) {
                self.manager.emit(event, input);
            }

            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }

            emit(self.options.event); // simple 'eventName' events

            if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
                emit(input.additionalEvent);
            }

            // panend and pancancel
            if (state >= STATE_ENDED) {
                emit(self.options.event + stateStr(state));
            }
        },

        /**
         * Check that all the require failure recognizers has failed,
         * if true, it emits a gesture event,
         * otherwise, setup the state to FAILED.
         * @param {Object} input
         */
        tryEmit: function (input) {
            if (this.canEmit()) {
                return this.emit(input);
            }
            // it's failing anyway
            this.state = STATE_FAILED;
        },

        /**
         * can we emit?
         * @returns {boolean}
         */
        canEmit: function () {
            var i = 0;
            while (i < this.requireFail.length) {
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
                    return false;
                }
                i++;
            }
            return true;
        },

        /**
         * update the recognizer
         * @param {Object} inputData
         */
        recognize: function (inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);

            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }

            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
                this.state = STATE_POSSIBLE;
            }

            this.state = this.process(inputDataClone);

            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                this.tryEmit(inputDataClone);
            }
        },

        /**
         * return the state of the recognizer
         * the actual recognizing happens in this method
         * @virtual
         * @param {Object} inputData
         * @returns {Const} STATE
         */
        process: function (inputData) {
        }, // jshint ignore:line

        /**
         * return the preferred touch-action
         * @virtual
         * @returns {Array}
         */
        getTouchAction: function () {
        },

        /**
         * called when the gesture isn't allowed to recognize
         * like when another is being recognized or it is disabled
         * @virtual
         */
        reset: function () {
        }
    };

    /**
     * get a usable string, used as event postfix
     * @param {Const} state
     * @returns {String} state
     */
    function stateStr(state) {
        if (state & STATE_CANCELLED) {
            return 'cancel';
        } else if (state & STATE_ENDED) {
            return 'end';
        } else if (state & STATE_CHANGED) {
            return 'move';
        } else if (state & STATE_BEGAN) {
            return 'start';
        }
        return '';
    }

    /**
     * direction cons to string
     * @param {Const} direction
     * @returns {String}
     */
    function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
            return 'down';
        } else if (direction == DIRECTION_UP) {
            return 'up';
        } else if (direction == DIRECTION_LEFT) {
            return 'left';
        } else if (direction == DIRECTION_RIGHT) {
            return 'right';
        }
        return '';
    }

    /**
     * get a recognizer by name if it is bound to a manager
     * @param {Recognizer|String} otherRecognizer
     * @param {Recognizer} recognizer
     * @returns {Recognizer}
     */
    function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
            return manager.get(otherRecognizer);
        }
        return otherRecognizer;
    }

    /**
     * This recognizer is just used as a base for the simple attribute recognizers.
     * @constructor
     * @extends Recognizer
     */
    function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }

    inherit(AttrRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof AttrRecognizer
         */
        defaults: {
            /**
             * @type {Number}
             * @default 1
             */
            pointers: 1
        },

        /**
         * Used to check if it the recognizer receives valid input, like input.distance > 10.
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {Boolean} recognized
         */
        attrTest: function (input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },

        /**
         * Process the input and return the state for the recognizer
         * @memberof AttrRecognizer
         * @param {Object} input
         * @returns {*} State
         */
        process: function (input) {
            var state = this.state;
            var eventType = input.eventType;

            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);

            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
                return state | STATE_CANCELLED;
            } else if (isRecognized || isValid) {
                if (eventType & INPUT_END) {
                    return state | STATE_ENDED;
                } else if (!(state & STATE_BEGAN)) {
                    return STATE_BEGAN;
                }
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });

    /**
     * Pan
     * Recognized when the pointer is down and moved in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);

        this.pX = null;
        this.pY = null;
    }

    inherit(PanRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PanRecognizer
         */
        defaults: {
            event: 'pan',
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },

        getTouchAction: function () {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) {
                actions.push(TOUCH_ACTION_PAN_Y);
            }
            if (direction & DIRECTION_VERTICAL) {
                actions.push(TOUCH_ACTION_PAN_X);
            }
            return actions;
        },

        directionTest: function (input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;

            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },

        attrTest: function (input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) &&
                (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
        },

        emit: function (input) {

            this.pX = input.deltaX;
            this.pY = input.deltaY;

            var direction = directionStr(input.direction);

            if (direction) {
                input.additionalEvent = this.options.event + direction;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Pinch
     * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
     * @constructor
     * @extends AttrRecognizer
     */
    function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(PinchRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'pinch',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function (input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },

        emit: function (input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? 'in' : 'out';
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });

    /**
     * Press
     * Recognized when the pointer is down for x ms without any movement.
     * @constructor
     * @extends Recognizer
     */
    function PressRecognizer() {
        Recognizer.apply(this, arguments);

        this._timer = null;
        this._input = null;
    }

    inherit(PressRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PressRecognizer
         */
        defaults: {
            event: 'press',
            pointers: 1,
            time: 251, // minimal time of the pointer to be pressed
            threshold: 9 // a minimal movement is ok, but keep it low
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_AUTO];
        },

        process: function (input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;

            this._input = input;

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
                this.reset();
            } else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function () {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) {
                return STATE_RECOGNIZED;
            }
            return STATE_FAILED;
        },

        reset: function () {
            clearTimeout(this._timer);
        },

        emit: function (input) {
            if (this.state !== STATE_RECOGNIZED) {
                return;
            }

            if (input && (input.eventType & INPUT_END)) {
                this.manager.emit(this.options.event + 'up', input);
            } else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Rotate
     * Recognized when two or more pointer are moving in a circular motion.
     * @constructor
     * @extends AttrRecognizer
     */
    function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(RotateRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof RotateRecognizer
         */
        defaults: {
            event: 'rotate',
            threshold: 0,
            pointers: 2
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_NONE];
        },

        attrTest: function (input) {
            return this._super.attrTest.call(this, input) &&
                (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });

    /**
     * Swipe
     * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
     * @constructor
     * @extends AttrRecognizer
     */
    function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }

    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
         * @namespace
         * @memberof SwipeRecognizer
         */
        defaults: {
            event: 'swipe',
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },

        getTouchAction: function () {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },

        attrTest: function (input) {
            var direction = this.options.direction;
            var velocity;

            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
                velocity = input.overallVelocity;
            } else if (direction & DIRECTION_HORIZONTAL) {
                velocity = input.overallVelocityX;
            } else if (direction & DIRECTION_VERTICAL) {
                velocity = input.overallVelocityY;
            }

            return this._super.attrTest.call(this, input) &&
                direction & input.offsetDirection &&
                input.distance > this.options.threshold &&
                input.maxPointers == this.options.pointers &&
                abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },

        emit: function (input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) {
                this.manager.emit(this.options.event + direction, input);
            }

            this.manager.emit(this.options.event, input);
        }
    });

    /**
     * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
     * between the given interval and position. The delay option can be used to recognize multi-taps without firing
     * a single tap.
     *
     * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
     * multi-taps being recognized.
     * @constructor
     * @extends Recognizer
     */
    function TapRecognizer() {
        Recognizer.apply(this, arguments);

        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;

        this._timer = null;
        this._input = null;
        this.count = 0;
    }

    inherit(TapRecognizer, Recognizer, {
        /**
         * @namespace
         * @memberof PinchRecognizer
         */
        defaults: {
            event: 'tap',
            pointers: 1,
            taps: 1,
            interval: 300, // max time between the multi-tap taps
            time: 250, // max time of the pointer to be down (like finger on the screen)
            threshold: 9, // a minimal movement is ok, but keep it low
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },

        getTouchAction: function () {
            return [TOUCH_ACTION_MANIPULATION];
        },

        process: function (input) {
            var options = this.options;

            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;

            this.reset();

            if ((input.eventType & INPUT_START) && (this.count === 0)) {
                return this.failTimeout();
            }

            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) {
                    return this.failTimeout();
                }

                var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

                this.pTime = input.timeStamp;
                this.pCenter = input.center;

                if (!validMultiTap || !validInterval) {
                    this.count = 1;
                } else {
                    this.count += 1;
                }

                this._input = input;

                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) {
                        return STATE_RECOGNIZED;
                    } else {
                        this._timer = setTimeoutContext(function () {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },

        failTimeout: function () {
            this._timer = setTimeoutContext(function () {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },

        reset: function () {
            clearTimeout(this._timer);
        },

        emit: function () {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });

    /**
     * Simple way to create a manager with a default set of recognizers.
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }

    /**
     * @const {string}
     */
    Hammer.VERSION = '2.0.6';

    /**
     * default settings
     * @namespace
     */
    Hammer.defaults = {
        /**
         * set if DOM events are being triggered.
         * But this is slower and unused by simple implementations, so disabled by default.
         * @type {Boolean}
         * @default false
         */
        domEvents: false,

        /**
         * The value for the touchAction property/fallback.
         * When set to `compute` it will magically set the correct value based on the added recognizers.
         * @type {String}
         * @default compute
         */
        touchAction: TOUCH_ACTION_COMPUTE,

        /**
         * @type {Boolean}
         * @default true
         */
        enable: true,

        /**
         * EXPERIMENTAL FEATURE -- can be removed/changed
         * Change the parent input target element.
         * If Null, then it is being set the to main element.
         * @type {Null|EventTarget}
         * @default null
         */
        inputTarget: null,

        /**
         * force an input class
         * @type {Null|Function}
         * @default null
         */
        inputClass: null,

        /**
         * Default recognizer setup when calling `Hammer()`
         * When creating a new Manager these will be skipped.
         * @type {Array}
         */
        preset: [
            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
            [RotateRecognizer, {enable: false}],
            [PinchRecognizer, {enable: false}, ['rotate']],
            [SwipeRecognizer, {direction: DIRECTION_ALL}],
            [PanRecognizer, {direction: DIRECTION_ALL}, ['swipe']],
            [TapRecognizer],
            [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
            [PressRecognizer]
        ],

        /**
         * Some CSS properties can be used to improve the working of Hammer.
         * Add them to this method and they will be set when creating a new Manager.
         * @namespace
         */
        cssProps: {
            /**
             * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userSelect: 'none',

            /**
             * Disable the Windows Phone grippers when pressing an element.
             * @type {String}
             * @default 'none'
             */
            touchSelect: 'none',

            /**
             * Disables the default callout shown when you touch and hold a touch target.
             * On iOS, when you touch and hold a touch target such as a link, Safari displays
             * a callout containing information about the link. This property allows you to disable that callout.
             * @type {String}
             * @default 'none'
             */
            touchCallout: 'none',

            /**
             * Specifies whether zooming is enabled. Used by IE10>
             * @type {String}
             * @default 'none'
             */
            contentZooming: 'none',

            /**
             * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
             * @type {String}
             * @default 'none'
             */
            userDrag: 'none',

            /**
             * Overrides the highlight color shown when the user taps a link or a JavaScript
             * clickable element in iOS. This property obeys the alpha value, if specified.
             * @type {String}
             * @default 'rgba(0,0,0,0)'
             */
            tapHighlightColor: 'rgba(0,0,0,0)'
        }
    };

    var STOP = 1;
    var FORCED_STOP = 2;

    /**
     * Manager
     * @param {HTMLElement} element
     * @param {Object} [options]
     * @constructor
     */
    function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});

        this.options.inputTarget = this.options.inputTarget || element;

        this.handlers = {};
        this.session = {};
        this.recognizers = [];

        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);

        toggleCssProps(this, true);

        each(this.options.recognizers, function (item) {
            var recognizer = this.add(new (item[0])(item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }

    Manager.prototype = {
        /**
         * set options
         * @param {Object} options
         * @returns {Manager}
         */
        set: function (options) {
            assign(this.options, options);

            // Options that need a little more setup
            if (options.touchAction) {
                this.touchAction.update();
            }
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },

        /**
         * stop recognizing for this session.
         * This session will be discarded, when a new [input]start event is fired.
         * When forced, the recognizer cycle is stopped immediately.
         * @param {Boolean} [force]
         */
        stop: function (force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },

        /**
         * run the recognizers!
         * called by the inputHandler function on every movement of the pointers (touches)
         * it walks through all the recognizers and tries to detect the gesture that is being made
         * @param {Object} inputData
         */
        recognize: function (inputData) {
            var session = this.session;
            if (session.stopped) {
                return;
            }

            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);

            var recognizer;
            var recognizers = this.recognizers;

            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;

            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
                curRecognizer = session.curRecognizer = null;
            }

            var i = 0;
            while (i < recognizers.length) {
                recognizer = recognizers[i];

                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && ( // 1
                    !curRecognizer || recognizer == curRecognizer || // 2
                    recognizer.canRecognizeWith(curRecognizer))) { // 3
                    recognizer.recognize(inputData);
                } else {
                    recognizer.reset();
                }

                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                    curRecognizer = session.curRecognizer = recognizer;
                }
                i++;
            }
        },

        /**
         * get a recognizer by its event name.
         * @param {Recognizer|String} recognizer
         * @returns {Recognizer|Null}
         */
        get: function (recognizer) {
            if (recognizer instanceof Recognizer) {
                return recognizer;
            }

            var recognizers = this.recognizers;
            for (var i = 0; i < recognizers.length; i++) {
                if (recognizers[i].options.event == recognizer) {
                    return recognizers[i];
                }
            }
            return null;
        },

        /**
         * add a recognizer to the manager
         * existing recognizers with the same event name will be removed
         * @param {Recognizer} recognizer
         * @returns {Recognizer|Manager}
         */
        add: function (recognizer) {
            if (invokeArrayArg(recognizer, 'add', this)) {
                return this;
            }

            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) {
                this.remove(existing);
            }

            this.recognizers.push(recognizer);
            recognizer.manager = this;

            this.touchAction.update();
            return recognizer;
        },

        /**
         * remove a recognizer by name or instance
         * @param {Recognizer|String} recognizer
         * @returns {Manager}
         */
        remove: function (recognizer) {
            if (invokeArrayArg(recognizer, 'remove', this)) {
                return this;
            }

            recognizer = this.get(recognizer);

            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);

                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }

            return this;
        },

        /**
         * bind event
         * @param {String} events
         * @param {Function} handler
         * @returns {EventEmitter} this
         */
        on: function (events, handler) {
            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },

        /**
         * unbind event, leave emit blank to remove all handlers
         * @param {String} events
         * @param {Function} [handler]
         * @returns {EventEmitter} this
         */
        off: function (events, handler) {
            var handlers = this.handlers;
            each(splitStr(events), function (event) {
                if (!handler) {
                    delete handlers[event];
                } else {
                    handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
                }
            });
            return this;
        },

        /**
         * emit event to the listeners
         * @param {String} event
         * @param {Object} data
         */
        emit: function (event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) {
                triggerDomEvent(event, data);
            }

            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) {
                return;
            }

            data.type = event;
            data.preventDefault = function () {
                data.srcEvent.preventDefault();
            };

            var i = 0;
            while (i < handlers.length) {
                handlers[i](data);
                i++;
            }
        },

        /**
         * destroy the manager and unbinds all events
         * it doesn't unbind dom events, that is the user own responsibility
         */
        destroy: function () {
            this.element && toggleCssProps(this, false);

            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };

    /**
     * add/remove the css properties as defined in manager.options.cssProps
     * @param {Manager} manager
     * @param {Boolean} add
     */
    function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) {
            return;
        }
        each(manager.options.cssProps, function (value, name) {
            element.style[prefixed(element.style, name)] = add ? value : '';
        });
    }

    /**
     * trigger dom event
     * @param {String} event
     * @param {Object} data
     */
    function triggerDomEvent(event, data) {
        var gestureEvent = document.createEvent('Event');
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }

    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,

        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,

        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,

        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,

        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,

        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,

        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });

// this prevents errors when Hammer is loaded in the presence of an AMD
//  style loader but by script tag, not by the loader.

    var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
    freeGlobal.Hammer = Hammer;

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return Hammer;
        });
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = Hammer;
    } else {
        window[exportName] = Hammer;
    }

})(window, document, 'Hammer');


/*! iScroll v5.0.6 ~ (c) 2008-2013 Matteo Spinelli ~ http://cubiq.org/license */
var IScroll = (function (window, document, Math) {
    var rAF = window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };

    var utils = (function () {
        var me = {};

        var _elementStyle = document.createElement('div').style;
        var _vendor = (function () {
            var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
                transform,
                i = 0,
                l = vendors.length;

            for (; i < l; i++) {
                transform = vendors[i] + 'ransform';
                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
            }

            return false;
        })();

        function _prefixStyle(style) {
            if (_vendor === false) return false;
            if (_vendor === '') return style;
            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        }

        me.getTime = Date.now || function getTime() {
                return new Date().getTime();
            };

        me.extend = function (target, obj) {
            for (var i in obj) {
                target[i] = obj[i];
            }
        };

        me.addEvent = function (el, type, fn, capture) {
            el.addEventListener(type, fn, !!capture);
        };

        me.removeEvent = function (el, type, fn, capture) {
            el.removeEventListener(type, fn, !!capture);
        };

        me.momentum = function (current, start, time, lowerMargin, wrapperSize) {
            var distance = current - start,
                speed = Math.abs(distance) / time,
                destination,
                duration,
                deceleration = 0.0006;

            destination = current + ( speed * speed ) / ( 2 * deceleration ) * ( distance < 0 ? -1 : 1 );
            duration = speed / deceleration;

            if (destination < lowerMargin) {
                destination = wrapperSize ? lowerMargin - ( wrapperSize / 2.5 * ( speed / 8 ) ) : lowerMargin;
                distance = Math.abs(destination - current);
                duration = distance / speed;
            } else if (destination > 0) {
                destination = wrapperSize ? wrapperSize / 2.5 * ( speed / 8 ) : 0;
                distance = Math.abs(current) + destination;
                duration = distance / speed;
            }

            return {
                destination: Math.round(destination),
                duration: duration
            };
        };

        var _transform = _prefixStyle('transform');

        me.extend(me, {
            hasTransform: _transform !== false,
            hasPerspective: _prefixStyle('perspective') in _elementStyle,
            hasTouch: 'ontouchstart' in window,
            hasPointer: navigator.msPointerEnabled,
            hasTransition: _prefixStyle('transition') in _elementStyle
        });

        me.isAndroidBrowser = /Android/.test(window.navigator.appVersion) && /Version\/\d/.test(window.navigator.appVersion);

        me.extend(me.style = {}, {
            transform: _transform,
            transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
            transitionDuration: _prefixStyle('transitionDuration'),
            transformOrigin: _prefixStyle('transformOrigin')
        });

        me.hasClass = function (e, c) {
            var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
            return re.test(e.className);
        };

        me.addClass = function (e, c) {
            if (me.hasClass(e, c)) {
                return;
            }

            var newclass = e.className.split(' ');
            newclass.push(c);
            e.className = newclass.join(' ');
        };

        me.removeClass = function (e, c) {
            if (!me.hasClass(e, c)) {
                return;
            }

            var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
            e.className = e.className.replace(re, ' ');
        };

        me.offset = function (el) {
            var left = -el.offsetLeft,
                top = -el.offsetTop;

            // jshint -W084
            while (el = el.offsetParent) {
                left -= el.offsetLeft;
                top -= el.offsetTop;
            }
            // jshint +W084

            return {
                left: left,
                top: top
            };
        };

        me.preventDefaultException = function (el, exceptions) {
            for (var i in exceptions) {
                if (exceptions[i].test(el[i])) {
                    return true;
                }
            }

            return false;
        };

        me.extend(me.eventType = {}, {
            touchstart: 1,
            touchmove: 1,
            touchend: 1,

            mousedown: 2,
            mousemove: 2,
            mouseup: 2,

            MSPointerDown: 3,
            MSPointerMove: 3,
            MSPointerUp: 3
        });

        me.extend(me.ease = {}, {
            quadratic: {
                style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                fn: function (k) {
                    return k * ( 2 - k );
                }
            },
            circular: {
                style: 'cubic-bezier(0.1, 0.57, 0.1, 1)',	// Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
                fn: function (k) {
                    return Math.sqrt(1 - ( --k * k ));
                }
            },
            back: {
                style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                fn: function (k) {
                    var b = 4;
                    return ( k = k - 1 ) * k * ( ( b + 1 ) * k + b ) + 1;
                }
            },
            bounce: {
                style: '',
                fn: function (k) {
                    if (( k /= 1 ) < ( 1 / 2.75 )) {
                        return 7.5625 * k * k;
                    } else if (k < ( 2 / 2.75 )) {
                        return 7.5625 * ( k -= ( 1.5 / 2.75 ) ) * k + 0.75;
                    } else if (k < ( 2.5 / 2.75 )) {
                        return 7.5625 * ( k -= ( 2.25 / 2.75 ) ) * k + 0.9375;
                    } else {
                        return 7.5625 * ( k -= ( 2.625 / 2.75 ) ) * k + 0.984375;
                    }
                }
            },
            elastic: {
                style: '',
                fn: function (k) {
                    var f = 0.22,
                        e = 0.4;

                    if (k === 0) {
                        return 0;
                    }
                    if (k == 1) {
                        return 1;
                    }

                    return ( e * Math.pow(2, -10 * k) * Math.sin(( k - f / 4 ) * ( 2 * Math.PI ) / f) + 1 );
                }
            }
        });

        me.tap = function (e, eventName) {
            var ev = document.createEvent('Event');
            ev.initEvent(eventName, true, true);
            ev.pageX = e.pageX;
            ev.pageY = e.pageY;
            e.target.dispatchEvent(ev);
        };

        me.click = function (e) {
            var target = e.target,
                ev;

            if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {
                ev = document.createEvent('MouseEvents');
                ev.initMouseEvent('click', true, true, e.view, 1,
                    target.screenX, target.screenY, target.clientX, target.clientY,
                    e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,
                    0, null);

                ev._constructed = true;
                target.dispatchEvent(ev);
            }
        };

        return me;
    })();

    function IScroll(el, options) {
        this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
        this.scroller = this.wrapper.children[0];
        this.scrollerStyle = this.scroller.style;		// cache style for better performance

        this.options = {

// INSERT POINT: OPTIONS

            startX: 0,
            startY: 0,
            scrollY: true,
            directionLockThreshold: 5,
            momentum: true,

            bounce: true,
            bounceTime: 600,
            bounceEasing: '',

            preventDefault: true,
            preventDefaultException: {tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/},

            HWCompositing: true,
            useTransition: true,
            useTransform: true
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        // Normalize options
        this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

        this.options.useTransition = utils.hasTransition && this.options.useTransition;
        this.options.useTransform = utils.hasTransform && this.options.useTransform;

        this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
        this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

        // If you want eventPassthrough I have to lock one of the axes
        this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
        this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

        // With eventPassthrough we also need lockDirection mechanism
        this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
        this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

        this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

        this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

        if (this.options.tap === true) {
            this.options.tap = 'tap';
        }

// INSERT POINT: NORMALIZATION

        // Some defaults
        this.x = 0;
        this.y = 0;
        this.directionX = 0;
        this.directionY = 0;
        this._events = {};

// INSERT POINT: DEFAULTS

        this._init();
        this.refresh();

        this.scrollTo(this.options.startX, this.options.startY);
        this.enable();
    }

    IScroll.prototype = {
        version: '5.0.6',

        _init: function () {
            this._initEvents();

// INSERT POINT: _init

        },

        destroy: function () {
            this._initEvents(true);

            this._execEvent('destroy');
        },

        _transitionEnd: function (e) {
            if (e.target != this.scroller) {
                return;
            }

            this._transitionTime(0);
            if (!this.resetPosition(this.options.bounceTime)) {
                this._execEvent('scrollEnd');
            }
        },

        _start: function (e) {
            // React to left mouse button only
            if (utils.eventType[e.type] != 1) {
                if (e.button !== 0) {
                    return;
                }
            }

            if (!this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated)) {
                return;
            }

            if (this.options.preventDefault && !utils.isAndroidBrowser && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();		// This seems to break default Android browser
            }

            var point = e.touches ? e.touches[0] : e,
                pos;

            this.initiated = utils.eventType[e.type];
            this.moved = false;
            this.distX = 0;
            this.distY = 0;
            this.directionX = 0;
            this.directionY = 0;
            this.directionLocked = 0;

            this._transitionTime();

            this.isAnimating = false;
            this.startTime = utils.getTime();

            if (this.options.useTransition && this.isInTransition) {
                pos = this.getComputedPosition();

                this._translate(Math.round(pos.x), Math.round(pos.y));
                this._execEvent('scrollEnd');
                this.isInTransition = false;
            }

            this.startX = this.x;
            this.startY = this.y;
            this.absStartX = this.x;
            this.absStartY = this.y;
            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this._execEvent('beforeScrollStart');
        },

        _move: function (e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault) {	// increases performance on Android? TODO: check!
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
                deltaX = point.pageX - this.pointX,
                deltaY = point.pageY - this.pointY,
                timestamp = utils.getTime(),
                newX, newY,
                absDistX, absDistY;

            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this.distX += deltaX;
            this.distY += deltaY;
            absDistX = Math.abs(this.distX);
            absDistY = Math.abs(this.distY);

            // We need to move at least 10 pixels for the scrolling to initiate
            if (timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10)) {
                return;
            }

            // If you are scrolling in one direction lock the other
            if (!this.directionLocked && !this.options.freeScroll) {
                if (absDistX > absDistY + this.options.directionLockThreshold) {
                    this.directionLocked = 'h';		// lock horizontally
                } else if (absDistY >= absDistX + this.options.directionLockThreshold) {
                    this.directionLocked = 'v';		// lock vertically
                } else {
                    this.directionLocked = 'n';		// no lock
                }
            }

            if (this.directionLocked == 'h') {
                if (this.options.eventPassthrough == 'vertical') {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == 'horizontal') {
                    this.initiated = false;
                    return;
                }

                deltaY = 0;
            } else if (this.directionLocked == 'v') {
                if (this.options.eventPassthrough == 'horizontal') {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == 'vertical') {
                    this.initiated = false;
                    return;
                }

                deltaX = 0;
            }

            deltaX = this.hasHorizontalScroll ? deltaX : 0;
            deltaY = this.hasVerticalScroll ? deltaY : 0;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            // Slow down if outside of the boundaries
            if (newX > 0 || newX < this.maxScrollX) {
                newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
            }
            if (newY > 0 || newY < this.maxScrollY) {
                newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
            }

            this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
            this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

            if (!this.moved) {
                this._execEvent('scrollStart');
            }

            this.moved = true;

            this._translate(newX, newY);

            /* REPLACE START: _move */

            if (timestamp - this.startTime > 300) {
                this.startTime = timestamp;
                this.startX = this.x;
                this.startY = this.y;
            }

            /* REPLACE END: _move */

        },

        _end: function (e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();
            }

            var point = e.changedTouches ? e.changedTouches[0] : e,
                momentumX,
                momentumY,
                duration = utils.getTime() - this.startTime,
                newX = Math.round(this.x),
                newY = Math.round(this.y),
                distanceX = Math.abs(newX - this.startX),
                distanceY = Math.abs(newY - this.startY),
                time = 0,
                easing = '';

            this.scrollTo(newX, newY);	// ensures that the last position is rounded

            this.isInTransition = 0;
            this.initiated = 0;
            this.endTime = utils.getTime();

            // reset if we are outside of the boundaries
            if (this.resetPosition(this.options.bounceTime)) {
                return;
            }

            // we scrolled less than 10 pixels
            if (!this.moved) {
                if (this.options.tap) {
                    utils.tap(e, this.options.tap);
                }

                if (this.options.click) {
                    utils.click(e);
                }

                return;
            }

            if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {
                this._execEvent('flick');
                return;
            }

            // start momentum animation if needed
            if (this.options.momentum && duration < 300) {
                momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0) : {
                        destination: newX,
                        duration: 0
                    };
                momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0) : {
                        destination: newY,
                        duration: 0
                    };
                newX = momentumX.destination;
                newY = momentumY.destination;
                time = Math.max(momentumX.duration, momentumY.duration);
                this.isInTransition = 1;
            }

// INSERT POINT: _end

            if (newX != this.x || newY != this.y) {
                // change easing function when scroller goes out of the boundaries
                if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
                    easing = utils.ease.quadratic;
                }

                this.scrollTo(newX, newY, time, easing);
                return;
            }

            this._execEvent('scrollEnd');
        },

        _resize: function () {
            var that = this;

            clearTimeout(this.resizeTimeout);

            this.resizeTimeout = setTimeout(function () {
                that.refresh();
            }, this.options.resizePolling);
        },

        resetPosition: function (time) {
            var x = this.x,
                y = this.y;

            time = time || 0;

            if (!this.hasHorizontalScroll || this.x > 0) {
                x = 0;
            } else if (this.x < this.maxScrollX) {
                x = this.maxScrollX;
            }

            if (!this.hasVerticalScroll || this.y > 0) {
                y = 0;
            } else if (this.y < this.maxScrollY) {
                y = this.maxScrollY;
            }

            if (x == this.x && y == this.y) {
                return false;
            }

            this.scrollTo(x, y, time, this.options.bounceEasing);

            return true;
        },

        disable: function () {
            this.enabled = false;
        },

        enable: function () {
            this.enabled = true;
        },

        refresh: function () {
            var rf = this.wrapper.offsetHeight;		// Force reflow

            this.wrapperWidth = this.wrapper.clientWidth;
            this.wrapperHeight = this.wrapper.clientHeight;

            /* REPLACE START: refresh */

            this.scrollerWidth = this.scroller.offsetWidth;
            this.scrollerHeight = this.scroller.offsetHeight;

            /* REPLACE END: refresh */

            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
            this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

            this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
            this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;

            if (!this.hasHorizontalScroll) {
                this.maxScrollX = 0;
                this.scrollerWidth = this.wrapperWidth;
            }

            if (!this.hasVerticalScroll) {
                this.maxScrollY = 0;
                this.scrollerHeight = this.wrapperHeight;
            }

            this.endTime = 0;
            this.directionX = 0;
            this.directionY = 0;

            this.wrapperOffset = utils.offset(this.wrapper);

            this._execEvent('refresh');

            this.resetPosition();

// INSERT POINT: _refresh

        },

        on: function (type, fn) {
            if (!this._events[type]) {
                this._events[type] = [];
            }

            this._events[type].push(fn);
        },

        _execEvent: function (type) {
            if (!this._events[type]) {
                return;
            }

            var i = 0,
                l = this._events[type].length;

            if (!l) {
                return;
            }

            for (; i < l; i++) {
                this._events[type][i].call(this);
            }
        },

        scrollBy: function (x, y, time, easing) {
            x = this.x + x;
            y = this.y + y;
            time = time || 0;

            this.scrollTo(x, y, time, easing);
        },

        scrollTo: function (x, y, time, easing) {
            easing = easing || utils.ease.circular;

            if (!time || (this.options.useTransition && easing.style)) {
                this._transitionTimingFunction(easing.style);
                this._transitionTime(time);
                this._translate(x, y);
            } else {
                this._animate(x, y, time, easing.fn);
            }
        },

        scrollToElement: function (el, time, offsetX, offsetY, easing) {
            el = el.nodeType ? el : this.scroller.querySelector(el);

            if (!el) {
                return;
            }

            var pos = utils.offset(el);

            pos.left -= this.wrapperOffset.left;
            pos.top -= this.wrapperOffset.top;

            // if offsetX/Y are true we center the element to the screen
            if (offsetX === true) {
                offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
            }
            if (offsetY === true) {
                offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
            }

            pos.left -= offsetX || 0;
            pos.top -= offsetY || 0;

            pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
            pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;

            time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;

            this.scrollTo(pos.left, pos.top, time, easing);
        },

        _transitionTime: function (time) {
            time = time || 0;
            this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';

// INSERT POINT: _transitionTime

        },

        _transitionTimingFunction: function (easing) {
            this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

// INSERT POINT: _transitionTimingFunction

        },

        _translate: function (x, y) {
            if (this.options.useTransform) {

                /* REPLACE START: _translate */

                this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

                /* REPLACE END: _translate */

            } else {
                x = Math.round(x);
                y = Math.round(y);
                this.scrollerStyle.left = x + 'px';
                this.scrollerStyle.top = y + 'px';
            }

            this.x = x;
            this.y = y;

// INSERT POINT: _translate

        },

        _initEvents: function (remove) {
            var eventType = remove ? utils.removeEvent : utils.addEvent,
                target = this.options.bindToWrapper ? this.wrapper : window;

            eventType(window, 'orientationchange', this);
            eventType(window, 'resize', this);

            if (this.options.click) {
                eventType(this.wrapper, 'click', this, true);
            }

            if (!this.options.disableMouse) {
                eventType(this.wrapper, 'mousedown', this);
                eventType(target, 'mousemove', this);
                eventType(target, 'mousecancel', this);
                eventType(target, 'mouseup', this);
            }

            if (utils.hasPointer && !this.options.disablePointer) {
                eventType(this.wrapper, 'MSPointerDown', this);
                eventType(target, 'MSPointerMove', this);
                eventType(target, 'MSPointerCancel', this);
                eventType(target, 'MSPointerUp', this);
            }

            if (utils.hasTouch && !this.options.disableTouch) {
                eventType(this.wrapper, 'touchstart', this);
                eventType(target, 'touchmove', this);
                eventType(target, 'touchcancel', this);
                eventType(target, 'touchend', this);
            }

            eventType(this.scroller, 'transitionend', this);
            eventType(this.scroller, 'webkitTransitionEnd', this);
            eventType(this.scroller, 'oTransitionEnd', this);
            eventType(this.scroller, 'MSTransitionEnd', this);
        },

        getComputedPosition: function () {
            var matrix = window.getComputedStyle(this.scroller, null),
                x, y;

            if (this.options.useTransform) {
                matrix = matrix[utils.style.transform].split(')')[0].split(', ');
                x = +(matrix[12] || matrix[4]);
                y = +(matrix[13] || matrix[5]);
            } else {
                x = +matrix.left.replace(/[^-\d]/g, '');
                y = +matrix.top.replace(/[^-\d]/g, '');
            }

            return {x: x, y: y};
        },

        _animate: function (destX, destY, duration, easingFn) {
            var that = this,
                startX = this.x,
                startY = this.y,
                startTime = utils.getTime(),
                destTime = startTime + duration;

            function step() {
                var now = utils.getTime(),
                    newX, newY,
                    easing;

                if (now >= destTime) {
                    that.isAnimating = false;
                    that._translate(destX, destY);

                    if (!that.resetPosition(that.options.bounceTime)) {
                        that._execEvent('scrollEnd');
                    }

                    return;
                }

                now = ( now - startTime ) / duration;
                easing = easingFn(now);
                newX = ( destX - startX ) * easing + startX;
                newY = ( destY - startY ) * easing + startY;
                that._translate(newX, newY);

                if (that.isAnimating) {
                    rAF(step);
                }
            }

            this.isAnimating = true;
            step();
        },
        handleEvent: function (e) {
            switch (e.type) {
                case 'touchstart':
                case 'MSPointerDown':
                case 'mousedown':
                    this._start(e);
                    break;
                case 'touchmove':
                case 'MSPointerMove':
                case 'mousemove':
                    this._move(e);
                    break;
                case 'touchend':
                case 'MSPointerUp':
                case 'mouseup':
                case 'touchcancel':
                case 'MSPointerCancel':
                case 'mousecancel':
                    this._end(e);
                    break;
                case 'orientationchange':
                case 'resize':
                    this._resize();
                    break;
                case 'transitionend':
                case 'webkitTransitionEnd':
                case 'oTransitionEnd':
                case 'MSTransitionEnd':
                    this._transitionEnd(e);
                    break;
                case 'DOMMouseScroll':
                case 'mousewheel':
                    this._wheel(e);
                    break;
                case 'keydown':
                    this._key(e);
                    break;
                case 'click':
                    if (!e._constructed) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    break;
            }
        }
    };
    IScroll.ease = utils.ease;

    return IScroll;

})(window, document, Math);
/**
 * MicroEvent - to make any js object an event emitter (server or browser)
 *
 * - pure javascript - server compatible, browser compatible
 * - dont rely on the browser doms
 * - super simple - you get it immediatly, no mistery, no magic involved
 *
 * - create a MicroEventDebug with goodies to debug
 *   - make it safer to use
 */

/** NOTE: This library is customized for Onsen UI. */

var MicroEvent = function () {
};
MicroEvent.prototype = {
    on: function (event, fct) {
        this._events = this._events || {};
        this._events[event] = this._events[event] || [];
        this._events[event].push(fct);
    },
    once: function (event, fct) {
        var self = this;
        var wrapper = function () {
            self.off(event, wrapper);
            return fct.apply(null, arguments);
        };
        this.on(event, wrapper);
    },
    off: function (event, fct) {
        this._events = this._events || {};
        if (event in this._events === false)  return;
        this._events[event].splice(this._events[event].indexOf(fct), 1);
    },
    emit: function (event /* , args... */) {
        this._events = this._events || {};
        if (event in this._events === false)  return;
        for (var i = 0; i < this._events[event].length; i++) {
            this._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    }
};

/**
 * mixin will delegate all MicroEvent.js function in the destination object
 *
 * - require('MicroEvent').mixin(Foobar) will make Foobar able to use MicroEvent
 *
 * @param {Object} the object which will support MicroEvent
 */
MicroEvent.mixin = function (destObject) {
    var props = ['on', 'once', 'off', 'emit'];
    for (var i = 0; i < props.length; i++) {
        if (typeof destObject === 'function') {
            destObject.prototype[props[i]] = MicroEvent.prototype[props[i]];
        } else {
            destObject[props[i]] = MicroEvent.prototype[props[i]];
        }
    }
}

// export in common js
if (typeof module !== "undefined" && ('exports' in module)) {
    module.exports = MicroEvent;
}

/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-borderradius-boxshadow-cssanimations-csstransforms-csstransforms3d-csstransitions-canvas-svg-shiv-cssclasses-teststyles-testprop-testallprops-prefixes-domprefixes-load
 */
;


window.Modernizr = (function (window, document, undefined) {

    var version = '2.6.2',

        Modernizr = {},

        enableClasses = true,

        docElement = document.documentElement,

        mod = 'modernizr',
        modElem = document.createElement(mod),
        mStyle = modElem.style,

        inputElem,


        toString = {}.toString,

        prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),


        omPrefixes = 'Webkit Moz O ms',

        cssomPrefixes = omPrefixes.split(' '),

        domPrefixes = omPrefixes.toLowerCase().split(' '),

        ns = {'svg': 'http://www.w3.org/2000/svg'},

        tests = {},
        inputs = {},
        attrs = {},

        classes = [],

        slice = classes.slice,

        featureName,


        injectElementWithStyles = function (rule, callback, nodes, testnames) {

            var style, ret, node, docOverflow,
                div = document.createElement('div'),
                body = document.body,
                fakeBody = body || document.createElement('body');

            if (parseInt(nodes, 10)) {
                while (nodes--) {
                    node = document.createElement('div');
                    node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                    div.appendChild(node);
                }
            }

            style = ['&#173;', '<style id="s', mod, '">', rule, '</style>'].join('');
            div.id = mod;
            (body ? div : fakeBody).innerHTML += style;
            fakeBody.appendChild(div);
            if (!body) {
                fakeBody.style.background = '';
                fakeBody.style.overflow = 'hidden';
                docOverflow = docElement.style.overflow;
                docElement.style.overflow = 'hidden';
                docElement.appendChild(fakeBody);
            }

            ret = callback(div, rule);
            if (!body) {
                fakeBody.parentNode.removeChild(fakeBody);
                docElement.style.overflow = docOverflow;
            } else {
                div.parentNode.removeChild(div);
            }

            return !!ret;

        },
        _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;

    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
        hasOwnProp = function (object, property) {
            return _hasOwnProperty.call(object, property);
        };
    }
    else {
        hasOwnProp = function (object, property) {
            return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
        };
    }


    if (!Function.prototype.bind) {
        Function.prototype.bind = function bind(that) {

            var target = this;

            if (typeof target != "function") {
                throw new TypeError();
            }

            var args = slice.call(arguments, 1),
                bound = function () {

                    if (this instanceof bound) {

                        var F = function () {
                        };
                        F.prototype = target.prototype;
                        var self = new F();

                        var result = target.apply(
                            self,
                            args.concat(slice.call(arguments))
                        );
                        if (Object(result) === result) {
                            return result;
                        }
                        return self;

                    } else {

                        return target.apply(
                            that,
                            args.concat(slice.call(arguments))
                        );

                    }

                };

            return bound;
        };
    }

    function setCss(str) {
        mStyle.cssText = str;
    }

    function setCssAll(str1, str2) {
        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));
    }

    function is(obj, type) {
        return typeof obj === type;
    }

    function contains(str, substr) {
        return !!~('' + str).indexOf(substr);
    }

    function testProps(props, prefixed) {
        for (var i in props) {
            var prop = props[i];
            if (!contains(prop, "-") && mStyle[prop] !== undefined) {
                return prefixed == 'pfx' ? prop : true;
            }
        }
        return false;
    }

    function testDOMProps(props, obj, elem) {
        for (var i in props) {
            var item = obj[props[i]];
            if (item !== undefined) {

                if (elem === false) return props[i];

                if (is(item, 'function')) {
                    return item.bind(elem || obj);
                }

                return item;
            }
        }
        return false;
    }

    function testPropsAll(prop, prefixed, elem) {

        var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
            props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        if (is(prefixed, "string") || is(prefixed, "undefined")) {
            return testProps(props, prefixed);

        } else {
            props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
            return testDOMProps(props, prefixed, elem);
        }
    }


    tests['canvas'] = function () {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    };
    tests['borderradius'] = function () {
        return testPropsAll('borderRadius');
    };

    tests['boxshadow'] = function () {
        return testPropsAll('boxShadow');
    };
    tests['cssanimations'] = function () {
        return testPropsAll('animationName');
    };


    tests['csstransforms'] = function () {
        return !!testPropsAll('transform');
    };


    tests['csstransforms3d'] = function () {

        var ret = !!testPropsAll('perspective');

        if (ret && 'webkitPerspective' in docElement.style) {

            injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node, rule) {
                ret = node.offsetLeft === 9 && node.offsetHeight === 3;
            });
        }
        return ret;
    };


    tests['csstransitions'] = function () {
        return testPropsAll('transition');
    };


    tests['svg'] = function () {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
    };
    for (var feature in tests) {
        if (hasOwnProp(tests, feature)) {
            featureName = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }


    Modernizr.addTest = function (feature, test) {
        if (typeof feature == 'object') {
            for (var key in feature) {
                if (hasOwnProp(feature, key)) {
                    Modernizr.addTest(key, feature[key]);
                }
            }
        } else {

            feature = feature.toLowerCase();

            if (Modernizr[feature] !== undefined) {
                return Modernizr;
            }

            test = typeof test == 'function' ? test() : test;

            if (typeof enableClasses !== "undefined" && enableClasses) {
                docElement.className += ' ' + (test ? '' : 'no-') + feature;
            }
            Modernizr[feature] = test;

        }

        return Modernizr;
    };


    setCss('');
    modElem = inputElem = null;

    ;
    (function (window, document) {
        var options = window.html5 || {};

        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;

        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;

        var supportsHtml5Styles;

        var expando = '_html5shiv';

        var expanID = 0;

        var expandoData = {};

        var supportsUnknownElements;

        (function () {
            try {
                var a = document.createElement('a');
                a.innerHTML = '<xyz></xyz>';
                supportsHtml5Styles = ('hidden' in a);

                supportsUnknownElements = a.childNodes.length == 1 || (function () {
                        (document.createElement)('a');
                        var frag = document.createDocumentFragment();
                        return (
                            typeof frag.cloneNode == 'undefined' ||
                            typeof frag.createDocumentFragment == 'undefined' ||
                            typeof frag.createElement == 'undefined'
                        );
                    }());
            } catch (e) {
                supportsHtml5Styles = true;
                supportsUnknownElements = true;
            }

        }());
        function addStyleSheet(ownerDocument, cssText) {
            var p = ownerDocument.createElement('p'),
                parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

            p.innerHTML = 'x<style>' + cssText + '</style>';
            return parent.insertBefore(p.lastChild, parent.firstChild);
        }

        function getElements() {
            var elements = html5.elements;
            return typeof elements == 'string' ? elements.split(' ') : elements;
        }

        function getExpandoData(ownerDocument) {
            var data = expandoData[ownerDocument[expando]];
            if (!data) {
                data = {};
                expanID++;
                ownerDocument[expando] = expanID;
                expandoData[expanID] = data;
            }
            return data;
        }

        function createElement(nodeName, ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createElement(nodeName);
            }
            if (!data) {
                data = getExpandoData(ownerDocument);
            }
            var node;

            if (data.cache[nodeName]) {
                node = data.cache[nodeName].cloneNode();
            } else if (saveClones.test(nodeName)) {
                node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
            } else {
                node = data.createElem(nodeName);
            }

            return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;
        }

        function createDocumentFragment(ownerDocument, data) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            if (supportsUnknownElements) {
                return ownerDocument.createDocumentFragment();
            }
            data = data || getExpandoData(ownerDocument);
            var clone = data.frag.cloneNode(),
                i = 0,
                elems = getElements(),
                l = elems.length;
            for (; i < l; i++) {
                clone.createElement(elems[i]);
            }
            return clone;
        }

        function shivMethods(ownerDocument, data) {
            if (!data.cache) {
                data.cache = {};
                data.createElem = ownerDocument.createElement;
                data.createFrag = ownerDocument.createDocumentFragment;
                data.frag = data.createFrag();
            }


            ownerDocument.createElement = function (nodeName) {
                if (!html5.shivMethods) {
                    return data.createElem(nodeName);
                }
                return createElement(nodeName, ownerDocument, data);
            };

            ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
                'var n=f.cloneNode(),c=n.createElement;' +
                'h.shivMethods&&(' +
                getElements().join().replace(/\w+/g, function (nodeName) {
                    data.createElem(nodeName);
                    data.frag.createElement(nodeName);
                    return 'c("' + nodeName + '")';
                }) +
                ');return n}'
            )(html5, data.frag);
        }

        function shivDocument(ownerDocument) {
            if (!ownerDocument) {
                ownerDocument = document;
            }
            var data = getExpandoData(ownerDocument);

            if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
                data.hasCSS = !!addStyleSheet(ownerDocument,
                    'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +
                    'mark{background:#FF0;color:#000}'
                );
            }
            if (!supportsUnknownElements) {
                shivMethods(ownerDocument, data);
            }
            return ownerDocument;
        }

        var html5 = {

            'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',

            'shivCSS': (options.shivCSS !== false),

            'supportsUnknownElements': supportsUnknownElements,

            'shivMethods': (options.shivMethods !== false),

            'type': 'default',

            'shivDocument': shivDocument,

            createElement: createElement,

            createDocumentFragment: createDocumentFragment
        };
        window.html5 = html5;

        shivDocument(document);

    }(this, document));

    Modernizr._version = version;

    Modernizr._prefixes = prefixes;
    Modernizr._domPrefixes = domPrefixes;
    Modernizr._cssomPrefixes = cssomPrefixes;


    Modernizr.testProp = function (prop) {
        return testProps([prop]);
    };

    Modernizr.testAllProps = testPropsAll;


    Modernizr.testStyles = injectElementWithStyles;
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

        (enableClasses ? ' js ' + classes.join(' ') : '');

    return Modernizr;

})(this, this.document);
/*yepnope1.5.4|WTFPL*/
(function (a, b, c) {
    function d(a) {
        return "[object Function]" == o.call(a)
    }

    function e(a) {
        return "string" == typeof a
    }

    function f() {
    }

    function g(a) {
        return !a || "loaded" == a || "complete" == a || "uninitialized" == a
    }

    function h() {
        var a = p.shift();
        q = 1, a ? a.t ? m(function () {
                    ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1)
                }, 0) : (a(), h()) : q = 0
    }

    function i(a, c, d, e, f, i, j) {
        function k(b) {
            if (!o && g(l.readyState) && (u.r = o = 1, !q && h(), l.onload = l.onreadystatechange = null, b)) {
                "img" != a && m(function () {
                    t.removeChild(l)
                }, 50);
                for (var d in y[c])y[c].hasOwnProperty(d) && y[c][d].onload()
            }
        }

        var j = j || B.errorTimeout, l = b.createElement(a), o = 0, r = 0, u = {t: d, s: c, e: f, a: i, x: j};
        1 === y[c] && (r = 1, y[c] = []), "object" == a ? l.data = c : (l.src = c, l.type = a), l.width = l.height = "0", l.onerror = l.onload = l.onreadystatechange = function () {
            k.call(this, r)
        }, p.splice(e, 0, u), "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), m(k, j)) : y[c].push(l))
    }

    function j(a, b, c, d, f) {
        return q = 0, b = b || "j", e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 1 == p.length && h()), this
    }

    function k() {
        var a = B;
        return a.loader = {load: j, i: 0}, a
    }

    var l = b.documentElement, m = a.setTimeout, n = b.getElementsByTagName("script")[0], o = {}.toString, p = [], q = 0, r = "MozAppearance" in l.style, s = r && !!b.createRange().compareNode, t = s ? l : n.parentNode, l = a.opera && "[object Opera]" == o.call(a.opera), l = !!b.attachEvent && !l, u = r ? "object" : l ? "script" : "img", v = l ? "script" : u, w = Array.isArray || function (a) {
            return "[object Array]" == o.call(a)
        }, x = [], y = {}, z = {
        timeout: function (a, b) {
            return b.length && (a.timeout = b[0]), a
        }
    }, A, B;
    B = function (a) {
        function b(a) {
            var a = a.split("!"), b = x.length, c = a.pop(), d = a.length, c = {
                url: c,
                origUrl: c,
                prefixes: a
            }, e, f, g;
            for (f = 0; f < d; f++)g = a[f].split("="), (e = z[g.shift()]) && (c = e(c, g));
            for (f = 0; f < b; f++)c = x[f](c);
            return c
        }

        function g(a, e, f, g, h) {
            var i = b(a), j = i.autoCallback;
            i.url.split(".").pop().split("?").shift(), i.bypass || (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]), i.instead ? i.instead(a, e, f, g, h) : (y[i.url] ? i.noexec = !0 : y[i.url] = 1, f.load(i.url, i.forceCSS || !i.forceJS && "css" == i.url.split(".").pop().split("?").shift() ? "c" : c, i.noexec, i.attrs, i.timeout), (d(e) || d(j)) && f.load(function () {
                    k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), y[i.url] = 2
                })))
        }

        function h(a, b) {
            function c(a, c) {
                if (a) {
                    if (e(a)) c || (j = function () {
                        var a = [].slice.call(arguments);
                        k.apply(this, a), l()
                    }), g(a, j, b, 0, h); else if (Object(a) === a)for (n in m = function () {
                        var b = 0, c;
                        for (c in a)a.hasOwnProperty(c) && b++;
                        return b
                    }(), a)a.hasOwnProperty(n) && (!c && !--m && (d(j) ? j = function () {
                            var a = [].slice.call(arguments);
                            k.apply(this, a), l()
                        } : j[n] = function (a) {
                            return function () {
                                var b = [].slice.call(arguments);
                                a && a.apply(this, b), l()
                            }
                        }(k[n])), g(a[n], j, b, n, h))
                } else!c && l()
            }

            var h = !!a.test, i = a.load || a.both, j = a.callback || f, k = j, l = a.complete || f, m, n;
            c(h ? a.yep : a.nope, !!i), i && c(i)
        }

        var i, j, l = this.yepnope.loader;
        if (e(a)) g(a, 0, l, 0); else if (w(a))for (i = 0; i < a.length; i++)j = a[i], e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l); else Object(a) === a && h(a, l)
    }, B.addPrefix = function (a, b) {
        z[a] = b
    }, B.addFilter = function (a) {
        x.push(a)
    }, B.errorTimeout = 1e4, null == b.readyState && b.addEventListener && (b.readyState = "loading", b.addEventListener("DOMContentLoaded", A = function () {
        b.removeEventListener("DOMContentLoaded", A, 0), b.readyState = "complete"
    }, 0)), a.yepnope = k(), a.yepnope.executeStack = h, a.yepnope.injectJs = function (a, c, d, e, i, j) {
        var k = b.createElement("script"), l, o, e = e || B.errorTimeout;
        k.src = a;
        for (o in d)k.setAttribute(o, d[o]);
        c = j ? h : c || f, k.onreadystatechange = k.onload = function () {
            !l && g(k.readyState) && (l = 1, c(), k.onload = k.onreadystatechange = null)
        }, m(function () {
            l || (l = 1, c(1))
        }, e), i ? k.onload() : n.parentNode.insertBefore(k, n)
    }, a.yepnope.injectCss = function (a, c, d, e, g, i) {
        var e = b.createElement("link"), j, c = i ? h : c || f;
        e.href = a, e.rel = "stylesheet", e.type = "text/css";
        for (j in d)e.setAttribute(j, d[j]);
        g || (n.parentNode.insertBefore(e, n), m(c, 0))
    }
})(this, document);
Modernizr.load = function () {
    yepnope.apply(window, [].slice.call(arguments, 0));
};
;
/*
 Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 */
(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var setImmediate;

    function addFromSetImmediateArguments(args) {
        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
        return nextHandle++;
    }

    // This function accepts the same arguments as setImmediate, but
    // returns a function that requires no arguments.
    function partiallyApplied(handler) {
        var args = [].slice.call(arguments, 1);
        return function () {
            if (typeof handler === "function") {
                handler.apply(undefined, args);
            } else {
                (new Function("" + handler))();
            }
        };
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    task();
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function installNextTickImplementation() {
        setImmediate = function () {
            var handle = addFromSetImmediateArguments(arguments);
            process.nextTick(partiallyApplied(runIfPresent, handle));
            return handle;
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function (event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        setImmediate = function () {
            var handle = addFromSetImmediateArguments(arguments);
            global.postMessage(messagePrefix + handle, "*");
            return handle;
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        setImmediate = function () {
            var handle = addFromSetImmediateArguments(arguments);
            channel.port2.postMessage(handle);
            return handle;
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        setImmediate = function () {
            var handle = addFromSetImmediateArguments(arguments);
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
            return handle;
        };
    }

    function installSetTimeoutImplementation() {
        setImmediate = function () {
            var handle = addFromSetImmediateArguments(arguments);
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
            return handle;
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(new Function("return this")()));

(function () {
    function Viewport() {

        this.PRE_IOS7_VIEWPORT = "initial-scale=1, maximum-scale=1, user-scalable=no";
        this.IOS7_VIEWPORT = "initial-scale=1, maximum-scale=1, user-scalable=no";
        this.DEFAULT_VIEWPORT = "initial-scale=1, maximum-scale=1, user-scalable=no";

        this.ensureViewportElement();
        this.platform = {};
        this.platform.name = this.getPlatformName();
        this.platform.version = this.getPlatformVersion();

        return this;
    };

    Viewport.prototype.ensureViewportElement = function () {
        this.viewportElement = document.querySelector('meta[name=viewport]');
        if (!this.viewportElement) {
            this.viewportElement = document.createElement('meta');
            this.viewportElement.name = "viewport";
            document.head.appendChild(this.viewportElement);
        }
    },

        Viewport.prototype.setup = function () {
            if (!this.viewportElement) {
                return;
            }

            if (this.viewportElement.getAttribute('data-no-adjust') == "true") {
                return;
            }

            if (this.platform.name == 'ios') {
                if (this.platform.version >= 7 && isWebView()) {
                    this.viewportElement.setAttribute('content', this.IOS7_VIEWPORT);
                } else {
                    this.viewportElement.setAttribute('content', this.PRE_IOS7_VIEWPORT);
                }
            } else {
                this.viewportElement.setAttribute('content', this.DEFAULT_VIEWPORT);
            }

            function isWebView() {
                return !!(window.cordova || window.phonegap || window.PhoneGap);
            }
        };

    Viewport.prototype.getPlatformName = function () {
        if (navigator.userAgent.match(/Android/i)) {
            return "android";
        }

        if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
            return "ios";
        }

        // unknown
        return undefined;
    };

    Viewport.prototype.getPlatformVersion = function () {
        var start = window.navigator.userAgent.indexOf('OS ');
        return window.Number(window.navigator.userAgent.substr(start + 3, 3).replace('_', '.'));
    };

    window.Viewport = Viewport;
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/back_button.tpl',
            '<span \n' +
            '  class="toolbar-button--quiet {{modifierTemplater(\'toolbar-button--*\')}}" \n' +
            '  ng-click="$root.ons.findParentComponentUntil(\'ons-navigator\', $event).popPage({cancelIfRunning: true})"\n' +
            '  ng-show="showBackButton"\n' +
            '  style="height: 44px; line-height: 0; padding: 0 10px 0 0; position: relative;">\n' +
            '  \n' +
            '  <i \n' +
            '    class="ion-ios-arrow-back ons-back-button__icon" \n' +
            '    style="vertical-align: top; background-color: transparent; height: 44px; line-height: 44px; font-size: 36px; margin-left: 8px; margin-right: 2px; width: 16px; display: inline-block; padding-top: 1px;"></i>\n' +
            '\n' +
            '  <span \n' +
            '    style="vertical-align: top; display: inline-block; line-height: 44px; height: 44px;" \n' +
            '    class="back-button__label"></span>\n' +
            '</span>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/button.tpl',
            '<span class="label ons-button-inner"></span>\n' +
            '<span class="spinner button__spinner {{modifierTemplater(\'button--*__spinner\')}}"></span>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/dialog.tpl',
            '<div class="dialog-mask"></div>\n' +
            '<div class="dialog {{ modifierTemplater(\'dialog--*\') }}"></div>\n' +
            '</div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/icon.tpl',
            '<i class="fa fa-{{icon}} fa-{{spin}} fa-{{fixedWidth}} fa-rotate-{{rotate}} fa-flip-{{flip}}" ng-class="sizeClass" ng-style="style"></i>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/popover.tpl',
            '<div class="popover-mask"></div>\n' +
            '<div class="popover popover--{{ direction }} {{ modifierTemplater(\'popover--*\') }}">\n' +
            '  <div class="popover__content {{ modifierTemplater(\'popover__content--*\') }}"></div>\n' +
            '  <div class="popover__{{ arrowPosition }}-arrow"></div>\n' +
            '</div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/row.tpl',
            '<div class="row row-{{align}} ons-row-inner"></div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/sliding_menu.tpl',
            '<div class="onsen-sliding-menu__menu ons-sliding-menu-inner"></div>\n' +
            '<div class="onsen-sliding-menu__main ons-sliding-menu-inner"></div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/split_view.tpl',
            '<div class="onsen-split-view__secondary full-screen ons-split-view-inner"></div>\n' +
            '<div class="onsen-split-view__main full-screen ons-split-view-inner"></div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/switch.tpl',
            '<label class="switch {{modifierTemplater(\'switch--*\')}}">\n' +
            '  <input type="checkbox" class="switch__input {{modifierTemplater(\'switch--*__input\')}}" ng-model="model">\n' +
            '  <div class="switch__toggle {{modifierTemplater(\'switch--*__toggle\')}}"></div>\n' +
            '</label>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/tab.tpl',
            '<input type="radio" name="tab-bar-{{tabbarId}}" style="display: none">\n' +
            '<button class="tab-bar__button tab-bar-inner {{tabbarModifierTemplater(\'tab-bar--*__button\')}} {{modifierTemplater(\'tab-bar__button--*\')}}" ng-click="tryToChange()">\n' +
            '</button>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/tab_bar.tpl',
            '<div class="ons-tab-bar__content tab-bar__content"></div>\n' +
            '<div ng-hide="hideTabs" class="tab-bar ons-tab-bar__footer {{modifierTemplater(\'tab-bar--*\')}} ons-tabbar-inner"></div>\n' +
            '');
    }]);
})();

(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/toolbar_button.tpl',
            '<span class="toolbar-button {{modifierTemplater(\'toolbar-button--*\')}} navigation-bar__line-height" ng-transclude></span>\n' +
            '');
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */


window.DoorLock = (function () {
    /**
     * Door locking system.
     *
     * @param {Object} [options]
     * @param {Function} [options.log]
     */
    var DoorLock = function (options) {
        options = options || {};
        this._lockList = [];
        this._waitList = [];
        this._log = options.log || function () {
            };
    };

    DoorLock.generateId = (function () {
        var i = 0;
        return function () {
            return i++;
        };
    })();

    DoorLock.prototype = {
        /**
         * Register a lock.
         *
         * @return {Function} Callback for unlocking.
         */
        lock: function () {
            var self = this;
            var unlock = function () {
                self._unlock(unlock);
            };
            unlock.id = DoorLock.generateId();
            this._lockList.push(unlock);
            this._log('lock: ' + (unlock.id));

            return unlock;
        },

        _unlock: function (fn) {
            var index = this._lockList.indexOf(fn);
            if (index === -1) {
                throw new Error('This function is not registered in the lock list.');
            }

            this._lockList.splice(index, 1);
            this._log('unlock: ' + fn.id);

            this._tryToFreeWaitList();
        },

        _tryToFreeWaitList: function () {
            while (!this.isLocked() && this._waitList.length > 0) {
                this._waitList.shift()();
            }
        },

        /**
         * Register a callback for waiting unlocked door.
         *
         * @params {Function} callback Callback on unlocking the door completely.
         */
        waitUnlock: function (callback) {
            if (!(callback instanceof Function)) {
                throw new Error('The callback param must be a function.');
            }

            if (this.isLocked()) {
                this._waitList.push(callback);
            } else {
                callback();
            }
        },

        /**
         * @return {Boolean}
         */
        isLocked: function () {
            return this._lockList.length > 0;
        }
    };

    return DoorLock;

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

/**
 * @ngdoc object
 * @name ons
 * @category util
 * @description
 *   [ja]Onsen UIで利用できるグローバルなオブジェクトです。このオブジェクトは、AngularJSのスコープから参照することができます。 [/ja]
 *   [en]A global object that's used in Onsen UI. This object can be reached from the AngularJS scope.[/en]
 */

/**
 * @ngdoc method
 * @signature ready(callback)
 * @description
 *   [ja]アプリの初期化に利用するメソッドです。渡された関数は、Onsen UIの初期化が終了している時点で必ず呼ばれます。[/ja]
 *   [en]Method used to wait for app initialization. The callback will not be executed until Onsen UI has been completely initialized.[/en]
 * @param {Function} callback
 *   [en]Function that executes after Onsen UI has been initialized.[/en]
 *   [ja]Onsen UIが初期化が完了した後に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature bootstrap([moduleName, [dependencies]])
 * @description
 *   [ja]Onsen UIの初期化を行います。Angular.jsのng-app属性を利用すること無しにOnsen UIを読み込んで初期化してくれます。[/ja]
 *   [en]Initialize Onsen UI. Can be used to load Onsen UI without using the <code>ng-app</code> attribute from AngularJS.[/en]
 * @param {String} [moduleName]
 *   [en]AngularJS module name.[/en]
 *   [ja]Angular.jsでのモジュール名[/ja]
 * @param {Array} [dependencies]
 *   [en]List of AngularJS module dependencies.[/en]
 *   [ja]依存するAngular.jsのモジュール名の配列[/ja]
 * @return {Object}
 *   [en]An AngularJS module object.[/en]
 *   [ja]AngularJSのModuleオブジェクトを表します。[/ja]
 */

/**
 * @ngdoc method
 * @signature enableAutoStatusBarFill()
 * @description
 *   [en]Enable status bar fill feature on iOS7 and above.[/en]
 *   [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を有効にします。[/ja]
 */

/**
 * @ngdoc method
 * @signature disableAutoStatusBarFill()
 * @description
 *   [en]Disable status bar fill feature on iOS7 and above.[/en]
 *   [ja]iOS7以上で、ステータスバー部分の高さを自動的に埋める処理を無効にします。[/ja]
 */

/**
 * @ngdoc method
 * @signature findParentComponentUntil(name, [dom])
 * @param {String} name
 *   [en]Name of component, i.e. 'ons-page'.[/en]
 *   [ja]コンポーネント名を指定します。例えばons-pageなどを指定します。[/ja]
 * @param {Object|jqLite|HTMLElement} [dom]
 *   [en]$event, jqLite or HTMLElement object.[/en]
 *   [ja]$eventオブジェクト、jqLiteオブジェクト、HTMLElementオブジェクトのいずれかを指定できます。[/ja]
 * @return {Object}
 *   [en]Component object. Will return null if no component was found.[/en]
 *   [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]
 * @description
 *   [en]Find parent component object of <code>dom</code> element.[/en]
 *   [ja]指定されたdom引数の親要素をたどってコンポーネントを検索します。[/ja]
 */

/**
 * @ngdoc method
 * @signature findComponent(selector, [dom])
 * @param {String} selector
 *   [en]CSS selector[/en]
 *   [ja]CSSセレクターを指定します。[/ja]
 * @param {HTMLElement} [dom]
 *   [en]DOM element to search from.[/en]
 *   [ja]検索対象とするDOM要素を指定します。[/ja]
 * @return {Object}
 *   [en]Component object. Will return null if no component was found.[/en]
 *   [ja]コンポーネントのオブジェクトを返します。もしコンポーネントが見つからなかった場合にはnullを返します。[/ja]
 * @description
 *   [en]Find component object using CSS selector.[/en]
 *   [ja]CSSセレクタを使ってコンポーネントのオブジェクトを検索します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDefaultDeviceBackButtonListener(listener)
 * @param {Function} listener
 *   [en]Function that executes when device back button is pressed.[/en]
 *   [ja]デバイスのバックボタンが押された時に実行される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Set default handler for device back button.[/en]
 *   [ja]デバイスのバックボタンのためのデフォルトのハンドラを設定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature disableDeviceBackButtonHandler()
 * @description
 * [en]Disable device back button event handler.[/en]
 * [ja]デバイスのバックボタンのイベントを受け付けないようにします。[/ja]
 */

/**
 * @ngdoc method
 * @signature enableDeviceBackButtonHandler()
 * @description
 * [en]Enable device back button event handler.[/en]
 * [ja]デバイスのバックボタンのイベントを受け付けるようにします。[/ja]
 */

/**
 * @ngdoc method
 * @signature isReady()
 * @return {Boolean}
 *   [en]Will be true if Onsen UI is initialized.[/en]
 *   [ja]初期化されているかどうかを返します。[/ja]
 * @description
 *   [en]Returns true if Onsen UI is initialized.[/en]
 *   [ja]Onsen UIがすでに初期化されているかどうかを返すメソッドです。[/ja]
 */

/**
 * @ngdoc method
 * @signature compile(dom)
 * @param {HTMLElement} dom
 *   [en]Element to compile.[/en]
 *   [ja]コンパイルする要素を指定します。[/ja]
 * @description
 *   [en]Compile Onsen UI components.[/en]
 *   [ja]通常のHTMLの要素をOnsen UIのコンポーネントにコンパイルします。[/ja]
 */

/**
 * @ngdoc method
 * @signature isWebView()
 * @return {Boolean}
 *   [en]Will be true if the app is running in Cordova.[/en]
 *   [ja]Cordovaで実行されている場合にtrueになります。[/ja]
 * @description
 *   [en]Returns true if running inside Cordova.[/en]
 *   [ja]Cordovaで実行されているかどうかを返すメソッドです。[/ja]
 */

/**
 * @ngdoc method
 * @signature createAlertDialog(page, [options])
 * @param {String} page
 *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-alert-dialog> component.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Object} [options.parentScope]
 *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
 *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。[/ja]
 * @return {Promise}
 *   [en]Promise object that resolves to the alert dialog component object.[/en]
 *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
 * @description
 *   [en]Create a alert dialog instance from a template.[/en]
 *   [ja]テンプレートからアラートダイアログのインスタンスを生成します。[/ja]
 */

/**
 * @ngdoc method
 * @signature createDialog(page, [options])
 * @param {String} page
 *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Object} [options.parentScope]
 *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
 *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。[/ja]
 * @return {Promise}
 *   [en]Promise object that resolves to the dialog component object.[/en]
 *   [ja]ダイアログのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
 * @description
 *   [en]Create a dialog instance from a template.[/en]
 *   [ja]テンプレートからダイアログのインスタンスを生成します。[/ja]
 */

/**
 * @ngdoc method
 * @signature createPopover(page, [options])
 * @param {String} page
 *   [en]Page name. Can be either an HTML file or an <ons-template> containing a <ons-dialog> component.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Object} [options.parentScope]
 *   [en]Parent scope of the dialog. Used to bind models and access scope methods from the dialog.[/en]
 *   [ja]ダイアログ内で利用する親スコープを指定します。ダイアログからモデルやスコープのメソッドにアクセスするのに使います。[/ja]
 * @return {Promise}
 *   [en]Promise object that resolves to the popover component object.[/en]
 *   [ja]ポップオーバーのコンポーネントオブジェクトを解決するPromiseオブジェクトを返します。[/ja]
 * @description
 *   [en]Create a popover instance from a template.[/en]
 *   [ja]テンプレートからポップオーバーのインスタンスを生成します。[/ja]
 */

window.ons = (function () {
    'use strict';

    var module = angular.module('onsen', ['templates-main']);
    angular.module('onsen.directives', ['onsen']); // for BC

    // JS Global facade for Onsen UI.
    var ons = createOnsenFacade();
    initKeyboardEvents();
    waitDeviceReady();
    waitOnsenUILoad();
    initAngularModule();

    return ons;

    function waitDeviceReady() {
        var unlockDeviceReady = ons._readyLock.lock();
        window.addEventListener('DOMContentLoaded', function () {
            if (ons.isWebView()) {
                window.document.addEventListener('deviceready', unlockDeviceReady, false);
            } else {
                unlockDeviceReady();
            }
        }, false);
    }

    function waitOnsenUILoad() {
        var unlockOnsenUI = ons._readyLock.lock();
        module.run(['$compile', '$rootScope', '$onsen', function ($compile, $rootScope, $onsen) {
            // for initialization hook.
            if (document.readyState === 'loading' || document.readyState == 'uninitialized') {
                window.addEventListener('DOMContentLoaded', function () {
                    document.body.appendChild(document.createElement('ons-dummy-for-init'));
                });
            } else if (document.body) {
                document.body.appendChild(document.createElement('ons-dummy-for-init'));
            } else {
                throw new Error('Invalid initialization state.');
            }

            $rootScope.$on('$ons-ready', unlockOnsenUI);
        }]);
    }

    function initAngularModule() {
        module.value('$onsGlobal', ons);
        module.run(['$compile', '$rootScope', '$onsen', '$q', function ($compile, $rootScope, $onsen, $q) {
            ons._onsenService = $onsen;
            ons._qService = $q;

            $rootScope.ons = window.ons;
            $rootScope.console = window.console;
            $rootScope.alert = window.alert;

            ons.$compile = $compile;
        }]);
    }

    function initKeyboardEvents() {
        ons.softwareKeyboard = new MicroEvent();
        ons.softwareKeyboard._visible = false;

        var onShow = function () {
                ons.softwareKeyboard._visible = true;
                ons.softwareKeyboard.emit('show');
            },
            onHide = function () {
                ons.softwareKeyboard._visible = false;
                ons.softwareKeyboard.emit('hide');
            };

        var bindEvents = function () {
            // if (typeof Keyboard !== 'undefined') {
            //     // https://github.com/martinmose/cordova-keyboard/blob/95f3da3a38d8f8e1fa41fbf40145352c13535a00/README.md
            //     Keyboard.onshow = onShow;
            //     Keyboard.onhide = onHide;
            //     ons.softwareKeyboard.emit('init', {visible: Keyboard.isVisible});
            //     return true;
            // } else
            if (typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.Keyboard !== 'undefined') {
                // https://github.com/driftyco/ionic-plugins-keyboard/blob/ca27ecf/README.md
                window.addEventListener('native.keyboardshow', onShow);
                window.addEventListener('native.keyboardhide', onHide);
                ons.softwareKeyboard.emit('init', {visible: cordova.plugins.Keyboard.isVisible});
                return true;
            }
            return false;
        };

        var noPluginError = function () {
            console.warn('ons-keyboard: Cordova Keyboard plugin is not present.');
        };

        document.addEventListener('deviceready', function () {
            if (!bindEvents()) {
                if (document.querySelector('[ons-keyboard-active]') ||
                    document.querySelector('[ons-keyboard-inactive]')) {
                    noPluginError();
                }

                ons.softwareKeyboard.on = noPluginError;
            }
        });
    }

    function createOnsenFacade() {
        var ons = {

            _readyLock: new DoorLock(),

            _onsenService: null,

            _config: {
                autoStatusBarFill: true
            },

            _unlockersDict: {},

            // Object to attach component variables to when using the var="..." attribute.
            // Can be set to null to avoid polluting the global scope.
            componentBase: window,

            /**
             * Bootstrap this document as a Onsen UI application.
             *
             * @param {String} [name] optional name
             * @param {Array} [deps] optional dependency modules
             */
            bootstrap: function (name, deps) {
                if (angular.isArray(name)) {
                    deps = name;
                    name = undefined;
                }

                if (!name) {
                    name = 'myOnsenApp';
                }

                deps = ['onsen'].concat(angular.isArray(deps) ? deps : []);
                var module = angular.module(name, deps);

                var doc = window.document;
                if (doc.readyState == 'loading' || doc.readyState == 'uninitialized' || doc.readyState == 'interactive') {
                    doc.addEventListener('DOMContentLoaded', function () {
                        angular.bootstrap(doc.documentElement, [name]);
                    }, false);
                } else if (doc.documentElement) {
                    angular.bootstrap(doc.documentElement, [name]);
                } else {
                    throw new Error('Invalid state');
                }

                return module;
            },

            /**
             * Enable status bar fill feature on iOS7 and above.
             */
            enableAutoStatusBarFill: function () {
                if (this.isReady()) {
                    throw new Error('This method must be called before ons.isReady() is true.');
                }
                this._config.autoStatusBarFill = true;
            },

            /**
             * Disable status bar fill feature on iOS7 and above.
             */
            disableAutoStatusBarFill: function () {
                if (this.isReady()) {
                    throw new Error('This method must be called before ons.isReady() is true.');
                }
                this._config.autoStatusBarFill = false;
            },

            /**
             * @param {String} [name]
             * @param {Object/jqLite/HTMLElement} dom $event object or jqLite object or HTMLElement object.
             * @return {Object}
             */
            findParentComponentUntil: function (name, dom) {
                var element;
                if (dom instanceof HTMLElement) {
                    element = angular.element(dom);
                } else if (dom instanceof angular.element) {
                    element = dom;
                } else if (dom.target) {
                    element = angular.element(dom.target);
                }

                return element.inheritedData(name);
            },

            /**
             * @param {Function} listener
             */
            setDefaultDeviceBackButtonListener: function (listener) {
                this._getOnsenService().getDefaultDeviceBackButtonHandler().setListener(listener);
            },

            /**
             * Disable this framework to handle cordova "backbutton" event.
             */
            disableDeviceBackButtonHandler: function () {
                this._getOnsenService().DeviceBackButtonHandler.disable();
            },

            /**
             * Enable this framework to handle cordova "backbutton" event.
             */
            enableDeviceBackButtonHandler: function () {
                this._getOnsenService().DeviceBackButtonHandler.enable();
            },

            /**
             * Find view object correspond dom element queried by CSS selector.
             *
             * @param {String} selector CSS selector
             * @param {HTMLElement} [dom]
             * @return {Object/void}
             */
            findComponent: function (selector, dom) {
                var target = (dom ? dom : document).querySelector(selector);
                return target ? angular.element(target).data(target.nodeName.toLowerCase()) || null : null;
            },

            /**
             * @return {Boolean}
             */
            isReady: function () {
                return !ons._readyLock.isLocked();
            },

            /**
             * @param {HTMLElement} dom
             */
            compile: function (dom) {
                if (!ons.$compile) {
                    throw new Error('ons.$compile() is not ready. Wait for initialization with ons.ready().');
                }

                if (!(dom instanceof HTMLElement)) {
                    throw new Error('First argument must be an instance of HTMLElement.');
                }

                var scope = angular.element(dom).scope();
                if (!scope) {
                    throw new Error('AngularJS Scope is null. Argument DOM element must be attached in DOM document.');
                }

                ons.$compile(dom)(scope);
            },

            _getOnsenService: function () {
                if (!this._onsenService) {
                    throw new Error('$onsen is not loaded, wait for ons.ready().');
                }

                return this._onsenService;
            },

            /**
             * @param {Array} [dependencies]
             * @param {Function} callback
             */
            ready: function (/* dependencies, */callback) {
                if (callback instanceof Function) {
                    if (ons.isReady()) {
                        callback();
                    } else {
                        ons._readyLock.waitUnlock(callback);
                    }
                } else if (angular.isArray(callback) && arguments[1] instanceof Function) {
                    var dependencies = callback;
                    callback = arguments[1];

                    ons.ready(function () {
                        var $onsen = ons._getOnsenService();
                        $onsen.waitForVariables(dependencies, callback);
                    });
                }
            },

            /**
             * @return {Boolean}
             */
            isWebView: function () {
                if (document.readyState === 'loading' || document.readyState == 'uninitialized') {
                    throw new Error('isWebView() method is available after dom contents loaded.');
                }

                return !!(window.cordova || window.phonegap || window.PhoneGap);
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.parentScope]
             * @return {Promise}
             */
            createAlertDialog: function (page, options) {
                options = options || {};

                if (!page) {
                    throw new Error('Page url must be defined.');
                }

                var alertDialog = angular.element('<ons-alert-dialog>'),
                    $onsen = this._getOnsenService();

                angular.element(document.body).append(angular.element(alertDialog));

                return $onsen.getPageHTMLAsync(page).then(function (html) {
                    var div = document.createElement('div');
                    div.innerHTML = html;

                    var el = angular.element(div.querySelector('ons-alert-dialog'));

                    // Copy attributes and insert html.
                    var attrs = el.prop('attributes');
                    for (var i = 0, l = attrs.length; i < l; i++) {
                        alertDialog.attr(attrs[i].name, attrs[i].value);
                    }
                    alertDialog.html(el.html());

                    var parentScope;
                    if (options.parentScope) {
                        parentScope = options.parentScope.$new();
                        ons.$compile(alertDialog)(parentScope);
                    }
                    else {
                        ons.compile(alertDialog[0]);
                    }

                    if (el.attr('disabled')) {
                        alertDialog.attr('disabled', 'disabled');
                    }

                    if (parentScope) {
                        alertDialog.data('ons-alert-dialog')._parentScope = parentScope;
                    }

                    return alertDialog.data('ons-alert-dialog');
                });
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.parentScope]
             * @return {Promise}
             */
            createDialog: function (page, options) {
                options = options || {};

                if (!page) {
                    throw new Error('Page url must be defined.');
                }

                var dialog = angular.element('<ons-dialog>'),
                    $onsen = this._getOnsenService();

                angular.element(document.body).append(angular.element(dialog));

                return $onsen.getPageHTMLAsync(page).then(function (html) {
                    var div = document.createElement('div');
                    div.innerHTML = html;

                    var el = angular.element(div.querySelector('ons-dialog'));

                    // Copy attributes and insert html.
                    var attrs = el.prop('attributes');
                    for (var i = 0, l = attrs.length; i < l; i++) {
                        dialog.attr(attrs[i].name, attrs[i].value);
                    }
                    dialog.html(el.html());

                    var parentScope;
                    if (options.parentScope) {
                        parentScope = options.parentScope.$new();
                        ons.$compile(dialog)(parentScope);
                    }
                    else {
                        ons.compile(dialog[0]);
                    }

                    if (el.attr('disabled')) {
                        dialog.attr('disabled', 'disabled');
                    }

                    var deferred = ons._qService.defer();

                    dialog.on('ons-dialog:init', function (e) {
                        // Copy "style" attribute from parent.
                        var child = dialog[0].querySelector('.dialog');
                        if (el[0].hasAttribute('style')) {
                            var parentStyle = el[0].getAttribute('style'),
                                childStyle = child.getAttribute('style'),
                                newStyle = (function (a, b) {
                                    var c =
                                        (a.substr(-1) === ';' ? a : a + ';') +
                                        (b.substr(-1) === ';' ? b : b + ';');
                                    return c;
                                })(parentStyle, childStyle);

                            child.setAttribute('style', newStyle);
                        }

                        if (parentScope) {
                            e.component._parentScope = parentScope;
                        }

                        deferred.resolve(e.component);
                    });

                    return deferred.promise;
                });
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.parentScope]
             * @return {Promise}
             */
            createPopover: function (page, options) {
                options = options || {};

                if (!page) {
                    throw new Error('Page url must be defined.');
                }

                var popover = angular.element('<ons-popover>'),
                    $onsen = this._getOnsenService();

                angular.element(document.body).append(angular.element(popover));

                return $onsen.getPageHTMLAsync(page).then(function (html) {
                    var div = document.createElement('div');
                    div.innerHTML = html;

                    var el = angular.element(div.querySelector('ons-popover'));

                    // Copy attributes and insert html.
                    var attrs = el.prop('attributes');
                    for (var i = 0, l = attrs.length; i < l; i++) {
                        popover.attr(attrs[i].name, attrs[i].value);
                    }
                    popover.html(el.html());

                    var parentScope;
                    if (options.parentScope) {
                        parentScope = options.parentScope.$new();
                        ons.$compile(popover)(parentScope);
                    }
                    else {
                        ons.compile(popover[0]);
                    }

                    if (el.attr('disabled')) {
                        popover.attr('disabled', 'disabled');
                    }

                    var deferred = ons._qService.defer();

                    popover.on('ons-popover:init', function (e) {
                        // Copy "style" attribute from parent.
                        var child = popover[0].querySelector('.popover');
                        if (el[0].hasAttribute('style')) {
                            var parentStyle = el[0].getAttribute('style'),
                                childStyle = child.getAttribute('style'),
                                newStyle = (function (a, b) {
                                    var c =
                                        (a.substr(-1) === ';' ? a : a + ';') +
                                        (b.substr(-1) === ';' ? b : b + ';');
                                    return c;
                                })(parentStyle, childStyle);

                            child.setAttribute('style', newStyle);
                        }

                        if (parentScope) {
                            e.component._parentScope = parentScope;
                        }

                        deferred.resolve(e.component);
                    });

                    return deferred.promise;
                });
            }
        };
        return ons;
    }

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.factory('AlertDialogView', ['$onsen', 'DialogAnimator', 'SlideDialogAnimator', 'AndroidAlertDialogAnimator', 'IOSAlertDialogAnimator', function ($onsen, DialogAnimator, SlideDialogAnimator, AndroidAlertDialogAnimator, IOSAlertDialogAnimator) {

        var AlertDialogView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this._element.css({
                    display: 'none',
                    zIndex: 20001
                });

                this._dialog = element;
                this._visible = false;
                this._doorLock = new DoorLock();

                this._animation = AlertDialogView._animatorDict[typeof attrs.animation !== 'undefined' ?
                    attrs.animation : 'default'];

                if (!this._animation) {
                    throw new Error('No such animation: ' + attrs.animation);
                }

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));
                this._createMask(attrs.maskColor);

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            /**
             * Show alert dialog.
             *
             * @param {Object} [options]
             * @param {String} [options.animation] animation type
             * @param {Function} [options.callback] callback after dialog is shown
             */
            show: function (options) {
                options = options || {};
                var cancel = false,
                    callback = options.callback || function () {
                        };

                this.emit('preshow', {
                    alertDialog: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        this._mask.css('display', 'block');
                        this._mask.css('opacity', 1);
                        this._element.css('display', 'block');

                        if (options.animation) {
                            animation = AlertDialogView._animatorDict[options.animation];
                        }

                        animation.show(this, function () {
                            this._visible = true;
                            unlock();
                            this.emit('postshow', {alertDialog: this});
                            callback();
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * Hide alert dialog.
             *
             * @param {Object} [options]
             * @param {String} [options.animation] animation type
             * @param {Function} [options.callback] callback after dialog is hidden
             */
            hide: function (options) {
                options = options || {};
                var cancel = false,
                    callback = options.callback || function () {
                        };

                this.emit('prehide', {
                    alertDialog: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        if (options.animation) {
                            animation = AlertDialogView._animatorDict[options.animation];
                        }

                        animation.hide(this, function () {
                            this._element.css('display', 'none');
                            this._mask.css('display', 'none');
                            this._visible = false;
                            unlock();
                            this.emit('posthide', {alertDialog: this});
                            callback();
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * True if alert dialog is visible.
             *
             * @return {Boolean}
             */
            isShown: function () {
                return this._visible;
            },

            /**
             * Destroy alert dialog.
             */
            destroy: function () {
                if (this._parentScope) {
                    this._parentScope.$destroy();
                    this._parentScope = null;
                } else {
                    this._scope.$destroy();
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._mask.off();

                this._element.remove();
                this._mask.remove();
                this._deviceBackButtonHandler.destroy();

                this._deviceBackButtonHandler = this._scope = this._attrs = this._element = this._mask = null;
            },

            /**
             * Disable or enable alert dialog.
             *
             * @param {Boolean}
             */
            setDisabled: function (disabled) {
                if (typeof disabled !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (disabled) {
                    this._element.attr('disabled', true);
                } else {
                    this._element.removeAttr('disabled');
                }
            },

            /**
             * True if alert dialog is disabled.
             *
             * @return {Boolean}
             */
            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            /**
             * Make alert dialog cancelable or uncancelable.
             *
             * @param {Boolean}
             */
            setCancelable: function (cancelable) {
                if (typeof cancelable !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (cancelable) {
                    this._element.attr('cancelable', true);
                } else {
                    this._element.removeAttr('cancelable');
                }
            },

            isCancelable: function () {
                return this._element[0].hasAttribute('cancelable');
            },

            _cancel: function () {
                if (this.isCancelable()) {
                    this.hide({
                        callback: function () {
                            this.emit('cancel');
                        }.bind(this)
                    });
                }
            },

            _onDeviceBackButton: function (event) {
                if (this.isCancelable()) {
                    this._cancel.bind(this)();
                } else {
                    event.callParentHandler();
                }
            },

            _createMask: function (color) {
                this._mask = angular.element('<div>').addClass('alert-dialog-mask').css({
                    zIndex: 20000,
                    display: 'none'
                });

                this._mask.on('click', this._cancel.bind(this));

                if (color) {
                    this._mask.css('background-color', color);
                }

                angular.element(document.body).append(this._mask);
            }
        });

        AlertDialogView._animatorDict = {
            'default': $onsen.isAndroid() ? new AndroidAlertDialogAnimator() : new IOSAlertDialogAnimator(),
            'fade': $onsen.isAndroid() ? new AndroidAlertDialogAnimator() : new IOSAlertDialogAnimator(),
            'slide': new SlideDialogAnimator(),
            'none': new DialogAnimator()
        };

        /**
         * @param {String} name
         * @param {DialogAnimator} animator
         */
        AlertDialogView.registerAnimator = function (name, animator) {
            if (!(animator instanceof DialogAnimator)) {
                throw new Error('"animator" param must be an instance of DialogAnimator');
            }
            this._animatorDict[name] = animator;
        };

        MicroEvent.mixin(AlertDialogView);

        return AlertDialogView;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('AndroidAlertDialogAnimator', ['DialogAnimator', function (DialogAnimator) {

        /**
         * Android style animator for alert dialog.
         */
        var AndroidAlertDialogAnimator = DialogAnimator.extend({

            timing: 'cubic-bezier(.1, .7, .4, 1)',
            duration: 0.2,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            show: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(0.9, 0.9, 1.0)',
                                opacity: 0.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(1.0, 1.0, 1.0)',
                                opacity: 1.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            hide: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(1.0, 1.0, 1.0)',
                                opacity: 1.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(0.9, 0.9, 1.0)',
                                opacity: 0.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return AndroidAlertDialogAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('AndroidDialogAnimator', ['DialogAnimator', function (DialogAnimator) {

        /**
         * Android style animator for dialog.
         */
        var AndroidDialogAnimator = DialogAnimator.extend({

            timing: 'ease-in-out',
            duration: 0.3,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            show: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -60%, 0)',
                                opacity: 0.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0)',
                                opacity: 1.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            hide: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0)',
                                opacity: 1.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -60%, 0)',
                                opacity: 0.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return AndroidDialogAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('ButtonView', ['$onsen', function ($onsen) {

        var ButtonView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
            },

            /**
             * Start spinning.
             */
            startSpin: function () {
                this._attrs.$set('shouldSpin', 'true');
            },

            /**
             * Stop spinning.
             */
            stopSpin: function () {
                this._attrs.$set('shouldSpin', 'false');
            },

            /**
             * Returns whether button is spinning or not.
             */
            isSpinning: function () {
                return this._attrs.shouldSpin === 'true';
            },

            /**
             * Set spin animation.
             *
             * @param {String} animation type
             */
            setSpinAnimation: function (animation) {
                this._scope.$apply(function () {
                    var animations = ['slide-left', 'slide-right', 'slide-up',
                        'slide-down', 'expand-left', 'expand-right', 'expand-up',
                        'expand-down', 'zoom-out', 'zoom-in'];

                    if (animations.indexOf(animation) < 0) {
                        console.warn('Animation ' + animation + 'doesn\'t exist.');
                        animation = 'slide-left';
                    }

                    this._scope.animation = animation;
                }.bind(this));
            },

            /**
             * Returns whether the button is disabled or not.
             */
            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            /**
             * Disabled or enable button.
             */
            setDisabled: function (disabled) {
                if (typeof disabled !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                } else {
                    this._element[0].removeAttribute('disabled');
                }
            }

        });
        MicroEvent.mixin(ButtonView);

        return ButtonView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 :qaistributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('CarouselView', ['$onsen', function ($onsen) {

        var VerticalModeTrait = {

            _getScrollDelta: function (event) {
                return event.deltaY;
            },

            _getScrollVelocity: function (event) {
                return event.velocityY;
            },

            _getElementSize: function () {
                if (!this._currentElementSize) {
                    this._currentElementSize = this._element[0].getBoundingClientRect().height;
                }

                return this._currentElementSize;
            },

            _generateScrollTransform: function (scroll) {
                return 'translate3d(0px, ' + -scroll + 'px, 0px)';
            },

            _layoutCarouselItems: function () {
                var children = this._getCarouselItemElements();

                var sizeAttr = this._getCarouselItemSizeAttr();
                var sizeInfo = this._decomposeSizeString(sizeAttr);

                for (var i = 0; i < children.length; i++) {
                    angular.element(children[i]).css({
                        position: 'absolute',
                        height: sizeAttr,
                        width: '100%',
                        visibility: 'visible',
                        left: '0px',
                        top: (i * sizeInfo.number) + sizeInfo.unit
                    });
                }
            },
        };

        var HorizontalModeTrait = {

            _getScrollDelta: function (event) {
                return event.deltaX;
            },

            _getScrollVelocity: function (event) {
                return event.velocityX;
            },

            _getElementSize: function () {
                if (!this._currentElementSize) {
                    this._currentElementSize = this._element[0].getBoundingClientRect().width;
                }

                return this._currentElementSize;
            },

            _generateScrollTransform: function (scroll) {
                return 'translate3d(' + -scroll + 'px, 0px, 0px)';
            },

            _layoutCarouselItems: function () {
                var children = this._getCarouselItemElements();

                var sizeAttr = this._getCarouselItemSizeAttr();
                var sizeInfo = this._decomposeSizeString(sizeAttr);

                for (var i = 0; i < children.length; i++) {
                    angular.element(children[i]).css({
                        position: 'absolute',
                        width: sizeAttr,
                        height: '100%',
                        top: '0px',
                        visibility: 'visible',
                        left: (i * sizeInfo.number) + sizeInfo.unit
                    });
                }
            },

        };

        /**
         * @class CarouselView
         */
        var CarouselView = Class.extend({

            /**
             * @member jqLite Object
             */
            _element: undefined,

            /**
             * @member {Object}
             */
            _scope: undefined,

            /**
             * @member {DoorLock}
             */
            _doorLock: undefined,

            /**
             * @member {Number}
             */
            _scroll: undefined,

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                this._doorLock = new DoorLock();
                this._scroll = 0;
                this._lastActiveIndex = 0;

                this._bindedOnDrag = this._onDrag.bind(this);
                this._bindedOnDragEnd = this._onDragEnd.bind(this);
                this._bindedOnResize = this._onResize.bind(this);

                this._mixin(this._isVertical() ? VerticalModeTrait : HorizontalModeTrait);

                this._prepareEventListeners();
                this._layoutCarouselItems();
                this._setupInitialIndex();

                this._attrs.$observe('direction', this._onDirectionChange.bind(this));

                this._scope.$on('$destroy', this._destroy.bind(this));

                this._saveLastState();
            },

            _onResize: function () {
                this.refresh();
            },

            _onDirectionChange: function () {
                if (this._isVertical()) {
                    this._element.css({
                        overflowX: 'auto',
                        overflowY: ''
                    });
                }
                else {
                    this._element.css({
                        overflowX: '',
                        overflowY: 'auto'
                    });
                }
            },

            _saveLastState: function () {
                this._lastState = {
                    elementSize: this._getCarouselItemSize(),
                    carouselElementCount: this._getCarouselItemCount(),
                    width: this._getCarouselItemSize() * this._getCarouselItemCount()
                };
            },

            /**
             * @return {Number}
             */
            _getCarouselItemSize: function () {
                var sizeAttr = this._getCarouselItemSizeAttr();
                var sizeInfo = this._decomposeSizeString(sizeAttr);
                var elementSize = this._getElementSize();

                if (sizeInfo.unit === '%') {
                    return Math.round(sizeInfo.number / 100 * elementSize);
                } else if (sizeInfo.unit === 'px') {
                    return sizeInfo.number;
                } else {
                    throw new Error('Invalid state');
                }
            },

            /**
             * @return {Number}
             */
            _getInitialIndex: function () {
                var index = parseInt(this._element.attr('initial-index'), 10);

                if (typeof index === 'number' && !isNaN(index)) {
                    return Math.max(Math.min(index, this._getCarouselItemCount() - 1), 0);
                } else {
                    return 0;
                }
            },

            /**
             * @return {String}
             */
            _getCarouselItemSizeAttr: function () {
                var attrName = 'item-' + (this._isVertical() ? 'height' : 'width');
                var itemSizeAttr = ('' + this._element.attr(attrName)).trim();

                return itemSizeAttr.match(/^\d+(px|%)$/) ? itemSizeAttr : '100%';
            },

            /**
             * @return {Object}
             */
            _decomposeSizeString: function (size) {
                var matches = size.match(/^(\d+)(px|%)/);

                return {
                    number: parseInt(matches[1], 10),
                    unit: matches[2],
                };
            },

            _setupInitialIndex: function () {
                this._scroll = this._getCarouselItemSize() * this._getInitialIndex();
                this._lastActiveIndex = this._getInitialIndex();
                this._scrollTo(this._scroll);
            },

            /**
             * @param {Boolean} swipeable
             */
            setSwipeable: function (swipeable) {
                if (swipeable) {
                    this._element[0].setAttribute('swipeable', '');
                } else {
                    this._element[0].removeAttribute('swipeable');
                }
            },

            /**
             * @return {Boolean}
             */
            isSwipeable: function () {
                return this._element[0].hasAttribute('swipeable');
            },

            /**
             * @param {Number} ratio
             */
            setAutoScrollRatio: function (ratio) {
                if (ratio < 0.0 || ratio > 1.0) {
                    throw new Error('Invalid ratio.');
                }

                this._element[0].setAttribute('auto-scroll-ratio', ratio);
            },

            /**
             * @return {Number}
             */
            getAutoScrollRatio: function (ratio) {
                var attr = this._element[0].getAttribute('auto-scroll-ratio');

                if (!attr) {
                    return 0.5;
                }

                var scrollRatio = parseFloat(attr);
                if (scrollRatio < 0.0 || scrollRatio > 1.0) {
                    throw new Error('Invalid ratio.');
                }

                return isNaN(scrollRatio) ? 0.5 : scrollRatio;
            },

            /**
             * @param {Number} index
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            setActiveCarouselItemIndex: function (index, options) {
                options = options || {};

                index = Math.max(0, Math.min(index, this._getCarouselItemCount() - 1));
                var scroll = this._getCarouselItemSize() * index;
                var max = this._calculateMaxScroll();

                this._scroll = Math.max(0, Math.min(max, scroll));
                this._scrollTo(this._scroll, {animate: options.animation !== 'none', callback: options.callback});

                this._tryFirePostChangeEvent();
            },

            /**
             * @return {Number}
             */
            getActiveCarouselItemIndex: function () {
                var scroll = this._scroll;
                var count = this._getCarouselItemCount();
                var size = this._getCarouselItemSize();

                if (scroll < 0) {
                    return 0;
                }

                for (var i = 0; i < count; i++) {
                    if (size * i <= scroll && size * (i + 1) > scroll) {
                        return i;
                    }
                }

                // max carousel index
                return i;
            },

            /**
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            next: function (options) {
                this.setActiveCarouselItemIndex(this.getActiveCarouselItemIndex() + 1, options);
            },

            /**
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            prev: function (options) {
                this.setActiveCarouselItemIndex(this.getActiveCarouselItemIndex() - 1, options);
            },

            /**
             * @param {Boolean} enabled
             */
            setAutoScrollEnabled: function (enabled) {
                if (enabled) {
                    this._element[0].setAttribute('auto-scroll', '');
                } else {
                    this._element[0].removeAttribute('auto-scroll');
                }
            },

            /**
             * @param {Boolean} enabled
             */
            isAutoScrollEnabled: function (enabled) {
                return this._element[0].hasAttribute('auto-scroll');
            },

            /**
             * @param {Boolean} disabled
             */
            setDisabled: function (disabled) {
                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                } else {
                    this._element[0].removeAttribute('disabled');
                }
            },

            /**
             * @return {Boolean}
             */
            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            /**
             * @param {Boolean} scrollable
             */
            setOverscrollable: function (scrollable) {
                if (scrollable) {
                    this._element[0].setAttribute('overscrollable', '');
                } else {
                    this._element[0].removeAttribute('overscrollable');
                }
            },

            /**
             * @param {Object} trait
             */
            _mixin: function (trait) {
                Object.keys(trait).forEach(function (key) {
                    this[key] = trait[key];
                }.bind(this));
            },

            /**
             * @return {Boolean}
             */
            _isEnabledChangeEvent: function () {
                var elementSize = this._getElementSize();
                var carouselItemSize = this._getCarouselItemSize();

                return this.isAutoScrollEnabled() && elementSize === carouselItemSize;
            },

            /**
             * @return {Boolean}
             */
            _isVertical: function () {
                return this._element.attr('direction') === 'vertical';
            },

            _prepareEventListeners: function () {
                this._hammer = new Hammer(this._element[0], {
                    dragMinDistance: 1
                });

                this._hammer.on('pan panleft panright panup pandown swipe swipeleft swiperight swipeup swipedown', this._bindedOnDrag);
                this._hammer.on('panend', this._bindedOnDragEnd);

                angular.element(window).on('resize', this._bindedOnResize);
            },

            _tryFirePostChangeEvent: function () {
                var currentIndex = this.getActiveCarouselItemIndex();

                if (this._lastActiveIndex !== currentIndex) {
                    var lastActiveIndex = this._lastActiveIndex;
                    this._lastActiveIndex = currentIndex;

                    this.emit('postchange', {
                        carousel: this,
                        activeIndex: currentIndex,
                        lastActiveIndex: lastActiveIndex
                    });
                }
            },

            _onDrag: function (event) {
                if (!this.isSwipeable()) {
                    return;
                }

                var direction = event.direction;
                if ((this._isVertical() && (direction === Hammer.DIRECTION_LEFT || direction === Hammer.DIRECTION_RIGHT)) || (!this._isVertical() && (direction === Hammer.DIRECTION_UP || direction === Hammer.DIRECTION_DOWN))) {
                    return;
                }

                event.srcEvent.stopPropagation();

                this._lastDragEvent = event;

                var scroll = this._scroll - this._getScrollDelta(event);
                this._scrollTo(scroll);
                event.preventDefault();

                this._tryFirePostChangeEvent();
            },

            _onDragEnd: function (event) {
                this._currentElementSize = undefined;
                this._carouselItemElements = undefined;

                if (!this.isSwipeable()) {
                    return;
                }

                this._scroll = this._scroll - this._getScrollDelta(event);

                if (this._getScrollDelta(event) !== 0) {
                    event.srcEvent.stopPropagation();
                }

                if (this._isOverScroll(this._scroll)) {
                    var waitForAction = false;

                    this.emit('overscroll', {
                        carousel: this,
                        activeIndex: this.getActiveCarouselItemIndex(),
                        direction: this._getOverScrollDirection(),
                        waitToReturn: function (promise) {
                            waitForAction = true;
                            promise.then(
                                function () {
                                    this._scrollToKillOverScroll();
                                }.bind(this)
                            );
                        }.bind(this)
                    });

                    if (!waitForAction) {
                        this._scrollToKillOverScroll();
                    }
                } else {
                    this._startMomemtumScroll(event);
                }
                this._lastDragEvent = null;
                event.preventDefault();
            },

            _getTouchEvents: function () {
                var EVENTS = [
                    'pan', 'panstart', 'panend',
                    'panup', 'pandown', 'panleft',
                    'panright', 'swipe', 'swipeup',
                    'swipedown', 'swipeleft', 'swiperight'
                ];

                return EVENTS.join(' ');
            },

            /**
             * @return {Boolean}
             */
            isOverscrollable: function () {
                return this._element[0].hasAttribute('overscrollable');
            },

            _startMomemtumScroll: function (event) {
                if (this._lastDragEvent) {
                    var velocity = this._getScrollVelocity(this._lastDragEvent);
                    var duration = 0.3;
                    var scrollDelta = duration * 100 * velocity;
                    var scroll = this._scroll + (this._getScrollDelta(this._lastDragEvent) > 0 ? -scrollDelta : scrollDelta);
                    scroll = this._normalizeScrollPosition(scroll);

                    this._scroll = scroll;

                    animit(this._getCarouselItemElements())
                        .queue({
                            transform: this._generateScrollTransform(this._scroll)
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            done();
                            this._tryFirePostChangeEvent();
                        }.bind(this))
                        .play();
                }
            },

            _normalizeScrollPosition: function (scroll) {
                var max = this._calculateMaxScroll();

                if (this.isAutoScrollEnabled()) {
                    var arr = [];
                    var size = this._getCarouselItemSize();

                    for (var i = 0; i < this._getCarouselItemCount(); i++) {
                        if (max >= i * size) {
                            arr.push(i * size);
                        }
                    }
                    arr.push(max);

                    arr.sort(function (left, right) {
                        left = Math.abs(left - scroll);
                        right = Math.abs(right - scroll);

                        return left - right;
                    });

                    arr = arr.filter(function (item, pos) {
                        return !pos || item != arr[pos - 1];
                    });

                    var lastScroll = this._lastActiveIndex * size,
                        scrollRatio = Math.abs(scroll - lastScroll) / size;

                    if (scrollRatio <= this.getAutoScrollRatio()) {
                        return lastScroll;
                    }
                    else if (scrollRatio > this.getAutoScrollRatio() && scrollRatio < 1.0) {
                        if (arr[0] === lastScroll && arr.length > 1) {
                            return arr[1];
                        }
                    }

                    return arr[0];
                } else {
                    return Math.max(0, Math.min(max, scroll));
                }
            },

            /**
             * @return {Array}
             */
            _getCarouselItemElements: function () {
                var nodeList = this._element[0].children,
                    rv = [];

                for (var i = nodeList.length; i--;) {
                    rv.unshift(nodeList[i]);
                }

                rv = rv.filter(function (item) {
                    return item.nodeName.toLowerCase() === 'ons-carousel-item';
                });

                return rv;
            },

            /**
             * @param {Number} scroll
             * @param {Object} [options]
             */
            _scrollTo: function (scroll, options) {
                options = options || {};
                var self = this;
                var isOverscrollable = this.isOverscrollable();

                if (options.animate) {
                    animit(this._getCarouselItemElements())
                        .queue({
                            transform: this._generateScrollTransform(normalizeScroll(scroll))
                        }, {
                            duration: 0.3,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play(options.callback);
                } else {
                    animit(this._getCarouselItemElements())
                        .queue({
                            transform: this._generateScrollTransform(normalizeScroll(scroll))
                        })
                        .play(options.callback);
                }

                function normalizeScroll(scroll) {
                    var ratio = 0.35;

                    if (scroll < 0) {
                        return isOverscrollable ? Math.round(scroll * ratio) : 0;
                    }

                    var maxScroll = self._calculateMaxScroll();
                    if (maxScroll < scroll) {
                        return isOverscrollable ? maxScroll + Math.round((scroll - maxScroll) * ratio) : maxScroll;
                    }

                    return scroll;
                }
            },

            _calculateMaxScroll: function () {
                var max = this._getCarouselItemCount() * this._getCarouselItemSize() - this._getElementSize();
                return Math.ceil(max < 0 ? 0 : max); // Need to return an integer value.
            },

            _isOverScroll: function (scroll) {
                if (scroll < 0 || scroll > this._calculateMaxScroll()) {
                    return true;
                }
                return false;
            },

            _getOverScrollDirection: function () {
                if (this._isVertical()) {
                    if (this._scroll <= 0) {
                        return 'up';
                    }
                    else {
                        return 'down';
                    }
                }
                else {
                    if (this._scroll <= 0) {
                        return 'left';
                    }
                    else {
                        return 'right';
                    }
                }
            },

            _scrollToKillOverScroll: function () {
                var duration = 0.4;

                if (this._scroll < 0) {
                    animit(this._getCarouselItemElements())
                        .queue({
                            transform: this._generateScrollTransform(0)
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .4, .1, 1)'
                        })
                        .play();
                    this._scroll = 0;
                    return;
                }

                var maxScroll = this._calculateMaxScroll();

                if (maxScroll < this._scroll) {
                    animit(this._getCarouselItemElements())
                        .queue({
                            transform: this._generateScrollTransform(maxScroll)
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .4, .1, 1)'
                        })
                        .play();
                    this._scroll = maxScroll;
                    return;
                }

                return;
            },

            /**
             * @return {Number}
             */
            _getCarouselItemCount: function () {
                return this._getCarouselItemElements().length;
            },

            /**
             * Refresh carousel item layout.
             */
            refresh: function () {
                // Bug fix
                if (this._getCarouselItemSize() === 0) {
                    return;
                }

                this._mixin(this._isVertical() ? VerticalModeTrait : HorizontalModeTrait);
                this._layoutCarouselItems();

                if (this._lastState && this._lastState.width > 0) {
                    var scroll = this._scroll;

                    if (this._isOverScroll(scroll)) {
                        this._scrollToKillOverScroll();
                    }
                    else {
                        if (this.isAutoScrollEnabled()) {
                            scroll = this._normalizeScrollPosition(scroll);
                        }

                        this._scrollTo(scroll);
                    }
                }

                this._saveLastState();

                this.emit('refresh', {
                    carousel: this
                });
            },

            /**
             */
            first: function () {
                this.setActiveCarouselItemIndex(0);
            },

            /**
             */
            last: function () {
                this.setActiveCarouselItemIndex(
                    Math.max(this._getCarouselItemCount() - 1, 0)
                );
            },

            _destroy: function () {
                this.emit('destroy');

                this._hammer.off('pan panleft panright panup pandown swipe swipeleft swiperight swipeup swipedown', this._bindedOnDrag);
                this._hammer.off('panend', this._bindedOnDragEnd);

                angular.element(window).off('resize', this._bindedOnResize);

                this._element = this._scope = this._attrs = null;
            }
        });

        MicroEvent.mixin(CarouselView);

        return CarouselView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.factory('DialogView', ['$onsen', 'DialogAnimator', 'IOSDialogAnimator', 'AndroidDialogAnimator', 'SlideDialogAnimator', function ($onsen, DialogAnimator, IOSDialogAnimator, AndroidDialogAnimator, SlideDialogAnimator) {

        var DialogView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this._element.css('display', 'none');

                this._dialog = angular.element(element[0].querySelector('.dialog'));
                this._mask = angular.element(element[0].querySelector('.dialog-mask'));

                this._dialog.css('z-index', 20001);
                this._mask.css('z-index', 20000);

                this._mask.on('click', this._cancel.bind(this));

                this._visible = false;
                this._doorLock = new DoorLock();

                this._animation = DialogView._animatorDict[typeof attrs.animation !== 'undefined' ?
                    attrs.animation : 'default'];

                if (!this._animation) {
                    throw new Error('No such animation: ' + attrs.animation);
                }

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            /**
             *  @return {Object}
             */
            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler;
            },

            _getMaskColor: function () {
                return this._element[0].getAttribute('mask-color') || 'rgba(0, 0, 0, 0.2)';
            },

            /**
             * Show dialog.
             *
             * @param {Object} [options]
             * @param {String} [options.animation] animation type
             * @param {Function} [options.callback] callback after dialog is shown
             */
            show: function (options) {
                options = options || {};
                var cancel = false,
                    callback = options.callback || function () {
                        };

                this.emit('preshow', {
                    dialog: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        this._element.css('display', 'block');
                        this._mask.css('opacity', 1);

                        this._mask.css('backgroundColor', this._getMaskColor());

                        if (options.animation) {
                            animation = DialogView._animatorDict[options.animation];
                        }

                        animation.show(this, function () {
                            this._visible = true;
                            unlock();
                            this.emit('postshow', {dialog: this});
                            callback();
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * Hide dialog.
             *
             * @param {Object} [options]
             * @param {String} [options.animation] animation type
             * @param {Function} [options.callback] callback after dialog is hidden
             */
            hide: function (options) {
                options = options || {};
                var cancel = false,
                    callback = options.callback || function () {
                        };

                this.emit('prehide', {
                    dialog: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        if (options.animation) {
                            animation = DialogView._animatorDict[options.animation];
                        }

                        animation.hide(this, function () {
                            this._element.css('display', 'none');
                            this._visible = false;
                            unlock();
                            this.emit('posthide', {dialog: this});
                            callback();
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * True if dialog is visible.
             *
             * @return {Boolean}
             */
            isShown: function () {
                return this._visible;
            },

            /**
             * Destroy dialog.
             */
            destroy: function () {
                if (this._parentScope) {
                    this._parentScope.$destroy();
                    this._parentScope = null;
                } else {
                    this._scope.$destroy();
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._element.remove();
                this._deviceBackButtonHandler.destroy();
                this._mask.off();

                this._deviceBackButtonHandler = this._scope = this._attrs = this._element = this._dialog = this._mask = null;
            },

            /**
             * Disable or enable dialog.
             *
             * @param {Boolean}
             */
            setDisabled: function (disabled) {
                if (typeof disabled !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (disabled) {
                    this._element.attr('disabled', true);
                } else {
                    this._element.removeAttr('disabled');
                }
            },

            /**
             * True if dialog is disabled.
             *
             * @return {Boolean}
             */
            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            /**
             * Make dialog cancelable or uncancelable.
             *
             * @param {Boolean}
             */
            setCancelable: function (cancelable) {
                if (typeof cancelable !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (cancelable) {
                    this._element.attr('cancelable', true);
                } else {
                    this._element.removeAttr('cancelable');
                }
            },

            /**
             * True if the dialog is cancelable.
             *
             * @return {Boolean}
             */
            isCancelable: function () {
                return this._element[0].hasAttribute('cancelable');
            },

            _cancel: function () {
                if (this.isCancelable()) {
                    this.hide({
                        callback: function () {
                            this.emit('cancel');
                        }.bind(this)
                    });
                }
            },

            _onDeviceBackButton: function (event) {
                if (this.isCancelable()) {
                    this._cancel.bind(this)();
                } else {
                    event.callParentHandler();
                }
            }
        });

        DialogView._animatorDict = {
            'default': $onsen.isAndroid() ? new AndroidDialogAnimator() : new IOSDialogAnimator(),
            'fade': $onsen.isAndroid() ? new AndroidDialogAnimator() : new IOSDialogAnimator(),
            'slide': new SlideDialogAnimator(),
            'none': new DialogAnimator()
        };

        /**
         * @param {String} name
         * @param {DialogAnimator} animator
         */
        DialogView.registerAnimator = function (name, animator) {
            if (!(animator instanceof DialogAnimator)) {
                throw new Error('"animator" param must be an instance of DialogAnimator');
            }
            this._animatorDict[name] = animator;
        };

        MicroEvent.mixin(DialogView);

        return DialogView;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('DialogAnimator', function () {
        var DialogAnimator = Class.extend({
            show: function (dialog, callback) {
                callback();
            },

            hide: function (dialog, callback) {
                callback();
            }
        });

        return DialogAnimator;
    });
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.factory('FadePopoverAnimator', ['PopoverAnimator', function (PopoverAnimator) {

        /**
         * Fade animator for popover.
         */
        var FadePopoverAnimator = PopoverAnimator.extend({

            timing: 'cubic-bezier(.1, .7, .4, 1)',
            duration: 0.2,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} popover
             * @param {Function} callback
             */
            show: function (popover, callback) {
                var pop = popover._element[0].querySelector('.popover'),
                    mask = popover._element[0].querySelector('.popover-mask');

                animit.runAll(
                    animit(mask)
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(pop)
                        .queue({
                            transform: 'scale3d(1.3, 1.3, 1.0)',
                            opacity: 0
                        })
                        .queue({
                            transform: 'scale3d(1.0, 1.0,  1.0)',
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} popover
             * @param {Function} callback
             */
            hide: function (popover, callback) {
                var pop = popover._element[0].querySelector('.popover'),
                    mask = popover._element[0].querySelector('.popover-mask');

                animit.runAll(
                    animit(mask)
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(pop)
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return FadePopoverAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('FadeTransitionAnimator', ['NavigatorTransitionAnimator', function (NavigatorTransitionAnimator) {

        /**
         * Fade-in screen transition.
         */
        var FadeTransitionAnimator = NavigatorTransitionAnimator.extend({

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} callback
             */
            push: function (enterPage, leavePage, callback) {

                animit.runAll(
                    animit([enterPage.getPageView().getContentElement(), enterPage.getPageView().getBackgroundElement()])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1
                            },
                            duration: 0.4,
                            timing: 'linear'
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        }),

                    animit(enterPage.getPageView().getToolbarElement())
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1
                            },
                            duration: 0.4,
                            timing: 'linear'
                        })
                        .resetStyle()
                );

            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} done
             */
            pop: function (enterPage, leavePage, callback) {
                animit.runAll(
                    animit([leavePage.getPageView().getContentElement(), leavePage.getPageView().getBackgroundElement()])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 0
                            },
                            duration: 0.4,
                            timing: 'linear'
                        })
                        .queue(function (done) {
                            callback();
                            done();
                        }),

                    animit(leavePage.getPageView().getToolbarElement())
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 0
                            },
                            duration: 0.4,
                            timing: 'linear'
                        })
                );
            }
        });

        return FadeTransitionAnimator;
    }]);

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('GenericView', ['$onsen', function ($onsen) {

        var GenericView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
            }
        });
        MicroEvent.mixin(GenericView);

        return GenericView;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('IOSAlertDialogAnimator', ['DialogAnimator', function (DialogAnimator) {

        /**
         * iOS style animator for alert dialog.
         */
        var IOSAlertDialogAnimator = DialogAnimator.extend({

            timing: 'cubic-bezier(.1, .7, .4, 1)',
            duration: 0.2,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            show: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(1.3, 1.3, 1.0)',
                                opacity: 0.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0) scale3d(1.0, 1.0, 1.0)',
                                opacity: 1.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            hide: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                opacity: 1.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                opacity: 0.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return IOSAlertDialogAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('IOSDialogAnimator', ['DialogAnimator', function (DialogAnimator) {

        /**
         * iOS style animator for dialog.
         */
        var IOSDialogAnimator = DialogAnimator.extend({

            timing: 'ease-in-out',
            duration: 0.3,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            show: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, 300%, 0)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0)'
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            hide: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, -50%, 0)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3d(-50%, 300%, 0)'
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return IOSDialogAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('IOSSlideTransitionAnimator', ['NavigatorTransitionAnimator', 'PageView', function (NavigatorTransitionAnimator, PageView) {

        /**
         * Slide animator for navigator transition like iOS's screen slide transition.
         */
        var IOSSlideTransitionAnimator = NavigatorTransitionAnimator.extend({

            /** Black mask */
            backgroundMask: angular.element(
                '<div style="position: absolute; width: 100%;' +
                'height: 100%; background-color: black; opacity: 0;"></div>'
            ),

            _decompose: function (page) {
                var elements = [];

                var left = page.getPageView().getToolbarLeftItemsElement();
                var right = page.getPageView().getToolbarRightItemsElement();

                var other = []
                    .concat(left.children.length === 0 ? left : excludeBackButtonLabel(left.children))
                    .concat(right.children.length === 0 ? right : excludeBackButtonLabel(right.children));


                var pageLabels = [
                    page.getPageView().getToolbarCenterItemsElement(),
                    page.getPageView().getToolbarBackButtonLabelElement()
                ];

                return {
                    pageLabels: pageLabels,
                    other: other,
                    content: page.getPageView().getContentElement(),
                    background: page.getPageView().getBackgroundElement(),
                    toolbar: page.getPageView().getToolbarElement(),
                    bottomToolbar: page.getPageView().getBottomToolbarElement()
                };

                function excludeBackButtonLabel(elements) {
                    var result = [];

                    for (var i = 0; i < elements.length; i++) {
                        if (elements[i].nodeName.toLowerCase() === 'ons-back-button') {
                            result.push(elements[i].querySelector('.ons-back-button__icon'));
                        } else {
                            result.push(elements[i]);
                        }
                    }

                    return result;
                }
            },

            _shouldAnimateToolbar: function (enterPage, leavePage) {
                var bothPageHasToolbar =
                    enterPage.getPageView().hasToolbarElement() &&
                    leavePage.getPageView().hasToolbarElement();

                var noAndroidLikeToolbar =
                    !angular.element(enterPage.getPageView().getToolbarElement()).hasClass('navigation-bar--android') && !angular.element(leavePage.getPageView().getToolbarElement()).hasClass('navigation-bar--android');

                return bothPageHasToolbar && noAndroidLikeToolbar;
            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} callback
             */
            push: function (enterPage, leavePage, callback) {
                var mask = this.backgroundMask.remove();
                leavePage.element[0].parentNode.insertBefore(mask[0], leavePage.element[0].nextSibling);

                var enterPageDecomposition = this._decompose(enterPage);
                var leavePageDecomposition = this._decompose(leavePage);

                var delta = (function () {
                    var rect = leavePage.element[0].getBoundingClientRect();
                    return Math.round(((rect.right - rect.left) / 2) * 0.6);
                })();

                var maskClear = animit(mask[0])
                    .queue({
                        opacity: 0,
                        transform: 'translate3d(0, 0, 0)'
                    })
                    .queue({
                        opacity: 0.1
                    }, {
                        duration: 0.4,
                        timing: 'cubic-bezier(.1, .7, .1, 1)'
                    })
                    .resetStyle()
                    .queue(function (done) {
                        mask.remove();
                        done();
                    });

                var shouldAnimateToolbar = this._shouldAnimateToolbar(enterPage, leavePage);

                if (shouldAnimateToolbar) {
                    enterPage.element.css({zIndex: 'auto'});
                    leavePage.element.css({zIndex: 'auto'});

                    animit.runAll(
                        maskClear,

                        animit([enterPageDecomposition.content, enterPageDecomposition.bottomToolbar, enterPageDecomposition.background])
                            .queue({
                                css: {
                                    transform: 'translate3D(100%, 0px, 0px)',
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)',
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(enterPageDecomposition.toolbar)
                            //.queue({
                            //    css: {
                            //        background: 'none',
                            //        backgroundColor: 'rgba(0, 0, 0, 0)',
                            //        borderColor: 'rgba(0, 0, 0, 0)'
                            //    },
                            //    duration: 0
                            //})
                            .wait(0.3)
                            .resetStyle({
                                duration: 0.1,
                                transition: 'background-color 0.1s linear, ' +
                                'border-color 0.1s linear'
                            }),

                        animit(enterPageDecomposition.pageLabels)
                            .queue({
                                css: {
                                    transform: 'translate3d(' + delta + 'px, 0, 0)',
                                    opacity: 0
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(enterPageDecomposition.other)
                            .queue({
                                css: {opacity: 0},
                                duration: 0
                            })
                            .queue({
                                css: {opacity: 1},
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit([leavePageDecomposition.content, leavePageDecomposition.bottomToolbar, leavePageDecomposition.background])
                            .queue({
                                css: {
                                    transform: 'translate3D(0, 0, 0)',
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(-25%, 0px, 0px)',
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle()
                            .queue(function (done) {
                                enterPage.element.css({zIndex: ''});
                                leavePage.element.css({zIndex: ''});
                                callback();
                                done();
                            }),

                        animit(leavePageDecomposition.pageLabels)
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(-' + delta + 'px, 0, 0)',
                                    opacity: 0,
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(leavePageDecomposition.other)
                            .queue({
                                css: {opacity: 1},
                                duration: 0
                            })
                            .queue({
                                css: {opacity: 0},
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle()
                    );

                } else {

                    animit.runAll(
                        maskClear,

                        animit(enterPage.element[0])
                            .queue({
                                css: {
                                    transform: 'translate3D(100%, 0px, 0px)',
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)',
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(leavePage.element[0])
                            .queue({
                                css: {
                                    transform: 'translate3D(0, 0, 0)'
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(-25%, 0px, 0px)'
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle()
                            .queue(function (done) {
                                callback();
                                done();
                            })
                    );

                }
            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} done
             */
            pop: function (enterPage, leavePage, done) {
                var mask = this.backgroundMask.remove();
                enterPage.element[0].parentNode.insertBefore(mask[0], enterPage.element[0].nextSibling);

                var enterPageDecomposition = this._decompose(enterPage);
                var leavePageDecomposition = this._decompose(leavePage);

                var delta = (function () {
                    var rect = leavePage.element[0].getBoundingClientRect();
                    return Math.round(((rect.right - rect.left) / 2) * 0.6);
                })();

                var maskClear = animit(mask[0])
                    .queue({
                        opacity: 0.1,
                        transform: 'translate3d(0, 0, 0)'
                    })
                    .queue({
                        opacity: 0
                    }, {
                        duration: 0.4,
                        timing: 'cubic-bezier(.1, .7, .1, 1)'
                    })
                    .resetStyle()
                    .queue(function (done) {
                        mask.remove();
                        done();
                    });

                var shouldAnimateToolbar = this._shouldAnimateToolbar(enterPage, leavePage);

                if (shouldAnimateToolbar) {

                    enterPage.element.css({zIndex: 'auto'});
                    leavePage.element.css({zIndex: 'auto'});

                    animit.runAll(
                        maskClear,

                        animit([enterPageDecomposition.content, enterPageDecomposition.bottomToolbar, enterPageDecomposition.background])
                            .queue({
                                css: {
                                    transform: 'translate3D(-25%, 0px, 0px)',
                                    opacity: 0.9
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)',
                                    opacity: 1.0
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(enterPageDecomposition.pageLabels)
                            .queue({
                                css: {
                                    transform: 'translate3d(-' + delta + 'px, 0, 0)',
                                    opacity: 0
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(enterPageDecomposition.toolbar)
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(enterPageDecomposition.other)
                            .queue({
                                css: {opacity: 0},
                                duration: 0
                            })
                            .queue({
                                css: {opacity: 1},
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit([leavePageDecomposition.content, leavePageDecomposition.bottomToolbar, leavePageDecomposition.background])
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)'
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(100%, 0px, 0px)'
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .wait(0)
                            .queue(function (finish) {
                                enterPage.element.css({zIndex: ''});
                                leavePage.element.css({zIndex: ''});
                                done();
                                finish();
                            }),

                        animit(leavePageDecomposition.other)
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 0,
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            }),

                        animit(leavePageDecomposition.toolbar)
                            .queue({
                                css: {
                                    background: 'none',
                                    backgroundColor: 'rgba(0, 0, 0, 0)',
                                    borderColor: 'rgba(0, 0, 0, 0)'
                                },
                                duration: 0.4
                            }),

                        animit(leavePageDecomposition.pageLabels)
                            .queue({
                                css: {
                                    transform: 'translate3d(0, 0, 0)',
                                    opacity: 1.0
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3d(' + delta + 'px, 0, 0)',
                                    opacity: 0,
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                    );
                } else {

                    animit.runAll(
                        maskClear,

                        animit(enterPage.element[0])
                            .queue({
                                css: {
                                    transform: 'translate3D(-25%, 0px, 0px)',
                                    opacity: 0.9
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)',
                                    opacity: 1.0
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .resetStyle(),

                        animit(leavePage.element[0])
                            .queue({
                                css: {
                                    transform: 'translate3D(0px, 0px, 0px)'
                                },
                                duration: 0
                            })
                            .queue({
                                css: {
                                    transform: 'translate3D(100%, 0px, 0px)'
                                },
                                duration: 0.4,
                                timing: 'cubic-bezier(.1, .7, .1, 1)'
                            })
                            .queue(function (finish) {
                                done();
                                finish();
                            })
                    );
                }
            }
        });

        return IOSSlideTransitionAnimator;
    }]);

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('LazyRepeatView', ['$onsen', '$document', '$compile', function ($onsen, $document, $compile) {

        var LazyRepeatView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs, linker) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._linker = linker;

                this._parentElement = element.parent();
                this._pageContent = this._findPageContent();

                if (!this._pageContent) {
                    throw new Error('ons-lazy-repeat must be a descendant of an <ons-page> object.');
                }

                this._itemHeightSum = [];
                this._maxIndex = 0;

                this._delegate = this._getDelegate();

                this._renderedElements = {};
                this._addEventListeners();

                this._scope.$watch(this._countItems.bind(this), this._onChange.bind(this));

                this._scope.$on('$destroy', this._destroy.bind(this));
                this._delegate.render = function($done){
                    this._render();
                    if($done && angular.isFunction($done)) $done();
                }.bind(this);
                this._onChange();
            },

            _getDelegate: function () {
                var delegate = this._scope.$eval(this._attrs.onsLazyRepeat);

                if (typeof delegate === 'undefined') {
                    /*jshint evil:true */
                    delegate = eval(this._attrs.onsLazyRepeat);
                }

                return delegate;
            },

            _countItems: function () {
                return this._delegate.countItems();
            },

            _getItemHeight: function (i) {
                return this._delegate.calculateItemHeight(i);
            },

            _getTopOffset: function () {
                return this._parentElement[0].getBoundingClientRect().top;
            },

            _render: function () {
                var items = this._getItemsInView(),
                    keep = {};

                this._parentElement.css('height', this._itemHeightSum[this._maxIndex] + 'px');

                for (var i = 0, l = items.length; i < l; i++) {
                    var _item = items[i];
                    this._renderElement(_item);
                    keep[_item.index] = true;
                }

                for (var key in this._renderedElements) {
                    if (this._renderedElements.hasOwnProperty(key) && !keep.hasOwnProperty(key)) {
                        this._removeElement(key);
                    }
                }
            },

            _isRendered: function (i) {
                return this._renderedElements.hasOwnProperty(i);
            },

            _renderElement: function (item) {
                if (this._isRendered(item.index)) {
                    // Update content even if it's already added to DOM
                    // to account for changes within the list.
                    var currentItem = this._renderedElements[item.index];

                    if (this._delegate.configureItemScope) {
                        this._delegate.configureItemScope(item.index, currentItem.scope);
                    }

                    // Fix position.
                    var element = this._renderedElements[item.index].element;
                    element[0].style.top = item.top + 'px';

                    return;
                }

                var childScope = this._scope.$new();
                this._addSpecialProperties(item.index, childScope);

                this._linker(childScope, function (clone) {
                    if (this._delegate.configureItemScope) {
                        this._delegate.configureItemScope(item.index, childScope);
                    }
                    else if (this._delegate.createItemContent) {
                        clone.append(this._delegate.createItemContent(item.index));
                        $compile(clone[0].firstChild)(childScope);
                    }

                    this._parentElement.append(clone);

                    clone.css({
                        position: 'absolute',
                        top: item.top + 'px',
                        left: '0px',
                        right: '0px',
                        display: 'none'
                    });

                    var element = {
                        element: clone,
                        scope: childScope
                    };

                    // Don't show elements before they are finished rendering.
                    this._scope.$evalAsync(function () {
                        clone.css('display', 'block');
                    });

                    this._renderedElements[item.index] = element;
                }.bind(this));
            },

            _removeElement: function (i) {
                if (!this._isRendered(i)) {
                    return;
                }

                var element = this._renderedElements[i];

                if (this._delegate.destroyItemScope) {
                    this._delegate.destroyItemScope(i, element.scope);
                }
                else if (this._delegate.destroyItemContent) {
                    this._delegate.destroyItemContent(i, element.element.children()[0]);
                }

                element.element.remove();
                element.scope.$destroy();
                element.element = element.scope = null;

                delete this._renderedElements[i];
            },

            _removeAllElements: function () {
                for (var key in this._renderedElements) {
                    if (this._removeElement.hasOwnProperty(key)) {
                        this._removeElement(key);
                    }
                }
            },

            _calculateStartIndex: function (current) {
                var start = 0,
                    end = this._maxIndex;

                // Binary search for index at top of screen so
                // we can speed up rendering.
                while (true) {
                    var middle = Math.floor((start + end) / 2),
                        value = current + this._itemHeightSum[middle];

                    if (end < start) {
                        return 0;
                    }
                    else if (value >= 0 && value - this._getItemHeight(middle) < 0) {
                        return middle;
                    }
                    else if (isNaN(value) || value >= 0) {
                        end = middle - 1;
                    }
                    else {
                        start = middle + 1;
                    }

                }
            },

            _recalculateItemHeightSum: function () {
                var sums = this._itemHeightSum;

                for (var i = 0, sum = 0; i < Math.min(sums.length, this._countItems()); i++) {
                    sum += this._getItemHeight(i);
                    sums[i] = sum;
                }
            },

            _getItemsInView: function () {
                var topOffset = this._getTopOffset(),
                    topPosition = topOffset,
                    cnt = this._countItems();

                if (cnt !== this._itemCount) {
                    this._recalculateItemHeightSum();
                    this._maxIndex = cnt - 1;
                }
                this._itemCount = cnt;

                var startIndex = this._calculateStartIndex(topPosition);
                startIndex = Math.max(startIndex - 30, 0);

                if (startIndex > 0) {
                    topPosition += this._itemHeightSum[startIndex - 1];
                }

                var items = [];
                for (var i = startIndex; i < cnt && topPosition < 4 * window.innerHeight; i++) {
                    var h = this._getItemHeight(i);

                    if (i >= this._itemHeightSum.length) {
                        this._itemHeightSum = this._itemHeightSum.concat(new Array(100));
                    }

                    if (i > 0) {
                        this._itemHeightSum[i] = this._itemHeightSum[i - 1] + h;
                    }
                    else {
                        this._itemHeightSum[i] = h;
                    }

                    this._maxIndex = Math.max(i, this._maxIndex);

                    items.push({
                        index: i,
                        top: topPosition - topOffset
                    });

                    topPosition += h;
                }

                return items;
            },

            _addSpecialProperties: function (i, scope) {
                scope.$index = i;
                scope.$first = i === 0;
                scope.$last = i === this._countItems() - 1;
                scope.$middle = !scope.$first && !scope.$last;
                scope.$even = i % 2 === 0;
                scope.$odd = !scope.$even;
            },

            _onChange: function () {
                this._render();
            },

            _findPageContent: function () {
                var e = this._element[0];

                while (e.parentNode) {
                    e = e.parentNode;

                    if (e.className) {
                        if (e.className.split(/\s+/).indexOf('page__content') >= 0) {
                            break;
                        }
                    }
                }

                return e;
            },

            _debounce: function (func, wait, immediate) {
                var timeout;
                return function () {
                    var context = this, args = arguments;
                    var later = function () {
                        timeout = null;
                        if (!immediate) {
                            func.apply(context, args);
                        }
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) {
                        func.apply(context, args);
                    }
                };
            },

            _doubleFireOnTouchend: function () {
                this._render();
                this._debounce(this._render.bind(this), 100);
            },

            _addEventListeners: function () {
                if (ons.platform.isIOS()) {
                    this._boundOnChange = this._debounce(this._onChange.bind(this), 30);
                } else {
                    this._boundOnChange = this._onChange.bind(this);
                }

                this._pageContent.addEventListener('scroll', this._boundOnChange.bind(this), true);

                if (ons.platform.isIOS()) {
                    this._pageContent.addEventListener('touchmove', this._boundOnChange.bind(this), true);
                    this._pageContent.addEventListener('touchend', this._doubleFireOnTouchend.bind(this), true);
                }

                $document[0].addEventListener('resize', this._boundOnChange.bind(this), true);
            },

            _removeEventListeners: function () {
                this._pageContent.removeEventListener('scroll', this._boundOnChange.bind(this), true);

                if (ons.platform.isIOS()) {
                    this._pageContent.removeEventListener('touchmove', this._boundOnChange.bind(this), true);
                    this._pageContent.removeEventListener('touchend', this._doubleFireOnTouchend.bind(this), true);
                }

                $document[0].removeEventListener('resize', this._boundOnChange.bind(this), true);
            },

            _destroy: function () {
                this._removeEventListeners();
                this._removeAllElements();
                this._parentElement = this._renderedElements = this._element = this._scope = this._attrs = null;
            }
        });

        return LazyRepeatView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('LiftTransitionAnimator', ['NavigatorTransitionAnimator', function (NavigatorTransitionAnimator) {

        /**
         * Lift screen transition.
         */
        var LiftTransitionAnimator = NavigatorTransitionAnimator.extend({

            /** Black mask */
            backgroundMask: angular.element(
                '<div style="position: absolute; width: 100%;' +
                'height: 100%; background-color: black;"></div>'
            ),

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} callback
             */
            push: function (enterPage, leavePage, callback) {
                var mask = this.backgroundMask.remove();
                leavePage.element[0].parentNode.insertBefore(mask[0], leavePage.element[0]);

                var maskClear = animit(mask[0])
                    .wait(0.6)
                    .queue(function (done) {
                        mask.remove();
                        done();
                    });

                animit.runAll(
                    maskClear,

                    animit(enterPage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 100%, 0)',
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                            },
                            duration: 0.4,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .wait(0.2)
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        }),

                    animit(leavePage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1.0
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, -10%, 0)',
                                opacity: 0.9
                            },
                            duration: 0.4,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                );

            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} callback
             */
            pop: function (enterPage, leavePage, callback) {
                var mask = this.backgroundMask.remove();
                enterPage.element[0].parentNode.insertBefore(mask[0], enterPage.element[0]);

                animit.runAll(
                    animit(mask[0])
                        .wait(0.4)
                        .queue(function (done) {
                            mask.remove();
                            done();
                        }),

                    animit(enterPage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0, -10%, 0)',
                                opacity: 0.9
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                                opacity: 1.0
                            },
                            duration: 0.4,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .resetStyle()
                        .wait(0.4)
                        .queue(function (done) {
                            callback();
                            done();
                        }),

                    animit(leavePage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 100%, 0)'
                            },
                            duration: 0.4,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                );
            }
        });

        return LiftTransitionAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('ModalView', ['$onsen', '$rootScope', function ($onsen, $rootScope) {

        var ModalView = Class.extend({
            _element: undefined,
            _scope: undefined,

            /**
             * @param {Object} scope
             * @param {jqLite} element
             */
            init: function (scope, element) {
                this._scope = scope;
                this._element = element;

                var pageView = $rootScope.ons.findParentComponentUntil('ons-page', this._element);
                if (pageView) {
                    this._pageContent = angular.element(pageView._element[0].querySelector('.page__content'));
                }

                this._scope.$on('$destroy', this._destroy.bind(this));
                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));

                this.hide();
            },

            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler;
            },

            /**
             * Show modal view.
             */
            show: function () {
                this._element.removeClass("modal-hide").addClass("modal-show");
                this._element.css('display', 'table');
            },

            _isVisible: function () {
                return this._element[0].clientWidth > 0;
            },

            _onDeviceBackButton: function () {
                // Do nothing and stop device-backbutton handler chain.
                return;
            },

            /**
             * Hide modal view.
             */
            hide: function () {
                this._element.removeClass("modal-show").addClass("modal-hide");
                this._element.css('display', 'none');
            },

            /**
             * Toggle modal view visibility.
             */
            toggle: function () {
                if (this._isVisible()) {
                    return this.hide.apply(this, arguments);
                } else {
                    return this.show.apply(this, arguments);
                }
            },

            _destroy: function () {
                this.emit('destroy', {page: this});

                this._deviceBackButtonHandler.destroy();

                this._element = this._scope = null;
            }
        });
        MicroEvent.mixin(ModalView);

        return ModalView;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    var NavigatorPageObject = Class.extend({
        /**
         * @param {Object} params
         * @param {Object} params.page
         * @param {Object} params.element
         * @param {Object} params.pageScope
         * @param {Object} params.options
         * @param {Object} params.navigator
         */
        init: function (params) {
            this.page = params.page;
            this.name = params.page;
            this.element = params.element;
            this.pageScope = params.pageScope;
            this.options = params.options;
            this.navigator = params.navigator;

            // Block events while page is being animated to stop scrolling, pressing buttons, etc.
            this._blockEvents = function (event) {
                if (this.navigator._isPopping || this.navigator._isPushing) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }.bind(this);

            this.element.on(this._pointerEvents, this._blockEvents);
        },

        _pointerEvents: 'touchmove',

        /**
         * @return {PageView}
         */
        getPageView: function () {
            if (!this._pageView) {
                this._pageView = this.element.inheritedData('ons-page');
                if (!this._pageView) {
                    throw new Error('Fail to fetch PageView from ons-page element.');
                }
            }
            return this._pageView;
        },

        destroy: function () {
            this.pageScope.$destroy();

            this.element.off(this._pointerEvents, this._blockEvents);
            this.element.remove();
            this.element = null;

            this._pageView = null;
            this.pageScope = null;
            this.options = null;

            var index = this.navigator.pages.indexOf(this);
            if (index !== -1) {
                this.navigator.pages.splice(index, 1);
            }

            this.navigator = null;
        }
    });

    module.factory('NavigatorView', ['$http', '$parse', '$templateCache', '$compile', '$onsen', '$timeout', 'SimpleSlideTransitionAnimator', 'NavigatorTransitionAnimator', 'LiftTransitionAnimator', 'NullTransitionAnimator', 'IOSSlideTransitionAnimator', 'FadeTransitionAnimator', function ($http, $parse, $templateCache, $compile, $onsen, $timeout,
                                                                                                                                                                                                                                                                                                  SimpleSlideTransitionAnimator, NavigatorTransitionAnimator, LiftTransitionAnimator,
                                                                                                                                                                                                                                                                                                  NullTransitionAnimator, IOSSlideTransitionAnimator, FadeTransitionAnimator) {

        /**
         * Manages the page navigation backed by page stack.
         *
         * @class NavigatorView
         */
        var NavigatorView = Class.extend({

            /**
             * @member {jqLite} Object
             */
            _element: undefined,

            /**
             * @member {Object} Object
             */
            _attrs: undefined,

            /**
             * @member {Array}
             */
            pages: undefined,

            /**
             * @member {Object}
             */
            _scope: undefined,

            /**
             * @member {DoorLock}
             */
            _doorLock: undefined,

            /**
             * @member {Boolean}
             */
            _profiling: false,

            /**
             * @param {Object} scope
             * @param {jqLite} element jqLite Object to manage with navigator
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {

                this._element = element || angular.element(window.document.body);
                this._scope = scope || this._element.scope();
                this._attrs = attrs;
                this._doorLock = new DoorLock();
                this.pages = [];

                this._isPopping = this._isPushing = false;

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));
                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _destroy: function () {
                this.emit('destroy');

                this.pages.forEach(function (page) {
                    page.destroy();
                });

                this._deviceBackButtonHandler.destroy();
                this._deviceBackButtonHandler = null;

                this._element = this._scope = this._attrs = null;
            },

            _onDeviceBackButton: function (event) {
                if (this.pages.length > 1) {
                    this._scope.$evalAsync(this.popPage.bind(this));
                } else {
                    event.callParentHandler();
                }
            },

            /**
             * @param element jqLite Object
             * @return jqLite Object
             */
            _normalizePageElement: function (element) {
                for (var i = 0; i < element.length; i++) {
                    if (element[i].nodeType === 1) {
                        return angular.element(element[i]);
                    }
                }

                throw new Error('invalid state');
            },

            _createPageElementAndLinkFunction: function (templateHTML, pageScope, done) {
                var div = document.createElement('div');
                div.innerHTML = templateHTML.trim();
                var pageElement = angular.element(div);

                var hasPage = div.childElementCount === 1 &&
                    div.childNodes[0].nodeName.toLowerCase() === 'ons-page';
                if (hasPage) {
                    pageElement = angular.element(div.childNodes[0]);
                } else {
                    throw new Error('You can not supply no "ons-page" element to "ons-navigator".');
                }

                var link = $compile(pageElement);
                return {
                    element: pageElement,
                    link: function () {
                        link(pageScope);
                        safeApply(pageScope);
                    }
                };

                function safeApply(scope) {
                    var phase = scope.$root.$$phase;
                    if (phase !== '$apply' && phase !== '$digest') {
                        scope.$apply();
                    }
                }
            },

            /**
             * Insert page object that has the specified pageUrl into the page stack and
             * if options object is specified, apply the options.
             *
             * @param {Number} index
             * @param {String} page
             * @param {Object} [options]
             * @param {String/NavigatorTransitionAnimator} [options.animation]
             */
            insertPage: function (index, page, options) {
                options = options || {};

                if (options && typeof options != 'object') {
                    throw new Error('options must be an object. You supplied ' + options);
                }

                if (index === this.pages.length) {
                    return this.pushPage.apply(this, [].slice.call(arguments, 1));
                }

                this._doorLock.waitUnlock(function () {
                    var unlock = this._doorLock.lock();

                    $onsen.getPageHTMLAsync(page).then(function (templateHTML) {

                        var pageScope = this._createPageScope();
                        var object = this._createPageElementAndLinkFunction(templateHTML, pageScope);
                        var element = object.element;
                        var link = object.link;

                        element = this._normalizePageElement(element);

                        var pageObject = this._createPageObject(page, element, pageScope, options);

                        if (this.pages.length > 0) {
                            index = normalizeIndex(index);

                            this._element[0].insertBefore(element[0], this.pages[index] ? this.pages[index].element[0] : null);
                            this.pages.splice(index, 0, pageObject);
                            link();

                            setTimeout(function () {
                                if (this.getCurrentPage() !== pageObject) {
                                    element.css('display', 'none');
                                }
                                unlock();
                                element = null;
                            }.bind(this), 1000 / 60);

                        } else {
                            this._element.append(element);
                            this.pages.push(pageObject);
                            link();
                            unlock();
                            element = null;
                        }
                    }.bind(this), function () {
                        unlock();
                        throw new Error('Page is not found: ' + page);
                    });
                }.bind(this));

                var normalizeIndex = function (index) {
                    if (index < 0) {
                        index = this.pages.length + index;
                    }
                    return index;
                }.bind(this);
            },

            /**
             * Pushes the specified pageUrl into the page stack and
             * if options object is specified, apply the options.
             *
             * @param {String} page
             * @param {Object} [options]
             * @param {String/NavigatorTransitionAnimator} [options.animation]
             * @param {Function} [options.onTransitionEnd]
             */
            pushPage: function (page, options) {
                if (this._profiling) {
                    console.time('pushPage');
                }

                options = options || {};

                if (options.cancelIfRunning && this._isPushing) {
                    return;
                }

                if (options && typeof options != 'object') {
                    throw new Error('options must be an object. You supplied ' + options);
                }

                if (this._emitPrePushEvent()) {
                    return;
                }

                //设置isPushing为true状态，用于下一个pushPage方法的判断，屏蔽按钮的快速多次点击事件。
                this._isPushing = true;

                this._doorLock.waitUnlock(function () {
                    this._pushPage(page, options);
                }.bind(this));
            },

            _pushPage: function (page, options) {
                var unlock = this._doorLock.lock();
                var done = function () {
                    //如果运行过程中出错，则设置isPushing状态为false，解除状态锁定；
                    this._isPushing = false;
                    unlock();
                    if (this._profiling) {
                        console.timeEnd('pushPage');
                    }
                };

                $onsen.getPageHTMLAsync(page).then(function (templateHTML) {
                    var pageScope = this._createPageScope();
                    var object = this._createPageElementAndLinkFunction(templateHTML, pageScope);

                    setImmediate(function () {
                        this._pushPageDOM(page, object.element, object.link, pageScope, options, done);
                        object = null;
                    }.bind(this));
                }.bind(this), function () {
                    done();
                    throw new Error('Page is not found: ' + page);
                }.bind(this));
            },

            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler;
            },

            /**
             * @param {Object} options pushPage()'s options parameter
             * @param {NavigatorTransitionAnimator} [defaultAnimator]
             */
            _getAnimatorOption: function (options, defaultAnimator) {
                var animator = null;

                if (options.animation instanceof NavigatorTransitionAnimator) {
                    return options.animation;
                }

                if (typeof options.animation === 'string') {
                    animator = NavigatorView._transitionAnimatorDict[options.animation];
                }

                if (!animator && this._element.attr('animation')) {
                    animator = NavigatorView._transitionAnimatorDict[this._element.attr('animation')];
                }

                if (!animator) {
                    animator = defaultAnimator || NavigatorView._transitionAnimatorDict['default'];
                }

                if (!(animator instanceof NavigatorTransitionAnimator)) {
                    throw new Error('"animator" is not an instance of NavigatorTransitionAnimator.');
                }

                return animator;
            },


            _createPageScope: function () {
                return this._scope.$new();
            },

            /**
             * @param {String} page
             * @param {jqLite} element
             * @param {Object} pageScope
             * @param {Object} options
             */
            _createPageObject: function (page, element, pageScope, options) {
                options.animator = this._getAnimatorOption(options);

                return new NavigatorPageObject({
                    page: page,
                    element: element,
                    pageScope: pageScope,
                    options: options,
                    navigator: this
                });
            },

            /**
             * @param {String} page Page name.
             * @param {Object} element
             * @param {Function} link
             * @param {Object} pageScope
             * @param {Object} options
             * @param {Function} [unlock]
             */
            _pushPageDOM: function (page, element, link, pageScope, options, unlock) {
                if (this._profiling) {
                    console.time('pushPageDOM');
                }

                unlock = unlock || function () {
                    };
                options = options || {};
                element = this._normalizePageElement(element);

                var pageObject = this._createPageObject(page, element, pageScope, options);

                var event = {
                    enterPage: pageObject,
                    leavePage: this.pages[this.pages.length - 1],
                    navigator: this
                };

                this.pages.push(pageObject);

                var done = function () {
                    if (this.pages[this.pages.length - 2]) {
                        this.pages[this.pages.length - 2].element.css('display', 'none');
                    }

                    if (this._profiling) {
                        console.timeEnd('pushPageDOM');
                    }

                    this._isPushing = false;
                    unlock();

                    this.emit('postpush', event);

                    if (typeof options.onTransitionEnd === 'function') {
                        options.onTransitionEnd();
                    }
                    element = null;
                }.bind(this);

                this._isPushing = true;

                if (this.pages.length > 1) {
                    var leavePage = this.pages.slice(-2)[0];
                    var enterPage = this.pages.slice(-1)[0];

                    this._element.append(element);
                    link();
                    options.animator.push(enterPage, leavePage, done);
                    element = null;
                } else {
                    this._element.append(element);
                    link();
                    done();
                    element = null;
                }
            },

            /**
             * @return {Boolean} Whether if event is canceled.
             */
            _emitPrePushEvent: function () {
                var isCanceled = false;
                var self = this;
                var prePushEvent = {
                    navigator: this,
                    currentPage: this.getCurrentPage(),
                    cancel: function () {
                        self._isPushing = false;
                        isCanceled = true;
                    }
                };

                this.emit('prepush', prePushEvent);

                return isCanceled;
            },

            /**
             * @return {Boolean} Whether if event is canceled.
             */
            _emitPrePopEvent: function () {
                var isCanceled = false;
                var leavePage = this.getCurrentPage();
                var self = this;
                var prePopEvent = {
                    navigator: this,
                    currentPage: leavePage,
                    leavePage: leavePage,
                    enterPage: this.pages[this.pages.length - 2],
                    cancel: function () {
                        self._isPopping = false;
                        isCanceled = true;
                    }
                };

                this.emit('prepop', prePopEvent);

                return isCanceled;
            },

            /**
             * Pops current page from the page stack.
             * @param {Object} [options]
             * @param {Function} [options.onTransitionEnd]
             */
            popPage: function (options) {
                options = options || {};

                if (options.cancelIfRunning && this._isPopping) {
                    return;
                }

                this._doorLock.waitUnlock(function () {
                    if (this.pages.length <= 1) {
                        throw new Error('NavigatorView\'s page stack is empty.');
                    }

                    if (this._emitPrePopEvent()) {
                        return;
                    }
                    //设置isPopping为true状态，用于下一个popPage方法的判断，屏蔽按钮的快速多次点击事件。
                    this._isPopping = false;
                    this._popPage(options);
                }.bind(this));
            },

            _popPage: function (options) {
                var unlock = this._doorLock.lock();

                var leavePage = this.pages.pop();

                if (this.pages[this.pages.length - 1]) {
                    this.pages[this.pages.length - 1].element.css('display', 'block');
                }

                var enterPage = this.pages[this.pages.length - 1];

                var event = {
                    leavePage: leavePage,
                    enterPage: this.pages[this.pages.length - 1],
                    navigator: this
                };

                var callback = function () {
                    leavePage.destroy();

                    this._isPopping = false;
                    unlock();
                    this.emit('postpop', event);

                    event.leavePage = null;

                    if (typeof options.onTransitionEnd === 'function') {
                        options.onTransitionEnd();
                    }
                }.bind(this);

                this._isPopping = true;

                var animator = this._getAnimatorOption(options, leavePage.options.animator);
                animator.pop(enterPage, leavePage, callback);
            },

            /**
             * Replaces the current page with the specified one.
             *
             * @param {String} page
             * @param {Object} [options]
             */
            replacePage: function (page, options) {
                options = options || {};

                var onTransitionEnd = options.onTransitionEnd || function () {
                    };

                options.onTransitionEnd = function () {
                    if (this.pages.length > 1) {
                        this.pages[this.pages.length - 2].destroy();
                    }
                    onTransitionEnd();
                }.bind(this);

                this.pushPage(page, options);
            },
            /**
             * Clears page stack and add the specified pageUrl to the page stack.
             * If options object is specified, apply the options.
             * the options object include all the attributes of this navigator.
             *
             * @param {String} page
             * @param {Object} [options]
             */
            resetToPage: function (page, options) {
                options = options || {};

                if (!options.animator && !options.animation) {
                    options.animation = 'none';
                }

                var onTransitionEnd = options.onTransitionEnd || function () {
                    };
                var self = this;

                options.onTransitionEnd = function () {
                    while (self.pages.length > 1) {
                        self.pages.shift().destroy();
                    }
                    onTransitionEnd();
                };

                this.pushPage(page, options);
            },

            /**
             * Get current page's navigator item.
             *
             * Use this method to access options passed by pushPage() or resetToPage() method.
             * eg. ons.navigator.getCurrentPage().options
             *
             * @return {Object}
             */
            getCurrentPage: function () {
                return this.pages[this.pages.length - 1];
            },

            /**
             * Retrieve the entire page stages of the navigator.
             *
             * @return {Array}
             */
            getPages: function () {
                return this.pages;
            },

            /**
             * @return {Boolean}
             */
            canPopPage: function () {
                return this.pages.length > 1;
            }
        });

        // Preset transition animators.
        NavigatorView._transitionAnimatorDict = {
            'default': $onsen.isAndroid() ? new SimpleSlideTransitionAnimator() : new IOSSlideTransitionAnimator(),
            'slide': $onsen.isAndroid() ? new SimpleSlideTransitionAnimator() : new IOSSlideTransitionAnimator(),
            'simpleslide': new SimpleSlideTransitionAnimator(),
            'lift': new LiftTransitionAnimator(),
            'fade': new FadeTransitionAnimator(),
            'none': new NullTransitionAnimator()
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        NavigatorView.registerTransitionAnimator = function (name, animator) {
            if (!(animator instanceof NavigatorTransitionAnimator)) {
                throw new Error('"animator" param must be an instance of NavigatorTransitionAnimator');
            }

            this._transitionAnimatorDict[name] = animator;
        };

        MicroEvent.mixin(NavigatorView);

        return NavigatorView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('NavigatorTransitionAnimator', function () {
        var NavigatorTransitionAnimator = Class.extend({
            push: function (enterPage, leavePage, callback) {
                callback();
            },

            pop: function (enterPage, leavePage, callback) {
                callback();
            }
        });

        return NavigatorTransitionAnimator;
    });
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    /**
     * Null animator do screen transition with no animations.
     */
    module.factory('NullTransitionAnimator', ['NavigatorTransitionAnimator', function (NavigatorTransitionAnimator) {
        var NullTransitionAnimator = NavigatorTransitionAnimator.extend({});
        return NullTransitionAnimator;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('OverlaySlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {

        var OverlaySlidingMenuAnimator = SlidingMenuAnimator.extend({

            _blackMask: undefined,

            _isRight: false,
            _element: false,
            _menuPage: false,
            _mainPage: false,
            _width: false,
            _duration: false,

            /**
             * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
             * @param {jqLite} mainPage
             * @param {jqLite} menuPage
             * @param {Object} options
             * @param {String} options.width "width" style value
             * @param {Boolean} options.isRight
             */
            setup: function (element, mainPage, menuPage, options) {
                options = options || {};
                this._width = options.width || '90%';
                this._isRight = !!options.isRight;
                this._element = element;
                this._mainPage = mainPage;
                this._menuPage = menuPage;
                this._duration = 0.4;

                menuPage.css('box-shadow', '0px 0 10px 0px rgba(0, 0, 0, 0.2)');
                menuPage.css({
                    width: options.width,
                    display: 'none',
                    zIndex: 2
                });

                // Fix for transparent menu page on iOS8.
                menuPage.css('-webkit-transform', 'translate3d(0px, 0px, 0px)');

                mainPage.css({zIndex: 1});

                if (this._isRight) {
                    menuPage.css({
                        right: '-' + options.width,
                        left: 'auto'
                    });
                } else {
                    menuPage.css({
                        right: 'auto',
                        left: '-' + options.width
                    });
                }

                this._blackMask = angular.element('<div></div>').css({
                    backgroundColor: 'black',
                    top: '0px',
                    left: '0px',
                    right: '0px',
                    bottom: '0px',
                    position: 'absolute',
                    display: 'none',
                    zIndex: 0
                });

                element.prepend(this._blackMask);
            },

            /**
             * @param {Object} options
             * @param {String} options.width
             */
            onResized: function (options) {
                this._menuPage.css('width', options.width);

                if (this._isRight) {
                    this._menuPage.css({
                        right: '-' + options.width,
                        left: 'auto'
                    });
                } else {
                    this._menuPage.css({
                        right: 'auto',
                        left: '-' + options.width
                    });
                }

                if (options.isOpened) {
                    var max = this._menuPage[0].clientWidth;
                    var menuStyle = this._generateMenuPageStyle(max);
                    animit(this._menuPage[0]).queue(menuStyle).play();
                }
            },

            /**
             */
            destroy: function () {
                if (this._blackMask) {
                    this._blackMask.remove();
                    this._blackMask = null;
                }

                this._mainPage.removeAttr('style');
                this._menuPage.removeAttr('style');

                this._element = this._mainPage = this._menuPage = null;
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            openMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;

                this._menuPage.css('display', 'block');
                this._blackMask.css('display', 'block');

                var max = this._menuPage[0].clientWidth;
                var menuStyle = this._generateMenuPageStyle(max);
                var mainPageStyle = this._generateMainPageStyle(max);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue(mainPageStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            callback();
                            done();
                        })
                        .play();

                    animit(this._menuPage[0])
                        .queue(menuStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            closeMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;
                this._blackMask.css({display: 'block'});

                var menuPageStyle = this._generateMenuPageStyle(0);
                var mainPageStyle = this._generateMainPageStyle(0);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue(mainPageStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            this._menuPage.css('display', 'none');
                            callback();
                            done();
                        }.bind(this))
                        .play();

                    animit(this._menuPage[0])
                        .queue(menuPageStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Object} options
             * @param {Number} options.distance
             * @param {Number} options.maxDistance
             */
            translateMenu: function (options) {

                this._menuPage.css('display', 'block');
                this._blackMask.css({display: 'block'});

                var menuPageStyle = this._generateMenuPageStyle(Math.min(options.maxDistance, options.distance));
                var mainPageStyle = this._generateMainPageStyle(Math.min(options.maxDistance, options.distance));
                delete mainPageStyle.opacity;

                animit(this._menuPage[0])
                    .queue(menuPageStyle)
                    .play();

                if (Object.keys(mainPageStyle).length > 0) {
                    animit(this._mainPage[0])
                        .queue(mainPageStyle)
                        .play();
                }
            },

            _generateMenuPageStyle: function (distance) {
                var max = this._menuPage[0].clientWidth;

                var x = this._isRight ? -distance : distance;
                var transform = 'translate3d(' + x + 'px, 0, 0)';

                return {
                    transform: transform,
                    'box-shadow': distance === 0 ? 'none' : '0px 0 10px 0px rgba(0, 0, 0, 0.2)'
                };
            },

            _generateMainPageStyle: function (distance) {
                var max = this._menuPage[0].clientWidth;
                var opacity = 1 - (0.1 * distance / max);

                return {
                    opacity: opacity
                };
            },

            copy: function () {
                return new OverlaySlidingMenuAnimator();
            }
        });

        return OverlaySlidingMenuAnimator;
    }]);

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('PageView', ['$onsen', '$parse', function ($onsen, $parse) {

        var PageView = Class.extend({
            _registeredToolbarElement: false,
            _registeredBottomToolbarElement: false,

            _nullElement: window.document.createElement('div'),

            _toolbarElement: null,
            _bottomToolbarElement: null,

            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this._registeredToolbarElement = false;
                this._registeredBottomToolbarElement = false;

                this._nullElement = window.document.createElement('div');

                this._toolbarElement = angular.element(this._nullElement);
                this._bottomToolbarElement = angular.element(this._nullElement);

                this._clearListener = scope.$on('$destroy', this._destroy.bind(this));
                this._userDeviceBackButtonListener = angular.noop;

                if (this._attrs.ngDeviceBackbutton || this._attrs.onDeviceBackbutton) {
                    this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));
                }
            },

            _onDeviceBackButton: function ($event) {
                this._userDeviceBackButtonListener($event);

                // ng-device-backbutton
                if (this._attrs.ngDeviceBackbutton) {
                    $parse(this._attrs.ngDeviceBackbutton)(this._scope, {$event: $event});
                }

                // on-device-backbutton
                /* jshint ignore:start */
                if (this._attrs.onDeviceBackbutton) {
                    var lastEvent = window.$event;
                    window.$event = $event;
                    new Function(this._attrs.onDeviceBackbutton)();
                    window.$event = lastEvent;
                }
                /* jshint ignore:end */
            },

            /**
             * @param {Function} callback
             */
            setDeviceBackButtonHandler: function (callback) {
                if (!this._deviceBackButtonHandler) {
                    this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));
                }

                this._userDeviceBackButtonListener = callback;
            },

            /**
             * @return {Object/null}
             */
            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler || null;
            },

            /**
             * Register toolbar element to this page.
             *
             * @param {jqLite} element
             */
            registerToolbar: function (element) {
                if (this._registeredToolbarElement) {
                    throw new Error('This page\'s toolbar is already registered.');
                }

                angular.element(this.getContentElement()).attr('no-status-bar-fill', '');

                element.remove();
                var statusFill = this._element[0].querySelector('.page__status-bar-fill');
                if (statusFill) {
                    angular.element(statusFill).after(element);
                } else {
                    this._element.prepend(element);
                }

                this._toolbarElement = element;
                this._registeredToolbarElement = true;
            },

            /**
             * Register toolbar element to this page.
             *
             * @param {jqLite} element
             */
            registerBottomToolbar: function (element) {
                if (this._registeredBottomToolbarElement) {
                    throw new Error('This page\'s bottom-toolbar is already registered.');
                }

                element.remove();

                this._bottomToolbarElement = element;
                this._registeredBottomToolbarElement = true;

                var fill = angular.element(document.createElement('div'));
                fill.addClass('page__bottom-bar-fill');
                fill.css({width: '0px', height: '0px'});

                this._element.prepend(fill);
                this._element.append(element);
            },

            /**
             * @param {jqLite} element
             */
            registerExtraElement: function (element) {
                if (!this._extraElement) {
                    this._extraElement = angular.element('<div></div>');
                    this._extraElement.addClass('page__extra');
                    this._extraElement.css({
                        'z-index': '10001'
                    });
                    this._element.append(this._extraElement);
                }
                this._extraElement.append(element.remove());
            },

            /**
             * @return {Boolean}
             */
            hasToolbarElement: function () {
                return !!this._registeredToolbarElement;
            },

            /**
             * @return {Boolean}
             */
            hasBottomToolbarElement: function () {
                return !!this._registeredBottomToolbarElement;
            },

            /**
             * @return {HTMLElement}
             */
            getContentElement: function () {
                for (var i = 0; i < this._element.length; i++) {
                    if (this._element[i].querySelector) {
                        var content = this._element[i].querySelector('.page__content');
                        if (content) {
                            return content;
                        }
                    }
                }
                throw Error('fail to get ".page__content" element.');
            },

            /**
             * @return {HTMLElement}
             */
            getBackgroundElement: function () {
                for (var i = 0; i < this._element.length; i++) {
                    if (this._element[i].querySelector) {
                        var content = this._element[i].querySelector('.page__background');
                        if (content) {
                            return content;
                        }
                    }
                }
                throw Error('fail to get ".page__background" element.');
            },

            /**
             * @return {HTMLElement}
             */
            getToolbarElement: function () {
                return this._toolbarElement[0] || this._nullElement;
            },

            /**
             * @return {HTMLElement}
             */
            getBottomToolbarElement: function () {
                return this._bottomToolbarElement[0] || this._nullElement;
            },

            /**
             * @return {HTMLElement}
             */
            getToolbarLeftItemsElement: function () {
                return this._toolbarElement[0].querySelector('.left') || this._nullElement;
            },

            /**
             * @return {HTMLElement}
             */
            getToolbarCenterItemsElement: function () {
                return this._toolbarElement[0].querySelector('.center') || this._nullElement;
            },

            /**
             * @return {HTMLElement}
             */
            getToolbarRightItemsElement: function () {
                return this._toolbarElement[0].querySelector('.right') || this._nullElement;
            },

            /**
             * @return {HTMLElement}
             */
            getToolbarBackButtonLabelElement: function () {
                return this._toolbarElement[0].querySelector('ons-back-button .back-button__label') || this._nullElement;
            },

            _destroy: function () {
                this.emit('destroy', {page: this});

                if (this._deviceBackButtonHandler) {
                    this._deviceBackButtonHandler.destroy();
                    this._deviceBackButtonHandler = null;
                }

                this._element = null;
                this._toolbarElement = null;
                this._nullElement = null;
                this._bottomToolbarElement = null;
                this._extraElement = null;
                this._scope = null;

                this._clearListener();
            }
        });
        MicroEvent.mixin(PageView);

        return PageView;
    }]);
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('PopoverView', ['$onsen', 'PopoverAnimator', 'FadePopoverAnimator', function ($onsen, PopoverAnimator, FadePopoverAnimator) {

        var PopoverView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                this._mask = angular.element(this._element[0].querySelector('.popover-mask'));
                this._popover = angular.element(this._element[0].querySelector('.popover'));

                this._mask.css('z-index', 20000);
                this._popover.css('z-index', 20001);
                this._element.css('display', 'none');

                if (attrs.maskColor) {
                    this._mask.css('background-color', attrs.maskColor);
                }

                this._mask.on('click', this._cancel.bind(this));

                this._visible = false;
                this._doorLock = new DoorLock();

                this._animation = PopoverView._animatorDict[typeof attrs.animation !== 'undefined' ?
                    attrs.animation : 'fade'];

                if (!this._animation) {
                    throw new Error('No such animation: ' + attrs.animation);
                }

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));

                this._onChange = function () {
                    setImmediate(function () {
                        if (this._currentTarget) {
                            this._positionPopover(this._currentTarget);
                        }
                    }.bind(this));
                }.bind(this);

                this._popover[0].addEventListener('DOMNodeInserted', this._onChange, false);
                this._popover[0].addEventListener('DOMNodeRemoved', this._onChange, false);
                window.addEventListener('resize', this._onChange, false);

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _onDeviceBackButton: function (event) {
                if (this.isCancelable()) {
                    this._cancel.bind(this)();
                } else {
                    event.callParentHandler();
                }
            },

            _setDirection: function (direction) {
                if (direction === 'up') {
                    this._scope.direction = direction;
                    this._scope.arrowPosition = 'bottom';
                } else if (direction === 'left') {
                    this._scope.direction = direction;
                    this._scope.arrowPosition = 'right';
                } else if (direction === 'down') {
                    this._scope.direction = direction;
                    this._scope.arrowPosition = 'top';
                } else if (direction == 'right') {
                    this._scope.direction = direction;
                    this._scope.arrowPosition = 'left';
                } else {
                    throw new Error('Invalid direction.');
                }

                if (!this._scope.$$phase) {
                    this._scope.$apply();
                }
            },

            _positionPopoverByDirection: function (target, direction) {
                var el = angular.element(this._element[0].querySelector('.popover')),
                    pos = target.getBoundingClientRect(),
                    own = el[0].getBoundingClientRect(),
                    arrow = angular.element(el.children()[1]),
                    offset = 14,
                    margin = 6,
                    radius = parseInt(window.getComputedStyle(el[0].querySelector('.popover__content')).borderRadius);

                arrow.css({
                    top: '',
                    left: ''
                });

                // This is the difference between the side and the hypothenuse of the arrow.
                var diff = (function (x) {
                    return (x / 2) * Math.sqrt(2) - x / 2;
                })(parseInt(window.getComputedStyle(arrow[0]).width));

                // This is the limit for the arrow. If it's moved further than this it's outside the popover.
                var limit = margin + radius + diff;

                this._setDirection(direction);

                // Position popover next to the target.
                if (['left', 'right'].indexOf(direction) > -1) {
                    if (direction == 'left') {
                        el.css('left', (pos.right - pos.width - own.width - offset) + 'px');
                    } else {
                        el.css('left', (pos.right + offset) + 'px');
                    }
                    //el.css('top', (pos.bottom - pos.height / 2 - own.height / 2) + 'px');
                    el.css('top', '37px');
                } else {
                    if (direction == 'up') {
                        //el.css('top', (pos.bottom - pos.height - own.height - offset) + 'px');
                        el.css('top', '37px');
                    } else {
                        //el.css('top', (pos.bottom + offset) + 'px');
                        el.css('top', '37px');
                    }
                    el.css('left', (pos.right - pos.width / 2 - own.width / 2) + 'px');
                }

                own = el[0].getBoundingClientRect();

                // Keep popover inside window and arrow inside popover.
                if (['left', 'right'].indexOf(direction) > -1) {
                    if (own.top < margin) {
                        arrow.css('top', Math.max(own.height / 2 + own.top - margin, limit) + 'px');
                        el.css('top', margin + 'px');
                    } else if (own.bottom > window.innerHeight - margin) {
                        arrow.css('top', Math.min(own.height / 2 - (window.innerHeight - own.bottom) + margin, own.height - limit) + 'px');
                        el.css('top', (window.innerHeight - own.height - margin) + 'px');
                    }
                } else {
                    if (own.left < margin) {
                        arrow.css('left', Math.max(own.width / 2 + own.left - margin, limit) + 'px');
                        el.css('left', margin + 'px');
                    } else if (own.right > window.innerWidth - margin) {
                        arrow.css('left', Math.min(own.width / 2 - (window.innerWidth - own.right) + margin, own.width - limit) + 'px');
                        el.css('left', (window.innerWidth - own.width - margin) + 'px');
                    }
                }
            },

            _positionPopover: function (target) {
                var directions;
                if (!this._element.attr('direction')) {
                    directions = ['up', 'down', 'left', 'right'];
                } else {
                    directions = this._element.attr('direction').split(/\s+/);
                }

                var position = target.getBoundingClientRect();

                // The popover should be placed on the side with the most space.
                var scores = {
                    left: position.left,
                    right: window.innerWidth - position.right,
                    up: position.top,
                    down: window.innerHeight - position.bottom
                };

                var orderedDirections = Object.keys(scores).sort(function (a, b) {
                    return -(scores[a] - scores[b]);
                });
                for (var i = 0, l = orderedDirections.length; i < l; i++) {
                    var direction = orderedDirections[i];
                    if (directions.indexOf(direction) > -1) {
                        this._positionPopoverByDirection(target, direction);
                        return;
                    }
                }
            },

            /**
             * Show popover.
             *
             * @param {HTMLElement} [target] target element
             * @param {String} [target] css selector
             * @param {Event} [target] event
             * @param {Object} [options] options
             * @param {String} [options.animation] animation type
             */
            show: function (target, options) {
                if (typeof target === 'string') {
                    target = document.querySelector(target);
                } else if (target instanceof Event) {
                    target = target.target;
                }

                if (!target) {
                    throw new Error('Target undefined');
                }

                options = options || {};

                var cancel = false;
                this.emit('preshow', {
                    popover: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        this._element.css('display', 'block');

                        this._currentTarget = target;
                        this._positionPopover(target);

                        if (options.animation) {
                            animation = PopoverView._animatorDict[options.animation];
                        }

                        animation.show(this, function () {
                            this._visible = true;
                            this._positionPopover(target);
                            unlock();
                            this.emit('postshow', {popover: this});
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * Hide popover.
             *
             * @param {Object} [options] options
             * @param {String} [options.animation] animation type
             */
            hide: function (options) {
                options = options || {};

                var cancel = false;
                this.emit('prehide', {
                    popover: this,
                    cancel: function () {
                        cancel = true;
                    }
                });

                if (!cancel) {
                    this._doorLock.waitUnlock(function () {
                        var unlock = this._doorLock.lock(),
                            animation = this._animation;

                        if (options.animation) {
                            animation = PopoverView._animatorDict[options.animation];
                        }

                        animation.hide(this, function () {
                            this._element.css('display', 'none');
                            this._visible = false;
                            unlock();
                            this.emit('posthide', {popover: this});
                        }.bind(this));
                    }.bind(this));
                }
            },

            /**
             * Returns whether the popover is visible or not.
             *
             * @return {Boolean}
             */
            isShown: function () {
                return this._visible;
            },

            /**
             * Destroy the popover and remove it from the DOM tree.
             */
            destroy: function () {
                if (this._parentScope) {
                    this._parentScope.$destroy();
                    this._parentScope = null;
                } else {
                    this._scope.$destroy();
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._deviceBackButtonHandler.destroy();
                this._popover[0].removeEventListener('DOMNodeInserted', this._onChange, false);
                this._popover[0].removeEventListener('DOMNodeRemoved', this._onChange, false);
                window.removeEventListener('resize', this._onChange, false);

                this._mask.off();
                this._mask.remove();
                this._popover.remove();
                this._element.remove();

                this._onChange = this._deviceBackButtonHandler = this._mask = this._popover = this._element = this._scope = null;
            },

            /**
             * Set whether the popover should be cancelable or not.
             *
             * @param {Boolean}
             */
            setCancelable: function (cancelable) {
                if (typeof cancelable !== 'boolean') {
                    throw new Error('Argument must be a boolean.');
                }

                if (cancelable) {
                    this._element.attr('cancelable', true);
                } else {
                    this._element.removeAttr('cancelable');
                }
            },

            /**
             * Return whether the popover is cancelable or not.
             *
             * @return {Boolean}
             */
            isCancelable: function () {
                return this._element[0].hasAttribute('cancelable');
            },

            _cancel: function () {
                if (this.isCancelable()) {
                    this.hide();
                }
            },

        });

        PopoverView._animatorDict = {
            'fade': new FadePopoverAnimator(),
            'none': new PopoverAnimator()
        };

        /**
         * @param {String} name
         * @param {PopoverAnimator} animator
         */
        PopoverView.registerAnimator = function (name, animator) {
            if (!(animator instanceof PopoverAnimator)) {
                throw new Error('"animator" param must be an instance of PopoverAnimator');
            }
            this._animatorDict[name] = animator;
        };

        MicroEvent.mixin(PopoverView);

        return PopoverView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.factory('PopoverAnimator', function () {
        var PopoverAnimator = Class.extend({
            show: function (popover, callback) {
                callback();
            },

            hide: function (popover, callback) {
                callback();
            }
        });

        return PopoverAnimator;
    });
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('PullHookView', ['$onsen', '$parse', function ($onsen, $parse) {

        var PullHookView = Class.extend({

            STATE_INITIAL: 'initial',
            STATE_PREACTION: 'preaction',
            STATE_ACTION: 'action',

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                this._scrollElement = this._createScrollElement();
                this._pageElement = this._scrollElement.parent();

                if (!this._pageElement.hasClass('page__content') && !this._pageElement.hasClass('ons-scroller__content')) {
                    throw new Error('<ons-pull-hook> must be a direct descendant of an <ons-page> or an <ons-scroller> element.');
                }

                this._currentTranslation = 0;

                this._createEventListeners();
                this._setState(this.STATE_INITIAL, true);
                this._setStyle();

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _createScrollElement: function () {
                var scrollElement = angular.element('<div>')
                    .addClass('scroll');

                var pageElement = this._element.parent(),
                    children = pageElement.children();

                pageElement.append(scrollElement);
                scrollElement.append(children);

                return scrollElement;
            },

            _setStyle: function () {
                var h = this._getHeight();

                this._element.css({
                    top: '-' + h + 'px',
                    height: h + 'px',
                    lineHeight: h + 'px'
                });
            },

            _onScroll: function (event) {
                var el = this._pageElement[0];

                if (el.scrollTop < 0) {
                    el.scrollTop = 0;
                }
            },

            _generateTranslationTransform: function (scroll) {
                return 'translate3d(0px, ' + scroll + 'px, 0px)';
            },

            _onDrag: function (event) {
                if (this.isDisabled()) {
                    return;
                }

                // Ignore when dragging left and right.
                if (event.direction === Hammer.DIRECTION_LEFT || event.direction === Hammer.DIRECTION_RIGHT) {
                    return;
                }

                // Hack to make it work on Android 4.4 WebView. Scrolls manually near the top of the page so
                // there will be no inertial scroll when scrolling down. Allowing default scrolling will
                // kill all 'touchmove' events.
                var el = this._pageElement[0];
                el.scrollTop = this._startScroll - event.deltaY;
                if (el.scrollTop < window.innerHeight && event.direction !== Hammer.DIRECTION_UP) {
                    event.preventDefault();
                }

                if (this._currentTranslation === 0 && this._getCurrentScroll() === 0) {
                    this._transitionDragLength = event.deltaY;

                    //var direction = event.interimDirection;
                    var direction = event.direction;
                    if (direction === Hammer.DIRECTION_DOWN) {
                        this._transitionDragLength -= 1;
                    }
                    else {
                        this._transitionDragLength += 1;
                    }
                }

                var scroll = event.deltaY - this._startScroll;

                scroll = Math.max(scroll, 0);

                if (this._thresholdHeightEnabled() && scroll >= this._getThresholdHeight()) {
                    this._hammer.stop();

                    setImmediate(function () {
                        this._setState(this.STATE_ACTION);
                        this._translateTo(this._getHeight(), {animate: true});

                        this._waitForAction(this._onDone.bind(this));
                    }.bind(this));
                }
                else if (scroll >= this._getHeight()) {
                    this._setState(this.STATE_PREACTION);
                }
                else {
                    this._setState(this.STATE_INITIAL);
                }

                event.srcEvent.stopPropagation();
                this._translateTo(scroll);
            },

            _onDragStart: function (event) {
                if (this.isDisabled()) {
                    return;
                }

                this._startScroll = this._getCurrentScroll();
            },

            _onDragEnd: function (event) {
                if (this.isDisabled()) {
                    return;
                }

                if (this._currentTranslation > 0) {
                    var scroll = this._currentTranslation;

                    if (scroll > this._getHeight()) {
                        this._setState(this.STATE_ACTION);

                        this._translateTo(this._getHeight(), {animate: true});

                        this._waitForAction(this._onDone.bind(this));
                    }
                    else {
                        this._translateTo(0, {animate: true});
                    }
                }
            },

            _waitForAction: function (done) {
                if (this._attrs.ngAction) {
                    this._scope.$eval(this._attrs.ngAction, {$done: done});
                }
                else if (this._attrs.onAction) {
                    /*jshint evil:true */
                    eval(this._attrs.onAction);
                }
                else {
                    done();
                }
            },

            _onDone: function (done) {
                // Check if the pull hook still exists.
                if (this._element) {
                    this._translateTo(0, {animate: true});
                    this._setState(this.STATE_INITIAL);
                }
            },

            _getHeight: function () {
                return parseInt(this._element[0].getAttribute('height') || '64', 10);
            },

            setHeight: function (height) {
                this._element[0].setAttribute('height', height + 'px');

                this._setStyle();
            },

            setThresholdHeight: function (thresholdHeight) {
                this._element[0].setAttribute('threshold-height', thresholdHeight + 'px');
            },

            _getThresholdHeight: function () {
                return parseInt(this._element[0].getAttribute('threshold-height') || '96', 10);
            },

            _thresholdHeightEnabled: function () {
                var th = this._getThresholdHeight();
                return th > 0 && th >= this._getHeight();
            },

            _setState: function (state, noEvent) {
                var oldState = this._getState();

                this._scope.$evalAsync(function () {
                    this._element[0].setAttribute('state', state);

                    if (!noEvent && oldState !== this._getState()) {
                        this.emit('changestate', {
                            state: state,
                            pullHook: this
                        });
                    }
                }.bind(this));
            },

            _getState: function () {
                return this._element[0].getAttribute('state');
            },

            getCurrentState: function () {
                return this._getState();
            },

            _getCurrentScroll: function () {
                return this._pageElement[0].scrollTop;
            },

            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            setDisabled: function (disabled) {
                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                }
                else {
                    this._element[0].removeAttribute('disabled');
                }
            },

            _translateTo: function (scroll, options) {
                options = options || {};

                this._currentTranslation = scroll;

                if (options.animate) {
                    animit(this._scrollElement[0])
                        .queue({
                            transform: this._generateTranslationTransform(scroll)
                        }, {
                            duration: 0.3,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play(options.callback);
                }
                else {
                    animit(this._scrollElement[0])
                        .queue({
                            transform: this._generateTranslationTransform(scroll)
                        })
                        .play(options.callback);
                }
            },

            _getMinimumScroll: function () {
                var scrollHeight = this._scrollElement[0].getBoundingClientRect().height,
                    pageHeight = this._pageElement[0].getBoundingClientRect().height;

                if (scrollHeight > pageHeight) {
                    return -(scrollHeight - pageHeight);
                }
                else {
                    return 0;
                }

            },

            _createEventListeners: function () {
                var element = this._scrollElement.parent();

                this._hammer = new Hammer(element[0], {
                    dragMinDistance: 1,
                    dragDistanceCorrection: false
                });

                // Event listeners
                this._bindedOnDrag = this._onDrag.bind(this);
                this._bindedOnDragStart = this._onDragStart.bind(this);
                this._bindedOnDragEnd = this._onDragEnd.bind(this);
                this._bindedOnScroll = this._onScroll.bind(this);

                // Bind listeners
                this._hammer.on('pan', this._bindedOnDrag);
                this._hammer.on('panstart', this._bindedOnDragStart);
                this._hammer.on('panend', this._bindedOnDragEnd);
                element.on('scroll', this._bindedOnScroll);
            },

            _destroyEventListeners: function () {
                var element = this._scrollElement.parent();

                this._hammer.off('pan', this._bindedOnDrag);
                this._hammer.off('panstart', this._bindedOnDragStart);
                this._hammer.off('panend', this._bindedOnDragEnd);
                element.off('scroll', this._bindedOnScroll);
            },

            _destroy: function () {
                this.emit('destroy');
                this._destroyEventListeners();
                this._element = this._scope = this._attrs = null;
            }
        });

        MicroEvent.mixin(PullHookView);
        return PullHookView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('PushSlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {

        var PushSlidingMenuAnimator = SlidingMenuAnimator.extend({

            _isRight: false,
            _element: undefined,
            _menuPage: undefined,
            _mainPage: undefined,
            _width: undefined,
            _duration: false,

            /**
             * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
             * @param {jqLite} mainPage
             * @param {jqLite} menuPage
             * @param {Object} options
             * @param {String} options.width "width" style value
             * @param {Boolean} options.isRight
             */
            setup: function (element, mainPage, menuPage, options) {
                options = options || {};

                this._element = element;
                this._mainPage = mainPage;
                this._menuPage = menuPage;

                this._isRight = !!options.isRight;
                this._width = options.width || '90%';
                this._duration = 0.4;

                menuPage.css({
                    width: options.width,
                    display: 'none'
                });

                if (this._isRight) {
                    menuPage.css({
                        right: '-' + options.width,
                        left: 'auto'
                    });
                } else {
                    menuPage.css({
                        right: 'auto',
                        left: '-' + options.width
                    });
                }
            },

            /**
             * @param {Object} options
             * @param {String} options.width
             * @param {Object} options.isRight
             */
            onResized: function (options) {
                this._menuPage.css('width', options.width);

                if (this._isRight) {
                    this._menuPage.css({
                        right: '-' + options.width,
                        left: 'auto'
                    });
                } else {
                    this._menuPage.css({
                        right: 'auto',
                        left: '-' + options.width
                    });
                }

                if (options.isOpened) {
                    var max = this._menuPage[0].clientWidth;
                    var mainPageTransform = this._generateAbovePageTransform(max);
                    var menuPageStyle = this._generateBehindPageStyle(max);

                    animit(this._mainPage[0]).queue({transform: mainPageTransform}).play();
                    animit(this._menuPage[0]).queue(menuPageStyle).play();
                }
            },

            /**
             */
            destroy: function () {
                this._mainPage.removeAttr('style');
                this._menuPage.removeAttr('style');

                this._element = this._mainPage = this._menuPage = null;
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            openMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;

                this._menuPage.css('display', 'block');

                var max = this._menuPage[0].clientWidth;

                var aboveTransform = this._generateAbovePageTransform(max);
                var behindStyle = this._generateBehindPageStyle(max);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue({
                            transform: aboveTransform
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            callback();
                            done();
                        })
                        .play();

                    animit(this._menuPage[0])
                        .queue(behindStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            closeMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;

                var aboveTransform = this._generateAbovePageTransform(0);
                var behindStyle = this._generateBehindPageStyle(0);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue({
                            transform: aboveTransform
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue({
                            transform: 'translate3d(0, 0, 0)'
                        })
                        .queue(function (done) {
                            this._menuPage.css('display', 'none');
                            callback();
                            done();
                        }.bind(this))
                        .play();

                    animit(this._menuPage[0])
                        .queue(behindStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            done();
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Object} options
             * @param {Number} options.distance
             * @param {Number} options.maxDistance
             */
            translateMenu: function (options) {

                this._menuPage.css('display', 'block');

                var aboveTransform = this._generateAbovePageTransform(Math.min(options.maxDistance, options.distance));
                var behindStyle = this._generateBehindPageStyle(Math.min(options.maxDistance, options.distance));

                animit(this._mainPage[0])
                    .queue({transform: aboveTransform})
                    .play();

                animit(this._menuPage[0])
                    .queue(behindStyle)
                    .play();
            },

            _generateAbovePageTransform: function (distance) {
                var x = this._isRight ? -distance : distance;
                var aboveTransform = 'translate3d(' + x + 'px, 0, 0)';

                return aboveTransform;
            },

            _generateBehindPageStyle: function (distance) {
                var max = this._menuPage[0].clientWidth;

                var behindX = this._isRight ? -distance : distance;
                var behindTransform = 'translate3d(' + behindX + 'px, 0, 0)';

                return {
                    transform: behindTransform
                };
            },

            copy: function () {
                return new PushSlidingMenuAnimator();
            }
        });

        return PushSlidingMenuAnimator;
    }]);

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('RevealSlidingMenuAnimator', ['SlidingMenuAnimator', function (SlidingMenuAnimator) {

        var RevealSlidingMenuAnimator = SlidingMenuAnimator.extend({

            _blackMask: undefined,

            _isRight: false,

            _menuPage: undefined,
            _element: undefined,
            _mainPage: undefined,
            _duration: undefined,

            /**
             * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
             * @param {jqLite} mainPage
             * @param {jqLite} menuPage
             * @param {Object} options
             * @param {String} options.width "width" style value
             * @param {Boolean} options.isRight
             */
            setup: function (element, mainPage, menuPage, options) {
                this._element = element;
                this._menuPage = menuPage;
                this._mainPage = mainPage;
                this._isRight = !!options.isRight;
                this._width = options.width || '90%';
                this._duration = 0.4;

                mainPage.css({
                    boxShadow: '0px 0 10px 0px rgba(0, 0, 0, 0.2)'
                });

                menuPage.css({
                    width: options.width,
                    opacity: 0.9,
                    display: 'none'
                });

                if (this._isRight) {
                    menuPage.css({
                        right: '0px',
                        left: 'auto'
                    });
                } else {
                    menuPage.css({
                        right: 'auto',
                        left: '0px'
                    });
                }

                this._blackMask = angular.element('<div></div>').css({
                    backgroundColor: 'black',
                    top: '0px',
                    left: '0px',
                    right: '0px',
                    bottom: '0px',
                    position: 'absolute',
                    display: 'none'
                });

                element.prepend(this._blackMask);

                // Dirty fix for broken rendering bug on android 4.x.
                animit(mainPage[0]).queue({transform: 'translate3d(0, 0, 0)'}).play();
            },

            /**
             * @param {Object} options
             * @param {Boolean} options.isOpened
             * @param {String} options.width
             */
            onResized: function (options) {
                this._width = options.width;
                this._menuPage.css('width', this._width);

                if (options.isOpened) {
                    var max = this._menuPage[0].clientWidth;

                    var aboveTransform = this._generateAbovePageTransform(max);
                    var behindStyle = this._generateBehindPageStyle(max);

                    animit(this._mainPage[0]).queue({transform: aboveTransform}).play();
                    animit(this._menuPage[0]).queue(behindStyle).play();
                }
            },

            /**
             * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
             * @param {jqLite} mainPage
             * @param {jqLite} menuPage
             */
            destroy: function () {
                if (this._blackMask) {
                    this._blackMask.remove();
                    this._blackMask = null;
                }

                if (this._mainPage) {
                    this._mainPage.attr('style', '');
                }

                if (this._menuPage) {
                    this._menuPage.attr('style', '');
                }

                this._mainPage = this._menuPage = this._element = undefined;
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            openMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;

                this._menuPage.css('display', 'block');
                this._blackMask.css('display', 'block');

                var max = this._menuPage[0].clientWidth;

                var aboveTransform = this._generateAbovePageTransform(max);
                var behindStyle = this._generateBehindPageStyle(max);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue({
                            transform: aboveTransform
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            callback();
                            done();
                        })
                        .play();

                    animit(this._menuPage[0])
                        .queue(behindStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Function} callback
             * @param {Boolean} instant
             */
            closeMenu: function (callback, instant) {
                var duration = instant === true ? 0.0 : this._duration;

                this._blackMask.css('display', 'block');

                var aboveTransform = this._generateAbovePageTransform(0);
                var behindStyle = this._generateBehindPageStyle(0);

                setTimeout(function () {

                    animit(this._mainPage[0])
                        .queue({
                            transform: aboveTransform
                        }, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue({
                            transform: 'translate3d(0, 0, 0)'
                        })
                        .queue(function (done) {
                            this._menuPage.css('display', 'none');
                            callback();
                            done();
                        }.bind(this))
                        .play();

                    animit(this._menuPage[0])
                        .queue(behindStyle, {
                            duration: duration,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .queue(function (done) {
                            done();
                        })
                        .play();

                }.bind(this), 1000 / 60);
            },

            /**
             * @param {Object} options
             * @param {Number} options.distance
             * @param {Number} options.maxDistance
             */
            translateMenu: function (options) {

                this._menuPage.css('display', 'block');
                this._blackMask.css('display', 'block');

                var aboveTransform = this._generateAbovePageTransform(Math.min(options.maxDistance, options.distance));
                var behindStyle = this._generateBehindPageStyle(Math.min(options.maxDistance, options.distance));
                delete behindStyle.opacity;

                animit(this._mainPage[0])
                    .queue({transform: aboveTransform})
                    .play();

                animit(this._menuPage[0])
                    .queue(behindStyle)
                    .play();
            },

            _generateAbovePageTransform: function (distance) {
                var x = this._isRight ? -distance : distance;
                var aboveTransform = 'translate3d(' + x + 'px, 0, 0)';

                return aboveTransform;
            },

            _generateBehindPageStyle: function (distance) {
                var max = this._menuPage[0].getBoundingClientRect().width;

                var behindDistance = (distance - max) / max * 10;
                behindDistance = isNaN(behindDistance) ? 0 : Math.max(Math.min(behindDistance, 0), -10);

                var behindX = this._isRight ? -behindDistance : behindDistance;
                var behindTransform = 'translate3d(' + behindX + '%, 0, 0)';
                var opacity = 1 + behindDistance / 100;

                return {
                    transform: behindTransform,
                    opacity: opacity
                };
            },

            copy: function () {
                return new RevealSlidingMenuAnimator();
            }
        });

        return RevealSlidingMenuAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('SimpleSlideTransitionAnimator', ['NavigatorTransitionAnimator', function (NavigatorTransitionAnimator) {

        /**
         * Slide animator for navigator transition.
         */
        var SimpleSlideTransitionAnimator = NavigatorTransitionAnimator.extend({

            /** Black mask */
            backgroundMask: angular.element(
                '<div style="z-index: 2; position: absolute; width: 100%;' +
                'height: 100%; background-color: black; opacity: 0;"></div>'
            ),

            timing: 'cubic-bezier(.1, .7, .4, 1)',
            duration: 0.3,
            blackMaskOpacity: 0.4,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} callback
             */
            push: function (enterPage, leavePage, callback) {
                var mask = this.backgroundMask.remove();
                leavePage.element[0].parentNode.insertBefore(mask[0], leavePage.element[0].nextSibling);

                animit.runAll(
                    animit(mask[0])
                        .queue({
                            opacity: 0,
                            transform: 'translate3d(0, 0, 0)'
                        })
                        .queue({
                            opacity: this.blackMaskOpacity
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            mask.remove();
                            done();
                        }),

                    animit(enterPage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(100%, 0, 0)',
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)',
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle(),

                    animit(leavePage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0, 0, 0)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(-45%, 0px, 0px)'
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .wait(0.2)
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} enterPage
             * @param {Object} leavePage
             * @param {Function} done
             */
            pop: function (enterPage, leavePage, done) {
                var mask = this.backgroundMask.remove();
                enterPage.element[0].parentNode.insertBefore(mask[0], enterPage.element[0].nextSibling);

                animit.runAll(
                    animit(mask[0])
                        .queue({
                            opacity: this.blackMaskOpacity,
                            transform: 'translate3d(0, 0, 0)'
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            mask.remove();
                            done();
                        }),

                    animit(enterPage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(-45%, 0px, 0px)',
                                opacity: 0.9
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(0px, 0px, 0px)',
                                opacity: 1.0
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle(),

                    animit(leavePage.element[0])
                        .queue({
                            css: {
                                transform: 'translate3D(0px, 0px, 0px)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(100%, 0px, 0px)'
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .wait(0.2)
                        .queue(function (finish) {
                            done();
                            finish();
                        })
                );
            }
        });

        return SimpleSlideTransitionAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('SlideDialogAnimator', ['DialogAnimator', function (DialogAnimator) {

        /**
         * Slide animator for dialog.
         */
        var SlideDialogAnimator = DialogAnimator.extend({

            timing: 'cubic-bezier(.1, .7, .4, 1)',
            duration: 0.2,

            init: function (options) {
                options = options || {};

                this.timing = options.timing || this.timing;
                this.duration = options.duration !== undefined ? options.duration : this.duration;
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            show: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 0
                        })
                        .queue({
                            opacity: 1.0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3D(-50%, -350%, 0)',
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(-50%, -50%, 0)',
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            },

            /**
             * @param {Object} dialog
             * @param {Function} callback
             */
            hide: function (dialog, callback) {
                callback = callback ? callback : function () {
                    };

                animit.runAll(
                    animit(dialog._mask[0])
                        .queue({
                            opacity: 1.0
                        })
                        .queue({
                            opacity: 0
                        }, {
                            duration: this.duration,
                            timing: this.timing
                        }),

                    animit(dialog._dialog[0])
                        .queue({
                            css: {
                                transform: 'translate3D(-50%, -50%, 0)'
                            },
                            duration: 0
                        })
                        .queue({
                            css: {
                                transform: 'translate3D(-50%, -350%, 0)'
                            },
                            duration: this.duration,
                            timing: this.timing
                        })
                        .resetStyle()
                        .queue(function (done) {
                            callback();
                            done();
                        })
                );
            }
        });

        return SlideDialogAnimator;
    }]);

})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    var SlidingMenuViewModel = Class.extend({

        /**
         * @member Number
         */
        _distance: 0,

        /**
         * @member Number
         */
        _maxDistance: undefined,

        /**
         * @param {Object} options
         * @param {Number} maxDistance
         */
        init: function (options) {
            if (!angular.isNumber(options.maxDistance)) {
                throw new Error('options.maxDistance must be number');
            }

            this.setMaxDistance(options.maxDistance);
        },

        /**
         * @param {Number} maxDistance
         */
        setMaxDistance: function (maxDistance) {
            if (maxDistance <= 0) {
                throw new Error('maxDistance must be greater then zero.');
            }

            if (this.isOpened()) {
                this._distance = maxDistance;
            }
            this._maxDistance = maxDistance;
        },

        /**
         * @return {Boolean}
         */
        shouldOpen: function () {
            return !this.isOpened() && this._distance >= this._maxDistance / 2;
        },

        /**
         * @return {Boolean}
         */
        shouldClose: function () {
            return !this.isClosed() && this._distance < this._maxDistance / 2;
        },

        openOrClose: function (options) {
            if (this.shouldOpen()) {
                this.open(options);
            } else if (this.shouldClose()) {
                this.close(options);
            }
        },

        close: function (options) {
            var callback = options.callback || function () {
                };

            if (!this.isClosed()) {
                this._distance = 0;
                this.emit('close', options);
            } else {
                callback();
            }
        },

        open: function (options) {
            var callback = options.callback || function () {
                };

            if (!this.isOpened()) {
                this._distance = this._maxDistance;
                this.emit('open', options);
            } else {
                callback();
            }
        },

        /**
         * @return {Boolean}
         */
        isClosed: function () {
            return this._distance === 0;
        },

        /**
         * @return {Boolean}
         */
        isOpened: function () {
            return this._distance === this._maxDistance;
        },

        /**
         * @return {Number}
         */
        getX: function () {
            return this._distance;
        },

        /**
         * @return {Number}
         */
        getMaxDistance: function () {
            return this._maxDistance;
        },

        /**
         * @param {Number} x
         */
        translate: function (x) {
            this._distance = Math.max(1, Math.min(this._maxDistance - 1, x));

            var options = {
                distance: this._distance,
                maxDistance: this._maxDistance
            };

            this.emit('translate', options);
        },

        toggle: function () {
            if (this.isClosed()) {
                this.open();
            } else {
                this.close();
            }
        }
    });
    MicroEvent.mixin(SlidingMenuViewModel);

    module.factory('SlidingMenuView', ['$onsen', '$compile', 'SlidingMenuAnimator', 'RevealSlidingMenuAnimator', 'PushSlidingMenuAnimator', 'OverlaySlidingMenuAnimator', function ($onsen, $compile, SlidingMenuAnimator, RevealSlidingMenuAnimator,
                                                                                                                                                                                    PushSlidingMenuAnimator, OverlaySlidingMenuAnimator) {

        var SlidingMenuView = Class.extend({
            _scope: undefined,
            _attrs: undefined,

            _element: undefined,
            _menuPage: undefined,
            _mainPage: undefined,

            _doorLock: undefined,

            _isRightMenu: false,

            init: function (scope, element, attrs) {
                this._scope = scope;
                this._attrs = attrs;
                this._element = element;

                this._menuPage = angular.element(element[0].querySelector('.onsen-sliding-menu__menu'));
                this._mainPage = angular.element(element[0].querySelector('.onsen-sliding-menu__main'));

                this._doorLock = new DoorLock();

                this._isRightMenu = attrs.side === 'right';

                // Close menu on tap event.
                this._mainPageHammer = new Hammer(this._mainPage[0]);
                this._bindedOnTap = this._onTap.bind(this);

                var maxDistance = this._normalizeMaxSlideDistanceAttr();
                this._logic = new SlidingMenuViewModel({maxDistance: Math.max(maxDistance, 1)});
                this._logic.on('translate', this._translate.bind(this));
                this._logic.on('open', function (options) {
                    this._open(options);
                }.bind(this));
                this._logic.on('close', function (options) {
                    this._close(options);
                }.bind(this));

                attrs.$observe('maxSlideDistance', this._onMaxSlideDistanceChanged.bind(this));
                attrs.$observe('swipeable', this._onSwipeableChanged.bind(this));

                this._bindedOnWindowResize = this._onWindowResize.bind(this);
                window.addEventListener('resize', this._bindedOnWindowResize);

                this._boundHandleEvent = this._handleEvent.bind(this);
                this._bindEvents();

                if (attrs.mainPage) {
                    this.setMainPage(attrs.mainPage);
                }

                if (attrs.menuPage) {
                    this.setMenuPage(attrs.menuPage);
                }

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));

                var unlock = this._doorLock.lock();

                window.setTimeout(function () {
                    var maxDistance = this._normalizeMaxSlideDistanceAttr();
                    this._logic.setMaxDistance(maxDistance);

                    this._menuPage.css({opacity: 1});

                    this._animator = this._getAnimatorOption();
                    this._animator.setup(
                        this._element,
                        this._mainPage,
                        this._menuPage,
                        {
                            isRight: this._isRightMenu,
                            width: this._attrs.maxSlideDistance || '90%'
                        }
                    );

                    unlock();
                }.bind(this), 400);

                scope.$on('$destroy', this._destroy.bind(this));

                if (!attrs.swipeable) {
                    this.setSwipeable(true);
                }
            },

            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler;
            },

            _onDeviceBackButton: function (event) {
                if (this.isMenuOpened()) {
                    this.closeMenu();
                } else {
                    event.callParentHandler();
                }
            },

            _onTap: function () {
                if (this.isMenuOpened()) {
                    this.closeMenu();
                }
            },

            _refreshMenuPageWidth: function () {
                var width = ('maxSlideDistance' in this._attrs) ? this._attrs.maxSlideDistance : '90%';

                if (this._animator) {
                    this._animator.onResized({
                        isOpened: this._logic.isOpened(),
                        width: width
                    });
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._deviceBackButtonHandler.destroy();
                window.removeEventListener('resize', this._bindedOnWindowResize);

                this._mainPageHammer.off('tap', this._bindedOnTap);
                this._element = this._scope = this._attrs = null;
            },

            _getAnimatorOption: function () {
                var animator = SlidingMenuView._animatorDict[this._attrs.type];

                if (!(animator instanceof SlidingMenuAnimator)) {
                    animator = SlidingMenuView._animatorDict['default'];
                }

                return animator.copy();
            },

            _onSwipeableChanged: function (swipeable) {
                swipeable = swipeable === '' || swipeable === undefined || swipeable == 'true';

                this.setSwipeable(swipeable);
            },

            /**
             * @param {Boolean} enabled
             */
            setSwipeable: function (enabled) {
                if (enabled) {
                    this._activateHammer();
                } else {
                    this._deactivateHammer();
                }
            },

            _onWindowResize: function () {
                this._recalculateMAX();
                this._refreshMenuPageWidth();
            },

            _onMaxSlideDistanceChanged: function () {
                this._recalculateMAX();
                this._refreshMenuPageWidth();
            },

            /**
             * @return {Number}
             */
            _normalizeMaxSlideDistanceAttr: function () {
                var maxDistance = this._attrs.maxSlideDistance;

                if (!('maxSlideDistance' in this._attrs)) {
                    maxDistance = 0.9 * this._mainPage[0].clientWidth;
                } else if (typeof maxDistance == 'string') {
                    if (maxDistance.indexOf('px', maxDistance.length - 2) !== -1) {
                        maxDistance = parseInt(maxDistance.replace('px', ''), 10);
                    } else if (maxDistance.indexOf('%', maxDistance.length - 1) > 0) {
                        maxDistance = maxDistance.replace('%', '');
                        maxDistance = parseFloat(maxDistance) / 100 * this._mainPage[0].clientWidth;
                    }
                } else {
                    throw new Error('invalid state');
                }

                return maxDistance;
            },

            _recalculateMAX: function () {
                var maxDistance = this._normalizeMaxSlideDistanceAttr();

                if (maxDistance) {
                    this._logic.setMaxDistance(parseInt(maxDistance, 10));
                }
            },

            _activateHammer: function () {
                this._hammertime.on('touch panleft panright swipeleft swiperight panend', this._boundHandleEvent);
            },

            _deactivateHammer: function () {
                this._hammertime.off('touch panleft panright swipeleft swiperight panend', this._boundHandleEvent);
            },

            _bindEvents: function () {
                this._hammertime = new Hammer(this._element[0], {
                    dragMinDistance: 1
                });
            },

            _appendMainPage: function (pageUrl, templateHTML) {
                var pageScope = this._scope.$new();
                var pageContent = angular.element(templateHTML);
                var link = $compile(pageContent);

                this._mainPage.append(pageContent);

                if (this._currentPageElement) {
                    this._currentPageElement.remove();
                    this._currentPageScope.$destroy();
                }

                link(pageScope);

                this._currentPageElement = pageContent;
                this._currentPageScope = pageScope;
                this._currentPageUrl = pageUrl;
            },

            /**
             * @param {String}
             */
            _appendMenuPage: function (templateHTML) {
                var pageScope = this._scope.$new();
                var pageContent = angular.element(templateHTML);
                var link = $compile(pageContent);

                this._menuPage.append(pageContent);

                if (this._currentMenuPageScope) {
                    this._currentMenuPageScope.$destroy();
                    this._currentMenuPageElement.remove();
                }

                link(pageScope);

                this._currentMenuPageElement = pageContent;
                this._currentMenuPageScope = pageScope;
            },

            /**
             * @param {String} page
             * @param {Object} options
             * @param {Boolean} [options.closeMenu]
             * @param {Boolean} [options.callback]
             */
            setMenuPage: function (page, options) {
                if (page) {
                    options = options || {};
                    options.callback = options.callback || function () {
                        };

                    var self = this;
                    $onsen.getPageHTMLAsync(page).then(function (html) {
                        self._appendMenuPage(angular.element(html));
                        if (options.closeMenu) {
                            self.close();
                        }
                        options.callback();
                    }, function () {
                        throw new Error('Page is not found: ' + page);
                    });
                } else {
                    throw new Error('cannot set undefined page');
                }
            },

            /**
             * @param {String} pageUrl
             * @param {Object} options
             * @param {Boolean} [options.closeMenu]
             * @param {Boolean} [options.callback]
             */
            setMainPage: function (pageUrl, options) {
                options = options || {};
                options.callback = options.callback || function () {
                    };

                var done = function () {
                    if (options.closeMenu) {
                        this.close();
                    }
                    options.callback();
                }.bind(this);

                if (this.currentPageUrl === pageUrl) {
                    done();
                    return;
                }

                if (pageUrl) {
                    var self = this;
                    $onsen.getPageHTMLAsync(pageUrl).then(function (html) {
                        self._appendMainPage(pageUrl, html);
                        done();
                    }, function () {
                        throw new Error('Page is not found: ' + page);
                    });
                } else {
                    throw new Error('cannot set undefined page');
                }
            },

            _handleEvent: function (event) {

                if (this._doorLock.isLocked()) {
                    return;
                }

                if (this._isInsideIgnoredElement(event.target)) {
                    this._hammer.stop();
                }

                switch (event.type) {
                    case 'panleft':
                    case 'panright':

                        if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
                            return;
                        }

                        event.preventDefault();

                        var deltaX = event.deltaX;
                        var deltaDistance = this._isRightMenu ? -deltaX : deltaX;

                        var startEvent = event.startEvent;

                        if (!('isOpened' in startEvent)) {
                            startEvent.isOpened = this._logic.isOpened();
                        }

                        if (deltaDistance < 0 && this._logic.isClosed()) {
                            break;
                        }

                        if (deltaDistance > 0 && this._logic.isOpened()) {
                            break;
                        }

                        if (deltaDistance > 0){
                            return ;
                        }

                        var distance = startEvent.isOpened ?
                            deltaDistance + this._logic.getMaxDistance() : deltaDistance;

                        this._logic.translate(distance);

                        break;

                    case 'swipeleft':
                        event.preventDefault();

                        if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
                            return;
                        }

                        if (this._isRightMenu) {
                            this.open();
                        } else {
                            this.close();
                        }

                        this._mainPageHammer.stop();
                        break;

                    case 'swiperight':
                        event.preventDefault();

                        if (this._logic.isClosed() && !this._isInsideSwipeTargetArea(event)) {
                            return;
                        }

                        if (this._isRightMenu) {
                            this.close();
                        } else {
                            this.open();
                        }
                        this._mainPageHammer.stop();
                        //event.stopDetect();
                        break;

                    case 'panend':
                        this._lastDistance = null;

                        if (this._logic.shouldOpen()) {
                            this.open();
                        } else if (this._logic.shouldClose()) {
                            this.close();
                        }

                        break;
                }
            },

            /**
             * @param {jqLite} element
             * @return {Boolean}
             */
            _isInsideIgnoredElement: function (element) {
                do {
                    if (element.getAttribute && element.getAttribute('sliding-menu-ignore')) {
                        return true;
                    }
                    element = element.parentNode;
                } while (element);

                return false;
            },

            _isInsideSwipeTargetArea: function (event) {
                var x = event.center.pageX || event.center.x;

                if (!('_swipeTargetWidth' in event.startEvent)) {
                    event.startEvent._swipeTargetWidth = this._getSwipeTargetWidth();
                }

                var targetWidth = event.startEvent._swipeTargetWidth;
                return this._isRightMenu ? this._mainPage[0].clientWidth - x < targetWidth : x < targetWidth;
            },

            _getSwipeTargetWidth: function () {
                var targetWidth = this._attrs.swipeTargetWidth;

                if (typeof targetWidth == 'string') {
                    targetWidth = targetWidth.replace('px', '');
                }

                var width = parseInt(targetWidth, 10);
                if (width < 0 || !targetWidth) {
                    return this._mainPage[0].clientWidth;
                } else {
                    return width;
                }
            },

            closeMenu: function () {
                return this.close.apply(this, arguments);
            },

            /**
             * Close sliding-menu page.
             *
             * @param {Object} options
             */
            close: function (options) {
                options = options || {};
                options = typeof options == 'function' ? {callback: options} : options;

                if (!this._logic.isClosed()) {
                    this.emit('preclose', {
                        slidingMenu: this
                    });

                    this._doorLock.waitUnlock(function () {
                        this._logic.close(options);
                    }.bind(this));
                }
            },

            _close: function (options) {
                var callback = options.callback || function () {
                        },
                    unlock = this._doorLock.lock(),
                    instant = options.animation == 'none';

                this._animator.closeMenu(function () {
                    unlock();

                    this._mainPage.children().css('pointer-events', '');
                    this._mainPageHammer.off('tap', this._bindedOnTap);

                    this.emit('postclose', {
                        slidingMenu: this
                    });

                    callback();
                }.bind(this), instant);
            },

            /**
             * Open sliding-menu page.
             *
             * @param {Object} [options]
             * @param {Function} [options.callback]
             */
            openMenu: function () {
                return this.open.apply(this, arguments);
            },

            /**
             * Open sliding-menu page.
             *
             * @param {Object} [options]
             * @param {Function} [options.callback]
             */
            open: function (options) {
                options = options || {};
                options = typeof options == 'function' ? {callback: options} : options;

                this.emit('preopen', {
                    slidingMenu: this
                });

                this._doorLock.waitUnlock(function () {
                    this._logic.open(options);
                }.bind(this));
            },

            _open: function (options) {
                var callback = options.callback || function () {
                        },
                    unlock = this._doorLock.lock(),
                    instant = options.animation == 'none';

                this._animator.openMenu(function () {
                    unlock();

                    this._mainPage.children().css('pointer-events', 'none');
                    this._mainPageHammer.on('tap', this._bindedOnTap);

                    this.emit('postopen', {
                        slidingMenu: this
                    });

                    callback();
                }.bind(this), instant);
            },

            /**
             * Toggle sliding-menu page.
             * @param {Object} [options]
             * @param {Function} [options.callback]
             */
            toggle: function (options) {
                if (this._logic.isClosed()) {
                    this.open(options);
                } else {
                    this.close(options);
                }
            },

            /**
             * Toggle sliding-menu page.
             */
            toggleMenu: function () {
                return this.toggle.apply(this, arguments);
            },

            /**
             * @return {Boolean}
             */
            isMenuOpened: function () {
                return this._logic.isOpened();
            },

            /**
             * @param {Object} event
             */
            _translate: function (event) {
                this._animator.translateMenu(event);
            }
        });

        // Preset sliding menu animators.
        SlidingMenuView._animatorDict = {
            'default': new RevealSlidingMenuAnimator(),
            'overlay': new OverlaySlidingMenuAnimator(),
            'reveal': new RevealSlidingMenuAnimator(),
            'push': new PushSlidingMenuAnimator()
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        SlidingMenuView.registerSlidingMenuAnimator = function (name, animator) {
            if (!(animator instanceof SlidingMenuAnimator)) {
                throw new Error('"animator" param must be an instance of SlidingMenuAnimator');
            }

            this._animatorDict[name] = animator;
        };

        MicroEvent.mixin(SlidingMenuView);

        return SlidingMenuView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('SlidingMenuAnimator', function () {
        return Class.extend({

            /**
             * @param {jqLite} element "ons-sliding-menu" or "ons-split-view" element
             * @param {jqLite} mainPage
             * @param {jqLite} menuPage
             * @param {Object} options
             * @param {String} options.width "width" style value
             * @param {Boolean} options.isRight
             */
            setup: function (element, mainPage, menuPage, options) {
            },

            /**
             * @param {Object} options
             * @param {Boolean} options.isRight
             * @param {Boolean} options.isOpened
             * @param {String} options.width
             */
            onResized: function (options) {
            },

            /**
             * @param {Function} callback
             */
            openMenu: function (callback) {
            },

            /**
             * @param {Function} callback
             */
            closeClose: function (callback) {
            },

            /**
             */
            destroy: function () {
            },

            /**
             * @param {Object} options
             * @param {Number} options.distance
             * @param {Number} options.maxDistance
             */
            translateMenu: function (mainPage, menuPage, options) {
            },

            /**
             * @return {SlidingMenuAnimator}
             */
            copy: function () {
                throw new Error('Override copy method.');
            }
        });
    });
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */
(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('SplitView', ['$compile', 'RevealSlidingMenuAnimator', '$onsen', '$onsGlobal', function ($compile, RevealSlidingMenuAnimator, $onsen, $onsGlobal) {
        var SPLIT_MODE = 0;
        var COLLAPSE_MODE = 1;
        var MAIN_PAGE_RATIO = 0.9;

        var ON_PAGE_READY = 'onPageReady';

        var SplitView = Class.extend({

            init: function (scope, element, attrs) {
                element.addClass('onsen-sliding-menu');

                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                this._mainPage = angular.element(element[0].querySelector('.onsen-split-view__main'));
                this._secondaryPage = angular.element(element[0].querySelector('.onsen-split-view__secondary'));

                this._max = this._mainPage[0].clientWidth * MAIN_PAGE_RATIO;
                this._mode = SPLIT_MODE;
                this._doorLock = new DoorLock();

                this._doSplit = false;
                this._doCollapse = false;

                $onsGlobal.orientation.on('change', this._onResize.bind(this));

                this._animator = new RevealSlidingMenuAnimator();

                this._element.css('display', 'none');

                if (attrs.mainPage) {
                    this.setMainPage(attrs.mainPage);
                }

                if (attrs.secondaryPage) {
                    this.setSecondaryPage(attrs.secondaryPage);
                }

                var unlock = this._doorLock.lock();

                this._considerChangingCollapse();
                this._setSize();

                setTimeout(function () {
                    this._element.css('display', 'block');
                    unlock();
                }.bind(this), 1000 / 60 * 2);

                scope.$on('$destroy', this._destroy.bind(this));
            },

            /**
             * @param {String} templateHTML
             */
            _appendSecondPage: function (templateHTML) {
                var pageScope = this._scope.$new();
                var pageContent = $compile(templateHTML)(pageScope);

                this._secondaryPage.append(pageContent);

                if (this._currentSecondaryPageElement) {
                    this._currentSecondaryPageElement.remove();
                    this._currentSecondaryPageScope.$destroy();
                }

                this._currentSecondaryPageElement = pageContent;
                this._currentSecondaryPageScope = pageScope;
            },

            /**
             * @param {String} templateHTML
             */
            _appendMainPage: function (templateHTML) {
                var pageScope = this._scope.$new();
                var pageContent = $compile(templateHTML)(pageScope);

                this._mainPage.append(pageContent);

                if (this._currentPage) {
                    this._currentPage.remove();
                    this._currentPageScope.$destroy();
                }

                this._currentPage = pageContent;
                this._currentPageScope = pageScope;
            },

            /**
             * @param {String} page
             */
            setSecondaryPage: function (page) {
                if (page) {
                    $onsen.getPageHTMLAsync(page).then(function (html) {
                        this._appendSecondPage(angular.element(html.trim()));
                    }.bind(this), function () {
                        throw new Error('Page is not found: ' + page);
                    });
                } else {
                    throw new Error('cannot set undefined page');
                }
            },

            /**
             * @param {String} page
             */
            setMainPage: function (page) {
                if (page) {
                    $onsen.getPageHTMLAsync(page).then(function (html) {
                        this._appendMainPage(angular.element(html.trim()));
                    }.bind(this), function () {
                        throw new Error('Page is not found: ' + page);
                    });
                } else {
                    throw new Error('cannot set undefined page');
                }
            },

            _onResize: function () {
                var lastMode = this._mode;

                this._considerChangingCollapse();

                if (lastMode === COLLAPSE_MODE && this._mode === COLLAPSE_MODE) {
                    this._animator.onResized({
                        isOpened: false,
                        width: '90%'
                    });
                }

                this._max = this._mainPage[0].clientWidth * MAIN_PAGE_RATIO;
            },

            _considerChangingCollapse: function () {
                var should = this._shouldCollapse();

                if (should && this._mode !== COLLAPSE_MODE) {
                    this._fireUpdateEvent();
                    if (this._doSplit) {
                        this._activateSplitMode();
                    } else {
                        this._activateCollapseMode();
                    }
                } else if (!should && this._mode === COLLAPSE_MODE) {
                    this._fireUpdateEvent();
                    if (this._doCollapse) {
                        this._activateCollapseMode();
                    } else {
                        this._activateSplitMode();
                    }
                }

                this._doCollapse = this._doSplit = false;
            },

            update: function () {
                this._fireUpdateEvent();

                var should = this._shouldCollapse();

                if (this._doSplit) {
                    this._activateSplitMode();
                } else if (this._doCollapse) {
                    this._activateCollapseMode();
                } else if (should) {
                    this._activateCollapseMode();
                } else if (!should) {
                    this._activateSplitMode();
                }

                this._doSplit = this._doCollapse = false;
            },

            _getOrientation: function () {
                if ($onsGlobal.orientation.isPortrait()) {
                    return 'portrait';
                } else {
                    return 'landscape';
                }
            },

            getCurrentMode: function () {
                if (this._mode === COLLAPSE_MODE) {
                    return 'collapse';
                } else {
                    return 'split';
                }
            },

            _shouldCollapse: function () {
                var c = 'portrait';
                if (typeof this._attrs.collapse === 'string') {
                    c = this._attrs.collapse.trim();
                }

                if (c == 'portrait') {
                    return $onsGlobal.orientation.isPortrait();
                } else if (c == 'landscape') {
                    return $onsGlobal.orientation.isLandscape();
                } else if (c.substr(0, 5) == 'width') {
                    var num = c.split(' ')[1];
                    if (num.indexOf('px') >= 0) {
                        num = num.substr(0, num.length - 2);
                    }

                    var width = window.innerWidth;

                    return isNumber(num) && width < num;
                } else {
                    var mq = window.matchMedia(c);
                    return mq.matches;
                }
            },

            _setSize: function () {
                if (this._mode === SPLIT_MODE) {
                    if (!this._attrs.mainPageWidth) {
                        this._attrs.mainPageWidth = '70';
                    }

                    var secondarySize = 100 - this._attrs.mainPageWidth.replace('%', '');
                    this._secondaryPage.css({
                        width: secondarySize + '%',
                        opacity: 1
                    });

                    this._mainPage.css({
                        width: this._attrs.mainPageWidth + '%'
                    });

                    this._mainPage.css('left', secondarySize + '%');
                }
            },

            _fireEvent: function (name) {
                this.emit(name, {
                    splitView: this,
                    width: window.innerWidth,
                    orientation: this._getOrientation()
                });
            },

            _fireUpdateEvent: function () {
                var that = this;

                this.emit('update', {
                    splitView: this,
                    shouldCollapse: this._shouldCollapse(),
                    currentMode: this.getCurrentMode(),
                    split: function () {
                        that._doSplit = true;
                        that._doCollapse = false;
                    },
                    collapse: function () {
                        that._doSplit = false;
                        that._doCollapse = true;
                    },
                    width: window.innerWidth,
                    orientation: this._getOrientation()
                });
            },

            _activateCollapseMode: function () {
                if (this._mode !== COLLAPSE_MODE) {
                    this._fireEvent('precollapse');

                    this._secondaryPage.attr('style', '');
                    this._mainPage.attr('style', '');

                    this._mode = COLLAPSE_MODE;

                    this._animator.setup(
                        this._element,
                        this._mainPage,
                        this._secondaryPage,
                        {isRight: false, width: '90%'}
                    );

                    this._fireEvent('postcollapse');
                }
            },

            _activateSplitMode: function () {
                if (this._mode !== SPLIT_MODE) {
                    this._fireEvent('presplit');

                    this._animator.destroy();

                    this._secondaryPage.attr('style', '');
                    this._mainPage.attr('style', '');

                    this._mode = SPLIT_MODE;
                    this._setSize();

                    this._fireEvent('postsplit');
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._element = null;
                this._scope = null;
            }
        });

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        MicroEvent.mixin(SplitView);

        return SplitView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.factory('SwitchView', ['$onsen', function ($onsen) {

        var SwitchView = Class.extend({

            /**
             * @param {jqLite} element
             * @param {Object} scope
             * @param {Object} attrs
             */
            init: function (element, scope, attrs) {
                this._element = element;
                this._checkbox = angular.element(element[0].querySelector('input[type=checkbox]'));
                this._scope = scope;

                attrs.$observe('disabled', function (disabled) {
                    if (!!element.attr('disabled')) {
                        this._checkbox.attr('disabled', 'disabled');
                    } else {
                        this._checkbox.removeAttr('disabled');
                    }
                }.bind(this));

                this._checkbox.on('change', function (event) {
                    this.emit('change', {'switch': this, value: this._checkbox[0].checked, isInteractive: true});
                }.bind(this));
            },

            /**
             * @return {Boolean}
             */
            isChecked: function () {
                return this._checkbox[0].checked;
            },

            /**
             * @param {Boolean}
             */
            setChecked: function (isChecked) {
                isChecked = !!isChecked;

                if (this._checkbox[0].checked != isChecked) {
                    this._scope.model = isChecked;
                    this._checkbox[0].checked = isChecked;
                    this._scope.$evalAsync();

                    this.emit('change', {'switch': this, value: isChecked, isInteractive: false});
                }
            },

            /**
             * @return {HTMLElement}
             */
            getCheckboxElement: function () {
                return this._checkbox[0];
            }
        });
        MicroEvent.mixin(SwitchView);

        return SwitchView;
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict;';

    var module = angular.module('onsen');

    module.factory('TabbarAnimator', function () {

        var TabbarAnimator = Class.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function (enterPage, leavePage, done) {
                throw new Error('This method must be implemented.');
            }
        });

        return TabbarAnimator;
    });

    module.factory('TabbarNoneAnimator', ['TabbarAnimator', function (TabbarAnimator) {

        var TabbarNoneAnimator = TabbarAnimator.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function (enterPage, leavePage, done) {
                done();
            }
        });

        return TabbarNoneAnimator;
    }]);

    module.factory('TabbarFadeAnimator', ['TabbarAnimator', function (TabbarAnimator) {

        var TabbarFadeAnimator = TabbarAnimator.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function (enterPage, leavePage, done) {
                animit.runAll(
                    animit(enterPage[0])
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 0
                        })
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 1
                        }, {
                            duration: 0.4,
                            timing: 'linear'
                        })
                        .resetStyle()
                        .queue(function (callback) {
                            done();
                            callback();
                        }),
                    animit(leavePage[0])
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 1
                        })
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 0
                        }, {
                            duration: 0.4,
                            timing: 'linear'
                        })
                );
            }
        });

        return TabbarFadeAnimator;
    }]);

    module.factory('TabbarView', ['$onsen', '$compile', 'TabbarAnimator', 'TabbarNoneAnimator', 'TabbarFadeAnimator', function ($onsen, $compile, TabbarAnimator, TabbarNoneAnimator, TabbarFadeAnimator) {
        var TabbarView = Class.extend({
            _tabbarId: undefined,

            _tabItems: undefined,

            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this._tabbarId = Date.now();
                this._tabItems = [];

                this._contentElement = angular.element(element[0].querySelector('.ons-tab-bar__content'));
                this._tabbarElement = angular.element(element[0].querySelector('.ons-tab-bar__footer'));

                this._scope.$on('$destroy', this._destroy.bind(this));

                if (this._hasTopTabbar()) {
                    this._prepareForTopTabbar();
                }
            },

            _prepareForTopTabbar: function () {
                this._contentElement.attr('no-status-bar-fill', '');

                setImmediate(function () {
                    this._contentElement.addClass('tab-bar--top__content');
                    this._tabbarElement.addClass('tab-bar--top');
                }.bind(this));

                var page = ons.findParentComponentUntil('ons-page', this._element[0]);
                if (page) {
                    this._element.css('top', window.getComputedStyle(page.getContentElement(), null).getPropertyValue('padding-top'));
                }

                if ($onsen.shouldFillStatusBar(this._element[0])) {
                    // Adjustments for IOS7
                    var fill = angular.element(document.createElement('div'));
                    fill.addClass('tab-bar__status-bar-fill');
                    fill.css({width: '0px', height: '0px'});

                    this._element.prepend(fill);
                }
            },

            _hasTopTabbar: function () {
                return this._attrs.position === 'top';
            },

            /**
             * @param {Number} index
             * @param {Object} [options]
             * @param {Boolean} [options.keepPage]
             * @param {String} [options.animation]
             * @return {Boolean} success or not
             */
            setActiveTab: function (index, options) {
                options = options || {};
                var previousTabItem = this._tabItems[this.getActiveTabIndex()];
                var selectedTabItem = this._tabItems[index];

                if ((typeof selectedTabItem.noReload !== 'undefined' || selectedTabItem.isPersistent()) &&
                    index === this.getActiveTabIndex()) {
                    this.emit('reactive', {
                        index: index,
                        tabItem: selectedTabItem,
                    });
                    return false;
                }

                var needLoad = selectedTabItem.page && !options.keepPage;

                if (!selectedTabItem) {
                    return false;
                }

                var canceled = false;
                this.emit('prechange', {
                    index: index,
                    tabItem: selectedTabItem,
                    cancel: function () {
                        canceled = true;
                    }
                });

                if (canceled) {
                    selectedTabItem.setInactive();
                    if (previousTabItem) {
                        previousTabItem.setActive();
                    }
                    return false;
                }

                selectedTabItem.setActive();

                if (needLoad) {
                    var removeElement = true;

                    if (previousTabItem && previousTabItem.isPersistent()) {
                        removeElement = false;
                        previousTabItem._pageElement = this._currentPageElement;
                    }

                    var params = {
                        callback: function () {
                            this.emit('postchange', {index: index, tabItem: selectedTabItem});
                        }.bind(this),
                        _removeElement: removeElement
                    };
                    if (options.animation) {
                        params.animation = options.animation;
                    }

                    if (selectedTabItem.isPersistent() && selectedTabItem._pageElement) {
                        this._loadPersistentPageDOM(selectedTabItem._pageElement, params);
                    }
                    else {
                        this._loadPage(selectedTabItem.page, params);
                    }
                }

                for (var i = 0; i < this._tabItems.length; i++) {
                    if (this._tabItems[i] != selectedTabItem) {
                        this._tabItems[i].setInactive();
                    } else {
                        if (!needLoad) {
                            this.emit('postchange', {index: index, tabItem: selectedTabItem});
                        }
                    }
                }

                return true;
            },

            /**
             * @param {Boolean} visible
             */
            setTabbarVisibility: function (visible) {
                this._scope.hideTabs = !visible;
                this._onTabbarVisibilityChanged();
            },

            _onTabbarVisibilityChanged: function () {
                if (this._hasTopTabbar()) {
                    if (this._scope.hideTabs) {
                        this._contentElement.css('top', '0px');
                    } else {
                        this._contentElement.css('top', '');
                    }
                } else {
                    if (this._scope.hideTabs) {
                        this._contentElement.css('bottom', '0px');
                    } else {
                        this._contentElement.css('bottom', '');
                    }
                }
            },

            /**
             * @param {Object} tabItem
             */
            addTabItem: function (tabItem) {
                this._tabItems.push(tabItem);
            },

            /**
             * @return {Number} When active tab is not found, returns -1.
             */
            getActiveTabIndex: function () {
                var tabItem;
                for (var i = 0; i < this._tabItems.length; i++) {
                    tabItem = this._tabItems[i];
                    if (tabItem.isActive()) {
                        return i;
                    }
                }

                return -1;
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.animation]
             * @param {Object} [options.callback]
             */
            loadPage: function (page, options) {
                return this._loadPage(page, options);
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.animation]
             */
            _loadPage: function (page, options) {

                $onsen.getPageHTMLAsync(page).then(function (html) {
                    var pageElement = angular.element(html.trim());

                    this._loadPageDOM(pageElement, options);

                }.bind(this), function () {
                    throw new Error('Page is not found: ' + page);
                });
            },

            /**
             * @param {jqLite} element
             * @param {Object} scope
             * @param {Object} options
             * @param {Object} options.animation
             */
            _switchPage: function (element, options) {
                if (this._currentPageElement) {
                    var oldPageElement = this._currentPageElement;
                    var oldPageScope = this._currentPageScope;

                    this._currentPageElement = element;
                    this._currentPageScope = element.data('_scope');

                    this._getAnimatorOption(options).apply(element, oldPageElement, function () {
                        if (options._removeElement) {
                            oldPageElement.remove();
                            oldPageScope.$destroy();
                        }
                        else {
                            oldPageElement.css('display', 'none');
                        }

                        if (options.callback instanceof Function) {
                            options.callback();
                        }
                    });

                } else {
                    this._currentPageElement = element;
                    this._currentPageScope = element.data('_scope');

                    if (options.callback instanceof Function) {
                        options.callback();
                    }
                }
            },

            /**
             * @param {jqLite} element
             * @param {Object} options
             * @param {Object} options.animation
             */
            _loadPageDOM: function (element, options) {
                options = options || {};
                var pageScope = this._scope.$new();
                var link = $compile(element);

                this._contentElement.append(element);
                var pageContent = link(pageScope);

                pageScope.$evalAsync();

                this._switchPage(pageContent, options);
            },

            /**
             * @param {jqLite} element
             * @param {Object} options
             * @param {Object} options.animation
             */
            _loadPersistentPageDOM: function (element, options) {
                options = options || {};

                element.css('display', 'block');
                this._switchPage(element, options);
            },

            /**
             * @param {Object} options
             * @param {String} [options.animation]
             * @return {TabbarAnimator}
             */
            _getAnimatorOption: function (options) {
                var animationAttr = this._element.attr('animation') || 'default';

                return TabbarView._animatorDict[options.animation || animationAttr] || TabbarView._animatorDict['default'];
            },

            _destroy: function () {
                this.emit('destroy');

                this._element = this._scope = this._attrs = null;
            }
        });
        MicroEvent.mixin(TabbarView);

        // Preset transition animators.
        TabbarView._animatorDict = {
            'default': new TabbarNoneAnimator(),
            'none': new TabbarNoneAnimator(),
            'fade': new TabbarFadeAnimator()
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        TabbarView.registerAnimator = function (name, animator) {
            if (!(animator instanceof TabbarAnimator)) {
                throw new Error('"animator" param must be an instance of TabbarAnimator');
            }

            this._animatorDict[name] = animator;
        };

        return TabbarView;
    }]);

})();


/**
 * @ngdoc directive
 * @id alert-dialog
 * @name ons-alert-dialog
 * @category dialog
 * @modifier android
 *   [en]Display an Android style alert dialog.[/en]
 *   [ja]Androidライクなスタイルを表示します。[/ja]
 * @description
 *   [en]Alert dialog that is displayed on top of the current screen.[/en]
 *   [ja]現在のスクリーンにアラートダイアログを表示します。[/ja]
 * @codepen Qwwxyp
 * @guide UsingAlert
 *   [en]Learn how to use the alert dialog.[/en]
 *   [ja]アラートダイアログの使い方の解説。[/ja]
 * @seealso ons-dialog
 *   [en]ons-dialog component[/en]
 *   [ja]ons-dialogコンポーネント[/ja]
 * @seealso ons-popover
 *   [en]ons-popover component[/en]
 *   [ja]ons-dialogコンポーネント[/ja]
 * @seealso ons.notification
 *   [en]Using ons.notification utility functions.[/en]
 *   [ja]アラートダイアログを表示するには、ons.notificationオブジェクトのメソッドを使うこともできます。[/ja]
 * @example
 * <script>
 *   ons.ready(function() {
 *     ons.createAlertDialog('alert.html').then(function(alertDialog) {
 *       alertDialog.show();
 *     });
 *   });
 * </script>
 *
 * <script type="text/ons-template" id="alert.html">
 *   <ons-alert-dialog animation="default" cancelable>
 *     <div class="alert-dialog-title">Warning!</div>
 *     <div class="alert-dialog-content">
 *       An error has occurred!
 *     </div>
 *     <div class="alert-dialog-footer">
 *       <button class="alert-dialog-button">OK</button>
 *     </div>
 *   </ons-alert-dialog>
 * </script>
 */

/**
 * @ngdoc event
 * @name preshow
 * @description
 *   [en]Fired just before the alert dialog is displayed.[/en]
 *   [ja]アラートダイアログが表示される直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.alertDialog
 *   [en]Alert dialog object.[/en]
 *   [ja]アラートダイアログのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Execute to stop the dialog from showing.[/en]
 *   [ja]この関数を実行すると、アラートダイアログの表示を止めます。[/ja]
 */

/**
 * @ngdoc event
 * @name postshow
 * @description
 *   [en]Fired just after the alert dialog is displayed.[/en]
 *   [ja]アラートダイアログが表示された直後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.alertDialog
 *   [en]Alert dialog object.[/en]
 *   [ja]アラートダイアログのオブジェクト。[/ja]
 */

/**
 * @ngdoc event
 * @name prehide
 * @description
 *   [en]Fired just before the alert dialog is hidden.[/en]
 *   [ja]アラートダイアログが隠れる直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.alertDialog
 *   [en]Alert dialog object.[/en]
 *   [ja]アラートダイアログのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Execute to stop the dialog from hiding.[/en]
 *   [ja]この関数を実行すると、アラートダイアログが閉じようとするのを止めます。[/ja]
 */

/**
 * @ngdoc event
 * @name posthide
 * @description
 * [en]Fired just after the alert dialog is hidden.[/en]
 * [ja]アラートダイアログが隠れた後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.alertDialog
 *   [en]Alert dialog object.[/en]
 *   [ja]アラートダイアログのオブジェクト。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this alert dialog.[/en]
 *  [ja]このアラートダイアログを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *  [en]The appearance of the dialog.[/en]
 *  [ja]ダイアログの見た目を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name cancelable
 * @description
 *  [en]If this attribute is set the dialog can be closed by tapping the background or by pressing the back button.[/en]
 *  [ja]この属性があると、ダイアログが表示された時に、背景やバックボタンをタップした時にダイアログを閉じます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *  [en]If this attribute is set the dialog is disabled.[/en]
 *  [ja]この属性がある時、アラートダイアログはdisabled状態になります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name animation
 * @type {String}
 * @default default
 * @description
 *  [en]The animation used when showing and hiding the dialog. Can be either "none" or "default".[/en]
 *  [ja]ダイアログを表示する際のアニメーション名を指定します。デフォルトでは"none"か"default"が指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name mask-color
 * @type {String}
 * @default rgba(0, 0, 0, 0.2)
 * @description
 *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
 *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-preshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prehide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-posthide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature show([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクトです。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "fade", "slide" and "none".[/en]
 *   [ja]アニメーション名を指定します。指定できるのは、"fade", "slide", "none"のいずれかです。[/ja]
 * @param {Function} [options.callback]
 *   [en]Function to execute after the dialog has been revealed.[/en]
 *   [ja]ダイアログが表示され終わった時に呼び出されるコールバックを指定します。[/ja]
 * @description
 *   [en]Show the alert dialog.[/en]
 *   [ja]ダイアログを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature hide([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "fade", "slide" and "none".[/en]
 *   [ja]アニメーション名を指定します。"fade", "slide", "none"のいずれかを指定します。[/ja]
 * @param {Function} [options.callback]
 *   [en]Function to execute after the dialog has been hidden.[/en]
 *   [ja]このダイアログが閉じた時に呼び出されるコールバックを指定します。[/ja]
 * @description
 *   [en]Hide the alert dialog.[/en]
 *   [ja]ダイアログを閉じます。[/ja]
 */

/**
 * @ngdoc method
 * @signature isShown()
 * @description
 *   [en]Returns whether the dialog is visible or not.[/en]
 *   [ja]ダイアログが表示されているかどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is currently visible.[/en]
 *   [ja]ダイアログが表示されていればtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature destroy()
 * @description
 *   [en]Destroy the alert dialog and remove it from the DOM tree.[/en]
 *   [ja]ダイアログを破棄して、DOMツリーから取り除きます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setCancelable(cancelable)
 * @description
 *   [en]Define whether the dialog can be canceled by the user or not.[/en]
 *   [ja]アラートダイアログを表示した際に、ユーザがそのダイアログをキャンセルできるかどうかを指定します。[/ja]
 * @param {Boolean} cancelable
 *   [en]If true the dialog will be cancelable.[/en]
 *   [ja]キャンセルできるかどうかを真偽値で指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isCancelable()
 * @description
 *   [en]Returns whether the dialog is cancelable or not.[/en]
 *   [ja]このアラートダイアログがキャンセル可能かどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is cancelable.[/en]
 *   [ja]キャンセル可能であればtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @description
 *   [en]Disable or enable the alert dialog.[/en]
 *   [ja]このアラートダイアログをdisabled状態にするかどうかを設定します。[/ja]
 * @param {Boolean} disabled
 *   [en]If true the dialog will be disabled.[/en]
 *   [ja]disabled状態にするかどうかを真偽値で指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @description
 *   [en]Returns whether the dialog is disabled or enabled.[/en]
 *   [ja]このアラートダイアログがdisabled状態かどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is disabled.[/en]
 *   [ja]disabled状態であればtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火された際に呼び出されるコールバックを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出されるコールバックを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしlistenerパラメータが指定されなかった場合、そのイベントのリスナーが全て削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーの関数オブジェクトを渡します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Alert dialog directive.
     */
    module.directive('onsAlertDialog', ['$onsen', 'AlertDialogView', function ($onsen, AlertDialogView) {
        return {
            restrict: 'E',
            replace: false,
            scope: true,
            transclude: false,

            compile: function (element, attrs) {
                var modifierTemplater = $onsen.generateModifierTemplater(attrs);

                element.addClass('alert-dialog ' + modifierTemplater('alert-dialog--*'));

                var titleElement = angular.element(element[0].querySelector('.alert-dialog-title')),
                    contentElement = angular.element(element[0].querySelector('.alert-dialog-content'));

                if (titleElement.length) {
                    titleElement.addClass(modifierTemplater('alert-dialog-title--*'));
                }

                if (contentElement.length) {
                    contentElement.addClass(modifierTemplater('alert-dialog-content--*'));
                }

                return {
                    pre: function (scope, element, attrs) {
                        var alertDialog = new AlertDialogView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, alertDialog);
                        $onsen.registerEventHandlers(alertDialog, 'preshow prehide postshow posthide destroy');
                        $onsen.addModifierMethods(alertDialog, 'alert-dialog--*', element);

                        if (titleElement.length) {
                            $onsen.addModifierMethods(alertDialog, 'alert-dialog-title--*', titleElement);
                        }
                        if (contentElement.length) {
                            $onsen.addModifierMethods(alertDialog, 'alert-dialog-content--*', contentElement);
                        }
                        if ($onsen.isAndroid()) {
                            alertDialog.addModifier('android');
                        }

                        element.data('ons-alert-dialog', alertDialog);
                        scope.$on('$destroy', function () {
                            alertDialog._events = undefined;
                            $onsen.removeModifierMethods(alertDialog);
                            element.data('ons-alert-dialog', undefined);
                            element = null;
                        });
                    },
                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();

/**
 * @ngdoc directive
 * @id back_button
 * @name ons-back-button
 * @category toolbar
 * @description
 *   [en]Back button component for ons-toolbar. Can be used with ons-navigator to provide back button support.[/en]
 *   [ja]ons-toolbarに配置できる「戻るボタン」用コンポーネントです。ons-navigatorと共に使用し、ページを1つ前に戻る動作を行います。[/ja]
 * @codepen aHmGL
 * @seealso ons-toolbar
 *   [en]ons-toolbar component[/en]
 *   [ja]ons-toolbarコンポーネント[/ja]
 * @seealso ons-navigator
 *   [en]ons-navigator component[/en]
 *   [ja]ons-navigatorコンポーネント[/en]
 * @guide Addingatoolbar
 *   [en]Adding a toolbar[/en]
 *   [ja]ツールバーの追加[/ja]
 * @guide Returningfromapage
 *   [en]Returning from a page[/en]
 *   [ja]一つ前のページに戻る[/ja]
 * @example
 * <ons-back-button>
 *   Back
 * </ons-back-button>
 */
(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsBackButton', ['$onsen', '$compile', 'GenericView', 'ComponentCleaner', function ($onsen, $compile, GenericView, ComponentCleaner) {
        return {
            restrict: 'E',
            replace: false,
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/back_button.tpl',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: true,
            scope: true,

            link: {
                pre: function (scope, element, attrs, controller, transclude) {
                    var backButton = new GenericView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, backButton);

                    element.data('ons-back-button', backButton);

                    scope.$on('$destroy', function () {
                        backButton._events = undefined;
                        $onsen.removeModifierMethods(backButton);
                        element.data('ons-back-button', undefined);
                        element = null;
                    });

                    scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);

                    var navigator = ons.findParentComponentUntil('ons-navigator', element);
                    scope.$watch(function () {
                        return navigator.pages.length;
                    }, function (nbrOfPages) {
                        scope.showBackButton = nbrOfPages > 1;
                    });

                    $onsen.addModifierMethods(backButton, 'toolbar-button--*', element.children());

                    transclude(scope, function (clonedElement) {
                        if (clonedElement[0]) {
                            element[0].querySelector('.back-button__label').appendChild(clonedElement[0]);
                        }
                    });

                    ComponentCleaner.onDestroy(scope, function () {
                        ComponentCleaner.destroyScope(scope);
                        ComponentCleaner.destroyAttributes(attrs);
                        element = null;
                        scope = null;
                        attrs = null;
                    });
                },
                post: function (scope, element) {
                    $onsen.fireComponentEvent(element[0], 'init');
                }
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id bottom_toolbar
 * @name ons-bottom-toolbar
 * @category toolbar
 * @description
 *   [en]Toolbar component that is positioned at the bottom of the page.[/en]
 *   [ja]ページ下部に配置されるツールバー用コンポーネントです。[/ja]
 * @modifier transparent
 *   [en]Make the toolbar transparent.[/en]
 *   [ja]ツールバーの背景を透明にして表示します。[/ja]
 * @seealso ons-toolbar [en]ons-toolbar component[/en][ja]ons-toolbarコンポーネント[/ja]
 * @guide Addingatoolbar
 *   [en]Adding a toolbar[/en]
 *   [ja]ツールバーの追加[/ja]
 * @example
 * <ons-bottom-toolbar>
 *   <div style="text-align: center; line-height: 44px">Text</div>
 * </ons-bottom-toolbar>
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]The appearance of the toolbar.[/en]
 *   [ja]ツールバーの見た目の表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name inline
 * @description
 *   [en]Display the toolbar as an inline element.[/en]
 *   [ja]この属性があると、ツールバーを画面下部ではなくスクロール領域内にそのまま表示します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsBottomToolbar', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclde.
            transclude: false,
            scope: false,
            compile: function (element, attrs) {
                var modifierTemplater = $onsen.generateModifierTemplater(attrs),
                    inline = typeof attrs.inline !== 'undefined';

                element.addClass('bottom-bar');
                element.addClass(modifierTemplater('bottom-bar--*'));
                element.css({'z-index': 0});

                if (inline) {
                    element.css('position', 'static');
                }

                return {
                    pre: function (scope, element, attrs) {
                        var bottomToolbar = new GenericView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, bottomToolbar);
                        element.data('ons-bottomToolbar', bottomToolbar);

                        scope.$on('$destroy', function () {
                            bottomToolbar._events = undefined;
                            $onsen.removeModifierMethods(bottomToolbar);
                            element.data('ons-bottomToolbar', undefined);
                            element = null;
                        });

                        $onsen.addModifierMethods(bottomToolbar, 'bottom-bar--*', element);

                        var pageView = element.inheritedData('ons-page');
                        if (pageView && !inline) {
                            pageView.registerBottomToolbar(element);
                        }
                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id button
 * @name ons-button
 * @category form
 * @modifier outline
 *   [en]Button with outline and transparent background[/en]
 *   [ja]アウトラインを持ったボタンを表示します。[/ja]
 * @modifier light
 *   [en]Button that doesn't stand out.[/en]
 *   [ja]目立たないボタンを表示します。[/ja]
 * @modifier quiet
 *   [en]Button with no outline and or background..[/en]
 *   [ja]枠線や背景が無い文字だけのボタンを表示します。[/ja]
 * @modifier cta
 *   [en]Button that really stands out.[/en]
 *   [ja]目立つボタンを表示します。[/ja]
 * @modifier large
 *   [en]Large button that covers the width of the screen.[/en]
 *   [ja]横いっぱいに広がる大きなボタンを表示します。[/ja]
 * @modifier large--quiet
 *   [en]Large quiet button.[/en]
 *   [ja]横いっぱいに広がるquietボタンを表示します。[/ja]
 * @modifier large--cta
 *   [en]Large call to action button.[/en]
 *   [ja]横いっぱいに広がるctaボタンを表示します。[/ja]
 * @description
 *   [en]Button component. If you want to place a button in a toolbar, use ons-toolbar-button or ons-back-button instead.[/en]
 *   [ja]ボタン用コンポーネント。ツールバーにボタンを設置する場合は、ons-toolbar-buttonもしくはons-back-buttonコンポーネントを使用します。[/ja]
 * @codepen hLayx
 * @guide Button [en]Guide for ons-button[/en][ja]ons-buttonの使い方[/ja]
 * @guide OverridingCSSstyles [en]More details about modifier attribute[/en][ja]modifier属性の使い方[/ja]
 * @example
 * <ons-button modifier="large--cta">
 *   Tap Me
 * </ons-button>
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *  [en]The appearance of the button.[/en]
 *  [ja]ボタンの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name should-spin
 * @type {Boolean}
 * @description
 *  [en]Specify if the button should have a spinner. [/en]
 *  [ja]ボタンにスピナーを表示する場合に指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name animation
 * @type {String}
 * @description
 *   [en]The animation when the button transitions to and from the spinner. Possible values are "slide-left" (default), "slide-right", "slide-up", "slide-down", "expand-left", "expand-right", "expand-up", "expand-down", "zoom-out", "zoom-in".[/en]
 *   [ja]スピナーを表示する場合のアニメーションを指定します。"slide-left" (デフォルト), "slide-right", "slide-up", "slide-down", "expand-left", "expand-right", "expand-up", "expand-down", "zoom-out", "zoom-in"のいずれかを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]Specify if button should be disabled.[/en]
 *   [ja]ボタンを無効化する場合は指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature startSpin()
 * @description
 *   [en]Show spinner on the button.[/en]
 *   [ja]ボタンにスピナーを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature stopSpin()
 * @description
 *   [en]Remove spinner from button.[/en]
 *   [ja]ボタンのスピナーを隠します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isSpinning()
 * @return {Boolean}
 *   [en]true if the button is spinning.[/en]
 *   [ja]spinしているかどうかを返します。[/ja]
 * @description
 *   [en]Return whether the spinner is visible or not.[/en]
 *   [ja]ボタン内にスピナーが表示されているかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setSpinAnimation(animation)
 * @description
 *   [en]Set spin animation. Possible values are "slide-left" (default), "slide-right", "slide-up", "slide-down", "expand-left", "expand-right", "expand-up", "expand-down", "zoom-out", "zoom-in".[/en]
 *   [ja]スピナーを表示する場合のアニメーションを指定します。"slide-left" (デフォルト), "slide-right", "slide-up", "slide-down", "expand-left", "expand-right", "expand-up", "expand-down", "zoom-out", "zoom-in"のいずれかを指定します。[/ja]
 * @param {String} animation
 *   [en]Animation name.[/en]
 *   [ja]アニメーション名を指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @description
 *   [en]Disable or enable the button.[/en]
 *   [ja]このボタンをdisabled状態にするかどうかを設定します。[/ja]
 * @param {String} disabled
 *   [en]If true the button will be disabled.[/en]
 *   [ja]disabled状態にするかどうかを真偽値で指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @return {Boolean}
 *   [en]true if the button is disabled.[/en]
 *   [ja]ボタンがdisabled状態になっているかどうかを返します。[/ja]
 * @description
 *   [en]Returns whether the button is disabled or enabled.[/en]
 *   [ja]このボタンがdisabled状態かどうかを返します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsButton', ['$onsen', 'ButtonView', function ($onsen, ButtonView) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,
            scope: {
                animation: '@',
            },
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/button.tpl',
            link: function (scope, element, attrs, _, transclude) {
                var button = new ButtonView(scope, element, attrs);

                $onsen.declareVarAttribute(attrs, button);
                element.data('ons-button', button);

                scope.$on('$destroy', function () {
                    button._events = undefined;
                    $onsen.removeModifierMethods(button);
                    element.data('ons-button', undefined);
                    element = null;
                });
                var initialAnimation = 'slide-left';

                scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);
                element.addClass('button effeckt-button');
                element.addClass(scope.modifierTemplater('button--*'));
                element.addClass(initialAnimation);

                $onsen.addModifierMethods(button, 'button--*', element);

                transclude(scope.$parent, function (cloned) {
                    angular.element(element[0].querySelector('.ons-button-inner')).append(cloned);
                });

                if (attrs.ngController) {
                    throw new Error('This element can\'t accept ng-controller directive.');
                }

                scope.item = {};
                // if animation is not specified -> default is slide-left
                scope.item.animation = initialAnimation;

                scope.$watch('animation', function (newAnimation) {
                    if (newAnimation) {
                        if (scope.item.animation) {
                            element.removeClass(scope.item.animation);
                        }
                        scope.item.animation = newAnimation;
                        element.addClass(scope.item.animation);
                    }
                });

                attrs.$observe('shouldSpin', function (shouldSpin) {
                    if (shouldSpin === 'true') {
                        element.attr('data-loading', true);
                    } else {
                        element.removeAttr('data-loading');
                    }
                });

                $onsen.cleaner.onDestroy(scope, function () {
                    $onsen.clearComponent({
                        scope: scope,
                        attrs: attrs,
                        element: element
                    });

                    scope = element = attrs = null;
                });

                $onsen.fireComponentEvent(element[0], 'init');
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id carousel
 * @name ons-carousel
 * @category carousel
 * @description
 *   [en]Carousel component.[/en]
 *   [ja]カルーセルを表示できるコンポーネント。[/ja]
 * @codepen xbbzOQ
 * @guide UsingCarousel
 *   [en]Learn how to use the carousel component.[/en]
 *   [ja]carouselコンポーネントの使い方[/ja]
 * @example
 * <ons-carousel style="width: 100%; height: 200px">
 *   <ons-carousel-item>
 *    ...
 *   </ons-carousel-item>
 *   <ons-carousel-item>
 *    ...
 *   </ons-carousel-item>
 * </ons-carousel>
 */

/**
 * @ngdoc event
 * @name postchange
 * @description
 *   [en]Fired just after the current carousel item has changed.[/en]
 *   [ja]現在表示しているカルーセルの要素が変わった時に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.carousel
 *   [en]Carousel object.[/en]
 *   [ja]イベントが発火したCarouselオブジェクトです。[/ja]
 * @param {Number} event.activeIndex
 *   [en]Current active index.[/en]
 *   [ja]現在アクティブになっている要素のインデックス。[/ja]
 * @param {Number} event.lastActiveIndex
 *   [en]Previous active index.[/en]
 *   [ja]以前アクティブだった要素のインデックス。[/ja]
 */

/**
 * @ngdoc event
 * @name refresh
 * @description
 *   [en]Fired when the carousel has been refreshed.[/en]
 *   [ja]カルーセルが更新された時に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.carousel
 *   [en]Carousel object.[/en]
 *   [ja]イベントが発火したCarouselオブジェクトです。[/ja]
 */

/**
 * @ngdoc event
 * @name overscroll
 * @description
 *   [en]Fired when the carousel has been overscrolled.[/en]
 *   [ja]カルーセルがオーバースクロールした時に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.carousel
 *   [en]Fired when the carousel has been refreshed.[/en]
 *   [ja]カルーセルが更新された時に発火します。[/ja]
 * @param {Number} event.activeIndex
 *   [en]Current active index.[/en]
 *   [ja]現在アクティブになっている要素のインデックス。[/ja]
 * @param {String} event.direction
 *   [en]Can be one of either "up", "down", "left" or "right".[/en]
 *   [ja]オーバースクロールされた方向が得られます。"up", "down", "left", "right"のいずれかの方向が渡されます。[/ja]
 * @param {Function} event.waitToReturn
 *   [en]Takes a <code>Promise</code> object as an argument. The carousel will not scroll back until the promise has been resolved or rejected.[/en]
 *   [ja]この関数はPromiseオブジェクトを引数として受け取ります。渡したPromiseオブジェクトがresolveされるかrejectされるまで、カルーセルはスクロールバックしません。[/ja]
 */

/**
 * @ngdoc attribute
 * @name direction
 * @type {String}
 * @description
 *   [en]The direction of the carousel. Can be either "horizontal" or "vertical". Default is "horizontal".[/en]
 *   [ja]カルーセルの方向を指定します。"horizontal"か"vertical"を指定できます。"horizontal"がデフォルト値です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name fullscreen
 * @description
 *   [en]If this attribute is set the carousel will cover the whole screen.[/en]
 *   [ja]この属性があると、absoluteポジションを使ってカルーセルが自動的に画面いっぱいに広がります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this carousel.[/en]
 *   [ja]このカルーセルを参照するための変数名を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name overscrollable
 * @description
 *   [en]If this attribute is set the carousel will be scrollable over the edge. It will bounce back when released.[/en]
 *   [ja]この属性がある時、タッチやドラッグで端までスクロールした時に、バウンドするような効果が当たります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name item-width
 * @type {String}
 * @description
 *    [en]ons-carousel-item's width. Only works when the direction is set to "horizontal".[/en]
 *    [ja]ons-carousel-itemの幅を指定します。この属性は、direction属性に"horizontal"を指定した時のみ有効になります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name item-height
 * @type {String}
 * @description
 *   [en]ons-carousel-item's height. Only works when the direction is set to "vertical".[/en]
 *   [ja]ons-carousel-itemの高さを指定します。この属性は、direction属性に"vertical"を指定した時のみ有効になります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name auto-scroll
 * @description
 *   [en]If this attribute is set the carousel will be automatically scrolled to the closest item border when released.[/en]
 *   [ja]この属性がある時、一番近いcarosel-itemの境界まで自動的にスクロールするようになります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name auto-scroll-ratio
 * @type {Number}
 * @description
 *    [en]A number between 0.0 and 1.0 that specifies how much the user must drag the carousel in order for it to auto scroll to the next item.[/en]
 *    [ja]0.0から1.0までの値を指定します。カルーセルの要素をどれぐらいの割合までドラッグすると次の要素に自動的にスクロールするかを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name swipeable
 * @description
 *   [en]If this attribute is set the carousel can be scrolled by drag or swipe.[/en]
 *   [ja]この属性がある時、カルーセルをスワイプやドラッグで移動できるようになります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]If this attribute is set the carousel is disabled.[/en]
 *   [ja]この属性がある時、dragやtouchやswipeを受け付けなくなります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name intial-index
 * @type {Number}
 * @description
 *   [en]Specify the index of the ons-carousel-item to show initially. Default is 0.[/en]
 *   [ja]最初に表示するons-carousel-itemを0始まりのインデックスで指定します。デフォルト値は 0 です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name auto-refresh
 * @description
 *   [en]When this attribute is set the carousel will automatically refresh when the number of child nodes change.[/en]
 *   [ja]この属性がある時、子要素の数が変わるとカルーセルは自動的に更新されるようになります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postchange
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postchange" event is fired.[/en]
 *  [ja]"postchange"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-refresh
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "refresh" event is fired.[/en]
 *  [ja]"refresh"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-overscroll
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "overscroll" event is fired.[/en]
 *  [ja]"overscroll"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature next()
 * @description
 *   [en]Show next ons-carousel item.[/en]
 *   [ja]次のons-carousel-itemを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature prev()
 * @description
 *   [en]Show previous ons-carousel item.[/en]
 *   [ja]前のons-carousel-itemを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature first()
 * @description
 *   [en]Show first ons-carousel item.[/en]
 *   [ja]最初のons-carousel-itemを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature last()
 * @description
 *   [en]Show last ons-carousel item.[/en]
 *   [ja]最後のons-carousel-itemを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setSwipeable(swipeable)
 * @param {Booelan} swipeable
 *   [en]If value is true the carousel will be swipeable.[/en]
 *   [ja]swipeableにする場合にはtrueを指定します。[/ja]
 * @description
 *   [en]Set whether the carousel is swipeable or not.[/en]
 *   [ja]swipeできるかどうかを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isSwipeable()
 * @return {Boolean}
 *   [en]true if the carousel is swipeable.[/en]
 *   [ja]swipeableであればtrueを返します。[/ja]
 * @description
 *   [en]Returns whether the carousel is swipeable or not.[/en]
 *   [ja]swiapble属性があるかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setActiveCarouselItemIndex(index)
 * @param {Number} index
 *   [en]The index that the carousel should be set to.[/en]
 *   [ja]carousel要素のインデックスを指定します。[/ja]
 * @description
 *   [en]Specify the index of the ons-carousel-item to show.[/en]
 *   [ja]表示するons-carousel-itemをindexで指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature getActiveCarouselItemIndex()
 * @return {Number}
 *   [en]The current carousel item index.[/en]
 *   [ja]現在表示しているカルーセル要素のインデックスが返されます。[/ja]
 * @description
 *   [en]Returns the index of the currently visible ons-carousel-item.[/en]
 *   [ja]現在表示されているons-carousel-item要素のインデックスを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setAutoScrollEnabled(enabled)
 * @param {Boolean} enabled
 *   [en]If true auto scroll will be enabled.[/en]
 *   [ja]オートスクロールを有効にする場合にはtrueを渡します。[/ja]
 * @description
 *   [en]Enable or disable "auto-scroll" attribute.[/en]
 *   [ja]auto-scroll属性があるかどうかを設定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isAutoScrollEnabled()
 * @return {Boolean}
 *   [en]true if auto scroll is enabled.[/en]
 *   [ja]オートスクロールが有効であればtrueを返します。[/ja]
 * @description
 *   [en]Returns whether the "auto-scroll" attribute is set or not.[/en]
 *   [ja]auto-scroll属性があるかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setAutoScrollRatio(ratio)
 * @param {Number} ratio
 *   [en]The desired ratio.[/en]
 *   [ja]オートスクロールするのに必要な0.0から1.0までのratio値を指定します。[/ja]
 * @description
 *   [en]Set the auto scroll ratio. Must be a value between 0.0 and 1.0.[/en]
 *   [ja]オートスクロールするのに必要なratio値を指定します。0.0から1.0を必ず指定しなければならない。[/ja]
 */

/**
 * @ngdoc method
 * @signature getAutoScrollRatio()
 * @return {Number}
 *   [en]The current auto scroll ratio.[/en]
 *   [ja]現在のオートスクロールのratio値。[/ja]
 * @description
 *   [en]Returns the current auto scroll ratio.[/en]
 *   [ja]現在のオートスクロールのratio値を返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setOverscrollable(overscrollable)
 * @param {Boolean} overscrollable
 *   [en]If true the carousel will be overscrollable.[/en]
 *   [ja]overscrollできるかどうかを指定します。[/ja]
 * @description
 *   [en]Set whether the carousel is overscrollable or not.[/en]
 *   [ja]overscroll属性があるかどうかを設定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isOverscrollable()
 * @return {Boolean}
 *   [en]Whether the carousel is overscrollable or not.[/en]
 *   [ja]overscrollできればtrueを返します。[/ja]
 * @description
 *   [en]Returns whether the carousel is overscrollable or not.[/en]
 *   [ja]overscroll属性があるかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature refresh()
 * @description
 *   [en]Update the layout of the carousel. Used when adding ons-carousel-items dynamically or to automatically adjust the size.[/en]
 *   [ja]レイアウトや内部の状態を最新のものに更新します。ons-carousel-itemを動的に増やしたり、ons-carouselの大きさを動的に変える際に利用します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @return {Boolean}
 *   [en]Whether the carousel is disabled or not.[/en]
 *   [ja]disabled状態になっていればtrueを返します。[/ja]
 * @description
 *   [en]Returns whether the dialog is disabled or enabled.[/en]
 *   [ja]disabled属性があるかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @param {Boolean} disabled
 *   [en]If true the carousel will be disabled.[/en]
 *   [ja]disabled状態にする場合にはtrueを指定します。[/ja]
 * @description
 *   [en]Disable or enable the dialog.[/en]
 *   [ja]disabled属性があるかどうかを設定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーが指定されなかった場合には、そのイベントに紐付いているイベントリスナーが全て削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsCarousel', ['$onsen', 'CarouselView', function ($onsen, CarouselView) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            scope: false,
            transclude: false,

            compile: function (element, attrs) {
                var templater = $onsen.generateModifierTemplater(attrs);

                element.addClass(templater('carousel--*'));

                return function (scope, element, attrs) {
                    var carousel = new CarouselView(scope, element, attrs);

                    element.data('ons-carousel', carousel);

                    $onsen.registerEventHandlers(carousel, 'postchange refresh overscroll destroy');
                    $onsen.declareVarAttribute(attrs, carousel);

                    scope.$on('$destroy', function () {
                        carousel._events = undefined;
                        element.data('ons-carousel', undefined);
                        element = null;
                    });

                    if (element[0].hasAttribute('auto-refresh')) {
                        // Refresh carousel when items are added or removed.
                        scope.$watch(
                            function () {
                                return element[0].childNodes.length;
                            },
                            function () {
                                setImmediate(function () {
                                    carousel.refresh();
                                });
                            }
                        );
                    }

                    setImmediate(function () {
                        carousel.refresh();
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            },

        };
    }]);

    module.directive('onsCarouselItem', ['$onsen', function ($onsen) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            scope: false,
            transclude: false,

            compile: function (element, attrs) {
                var templater = $onsen.generateModifierTemplater(attrs);

                element.addClass(templater('carousel-item--*'));
                element.css('width', '100%');

                return function (scope, element, attrs) {
                };
            },

        };
    }]);
})();


/**
 * @ngdoc directive
 * @id col
 * @name ons-col
 * @category grid
 * @description
 *   [en]Represents a column in the grid system. Use with ons-row to layout components.[/en]
 *   [ja]グリッドシステムにて列を定義します。ons-rowとともに使用し、コンポーネントのレイアウトに利用します。[/ja]
 * @note
 *   [en]For Android 4.3 and earlier, and iOS6 and earlier, when using mixed alignment with ons-row and ons-column, they may not be displayed correctly. You can use only one align.[/en]
 *   [ja]Android 4.3以前、もしくはiOS 6以前のOSの場合、ons-rowとons-columnを組み合わせた場合に描画が崩れる場合があります。[/ja]
 * @codepen GgujC {wide}
 * @guide layouting [en]Layouting guide[/en][ja]レイアウト機能[/ja]
 * @seealso ons-row [en]ons-row component[/en][ja]ons-rowコンポーネント[/ja]
 * @example
 * <ons-row>
 *   <ons-col width="50px"><ons-icon icon="fa-twitter"></ons-icon></ons-col>
 *   <ons-col>Text</ons-col>
 * </ons-row>
 */

/**
 * @ngdoc attribute
 * @name align
 * @type {String}
 * @description
 *   [en]Vertical alignment of the column. Valid values are "top", "center", and "bottom".[/en]
 *   [ja]縦の配置を指定する。"top", "center", "bottom"のいずれかを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name width
 * @type {String}
 * @description
 *   [en]The width of the column. Valid values are css width values ("10%", "50px").[/en]
 *   [ja]カラムの横幅を指定する。パーセントもしくはピクセルで指定します（10%や50px）。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsCol', ['$timeout', '$onsen', function ($timeout, $onsen) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: false,

            compile: function (element, attrs, transclude) {
                element.addClass('col ons-col-inner');

                return function (scope, element, attrs) {

                    attrs.$observe('align', function (align) {
                        updateAlign(align);
                    });

                    attrs.$observe('width', function (width) {
                        updateWidth(width);
                    });

                    // For BC
                    attrs.$observe('size', function (size) {
                        if (!attrs.width) {
                            updateWidth(size);
                        }
                    });

                    updateAlign(attrs.align);

                    if (attrs.size && !attrs.width) {
                        updateWidth(attrs.size);
                    } else {
                        updateWidth(attrs.width);
                    }

                    $onsen.cleaner.onDestroy(scope, function () {
                        $onsen.clearComponent({
                            scope: scope,
                            element: element,
                            attrs: attrs
                        });
                        element = attrs = scope = null;
                    });

                    function updateAlign(align) {
                        if (align === 'top' || align === 'center' || align === 'bottom') {
                            element.removeClass('col-top col-center col-bottom');
                            element.addClass('col-' + align);
                        } else {
                            element.removeClass('col-top col-center col-bottom');
                        }
                    }

                    function updateWidth(width) {
                        if (typeof width === 'string') {
                            width = ('' + width).trim();
                            width = width.match(/^\d+$/) ? width + '%' : width;

                            element.css({
                                '-webkit-box-flex': '0',
                                '-webkit-flex': '0 0 ' + width,
                                '-moz-box-flex': '0',
                                '-moz-flex': '0 0 ' + width,
                                '-ms-flex': '0 0 ' + width,
                                'flex': '0 0 ' + width,
                                'max-width': width
                            });
                        } else {
                            element.removeAttr('style');
                        }
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id dialog
 * @name ons-dialog
 * @category dialog
 * @description
 *  [en]Dialog that is displayed on top of current screen.[/en]
 *  [ja]現在のスクリーンにダイアログを表示します。[/ja]
 * @codepen zxxaGa
 * @guide UsingDialog
 *   [en]Learn how to use the dialog component.[/en]
 *   [ja]ダイアログコンポーネントの使い方[/ja]
 * @seealso ons-alert-dialog
 *   [en]ons-alert-dialog component[/en]
 *   [ja]ons-alert-dialogコンポーネント[/ja]
 * @seealso ons-popover
 *   [en]ons-popover component[/en]
 *   [ja]ons-popoverコンポーネント[/ja]
 * @example
 * <script>
 *   ons.ready(function() {
 *     ons.createDialog('dialog.html').then(function(dialog) {
 *       dialog.show();
 *     });
 *   });
 * </script>
 *
 * <script type="text/ons-template" id="dialog.html">
 *   <ons-dialog cancelable>
 *     ...
 *   </ons-dialog>
 * </script>
 */

/**
 * @ngdoc event
 * @name preshow
 * @description
 * [en]Fired just before the dialog is displayed.[/en]
 * [ja]ダイアログが表示される直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.dialog
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Execute this function to stop the dialog from being shown.[/en]
 *   [ja]この関数を実行すると、ダイアログの表示がキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name postshow
 * @description
 * [en]Fired just after the dialog is displayed.[/en]
 * [ja]ダイアログが表示された直後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.dialog
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 */

/**
 * @ngdoc event
 * @name prehide
 * @description
 * [en]Fired just before the dialog is hidden.[/en]
 * [ja]ダイアログが隠れる直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.dialog
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Execute this function to stop the dialog from being hidden.[/en]
 *   [ja]この関数を実行すると、ダイアログの非表示がキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name posthide
 * @description
 * [en]Fired just after the dialog is hidden.[/en]
 * [ja]ダイアログが隠れた後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.dialog
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this dialog.[/en]
 *  [ja]このダイアログを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *  [en]The appearance of the dialog.[/en]
 *  [ja]ダイアログの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name cancelable
 * @description
 *  [en]If this attribute is set the dialog can be closed by tapping the background or by pressing the back button.[/en]
 *  [ja]この属性があると、ダイアログが表示された時に、背景やバックボタンをタップした時にダイアログを閉じます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *  [en]If this attribute is set the dialog is disabled.[/en]
 *  [ja]この属性がある時、ダイアログはdisabled状態になります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name animation
 * @type {String}
 * @default default
 * @description
 *  [en]The animation used when showing and hiding the dialog. Can be either "none" or "default".[/en]
 *  [ja]ダイアログを表示する際のアニメーション名を指定します。"none"もしくは"default"を指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name mask-color
 * @type {String}
 * @default rgba(0, 0, 0, 0.2)
 * @description
 *  [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
 *  [ja]背景のマスクの色を指定します。"rgba(0, 0, 0, 0.2)"がデフォルト値です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-preshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prehide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-posthide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature show([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "none", "fade" and "slide".[/en]
 *   [ja]アニメーション名を指定します。"none", "fade", "slide"のいずれかを指定します。[/ja]
 * @param {Function} [options.callback]
 *   [en]This function is called after the dialog has been revealed.[/en]
 *   [ja]ダイアログが表示され終わった後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *  [en]Show the dialog.[/en]
 *  [ja]ダイアログを開きます。[/ja]
 */

/**
 * @ngdoc method
 * @signature hide([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "none", "fade" and "slide".[/en]
 *   [ja]アニメーション名を指定します。"none", "fade", "slide"のいずれかを指定できます。[/ja]
 * @param {Function} [options.callback]
 *   [en]This functions is called after the dialog has been hidden.[/en]
 *   [ja]ダイアログが隠れた後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Hide the dialog.[/en]
 *   [ja]ダイアログを閉じます。[/ja]
 */

/**
 * @ngdoc method
 * @signature isShown()
 * @description
 *   [en]Returns whether the dialog is visible or not.[/en]
 *   [ja]ダイアログが表示されているかどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is visible.[/en]
 *   [ja]ダイアログが表示されている場合にtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature destroy()
 * @description
 *  [en]Destroy the dialog and remove it from the DOM tree.[/en]
 *  [ja]ダイアログを破棄して、DOMツリーから取り除きます。[/ja]
 */

/**
 * @ngdoc method
 * @signature getDeviceBackButtonHandler()
 * @return {Object}
 *   [en]Device back button handler.[/en]
 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
 * @description
 *   [en]Retrieve the back button handler for overriding the default behavior.[/en]
 *   [ja]バックボタンハンドラを取得します。デフォルトの挙動を変更することができます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setCancelable(cancelable)
 * @param {Boolean} cancelable
 *   [en]If true the dialog will be cancelable.[/en]
 *   [ja]ダイアログをキャンセル可能にする場合trueを指定します。[/ja]
 * @description
 *   [en]Define whether the dialog can be canceled by the user or not.[/en]
 *   [ja]ダイアログを表示した際に、ユーザがそのダイアログをキャンセルできるかどうかを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isCancelable()
 * @description
 *   [en]Returns whether the dialog is cancelable or not.[/en]
 *   [ja]このダイアログがキャンセル可能かどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is cancelable.[/en]
 *   [ja]ダイアログがキャンセル可能な場合trueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @description
 *   [en]Disable or enable the dialog.[/en]
 *   [ja]このダイアログをdisabled状態にするかどうかを設定します。[/ja]
 * @param {Boolean} disabled
 *   [en]If true the dialog will be disabled.[/en]
 *   [ja]trueを指定するとダイアログをdisabled状態になります。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @description
 *   [en]Returns whether the dialog is disabled or enabled.[/en]
 *   [ja]このダイアログがdisabled状態かどうかを返します。[/ja]
 * @return {Boolean}
 *   [en]true if the dialog is disabled.[/en]
 *   [ja]ダイアログがdisabled状態の場合trueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーが指定されなかった場合には、そのイベントに紐付いているイベントリスナーが全て削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Dialog directive.
     */
    module.directive('onsDialog', ['$onsen', 'DialogView', function ($onsen, DialogView) {
        return {
            restrict: 'E',
            replace: false,
            scope: true,
            transclude: true,
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/dialog.tpl',
            compile: function (element, attrs, transclude) {
                element[0].setAttribute('no-status-bar-fill', '');
                return {
                    pre: function (scope, element, attrs) {
                        transclude(scope, function (clone) {
                            angular.element(element[0].querySelector('.dialog')).append(clone);
                        });

                        var dialog = new DialogView(scope, element, attrs);
                        scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);

                        $onsen.addModifierMethods(dialog, 'dialog--*', angular.element(element[0].querySelector('.dialog')));
                        $onsen.declareVarAttribute(attrs, dialog);
                        $onsen.registerEventHandlers(dialog, 'preshow prehide postshow posthide destroy');

                        element.data('ons-dialog', dialog);
                        scope.$on('$destroy', function () {
                            dialog._events = undefined;
                            $onsen.removeModifierMethods(dialog);
                            element.data('ons-dialog', undefined);
                            element = null;
                        });
                    },
                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsDummyForInit', ['$rootScope', function ($rootScope) {
        var isReady = false;

        return {
            restrict: 'E',
            replace: false,

            link: {
                post: function (scope, element) {
                    if (!isReady) {
                        isReady = true;
                        $rootScope.$broadcast('$ons-ready');
                    }
                    element.remove();
                }
            }
        };
    }]);

})();

/**
 * @ngdoc directive
 * @id gestureDetector
 * @name ons-gesture-detector
 * @category input
 * @description
 *   [en]Component to detect finger gestures within the wrapped element. See the guide for more details.[/en]
 *   [ja]要素内のジェスチャー操作を検知します。詳しくはガイドを参照してください。[/ja]
 * @guide DetectingFingerGestures
 *   [en]Detecting finger gestures[/en]
 *   [ja]ジェスチャー操作の検知[/ja]
 * @example
 * <ons-gesture-detector>
 *   ...
 * </ons-gesture-detector>
 */
(function () {
    'use strict';

    var EVENTS =
        ('pan panstart panmove panend pancancel panleft panright panup pandown press pressup ' +
        'swipe swipeleft swiperight swipeup swipedown tap ' +
        'pinch pinchstart pinchmove pinchend pinchcancel pinchin pinchout ' +
        'rotate rotatestart rotatemove rotateend rotatecancel').split(/ +/);

    angular.module('onsen').directive('onsGestureDetector', ['$onsen', function ($onsen) {

        var scopeDef = EVENTS.reduce(function (dict, name) {
            dict['ng' + titlize(name)] = '&';
            return dict;
        }, {});

        return {
            restrict: 'E',
            scope: scopeDef,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            replace: false,
            transclude: true,

            compile: function (element, attrs) {
                return function link(scope, element, attrs, controller, transclude) {

                    transclude(scope.$parent, function (cloned) {
                        element.append(cloned);
                    });

                    var hammer = new Hammer(element[0]);
                    hammer.get('pinch').set({enable: true});
                    hammer.get('rotate').set({enable: true});
                    hammer.on(EVENTS.join(' '), handleEvent);

                    $onsen.cleaner.onDestroy(scope, function () {
                        hammer.off(EVENTS.join(' '), handleEvent);
                        $onsen.clearComponent({
                            scope: scope,
                            element: element,
                            attrs: attrs
                        });
                        hammer.element = scope = element = attrs = null;
                    });

                    function handleEvent(event) {
                        var attr = 'ng' + titlize(event.type);

                        if (attr in scopeDef) {
                            scope[attr]({$event: event});
                        }
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };

        function titlize(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }
    }]);
})();


/**
 * @ngdoc directive
 * @id icon
 * @name ons-icon
 * @category icon
 * @description
 *   [en]Displays an icon. Font Awesome and Ionicon icons are supported.[/en]
 *   [ja]アイコンを表示するコンポーネントです。Font AwesomeもしくはIoniconsから選択できます。[/ja]
 * @codepen xAhvg
 * @guide UsingIcons [en]Using icons[/en][ja]アイコンを使う[/ja]
 * @example
 * <ons-icon
 *   icon="fa-twitter"
 *   size="20px"
 *   fixed-width="false"
 *   style="color: red">
 * </ons-icon>
 */

/**
 * @ngdoc attribute
 * @name icon
 * @type {String}
 * @description
 *   [en]The icon name. <code>fa-</code> prefix for Font Awesome, <code>ion-</code> prefix for Ionicons icons. See all icons at http://fontawesome.io/icons/ and http://ionicons.com.[/en]
 *   [ja]アイコン名を指定します。<code>fa-</code>で始まるものはFont Awesomeとして、<code>ion-</code>で始まるものはIoniconsとして扱われます。使用できるアイコンはこちら: http://fontawesome.io/icons/　および　http://ionicons.com。[/ja]
 */

/**
 * @ngdoc attribute
 * @name size
 * @type {String}
 * @description
 *   [en]The sizes of the icon. Valid values are lg, 2x, 3x, 4x, 5x, or in pixels.[/en]
 *   [ja]アイコンのサイズを指定します。値は、lg, 2x, 3x, 4x, 5xもしくはピクセル単位で指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name rotate
 * @type {Number}
 * @description
 *   [en]Number of degrees to rotate the icon. Valid values are 90, 180, or 270.[/en]
 *   [ja]アイコンを回転して表示します。90, 180, 270から指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name flip
 * @type {String}
 * @description
 *   [en]Flip the icon. Valid values are "horizontal" and "vertical".[/en]
 *   [ja]アイコンを反転します。horizontalもしくはverticalを指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name fixed-width
 * @type {Boolean}
 * @default false
 * @description
 *  [en]When used in the list, you want the icons to have the same width so that they align vertically by setting the value to true. Valid values are true, false. Default is false.[/en]
 *  [ja]等幅にするかどうかを指定します。trueもしくはfalseを指定できます。デフォルトはfalseです。[/ja]
 */

/**
 * @ngdoc attribute
 * @name spin
 * @type {Boolean}
 * @default false
 * @description
 *   [en]Specify whether the icon should be spinning. Valid values are true and false.[/en]
 *   [ja]アイコンを回転するかどうかを指定します。trueもしくはfalseを指定できます。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    function cleanClassAttribute(element) {
        var classList = ('' + element.attr('class')).split(/ +/).filter(function (classString) {
            return classString !== 'fa' && classString.substring(0, 3) !== 'fa-' && classString.substring(0, 4) !== 'ion-';
        });

        element.attr('class', classList.join(' '));
    }

    function buildClassAndStyle(attrs) {
        var classList = ['ons-icon'];
        var style = {};

        // icon
        if (attrs.icon.indexOf('ion-') === 0) {
            classList.push(attrs.icon);
            classList.push('ons-icon--ion');
        } else if (attrs.icon.indexOf('fa-') === 0) {
            classList.push(attrs.icon);
            classList.push('fa');
        } else {
            classList.push('fa');
            classList.push('fa-' + attrs.icon);
        }

        // size
        var size = '' + attrs.size;
        if (size.match(/^[1-5]x|lg$/)) {
            classList.push('fa-' + size);
        } else if (typeof attrs.size === 'string') {
            style['font-size'] = size;
        } else {
            classList.push('fa-lg');
        }

        return {
            'class': classList.join(' '),
            'style': style
        };
    }

    module.directive('onsIcon', ['$onsen', function ($onsen) {
        return {
            restrict: 'E',
            replace: false,
            transclude: false,
            link: function (scope, element, attrs) {

                if (attrs.ngController) {
                    throw new Error('This element can\'t accept ng-controller directive.');
                }

                var update = function () {
                    cleanClassAttribute(element);

                    var builded = buildClassAndStyle(attrs);
                    element.css(builded.style);
                    element.addClass(builded['class']);
                };

                var builded = buildClassAndStyle(attrs);
                element.css(builded.style);
                element.addClass(builded['class']);

                attrs.$observe('icon', update);
                attrs.$observe('size', update);
                attrs.$observe('fixedWidth', update);
                attrs.$observe('rotate', update);
                attrs.$observe('flip', update);
                attrs.$observe('spin', update);

                $onsen.cleaner.onDestroy(scope, function () {
                    $onsen.clearComponent({
                        scope: scope,
                        element: element,
                        attrs: attrs
                    });
                    element = scope = attrs = null;
                });

                $onsen.fireComponentEvent(element[0], 'init');
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id if-orientation
 * @name ons-if-orientation
 * @category util
 * @description
 *   [en]Conditionally display content depending on screen orientation. Valid values are portrait and landscape. Different from other components, this component is used as attribute in any element.[/en]
 *   [ja]画面の向きに応じてコンテンツの制御を行います。portraitもしくはlandscapeを指定できます。すべての要素の属性に使用できます。[/ja]
 * @seealso ons-if-platform [en]ons-if-platform component[/en][ja]ons-if-platformコンポーネント[/ja]
 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
 * @example
 * <div ons-if-orientation="portrait">
 *   <p>This will only be visible in portrait mode.</p>
 * </div>
 */

/**
 * @ngdoc attribute
 * @name ons-if-orientation
 * @type {String}
 * @description
 *   [en]Either "portrait" or "landscape".[/en]
 *   [ja]portraitもしくはlandscapeを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsIfOrientation', ['$onsen', '$onsGlobal', function ($onsen, $onsGlobal) {
        return {
            restrict: 'A',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: false,

            compile: function (element) {
                element.css('display', 'none');

                return function (scope, element, attrs) {
                    element.addClass('ons-if-orientation-inner');

                    attrs.$observe('onsIfOrientation', update);
                    $onsGlobal.orientation.on('change', update);

                    update();

                    $onsen.cleaner.onDestroy(scope, function () {
                        $onsGlobal.orientation.off('change', update);

                        $onsen.clearComponent({
                            element: element,
                            scope: scope,
                            attrs: attrs
                        });
                        element = scope = attrs = null;
                    });

                    function update() {
                        var userOrientation = ('' + attrs.onsIfOrientation).toLowerCase();
                        var orientation = getLandscapeOrPortrait();

                        if (userOrientation === 'portrait' || userOrientation === 'landscape') {
                            if (userOrientation === orientation) {
                                element.css('display', '');
                            } else {
                                element.css('display', 'none');
                            }
                        }
                    }

                    function getLandscapeOrPortrait() {
                        return $onsGlobal.orientation.isPortrait() ? 'portrait' : 'landscape';
                    }
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id if-platform
 * @name ons-if-platform
 * @category util
 * @description
 *    [en]Conditionally display content depending on the platform / browser. Valid values are "ios", "android", "blackberry", "chrome", "safari", "firefox", and "opera".[/en]
 *    [ja]プラットフォームやブラウザーに応じてコンテンツの制御をおこないます。ios, android, blackberry, chrome, safari, firefox, operaを指定できます。[/ja]
 * @seealso ons-if-orientation [en]ons-if-orientation component[/en][ja]ons-if-orientationコンポーネント[/ja]
 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
 * @example
 * <div ons-if-platform="android">
 *   ...
 * </div>
 */

/**
 * @ngdoc attribute
 * @name ons-if-platform
 * @type {String}
 * @description
 *   [en]Either "opera", "firefox", "safari", "chrome", "ie", "android", "blackberry", "ios" or "windows".[/en]
 *   [ja]"opera", "firefox", "safari", "chrome", "ie", "android", "blackberry", "ios", "windows"のいずれかを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsIfPlatform', ['$onsen', function ($onsen) {
        return {
            restrict: 'A',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: false,

            compile: function (element) {
                element.addClass('ons-if-platform-inner');
                element.css('display', 'none');

                var platform = getPlatformString();

                return function (scope, element, attrs) {
                    attrs.$observe('onsIfPlatform', function (userPlatform) {
                        if (userPlatform) {
                            update();
                        }
                    });

                    update();

                    $onsen.cleaner.onDestroy(scope, function () {
                        $onsen.clearComponent({
                            element: element,
                            scope: scope,
                            attrs: attrs
                        });
                        element = scope = attrs = null;
                    });

                    function update() {
                        if (attrs.onsIfPlatform.toLowerCase() === platform.toLowerCase()) {
                            element.css('display', 'block');
                        } else {
                            element.css('display', 'none');
                        }
                    }
                };

                function getPlatformString() {

                    if (navigator.userAgent.match(/Android/i)) {
                        return 'android';
                    }

                    if ((navigator.userAgent.match(/BlackBerry/i)) || (navigator.userAgent.match(/RIM Tablet OS/i)) || (navigator.userAgent.match(/BB10/i))) {
                        return 'blackberry';
                    }

                    if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
                        return 'ios';
                    }

                    if (navigator.userAgent.match(/IEMobile/i)) {
                        return 'windows';
                    }

                    // Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
                    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
                    if (isOpera) {
                        return 'opera';
                    }

                    var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+
                    if (isFirefox) {
                        return 'firefox';
                    }

                    var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
                    // At least Safari 3+: "[object HTMLElementConstructor]"
                    if (isSafari) {
                        return 'safari';
                    }

                    var isChrome = !!window.chrome && !isOpera; // Chrome 1+
                    if (isChrome) {
                        return 'chrome';
                    }

                    var isIE = /*@cc_on!@*/false || !!document.documentMode; // At least IE6
                    if (isIE) {
                        return 'ie';
                    }

                    return 'unknown';
                }
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id ons-keyboard-active
 * @name ons-keyboard-active
 * @category input
 * @description
 *   [en]
 *     Conditionally display content depending on if the software keyboard is visible or hidden.
 *     This component requires cordova and that the com.ionic.keyboard plugin is installed.
 *   [/en]
 *   [ja]
 *     ソフトウェアキーボードが表示されているかどうかで、コンテンツを表示するかどうかを切り替えることが出来ます。
 *     このコンポーネントは、Cordovaやcom.ionic.keyboardプラグインを必要とします。
 *   [/ja]
 * @guide UtilityAPIs
 *   [en]Other utility APIs[/en]
 *   [ja]他のユーティリティAPI[/ja]
 * @example
 * <div ons-keyboard-active>
 *   This will only be displayed if the software keyboard is open.
 * </div>
 * <div ons-keyboard-inactive>
 *   There is also a component that does the opposite.
 * </div>
 */

/**
 * @ngdoc attribute
 * @name ons-keyboard-active
 * @description
 *   [en]The content of tags with this attribute will be visible when the software keyboard is open.[/en]
 *   [ja]この属性がついた要素は、ソフトウェアキーボードが表示された時に初めて表示されます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-keyboard-inactive
 * @description
 *   [en]The content of tags with this attribute will be visible when the software keyboard is hidden.[/en]
 *   [ja]この属性がついた要素は、ソフトウェアキーボードが隠れている時のみ表示されます。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    var compileFunction = function (show, $onsen) {
        return function (element) {
            return function (scope, element, attrs) {
                var dispShow = show ? 'block' : 'none',
                    dispHide = show ? 'none' : 'block';

                var onShow = function () {
                    element.css('display', dispShow);
                };

                var onHide = function () {
                    element.css('display', dispHide);
                };

                var onInit = function (e) {
                    if (e.visible) {
                        onShow();
                    } else {
                        onHide();
                    }
                };

                ons.softwareKeyboard.on('show', onShow);
                ons.softwareKeyboard.on('hide', onHide);
                ons.softwareKeyboard.on('init', onInit);

                if (ons.softwareKeyboard._visible) {
                    onShow();
                } else {
                    onHide();
                }

                $onsen.cleaner.onDestroy(scope, function () {
                    ons.softwareKeyboard.off('show', onShow);
                    ons.softwareKeyboard.off('hide', onHide);
                    ons.softwareKeyboard.off('init', onInit);

                    $onsen.clearComponent({
                        element: element,
                        scope: scope,
                        attrs: attrs
                    });
                    element = scope = attrs = null;
                });
            };
        };
    };

    module.directive('onsKeyboardActive', ['$onsen', function ($onsen) {
        return {
            restrict: 'A',
            replace: false,
            transclude: false,
            scope: false,
            compile: compileFunction(true, $onsen)
        };
    }]);

    module.directive('onsKeyboardInactive', ['$onsen', function ($onsen) {
        return {
            restrict: 'A',
            replace: false,
            transclude: false,
            scope: false,
            compile: compileFunction(false, $onsen)
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id lazy-repeat
 * @name ons-lazy-repeat
 * @category control
 * @description
 *   [en]
 *     Using this component a list with millions of items can be rendered without a drop in performance.
 *     It does that by "lazily" loading elements into the DOM when they come into view and
 *     removing items from the DOM when they are not visible.
 *   [/en]
 *   [ja]
 *     このコンポーネント内で描画されるアイテムのDOM要素の読み込みは、画面に見えそうになった時まで自動的に遅延され、
 *     画面から見えなくなった場合にはその要素は動的にアンロードされます。
 *     このコンポーネントを使うことで、パフォーマンスを劣化させること無しに巨大な数の要素を描画できます。
 *   [/ja]
 * @codepen QwrGBm
 * @guide UsingLazyRepeat
 *   [en]How to use Lazy Repeat[/en]
 *   [ja]レイジーリピートの使い方[/ja]
 * @example
 * <script>
 *   ons.bootstrap()
 *
 *   .controller('MyController', function($scope) {
 *     $scope.MyDelegate = {
 *       countItems: function() {
 *         // Return number of items.
 *         return 1000000;
 *       },
 *
 *       calculateItemHeight: function(index) {
 *         // Return the height of an item in pixels.
 *         return 45;
 *       },
 *
 *       configureItemScope: function(index, itemScope) {
 *         // Initialize scope
 *         itemScope.item = 'Item #' + (index + 1);
 *       },
 *
 *       destroyItemScope: function(index, itemScope) {
 *         // Optional method that is called when an item is unloaded.
 *         console.log('Destroyed item with index: ' + index);
 *       }
 *     };
 *   });
 * </script>
 *
 * <ons-list ng-controller="MyController">
 *   <ons-list-item ons-lazy-repeat="MyDelegate">
 *     {{ item }}
 *   </ons-list-item>
 * </ons-list>
 */

/**
 * @ngdoc attribute
 * @name ons-lazy-repeat
 * @type {Expression}
 * @description
 *  [en]A delegate object, can be either an object attached to the scope (when using AngularJS) or a normal JavaScript variable.[/en]
 *  [ja]要素のロード、アンロードなどの処理を委譲するオブジェクトを指定します。AngularJSのスコープの変数名や、通常のJavaScriptの変数名を指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Lazy repeat directive.
     */
    module.directive('onsLazyRepeat', ['$onsen', 'LazyRepeatView', function ($onsen, LazyRepeatView) {
        return {
            restrict: 'A',
            replace: false,
            priority: 1000,
            transclude: 'element',
            compile: function (element, attrs, linker) {
                return function (scope, element, attrs) {
                    var lazyRepeat = new LazyRepeatView(scope, element, attrs, linker);

                    scope.$on('$destroy', function () {
                        scope = element = attrs = linker = null;
                    });
                };
            }
        };
    }]);

})();

/**
 * @ngdoc directive
 * @id list
 * @name ons-list
 * @category list
 * @modifier inset
 *   [en]Inset list that doesn't cover the whole width of the parent.[/en]
 *   [ja]親要素の画面いっぱいに広がらないリストを表示します。[/ja]
 * @modifier noborder
 *   [en]A list with no borders at the top and bottom.[/en]
 *   [ja]リストの上下のボーダーが無いリストを表示します。[/ja]
 * @description
 *   [en]Component to define a list, and the container for ons-list-item(s).[/en]
 *   [ja]リストを表現するためのコンポーネント。ons-list-itemのコンテナとして使用します。[/ja]
 * @seealso ons-list-item
 *   [en]ons-list-item component[/en]
 *   [ja]ons-list-itemコンポーネント[/ja]
 * @seealso ons-list-header
 *   [en]ons-list-header component[/en]
 *   [ja]ons-list-headerコンポーネント[/ja]
 * @guide UsingList
 *   [en]Using lists[/en]
 *   [ja]リストを使う[/ja]
 * @codepen yxcCt
 * @example
 * <ons-list>
 *   <ons-list-header>Header Text</ons-list-header>
 *   <ons-list-item>Item</ons-list-item>
 *   <ons-list-item>Item</ons-list-item>
 * </ons-list>
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]The appearance of the list.[/en]
 *   [ja]リストの表現を指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsList', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',
            scope: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            replace: false,
            transclude: false,
            compile: function (element, attrs) {

                return function (scope, element, attrs) {
                    var list = new GenericView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, list);
                    element.data('ons-list', list);

                    scope.$on('$destroy', function () {
                        list._events = undefined;
                        $onsen.removeModifierMethods(list);
                        element.data('ons-list', undefined);
                        element = null;
                    });

                    var templater = $onsen.generateModifierTemplater(attrs);

                    element.addClass('list ons-list-inner');
                    element.addClass(templater('list--*'));

                    $onsen.addModifierMethods(list, 'list--*', element);
                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id list-header
 * @name ons-list-header
 * @category list
 * @description
 *   [en]Header element for list items. Must be put inside ons-list component.[/en]
 *   [ja]リスト要素に使用するヘッダー用コンポーネント。ons-listと共に使用します。[/ja]
 * @seealso ons-list
 *   [en]ons-list component[/en]
 *   [ja]ons-listコンポーネント[/ja]
 * @seealso ons-list-item [en]ons-list-item component[/en][ja]ons-list-itemコンポーネント[/ja]
 * @guide UsingList [en]Using lists[/en][ja]リストを使う[/ja]
 * @codepen yxcCt
 * @example
 * <ons-list>
 *   <ons-list-header>Header Text</ons-list-header>
 *   <ons-list-item>Item</ons-list-item>
 *   <ons-list-item>Item</ons-list-item>
 * </ons-list>
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]The appearance of the list header.[/en]
 *   [ja]ヘッダーの表現を指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsListHeader', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            replace: false,
            transclude: false,

            compile: function () {
                return function (scope, element, attrs) {
                    var listHeader = new GenericView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, listHeader);

                    element.data('ons-listHeader', listHeader);

                    scope.$on('$destroy', function () {
                        listHeader._events = undefined;
                        $onsen.removeModifierMethods(listHeader);
                        element.data('ons-listHeader', undefined);
                        element = null;
                    });

                    var templater = $onsen.generateModifierTemplater(attrs);
                    element.addClass('list__header ons-list-header-inner');
                    element.addClass(templater('list__header--*'));

                    $onsen.addModifierMethods(listHeader, 'list__header--*', element);

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id list-item
 * @name ons-list-item
 * @category list
 * @modifier tappable
 *   [en]Made the list item change appearance when it's tapped.[/en]
 *   [ja]タップやクリックした時に効果が表示されるようになります。[/ja]
 * @modifier chevron
 *   [en]Display a chevron at the right end of the list item and make it change appearance when tapped.[/en]
 *   [ja]要素の右側に右矢印が表示されます。また、タップやクリックした時に効果が表示されるようになります。[/ja]
 * @description
 *   [en]Component that represents each item in the list. Must be put inside the ons-list component.[/en]
 *   [ja]リストの各要素を表現するためのコンポーネントです。ons-listコンポーネントと共に使用します。[/ja]
 * @seealso ons-list
 *   [en]ons-list component[/en]
 *   [ja]ons-listコンポーネント[/ja]
 * @seealso ons-list-header
 *   [en]ons-list-header component[/en]
 *   [ja]ons-list-headerコンポーネント[/ja]
 * @guide UsingList
 *   [en]Using lists[/en]
 *   [ja]リストを使う[/ja]
 * @codepen yxcCt
 * @example
 * <ons-list>
 *   <ons-list-header>Header Text</ons-list-header>
 *   <ons-list-item>Item</ons-list-item>
 *   <ons-list-item>Item</ons-list-item>
 * </ons-list>
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]The appearance of the list item.[/en]
 *   [ja]各要素の表現を指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsListItem', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            replace: false,
            transclude: false,

            compile: function () {
                return function (scope, element, attrs) {
                    var listItem = new GenericView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, listItem);

                    element.data('ons-list-item', listItem);

                    scope.$on('$destroy', function () {
                        listItem._events = undefined;
                        $onsen.removeModifierMethods(listItem);
                        element.data('ons-list-item', undefined);
                        element = null;
                    });

                    var templater = $onsen.generateModifierTemplater(attrs);
                    element.addClass('list__item ons-list-item-inner');
                    element.addClass(templater('list__item--*'));

                    $onsen.addModifierMethods(listItem, 'list__item--*', element);

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id loading-placeholder
 * @name ons-loading-placeholder
 * @category util
 * @description
 *   [en]Display a placeholder while the content is loading.[/en]
 *   [ja]Onsen UIが読み込まれるまでに表示するプレースホルダーを表現します。[/ja]
 * @guide UtilityAPIs [en]Other utility APIs[/en][ja]他のユーティリティAPI[/ja]
 * @example
 * <div ons-loading-placeholder="page.html">
 *   Loading...
 * </div>
 */

/**
 * @ngdoc attribute
 * @name ons-loading-placeholder
 * @type {String}
 * @description
 *   [en]The url of the page to load.[/en]
 *   [ja]読み込むページのURLを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsLoadingPlaceholder', ['$onsen', '$compile', function ($onsen, $compile) {
        return {
            restrict: 'A',
            replace: false,
            transclude: false,
            scope: false,
            link: function (scope, element, attrs) {
                if (!attrs.onsLoadingPlaceholder.length) {
                    throw Error('Must define page to load.');
                }

                setImmediate(function () {
                    $onsen.getPageHTMLAsync(attrs.onsLoadingPlaceholder).then(function (html) {

                        // Remove page tag.
                        html = html
                            .trim()
                            .replace(/^<ons-page>/, '')
                            .replace(/<\/ons-page>$/, '');

                        var div = document.createElement('div');
                        div.innerHTML = html;

                        var newElement = angular.element(div);
                        newElement.css('display', 'none');

                        element.append(newElement);
                        $compile(newElement)(scope);

                        for (var i = element[0].childNodes.length - 1; i >= 0; i--) {
                            var e = element[0].childNodes[i];
                            if (e !== div) {
                                element[0].removeChild(e);
                            }
                        }

                        newElement.css('display', 'block');
                    });
                });
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id modal
 * @name ons-modal
 * @category modal
 * @description
 *   [en]
 *     Modal component that masks current screen.
 *     Underlying components are not subject to any events while the modal component is shown.
 *   [/en]
 *   [ja]
 *     画面全体をマスクするモーダル用コンポーネントです。下側にあるコンポーネントは、
 *     モーダルが表示されている間はイベント通知が行われません。
 *   [/ja]
 * @guide UsingModal
 *   [en]Using ons-modal component[/en]
 *   [ja]モーダルの使い方[/ja]
 * @guide CallingComponentAPIsfromJavaScript
 *   [en]Using navigator from JavaScript[/en]
 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
 * @codepen devIg
 * @example
 * <ons-modal>
 *   ...
 * </ons-modal>
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this modal.[/en]
 *   [ja]このモーダルを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature toggle()
 * @description
 *   [en]Toggle modal visibility.[/en]
 *   [ja]モーダルの表示を切り替えます。[/ja]
 */

/**
 * @ngdoc method
 * @signature show()
 * @description
 *   [en]Show modal.[/en]
 *   [ja]モーダルを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature hide()
 * @description
 *   [en]Hide modal.[/en]
 *   [ja]モーダルを非表示にします。[/ja]
 */

/**
 * @ngdoc method
 * @signature getDeviceBackButtonHandler()
 * @return {Object}
 *   [en]Device back button handler.[/en]
 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
 * @description
 *   [en]Retrieve the back button handler.[/en]
 *   [ja]ons-modalに紐付いているバックボタンハンドラを取得します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Modal directive.
     */
    module.directive('onsModal', ['$onsen', 'ModalView', function ($onsen, ModalView) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclde.
            scope: false,
            transclude: false,

            compile: function (element, attrs) {
                compile(element, attrs);

                return {
                    pre: function (scope, element, attrs) {
                        var page = element.inheritedData('ons-page');
                        if (page) {
                            page.registerExtraElement(element);
                        }

                        var modal = new ModalView(scope, element);

                        $onsen.addModifierMethods(modal, 'modal--*', element);
                        $onsen.addModifierMethods(modal, 'modal--*__content', element.children());

                        $onsen.declareVarAttribute(attrs, modal);

                        element.data('ons-modal', modal);

                        scope.$on('$destroy', function () {
                            modal._events = undefined;
                            $onsen.removeModifierMethods(modal);
                            element.data('ons-modal', undefined);
                        });
                    },

                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };

        function compile(element, attrs) {
            var modifierTemplater = $onsen.generateModifierTemplater(attrs);

            var html = element[0].innerHTML;
            element[0].innerHTML = '';

            var wrapper = angular.element('<div></div>');
            wrapper.addClass('modal__content');
            wrapper.addClass(modifierTemplater('modal--*__content'));

            element.css('display', 'none');
            element.addClass('modal');
            element.addClass(modifierTemplater('modal--*'));

            wrapper[0].innerHTML = html;
            element.append(wrapper);
        }
    }]);

})();

/**
 * @ngdoc directive
 * @id navigator
 * @name ons-navigator
 * @category navigation
 * @description
 *   [en]A component that provides page stack management and navigation. This component does not have a visible content.[/en]
 *   [ja]ページスタックの管理とナビゲーション機能を提供するコンポーネント。画面上への出力はありません。[/ja]
 * @codepen yrhtv
 * @guide PageNavigation
 *   [en]Guide for page navigation[/en]
 *   [ja]ページナビゲーションの概要[/ja]
 * @guide CallingComponentAPIsfromJavaScript
 *   [en]Using navigator from JavaScript[/en]
 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
 * @guide EventHandling
 *   [en]Event handling descriptions[/en]
 *   [ja]イベント処理の使い方[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @seealso ons-toolbar
 *   [en]ons-toolbar component[/en]
 *   [ja]ons-toolbarコンポーネント[/ja]
 * @seealso ons-back-button
 *   [en]ons-back-button component[/en]
 *   [ja]ons-back-buttonコンポーネント[/ja]
 * @example
 * <ons-navigator animation="slide" var="app.navi">
 *   <ons-page>
 *     <ons-toolbar>
 *       <div class="center">Title</div>
 *     </ons-toolbar>
 *
 *     <p style="text-align: center">
 *       <ons-button modifier="light" ng-click="app.navi.pushPage('page.html');">Push</ons-button>
 *     </p>
 *   </ons-page>
 * </ons-navigator>
 *
 * <ons-template id="page.html">
 *   <ons-page>
 *     <ons-toolbar>
 *       <div class="center">Title</div>
 *     </ons-toolbar>
 *
 *     <p style="text-align: center">
 *       <ons-button modifier="light" ng-click="app.navi.popPage('page.html');">Pop</ons-button>
 *     </p>
 *   </ons-page>
 * </ons-template>
 */

/**
 * @ngdoc event
 * @name prepush
 * @description
 *   [en]Fired just before a page is pushed.[/en]
 *   [ja]pageがpushされる直前に発火されます。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.navigator
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Object} event.currentPage
 *   [en]Current page object.[/en]
 *   [ja]現在のpageオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Call this function to cancel the push.[/en]
 *   [ja]この関数を呼び出すと、push処理がキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name prepop
 * @description
 *   [en]Fired just before a page is popped.[/en]
 *   [ja]pageがpopされる直前に発火されます。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.navigator
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Object} event.currentPage
 *   [en]Current page object.[/en]
 *   [ja]現在のpageオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Call this function to cancel the pop.[/en]
 *   [ja]この関数を呼び出すと、pageのpopがキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name postpush
 * @description
 *   [en]Fired just after a page is pushed.[/en]
 *   [ja]pageがpushされてアニメーションが終了してから発火されます。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.navigator
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Object} event.enterPage
 *   [en]Object of the next page.[/en]
 *   [ja]pushされたpageオブジェクト。[/ja]
 * @param {Object} event.leavePage
 *   [en]Object of the previous page.[/en]
 *   [ja]以前のpageオブジェクト。[/ja]
 */

/**
 * @ngdoc event
 * @name postpop
 * @description
 *   [en]Fired just after a page is popped.[/en]
 *   [ja]pageがpopされてアニメーションが終わった後に発火されます。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.navigator
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Object} event.enterPage
 *   [en]Object of the next page.[/en]
 *   [ja]popされて表示されるページのオブジェクト。[/ja]
 * @param {Object} event.leavePage
 *   [en]Object of the previous page.[/en]
 *   [ja]popされて消えるページのオブジェクト。[/ja]
 */

/**
 * @ngdoc attribute
 * @name page
 * @type {String}
 * @description
 *   [en]First page to show when navigator is initialized.[/en]
 *   [ja]ナビゲーターが初期化された時に表示するページを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this navigator.[/en]
 *  [ja]このナビゲーターを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prepush
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prepush" event is fired.[/en]
 *  [ja]"prepush"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prepop
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prepop" event is fired.[/en]
 *  [ja]"prepop"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postpush
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postpush" event is fired.[/en]
 *  [ja]"postpush"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postpop
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postpop" event is fired.[/en]
 *  [ja]"postpop"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature pushPage(pageUrl, [options])
 * @param {String} pageUrl
 *   [en]Page URL. Can be either a HTML document or a <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"slide", "simpleslide", "lift", "fade", "none"のいずれかを指定できます。[/ja]
 * @param {Function} [options.onTransitionEnd]
 *   [en]Function that is called when the transition has ended.[/en]
 *   [ja]pushPage()による画面遷移が終了した時に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Pushes the specified pageUrl into the page stack.[/en]
 *   [ja]指定したpageUrlを新しいページスタックに追加します。新しいページが表示されます。[/ja]
 */

/**
 * @ngdoc method
 * @signature insertPage(index, pageUrl, [options])
 * @param {Number} index
 *   [en]The index where it should be inserted.[/en]
 *   [ja]スタックに挿入する位置のインデックスを指定します。[/ja]
 * @param {String} pageUrl
 *   [en]Page URL. Can be either a HTML document or a <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"slide", "simpleslide", "lift", "fade", "none"のいずれかを指定できます。[/ja]
 * @description
 *   [en]Insert the specified pageUrl into the page stack with specified index.[/en]
 *   [ja]指定したpageUrlをページスタックのindexで指定した位置に追加します。[/ja]
 */

/**
 * @ngdoc method
 * @signature popPage([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"slide", "simpleslide", "lift", "fade", "none"のいずれかを指定できます。[/ja]
 * @param {Function} [options.onTransitionEnd]
 *   [en]Function that is called when the transition has ended.[/en]
 *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Pops the current page from the page stack. The previous page will be displayed.[/en]
 *   [ja]現在表示中のページをページスタックから取り除きます。一つ前のページに戻ります。[/ja]
 */

/**
 * @ngdoc method
 * @signature replacePage(pageUrl, [options])
 * @param {String} pageUrl
 *   [en]Page URL. Can be either a HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none".[/en]
 *   [ja]アニメーション名を指定できます。"slide", "simpleslide", "lift", "fade", "none"のいずれかを指定できます。[/ja]
 * @param {Function} [options.onTransitionEnd]
 *   [en]Function that is called when the transition has ended.[/en]
 *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Replaces the current page with the specified one.[/en]
 *   [ja]現在表示中のページをを指定したページに置き換えます。[/ja]
 */

/**
 * @ngdoc method
 * @signature resetToPage(pageUrl, [options])
 * @param {String} pageUrl
 *   [en]Page URL. Can be either a HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、もしくはons-templateで宣言したテンプレートのid属性の値を指定できます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "slide", "simpleslide", "lift", "fade" and "none".[/en]
 *   [ja]アニメーション名を指定できます。"slide", "simpleslide", "lift", "fade", "none"のいずれかを指定できます。[/ja]
 * @param {Function} [options.onTransitionEnd]
 *   [en]Function that is called when the transition has ended.[/en]
 *   [ja]このメソッドによる画面遷移が終了した際に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Clears page stack and adds the specified pageUrl to the page stack.[/en]
 *   [ja]ページスタックをリセットし、指定したページを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature getCurrentPage()
 * @return {Object}
 *   [en]Current page object.[/en]
 *   [ja]現在のpageオブジェクト。[/ja]
 * @description
 *   [en]Get current page's navigator item. Use this method to access options passed by pushPage() or resetToPage() method.[/en]
 *   [ja]現在のページを取得します。pushPage()やresetToPage()メソッドの引数を取得できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature getPages()
 * @return {List}
 *   [en]List of page objects.[/en]
 *   [ja]pageオブジェクトの配列。[/ja]
 * @description
 *   [en]Retrieve the entire page stack of the navigator.[/en]
 *   [ja]ナビゲーターの持つページスタックの一覧を取得します。[/ja]
 */

/**
 * @ngdoc method
 * @signature getDeviceBackButtonHandler()
 * @return {Object}
 *   [en]Device back button handler.[/en]
 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
 * @description
 *   [en]Retrieve the back button handler for overriding the default behavior.[/en]
 *   [ja]バックボタンハンドラを取得します。デフォルトの挙動を変更することができます。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsNavigator', ['$compile', 'NavigatorView', '$onsen', function ($compile, NavigatorView, $onsen) {
        return {
            restrict: 'E',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: true,

            compile: function (element) {

                var html = $onsen.normalizePageHTML(element.html());
                element.contents().remove();

                return {
                    pre: function (scope, element, attrs, controller) {
                        var navigator = new NavigatorView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, navigator);
                        $onsen.registerEventHandlers(navigator, 'prepush prepop postpush postpop destroy');

                        if (attrs.page) {
                            navigator.pushPage(attrs.page, {});
                        } else {
                            var pageScope = navigator._createPageScope();
                            var pageElement = angular.element(html);
                            var linkScope = $compile(pageElement);
                            var link = function () {
                                linkScope(pageScope);
                            };

                            navigator._pushPageDOM('', pageElement, link, pageScope, {});
                            pageElement = null;
                        }

                        element.data('ons-navigator', navigator);

                        element.data('_scope', scope);

                        scope.$on('$destroy', function () {
                            element.data('_scope', undefined);
                            navigator._events = undefined;
                            element.data('ons-navigator', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id page
 * @name ons-page
 * @category base
 * @description
 *   [en]Should be used as root component of each page. The content inside page component is scrollable.[/en]
 *   [ja]ページ定義のためのコンポーネントです。このコンポーネントの内容はスクロールが許可されます。[/ja]
 * @guide ManagingMultiplePages
 *   [en]Managing multiple pages[/en]
 *   [ja]複数のページを管理する[/ja]
 * @guide Pageinitevent
 *   [en]Event for page initialization[/en]
 *   [ja]ページ初期化のイベント[/ja]
 * @guide HandlingBackButton
 *   [en]Handling back button[/en]
 *   [ja]バックボタンに対応する[/ja]
 * @guide OverridingCSSstyles
 *   [en]Overriding CSS styles[/en]
 *   [ja]CSSスタイルのオーバーライド[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @example
 * <ons-page>
 *   <ons-toolbar>
 *     <div class="center">Title</div>
 *   </ons-toolbar>
 *
 *   ...
 * </ons-page>
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this page.[/en]
 *   [ja]このページを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]Specify modifier name to specify custom styles.[/en]
 *   [ja]スタイル定義をカスタマイズするための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name on-device-backbutton
 * @type {Expression}
 * @description
 *   [en]Allows you to specify custom behavior when the back button is pressed.[/en]
 *   [ja]デバイスのバックボタンが押された時の挙動を設定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ng-device-backbutton
 * @type {Expression}
 * @description
 *   [en]Allows you to specify custom behavior with an AngularJS expression when the back button is pressed.[/en]
 *   [ja]デバイスのバックボタンが押された時の挙動を設定できます。AngularJSのexpressionを指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature getDeviceBackButtonHandler()
 * @return {Object}
 *   [en]Device back button handler.[/en]
 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
 * @description
 *   [en]Get the associated back button handler. This method may return null if no handler is assigned.[/en]
 *   [ja]バックボタンハンドラを取得します。このメソッドはnullを返す場合があります。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsPage', ['$onsen', 'PageView', function ($onsen, PageView) {

        function firePageInitEvent(element) {

            // TODO: remove dirty fix
            var i = 0;
            var f = function () {
                if (i++ < 5) {
                    if (isAttached(element)) {
                        fillStatusBar(element);
                        $onsen.fireComponentEvent(element, 'init');
                        fireActualPageInitEvent(element);
                    } else {
                        setImmediate(f);
                    }
                } else {
                    throw new Error('Fail to fire "pageinit" event. Attach "ons-page" element to the document after initialization.');
                }
            };

            f();
        }

        function fireActualPageInitEvent(element) {
            var event = document.createEvent('HTMLEvents');
            event.initEvent('pageinit', true, true);
            element.dispatchEvent(event);
        }

        function fillStatusBar(element) {
            if ($onsen.shouldFillStatusBar(element)) {
                // Adjustments for IOS7
                var fill = angular.element(document.createElement('div'));
                fill.addClass('page__status-bar-fill');
                fill.css({width: '0px', height: '0px'});

                angular.element(element).prepend(fill);
            }
        }

        function isAttached(element) {
            if (document.documentElement === element) {
                return true;
            }
            return element.parentNode ? isAttached(element.parentNode) : false;
        }

        function preLink(scope, element, attrs, controller, transclude) {
            var page = new PageView(scope, element, attrs);

            $onsen.declareVarAttribute(attrs, page);

            element.data('ons-page', page);

            var modifierTemplater = $onsen.generateModifierTemplater(attrs),
                template = 'page--*';
            element.addClass('page ' + modifierTemplater(template));
            $onsen.addModifierMethods(page, template, element);

            var pageContent = angular.element(element[0].querySelector('.page__content'));
            pageContent.addClass(modifierTemplater('page--*__content'));
            pageContent = null;

            var pageBackground = angular.element(element[0].querySelector('.page__background'));
            pageBackground.addClass(modifierTemplater('page--*__background'));
            pageBackground = null;

            element.data('_scope', scope);

            $onsen.cleaner.onDestroy(scope, function () {
                element.data('_scope', undefined);
                page._events = undefined;
                $onsen.removeModifierMethods(page);
                element.data('ons-page', undefined);

                $onsen.clearComponent({
                    element: element,
                    scope: scope,
                    attrs: attrs
                });
                scope = element = attrs = null;
            });
        }

        function postLink(scope, element, attrs) {
            firePageInitEvent(element[0]);
        }

        return {
            restrict: 'E',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclde.
            transclude: false,
            scope: false,

            compile: function (element) {
                var children = element.children().remove();

                var content = angular.element('<div class="page__content ons-page-inner"></div>').append(children);
                var background = angular.element('<div class="page__background"></div>');

                if (element.attr('style')) {
                    background.attr('style', element.attr('style'));
                    element.attr('style', '');
                }

                element.append(background);

                if (Modernizr.csstransforms3d) {
                    element.append(content);
                } else {
                    content.css('overflow', 'visible');

                    var wrapper = angular.element('<div></div>');
                    wrapper.append(children);
                    content.append(wrapper);
                    element.append(content);
                    wrapper = null;

                    // IScroll for Android2
                    var scroller = new IScroll(content[0], {
                        momentum: true,
                        bounce: true,
                        hScrollbar: false,
                        vScrollbar: false,
                        preventDefault: false
                    });

                    var offset = 10;
                    scroller.on('scrollStart', function (e) {
                        var scrolled = scroller.y - offset;
                        if (scrolled < (scroller.maxScrollY + 40)) {
                            // TODO: find a better way to know when content is upated so we can refresh
                            scroller.refresh();
                        }
                    });
                }

                content = null;
                background = null;
                children = null;

                return {
                    pre: preLink,
                    post: postLink
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id popover
 * @name ons-popover
 * @category popover
 * @modifier android
 *   [en]Display an Android style popover.[/en]
 *   [ja]Androidライクなポップオーバーを表示します。[/ja]
 * @description
 *  [en]A component that displays a popover next to an element.[/en]
 *  [ja]ある要素を対象とするポップオーバーを表示するコンポーネントです。[/ja]
 * @codepen ZYYRKo
 * @example
 * <script>
 * ons.ready(function() {
 *   ons.createPopover('popover.html').then(function(popover) {
 *     popover.show('#mybutton');
 *   });
 * });
 * </script>
 *
 * <script type="text/ons-template" id="popover.html">
 *   <ons-popover cancelable>
 *     <p style="text-align: center; opacity: 0.5;">This popover will choose which side it's displayed on automatically.</p>
 *   </ons-popover>
 * </script>
 */

/**
 * @ngdoc event
 * @name preshow
 * @description
 *   [en]Fired just before the popover is displayed.[/en]
 *   [ja]ポップオーバーが表示される直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.popover
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Call this function to stop the popover from being shown.[/en]
 *   [ja]この関数を呼び出すと、ポップオーバーの表示がキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name postshow
 * @description
 *   [en]Fired just after the popover is displayed.[/en]
 *   [ja]ポップオーバーが表示された直後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.popover
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 */

/**
 * @ngdoc event
 * @name prehide
 * @description
 *   [en]Fired just before the popover is hidden.[/en]
 *   [ja]ポップオーバーが隠れる直前に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.popover
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Call this function to stop the popover from being hidden.[/en]
 *   [ja]この関数を呼び出すと、ポップオーバーが隠れる処理をキャンセルします。[/ja]
 */

/**
 * @ngdoc event
 * @name posthide
 * @description
 *   [en]Fired just after the popover is hidden.[/en]
 *   [ja]ポップオーバーが隠れた後に発火します。[/ja]
 * @param {Object} event [en]Event object.[/en]
 * @param {Object} event.popover
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 */


/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this popover.[/en]
 *  [ja]このポップオーバーを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *  [en]The appearance of the popover.[/en]
 *  [ja]ポップオーバーの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name direction
 * @type {String}
 * @description
 *  [en]
 *    A space separated list of directions. If more than one direction is specified,
 *    it will be chosen automatically. Valid directions are "up", "down", "left" and "right".
 *  [/en]
 *  [ja]
 *    ポップオーバーを表示する方向を空白区切りで複数指定できます。
 *    指定できる方向は、"up", "down", "left", "right"の4つです。空白区切りで複数指定することもできます。
 *    複数指定された場合、対象とする要素に合わせて指定した値から自動的に選択されます。
 *  [/ja]
 */

/**
 * @ngdoc attribute
 * @name cancelable
 * @description
 *   [en]If this attribute is set the popover can be closed by tapping the background or by pressing the back button.[/en]
 *   [ja]この属性があると、ポップオーバーが表示された時に、背景やバックボタンをタップした時にをポップオーバー閉じます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]If this attribute is set the popover is disabled.[/en]
 *   [ja]この属性がある時、ポップオーバーはdisabled状態になります。[/ja]
 */

/**
 * @ngdoc attribute
 * @name animation
 * @type {String}
 * @description
 *   [en]The animation used when showing an hiding the popover. Can be either "none" or "fade".[/en]
 *   [ja]ポップオーバーを表示する際のアニメーション名を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name mask-color
 * @type {Color}
 * @description
 *   [en]Color of the background mask. Default is "rgba(0, 0, 0, 0.2)".[/en]
 *   [ja]背景のマスクの色を指定します。デフォルトは"rgba(0, 0, 0, 0.2)"です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-preshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "preshow" event is fired.[/en]
 *  [ja]"preshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prehide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prehide" event is fired.[/en]
 *  [ja]"prehide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postshow
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postshow" event is fired.[/en]
 *  [ja]"postshow"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-posthide
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "posthide" event is fired.[/en]
 *  [ja]"posthide"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature show(target, [options])
 * @param {String|Event|HTMLElement} target
 *   [en]Target element. Can be either a CSS selector, an event object or a DOM element.[/en]
 *   [ja]ポップオーバーのターゲットとなる要素を指定します。CSSセレクタかeventオブジェクトかDOM要素のいずれかを渡せます。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"fade"もしくは"none"を指定できます。[/ja]
 * @description
 *   [en]Open the popover and point it at a target. The target can be either an event, a css selector or a DOM element..[/en]
 *   [ja]対象とする要素にポップオーバーを表示します。target引数には、$eventオブジェクトやDOMエレメントやCSSセレクタを渡すことが出来ます。[/ja]
 */

/**
 * @ngdoc method
 * @signature hide([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"fade"もしくは"none"を指定できます。[/ja]
 * @description
 *   [en]Close the popover.[/en]
 *   [ja]ポップオーバーを閉じます。[/ja]
 */

/**
 * @ngdoc method
 * @signature isShown()
 * @return {Boolean}
 *   [en]true if the popover is visible.[/en]
 *   [ja]ポップオーバーが表示されている場合にtrueとなります。[/ja]
 * @description
 *   [en]Returns whether the popover is visible or not.[/en]
 *   [ja]ポップオーバーが表示されているかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature destroy()
 * @description
 *   [en]Destroy the popover and remove it from the DOM tree.[/en]
 *   [ja]ポップオーバーを破棄して、DOMツリーから取り除きます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setCancelable(cancelable)
 * @param {Boolean} cancelable
 *   [en]If true the popover will be cancelable.[/en]
 *   [ja]ポップオーバーがキャンセル可能にしたい場合にtrueを指定します。[/ja]
 * @description
 *   [en]Set whether the popover can be canceled by the user when it is shown.[/en]
 *   [ja]ポップオーバーを表示した際に、ユーザがそのポップオーバーをキャンセルできるかどうかを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isCancelable()
 * @return {Boolean}
 *   [en]true if the popover is cancelable.[/en]
 *   [ja]ポップオーバーがキャンセル可能であればtrueとなります。[/ja]
 * @description
 *   [en]Returns whether the popover is cancelable or not.[/en]
 *   [ja]このポップオーバーがキャンセル可能かどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @param {Boolean} disabled
 *   [en]If true the popover will be disabled.[/en]
 *   [ja]ポップオーバーをdisabled状態にしたい場合にはtrueを指定します。[/ja]
 * @description
 *   [en]Disable or enable the popover.[/en]
 *   [ja]このポップオーバーをdisabled状態にするかどうかを設定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @return {Boolean}
 *   [en]true if the popover is disabled.[/en]
 *   [ja]ポップオーバーがdisabled状態であればtrueとなります。[/ja]
 * @description
 *   [en]Returns whether the popover is disabled or enabled.[/en]
 *   [ja]このポップオーバーがdisabled状態かどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsPopover', ['$onsen', 'PopoverView', function ($onsen, PopoverView) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,
            scope: true,
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/popover.tpl',
            compile: function (element, attrs, transclude) {
                return {
                    pre: function (scope, element, attrs) {
                        transclude(scope, function (clone) {
                            angular.element(element[0].querySelector('.popover__content')).append(clone);
                        });

                        var popover = new PopoverView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, popover);
                        $onsen.registerEventHandlers(popover, 'preshow prehide postshow posthide destroy');

                        element.data('ons-popover', popover);

                        scope.$on('$destroy', function () {
                            popover._events = undefined;
                            $onsen.removeModifierMethods(popover);
                            element.data('ons-popover', undefined);
                            element = null;
                        });

                        scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);
                        $onsen.addModifierMethods(popover, 'popover--*', angular.element(element[0].querySelector('.popover')));
                        $onsen.addModifierMethods(popover, 'popover__content--*', angular.element(element[0].querySelector('.popover__content')));

                        if ($onsen.isAndroid()) {
                            setImmediate(function () {
                                popover.addModifier('android');
                            });
                        }

                        scope.direction = 'up';
                        scope.arrowPosition = 'bottom';
                    },
                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id pull-hook
 * @name ons-pull-hook
 * @category control
 * @description
 *   [en]Component that adds "pull-to-refresh" to an <ons-page> element.[/en]
 *   [ja]ons-page要素以下でいわゆるpull to refreshを実装するためのコンポーネントです。[/ja]
 * @codepen WbJogM
 * @guide UsingPullHook
 *   [en]How to use Pull Hook[/en]
 *   [ja]プルフックを使う[/ja]
 * @example
 * <script>
 *   ons.bootstrap()
 *
 *   .controller('MyController', function($scope, $timeout) {
 *     $scope.items = [3, 2 ,1];
 *
 *     $scope.load = function($done) {
 *       $timeout(function() {
 *         $scope.items.unshift($scope.items.length + 1);
 *         $done();
 *       }, 1000);
 *     };
 *   });
 * </script>
 *
 * <ons-page ng-controller="MyController">
 *   <ons-pull-hook var="loaded" ng-action="load($done)">
 *     <span ng-switch="loader.getCurrentState()">
 *       <span ng-switch-when="initial">Pull down to refresh</span>
 *       <span ng-switch-when="preaction">Release to refresh</span>
 *       <span ng-switch-when="action">Loading data. Please wait...</span>
 *     </span>
 *   </ons-pull-hook>
 *   <ons-list>
 *     <ons-list-item ng-repeat="item in items">
 *       Item #{{ item }}
 *     </ons-list-item>
 *   </ons-list>
 * </ons-page>
 */

/**
 * @ngdoc event
 * @name changestate
 * @description
 *   [en]Fired when the state is changed. The state can be either "initial", "preaction" or "action".[/en]
 *   [ja]コンポーネントの状態が変わった場合に発火します。状態は、"initial", "preaction", "action"のいずれかです。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.pullHook
 *   [en]Component object.[/en]
 *   [ja]コンポーネントのオブジェクト。[/ja]
 * @param {String} event.state
 *   [en]Current state.[/en]
 *   [ja]現在の状態名を参照できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this component.[/en]
 *   [ja]このコンポーネントを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]If this attribute is set the "pull-to-refresh" functionality is disabled.[/en]
 *   [ja]この属性がある時、disabled状態になりアクションが実行されなくなります[/ja]
 */

/**
 * @ngdoc attribute
 * @name ng-action
 * @type {Expression}
 * @description
 *   [en]Use to specify custom behavior when the page is pulled down. A <code>$done</code> function is available to tell the component that the action is completed.[/en]
 *   [ja]pull downしたときの振る舞いを指定します。アクションが完了した時には<code>$done</code>関数を呼び出します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name on-action
 * @type {Expression}
 * @description
 *   [en]Same as <code>ng-action</code> but can be used without AngularJS. A function called <code>done</code> is available to call when action is complete.[/en]
 *   [ja]<code>ng-action</code>と同じですが、AngularJS無しで利用する場合に利用できます。アクションが完了した時には<code>done</code>関数を呼び出します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name height
 * @type {String}
 * @description
 *   [en]Specify the height of the component. When pulled down further than this value it will switch to the "preaction" state. The default value is "64px".[/en]
 *   [ja]コンポーネントの高さを指定します。この高さ以上にpull downすると"preaction"状態に移行します。デフォルトの値は"64px"です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name threshold-height
 * @type {String}
 * @description
 *   [en]Specify the threshold height. The component automatically switches to the "action" state when pulled further than this value. The default value is "96px". A negative value or a value less than the height will disable this property.[/en]
 *   [ja]閾値となる高さを指定します。この値で指定した高さよりもpull downすると、このコンポーネントは自動的に"action"状態に移行します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-changestate
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "changestate" event is fired.[/en]
 *  [ja]"changestate"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setDisabled(disabled)
 * @param {Boolean} disabled
 *   [en]If true the pull hook will be disabled.[/en]
 *   [ja]trueを指定すると、プルフックがdisabled状態になります。[/ja]
 * @description
 *   [en]Disable or enable the component.[/en]
 *   [ja]disabled状態にするかどうかを設定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature isDisabled()
 * @return {Boolean}
 *   [en]true if the pull hook is disabled.[/en]
 *   [ja]プルフックがdisabled状態の場合、trueを返します。[/ja]
 * @description
 *   [en]Returns whether the component is disabled or enabled.[/en]
 *   [ja]dsiabled状態になっているかを得ることが出来ます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setHeight(height)
 * @param {Number} height
 *   [en]Desired height.[/en]
 *   [ja]要素の高さを指定します。[/ja]
 * @description
 *   [en]Specify the height.[/en]
 *   [ja]高さを指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setThresholdHeight(thresholdHeight)
 * @param {Number} thresholdHeight
 *   [en]Desired threshold height.[/en]
 *   [ja]プルフックのアクションを起こす閾値となる高さを指定します。[/ja]
 * @description
 *   [en]Specify the threshold height.[/en]
 *   [ja]閾値となる高さを指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Pull hook directive.
     */
    module.directive('onsPullHook', ['$onsen', 'PullHookView', function ($onsen, PullHookView) {
        return {
            restrict: 'E',
            replace: false,
            scope: true,
            compile: function (element, attrs) {
                return {
                    pre: function (scope, element, attrs) {
                        var pullHook = new PullHookView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, pullHook);
                        $onsen.registerEventHandlers(pullHook, 'changestate destroy');
                        element.data('ons-pull-hook', pullHook);

                        scope.$on('$destroy', function () {
                            pullHook._events = undefined;
                            element.data('ons-pull-hook', undefined);
                            scope = element = attrs = null;
                        });
                    },
                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();

/**
 * @ngdoc directive
 * @id row
 * @name ons-row
 * @category grid
 * @description
 *   [en]Represents a row in the grid system. Use with ons-col to layout components.[/en]
 *   [ja]グリッドシステムにて行を定義します。ons-colとともに使用し、コンポーネントの配置に使用します。[/ja]
 * @codepen GgujC {wide}
 * @guide Layouting
 *   [en]Layouting guide[/en]
 *   [ja]レイアウト調整[/ja]
 * @seealso ons-col
 *   [en]ons-col component[/en]
 *   [ja]ons-colコンポーネント[/ja]
 * @note
 *   [en]For Android 4.3 and earlier, and iOS6 and earlier, when using mixed alignment with ons-row and ons-column, they may not be displayed correctly. You can use only one align.[/en]
 *   [ja]Android 4.3以前、もしくはiOS 6以前のOSの場合、ons-rowとons-columnを組み合わせた場合に描画が崩れる場合があります。[/ja]
 * @example
 * <ons-row>
 *   <ons-col width="50px"><ons-icon icon="fa-twitter"></ons-icon></ons-col>
 *   <ons-col>Text</ons-col>
 * </ons-row>
 */

/**
 * @ngdoc attribute
 * @name align
 * @type {String}
 * @description
 *   [en]Short hand attribute for aligning vertically. Valid values are top, bottom, and center.[/en]
 *   [ja]縦に整列するために指定します。top、bottom、centerのいずれかを指定できます。[/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    module.directive('onsRow', ['$onsen', '$timeout', function ($onsen, $timeout) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: false,

            compile: function (element, attrs) {
                element.addClass('row ons-row-inner');

                return function (scope, element, attrs) {
                    attrs.$observe('align', function (align) {
                        update();
                    });

                    update();

                    function update() {
                        var align = ('' + attrs.align).trim();
                        if (align === 'top' || align === 'center' || align === 'bottom') {
                            element.removeClass('row-bottom row-center row-top');
                            element.addClass('row-' + align);
                        }
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();


/**
 * @ngdoc directive
 * @id scroller
 * @name ons-scroller
 * @category base
 * @description
 *   [en]Makes the content inside this tag scrollable.[/en]
 *   [ja]要素内をスクロール可能にします。[/ja]
 * @example
 * <ons-scroller style="height: 200px; width: 100%">
 *   ...
 * </ons-scroller>
 */
(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsScroller', ['$onsen', '$timeout', function ($onsen, $timeout) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,

            scope: {
                onScrolled: '&',
                infinitScrollEnable: '='
            },

            compile: function (element, attrs) {
                var content = element.addClass('ons-scroller').children().remove();

                return function (scope, element, attrs, controller, transclude) {
                    if (attrs.ngController) {
                        throw new Error('"ons-scroller" can\'t accept "ng-controller" directive.');
                    }

                    var wrapper = angular.element('<div></div>');
                    wrapper.addClass('ons-scroller__content ons-scroller-inner');
                    element.append(wrapper);

                    transclude(scope.$parent, function (cloned) {
                        wrapper.append(cloned);
                        wrapper = null;
                    });

                    // inifinte scroll
                    var scrollWrapper;

                    scrollWrapper = element[0];
                    var offset = parseInt(attrs.threshold) || 10;

                    if (scope.onScrolled) {
                        scrollWrapper.addEventListener('scroll', function () {
                            if (scope.infinitScrollEnable) {
                                var scrollTopAndOffsetHeight = scrollWrapper.scrollTop + scrollWrapper.offsetHeight;
                                var scrollHeightMinusOffset = scrollWrapper.scrollHeight - offset;

                                if (scrollTopAndOffsetHeight >= scrollHeightMinusOffset) {
                                    scope.onScrolled();
                                }
                            }
                        });
                    }

                    // IScroll for Android
                    if (!Modernizr.csstransforms3d) {
                        $timeout(function () {
                            var iScroll = new IScroll(scrollWrapper, {
                                momentum: true,
                                bounce: true,
                                hScrollbar: false,
                                vScrollbar: false,
                                preventDefault: false
                            });

                            iScroll.on('scrollStart', function (e) {
                                var scrolled = iScroll.y - offset;
                                if (scrolled < (iScroll.maxScrollY + 40)) {
                                    // TODO: find a better way to know when content is upated so we can refresh
                                    iScroll.refresh();
                                }
                            });

                            if (scope.onScrolled) {
                                iScroll.on('scrollEnd', function (e) {
                                    var scrolled = iScroll.y - offset;
                                    if (scrolled < iScroll.maxScrollY) {
                                        // console.log('we are there!');
                                        scope.onScrolled();
                                    }
                                });
                            }

                        }, 500);
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id sliding_menu
 * @name ons-sliding-menu
 * @category navigation
 * @description
 *   [en]Component for sliding UI where one page is overlayed over another page. The above page can be slided aside to reveal the page behind.[/en]
 *   [ja]スライディングメニューを表現するためのコンポーネントで、片方のページが別のページの上にオーバーレイで表示されます。above-pageで指定されたページは、横からスライドして表示します。[/ja]
 * @codepen IDvFJ
 * @seealso ons-page
 *   [en]ons-page component[/en]
 *   [ja]ons-pageコンポーネント[/ja]
 * @guide UsingSlidingMenu
 *   [en]Using sliding menu[/en]
 *   [ja]スライディングメニューを使う[/ja]
 * @guide EventHandling
 *   [en]Using events[/en]
 *   [ja]イベントの利用[/ja]
 * @guide CallingComponentAPIsfromJavaScript
 *   [en]Using navigator from JavaScript[/en]
 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @example
 * <ons-sliding-menu var="app.menu" main-page="page.html" menu-page="menu.html" max-slide-distance="200px" type="reveal" side="left">
 * </ons-sliding-menu>
 *
 * <ons-template id="page.html">
 *   <ons-page>
 *    <p style="text-align: center">
 *      <ons-button ng-click="app.menu.toggleMenu()">Toggle</ons-button>
 *    </p>
 *   </ons-page>
 * </ons-template>
 *
 * <ons-template id="menu.html">
 *   <ons-page>
 *     <!-- menu page's contents -->
 *   </ons-page>
 * </ons-template>
 *
 */

/**
 * @ngdoc event
 * @name preopen
 * @description
 *   [en]Fired just before the sliding menu is opened.[/en]
 *   [ja]スライディングメニューが開く前に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.slidingMenu
 *   [en]Sliding menu view object.[/en]
 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
 */

/**
 * @ngdoc event
 * @name postopen
 * @description
 *   [en]Fired just after the sliding menu is opened.[/en]
 *   [ja]スライディングメニューが開き終わった後に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.slidingMenu
 *   [en]Sliding menu view object.[/en]
 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
 */

/**
 * @ngdoc event
 * @name preclose
 * @description
 *   [en]Fired just before the sliding menu is closed.[/en]
 *   [ja]スライディングメニューが閉じる前に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.slidingMenu
 *   [en]Sliding menu view object.[/en]
 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
 */

/**
 * @ngdoc event
 * @name postclose
 * @description
 *   [en]Fired just after the sliding menu is closed.[/en]
 *   [ja]スライディングメニューが閉じ終わった後に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.slidingMenu
 *   [en]Sliding menu view object.[/en]
 *   [ja]イベントが発火したSlidingMenuオブジェクトです。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this sliding menu.[/en]
 *  [ja]このスライディングメニューを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name menu-page
 * @type {String}
 * @description
 *   [en]The url of the menu page.[/en]
 *   [ja]左に位置するメニューページのURLを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name main-page
 * @type {String}
 * @description
 *   [en]The url of the main page.[/en]
 *   [ja]右に位置するメインページのURLを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name swipeable
 * @type {Boolean}
 * @description
 *   [en]Whether to enable swipe interaction.[/en]
 *   [ja]スワイプ操作を有効にする場合に指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name swipe-target-width
 * @type {String}
 * @description
 *   [en]The width of swipeable area calculated from the left (in pixels). Use this to enable swipe only when the finger touch on the screen edge.[/en]
 *   [ja]スワイプの判定領域をピクセル単位で指定します。画面の端から指定した距離に達するとページが表示されます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name max-slide-distance
 * @type {String}
 * @description
 *   [en]How far the menu page will slide open. Can specify both in px and %. eg. 90%, 200px[/en]
 *   [ja]menu-pageで指定されたページの表示幅を指定します。ピクセルもしくは%の両方で指定できます（例: 90%, 200px）[/ja]
 */

/**
 * @ngdoc attribute
 * @name direction
 * @type {String}
 * @description
 *   [en]Specify which side of the screen the menu page is located on. Possible values are "left" and "right".[/en]
 *   [ja]menu-pageで指定されたページが画面のどちら側から表示されるかを指定します。leftもしくはrightのいずれかを指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name type
 * @type {String}
 * @description
 *   [en]Sliding menu animator. Possible values are reveal (default), push and overlay.[/en]
 *   [ja]スライディングメニューのアニメーションです。"reveal"（デフォルト）、"push"、"overlay"のいずれかを指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-preopen
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "preopen" event is fired.[/en]
 *  [ja]"preopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-preclose
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "preclose" event is fired.[/en]
 *  [ja]"preclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postopen
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postopen" event is fired.[/en]
 *  [ja]"postopen"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postclose
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postclose" event is fired.[/en]
 *  [ja]"postclose"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setMainPage(pageUrl, [options])
 * @param {String} pageUrl
 *   [en]Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Boolean} [options.closeMenu]
 *   [en]If true the menu will be closed.[/en]
 *   [ja]trueを指定すると、開いているメニューを閉じます。[/ja]
 * @param {Function} [options.callback]
 *   [en]Function that is executed after the page has been set.[/en]
 *   [ja]ページが読み込まれた後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Show the page specified in pageUrl in the main contents pane.[/en]
 *   [ja]中央部分に表示されるページをpageUrlに指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setMenuPage(pageUrl, [options])
 * @param {String} pageUrl
 *   [en]Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Boolean} [options.closeMenu]
 *   [en]If true the menu will be closed after the menu page has been set.[/en]
 *   [ja]trueを指定すると、開いているメニューを閉じます。[/ja]
 * @param {Function} [options.callback]
 *   [en]This function will be executed after the menu page has been set.[/en]
 *   [ja]メニューページが読み込まれた後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Show the page specified in pageUrl in the side menu pane.[/en]
 *   [ja]メニュー部分に表示されるページをpageUrlに指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature openMenu([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Function} [options.callback]
 *   [en]This function will be called after the menu has been opened.[/en]
 *   [ja]メニューが開いた後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Slide the above layer to reveal the layer behind.[/en]
 *   [ja]メニューページを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature closeMenu([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Function} [options.callback]
 *   [en]This function will be called after the menu has been closed.[/en]
 *   [ja]メニューが閉じられた後に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]Slide the above layer to hide the layer behind.[/en]
 *   [ja]メニューページを非表示にします。[/ja]
 */

/**
 * @ngdoc method
 * @signature toggleMenu([options])
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Function} [options.callback]
 *   [en]This function will be called after the menu has been opened or closed.[/en]
 *   [ja]メニューが開き終わった後か、閉じ終わった後に呼び出される関数オブジェクトです。[/ja]
 * @description
 *   [en]Slide the above layer to reveal the layer behind if it is currently hidden, otherwise, hide the layer behind.[/en]
 *   [ja]現在の状況に合わせて、メニューページを表示もしくは非表示にします。[/ja]
 */

/**
 * @ngdoc method
 * @signature isMenuOpened()
 * @return {Boolean}
 *   [en]true if the menu is currently open.[/en]
 *   [ja]メニューが開いていればtrueとなります。[/ja]
 * @description
 *   [en]Returns true if the menu page is open, otherwise false.[/en]
 *   [ja]メニューページが開いている場合はtrue、そうでない場合はfalseを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature getDeviceBackButtonHandler()
 * @return {Object}
 *   [en]Device back button handler.[/en]
 *   [ja]デバイスのバックボタンハンドラを返します。[/ja]
 * @description
 *   [en]Retrieve the back-button handler.[/en]
 *   [ja]ons-sliding-menuに紐付いているバックボタンハンドラを取得します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setSwipeable(swipeable)
 * @param {Boolean} swipeable
 *   [en]If true the menu will be swipeable.[/en]
 *   [ja]スワイプで開閉できるようにする場合にはtrueを指定します。[/ja]
 * @description
 *   [en]Specify if the menu should be swipeable or not.[/en]
 *   [ja]スワイプで開閉するかどうかを設定する。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsSlidingMenu', ['$compile', 'SlidingMenuView', '$onsen', function ($compile, SlidingMenuView, $onsen) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: true,

            compile: function (element, attrs) {
                var main = element[0].querySelector('.main'),
                    menu = element[0].querySelector('.menu');

                if (main) {
                    var mainHtml = angular.element(main).remove().html().trim();
                }

                if (menu) {
                    var menuHtml = angular.element(menu).remove().html().trim();
                }

                return function (scope, element, attrs) {
                    if (attrs.ngController) {
                        throw new Error('This element can\'t accept ng-controller directive.');
                    }

                    element.append(angular.element('<div></div>').addClass('onsen-sliding-menu__menu ons-sliding-menu-inner'));
                    element.append(angular.element('<div></div>').addClass('onsen-sliding-menu__main ons-sliding-menu-inner'));

                    var slidingMenu = new SlidingMenuView(scope, element, attrs);

                    $onsen.registerEventHandlers(slidingMenu, 'preopen preclose postopen postclose destroy');

                    if (mainHtml && !attrs.mainPage) {
                        slidingMenu._appendMainPage(null, mainHtml);
                    }

                    if (menuHtml && !attrs.menuPage) {
                        slidingMenu._appendMenuPage(menuHtml);
                    }

                    $onsen.declareVarAttribute(attrs, slidingMenu);
                    element.data('ons-sliding-menu', slidingMenu);

                    element.data('_scope', scope);

                    scope.$on('$destroy', function () {
                        element.data('_scope', undefined);
                        slidingMenu._events = undefined;
                        element.data('ons-sliding-menu', undefined);
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id split-view
 * @name ons-split-view
 * @category control
 * @description
 *  [en]Divides the screen into a left and right section.[/en]
 *  [ja]画面を左右に分割するコンポーネントです。[/ja]
 * @codepen nKqfv {wide}
 * @guide Usingonssplitviewcomponent
 *   [en]Using ons-split-view.[/en]
 *   [ja]ons-split-viewコンポーネントを使う[/ja]
 * @guide CallingComponentAPIsfromJavaScript
 *   [en]Using navigator from JavaScript[/en]
 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
 * @example
 * <ons-split-view
 *   secondary-page="secondary.html"
 *   main-page="main.html"
 *   main-page-width="70%"
 *   collapse="portrait">
 * </ons-split-view>
 */

/**
 * @ngdoc event
 * @name update
 * @description
 *   [en]Fired when the split view is updated.[/en]
 *   [ja]split viewの状態が更新された際に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Object} event.splitView
 *   [en]Split view object.[/en]
 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
 * @param {Boolean} event.shouldCollapse
 *   [en]True if the view should collapse.[/en]
 *   [ja]collapse状態の場合にtrueになります。[/ja]
 * @param {String} event.currentMode
 *   [en]Current mode.[/en]
 *   [ja]現在のモード名を返します。"collapse"か"split"かのいずれかです。[/ja]
 * @param {Function} event.split
 *   [en]Call to force split.[/en]
 *   [ja]この関数を呼び出すと強制的にsplitモードにします。[/ja]
 * @param {Function} event.collapse
 *   [en]Call to force collapse.[/en]
 *   [ja]この関数を呼び出すと強制的にcollapseモードにします。[/ja]
 * @param {Number} event.width
 *   [en]Current width.[/en]
 *   [ja]現在のSplitViewの幅を返します。[/ja]
 * @param {String} event.orientation
 *   [en]Current orientation.[/en]
 *   [ja]現在の画面のオリエンテーションを返します。"portrait"かもしくは"landscape"です。 [/ja]
 */

/**
 * @ngdoc event
 * @name presplit
 * @description
 *   [en]Fired just before the view is split.[/en]
 *   [ja]split状態にる前に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.splitView
 *   [en]Split view object.[/en]
 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
 * @param {Number} event.width
 *   [en]Current width.[/en]
 *   [ja]現在のSplitViewnの幅です。[/ja]
 * @param {String} event.orientation
 *   [en]Current orientation.[/en]
 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
 */

/**
 * @ngdoc event
 * @name postsplit
 * @description
 *   [en]Fired just after the view is split.[/en]
 *   [ja]split状態になった後に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.splitView
 *   [en]Split view object.[/en]
 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
 * @param {Number} event.width
 *   [en]Current width.[/en]
 *   [ja]現在のSplitViewnの幅です。[/ja]
 * @param {String} event.orientation
 *   [en]Current orientation.[/en]
 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
 */

/**
 * @ngdoc event
 * @name precollapse
 * @description
 *   [en]Fired just before the view is collapsed.[/en]
 *   [ja]collapse状態になる前に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.splitView
 *   [en]Split view object.[/en]
 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
 * @param {Number} event.width
 *   [en]Current width.[/en]
 *   [ja]現在のSplitViewnの幅です。[/ja]
 * @param {String} event.orientation
 *   [en]Current orientation.[/en]
 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
 */

/**
 * @ngdoc event
 * @name postcollapse
 * @description
 *   [en]Fired just after the view is collapsed.[/en]
 *   [ja]collapse状態になった後に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.splitView
 *   [en]Split view object.[/en]
 *   [ja]イベントが発火したSplitViewオブジェクトです。[/ja]
 * @param {Number} event.width
 *   [en]Current width.[/en]
 *   [ja]現在のSplitViewnの幅です。[/ja]
 * @param {String} event.orientation
 *   [en]Current orientation.[/en]
 *   [ja]現在の画面のオリエンテーションを返します。"portrait"もしくは"landscape"です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this split view.[/en]
 *   [ja]このスプリットビューコンポーネントを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name main-page
 * @type {String}
 * @description
 *   [en]The url of the page on the right.[/en]
 *   [ja]右側に表示するページのURLを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name main-page-width
 * @type {Number}
 * @description
 *   [en]Main page width percentage. The secondary page width will be the remaining percentage.[/en]
 *   [ja]右側のページの幅をパーセント単位で指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name secondary-page
 * @type {String}
 * @description
 *   [en]The url of the page on the left.[/en]
 *   [ja]左側に表示するページのURLを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name collapse
 * @type {String}
 * @description
 *   [en]
 *     Specify the collapse behavior. Valid values are portrait, landscape, width #px or a media query.
 *     "portrait" or "landscape" means the view will collapse when device is in landscape or portrait orientation.
 *     "width #px" means the view will collapse when the window width is smaller than the specified #px.
 *     If the value is a media query, the view will collapse when the media query is true.
 *   [/en]
 *   [ja]
 *     左側のページを非表示にする条件を指定します。portrait, landscape、width #pxもしくはメディアクエリの指定が可能です。
 *     portraitもしくはlandscapeを指定すると、デバイスの画面が縦向きもしくは横向きになった時に適用されます。
 *     width #pxを指定すると、画面が指定した横幅よりも短い場合に適用されます。
 *     メディアクエリを指定すると、指定したクエリに適合している場合に適用されます。
 *   [/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-update
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "update" event is fired.[/en]
 *  [ja]"update"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-presplit
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "presplit" event is fired.[/en]
 *  [ja]"presplit"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-precollapse
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "precollapse" event is fired.[/en]
 *  [ja]"precollapse"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postsplit
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postsplit" event is fired.[/en]
 *  [ja]"postsplit"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postcollapse
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postcollapse" event is fired.[/en]
 *  [ja]"postcollapse"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setMainPage(pageUrl)
 * @param {String} pageUrl
 *   [en]Page URL. Can be either an HTML document or an <ons-template>.[/en]
 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
 * @description
 *   [en]Show the page specified in pageUrl in the right section[/en]
 *   [ja]指定したURLをメインページを読み込みます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setSecondaryPage(pageUrl)
 * @param {String} pageUrl
 *   [en]Page URL. Can be either an HTML document or an <ons-template>.[/en]
 *   [ja]pageのURLか、ons-templateで宣言したテンプレートのid属性の値を指定します。[/ja]
 * @description
 *   [en]Show the page specified in pageUrl in the left section[/en]
 *   [ja]指定したURLを左のページの読み込みます。[/ja]
 */

/**
 * @ngdoc method
 * @signature update()
 * @description
 *   [en]Trigger an 'update' event and try to determine if the split behaviour should be changed.[/en]
 *   [ja]splitモードを変えるべきかどうかを判断するための'update'イベントを発火します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsSplitView', ['$compile', 'SplitView', '$onsen', function ($compile, SplitView, $onsen) {

        return {
            restrict: 'E',
            replace: false,
            transclude: false,
            scope: true,

            compile: function (element, attrs) {
                var mainPage = element[0].querySelector('.main-page'),
                    secondaryPage = element[0].querySelector('.secondary-page');

                if (mainPage) {
                    var mainHtml = angular.element(mainPage).remove().html().trim();
                }

                if (secondaryPage) {
                    var secondaryHtml = angular.element(secondaryPage).remove().html().trim();
                }

                return function (scope, element, attrs) {
                    if (attrs.ngController) {
                        throw new Error('This element can\'t accept ng-controller directive.');
                    }

                    element.append(angular.element('<div></div>').addClass('onsen-split-view__secondary full-screen ons-split-view-inner'));
                    element.append(angular.element('<div></div>').addClass('onsen-split-view__main full-screen ons-split-view-inner'));

                    var splitView = new SplitView(scope, element, attrs);

                    if (mainHtml && !attrs.mainPage) {
                        splitView._appendMainPage(mainHtml);
                    }

                    if (secondaryHtml && !attrs.secondaryPage) {
                        splitView._appendSecondPage(secondaryHtml);
                    }

                    $onsen.declareVarAttribute(attrs, splitView);
                    $onsen.registerEventHandlers(splitView, 'update presplit precollapse postsplit postcollapse destroy');

                    element.data('ons-split-view', splitView);
                    element.data('_scope', scope);

                    scope.$on('$destroy', function () {
                        element.data('_scope', undefined);
                        splitView._events = undefined;
                        element.data('ons-split-view', undefined);
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id switch
 * @name ons-switch
 * @category form
 * @description
 *  [en]Switch component.[/en]
 *  [ja]スイッチを表示するコンポーネントです。[/ja]
 * @guide UsingFormComponents
 *   [en]Using form components[/en]
 *   [ja]フォームを使う[/ja]
 * @guide EventHandling
 *   [en]Event handling descriptions[/en]
 *   [ja]イベント処理の使い方[/ja]
 * @seealso ons-button
 *   [en]ons-button component[/en]
 *   [ja]ons-buttonコンポーネント[/ja]
 * @example
 * <ons-switch checked></ons-switch>
 */

/**
 * @ngdoc event
 * @name change
 * @description
 *   [en]Fired when the value is changed.[/en]
 *   [ja]ON/OFFが変わった時に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Object} event.switch
 *   [en]Switch object.[/en]
 *   [ja]イベントが発火したSwitchオブジェクトを返します。[/ja]
 * @param {Boolean} event.value
 *   [en]Current value.[/en]
 *   [ja]現在の値を返します。[/ja]
 * @param {Boolean} event.isInteractive
 *   [en]True if the change was triggered by the user clicking on the switch.[/en]
 *   [ja]タップやクリックなどのユーザの操作によって変わった場合にはtrueを返します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this switch.[/en]
 *   [ja]JavaScriptから参照するための変数名を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *  [en]The appearance of the switch.[/en]
 *  [ja]スイッチの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]Whether the switch should be disabled.[/en]
 *   [ja]スイッチを無効の状態にする場合に指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name checked
 * @description
 *   [en]Whether the switch is checked.[/en]
 *   [ja]スイッチがONの状態にするときに指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isChecked()
 * @return {Boolean}
 *   [en]true if the switch is on.[/en]
 *   [ja]ONになっている場合にはtrueになります。[/ja]
 * @description
 *   [en]Returns true if the switch is ON.[/en]
 *   [ja]スイッチがONの場合にtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature setChecked(checked)
 * @param {Boolean} checked
 *   [en]If true the switch will be set to on.[/en]
 *   [ja]ONにしたい場合にはtrueを指定します。[/ja]
 * @description
 *   [en]Set the value of the switch. isChecked can be either true or false.[/en]
 *   [ja]スイッチの値を指定します。isCheckedにはtrueもしくはfalseを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature getCheckboxElement()
 * @return {HTMLElement}
 *   [en]The underlying checkbox element.[/en]
 *   [ja]コンポーネント内部のcheckbox要素になります。[/ja]
 * @description
 *   [en]Get inner input[type=checkbox] element.[/en]
 *   [ja]スイッチが内包する、input[type=checkbox]の要素を取得します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsSwitch', ['$onsen', '$parse', 'SwitchView', function ($onsen, $parse, SwitchView) {
        return {
            restrict: 'E',
            replace: false,

            transclude: false,
            scope: true,

            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/switch.tpl',
            compile: function (element) {
                return function (scope, element, attrs) {
                    if (attrs.ngController) {
                        throw new Error('This element can\'t accept ng-controller directive.');
                    }

                    var switchView = new SwitchView(element, scope, attrs);
                    var checkbox = angular.element(element[0].querySelector('input[type=checkbox]'));

                    scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);

                    var label = element.children(),
                        input = angular.element(label.children()[0]),
                        toggle = angular.element(label.children()[1]);

                    $onsen.addModifierMethods(switchView, 'switch--*', label);
                    $onsen.addModifierMethods(switchView, 'switch--*__input', input);
                    $onsen.addModifierMethods(switchView, 'switch--*__toggle', toggle);

                    attrs.$observe('checked', function (checked) {
                        scope.model = !!element.attr('checked');
                    });

                    attrs.$observe('name', function (name) {
                        if (!!element.attr('name')) {
                            checkbox.attr('name', name);
                        }
                    });

                    if (attrs.ngModel) {
                        var set = $parse(attrs.ngModel).assign;

                        scope.$parent.$watch(attrs.ngModel, function (value) {
                            scope.model = value;
                        });

                        scope.$watch('model', function (to, from) {
                            set(scope.$parent, to);
                            if (to !== from) {
                                scope.$eval(attrs.ngChange);
                            }
                        });
                    }

                    $onsen.declareVarAttribute(attrs, switchView);
                    element.data('ons-switch', switchView);

                    $onsen.cleaner.onDestroy(scope, function () {
                        switchView._events = undefined;
                        $onsen.removeModifierMethods(switchView);
                        element.data('ons-switch', undefined);
                        $onsen.clearComponent({
                            element: element,
                            scope: scope,
                            attrs: attrs
                        });
                        checkbox = element = attrs = scope = null;
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id tabbar_item
 * @name ons-tab
 * @category navigation
 * @description
 *   [en]Represents a tab inside tabbar. Each ons-tab represents a page.[/en]
 *   [ja]
 *     タブバーに配置される各アイテムのコンポーネントです。それぞれのons-tabはページを表します。
 *     ons-tab要素の中には、タブに表示されるコンテンツを直接記述することが出来ます。
 *   [/ja]
 * @codepen pGuDL
 * @guide UsingTabBar
 *   [en]Using tab bar[/en]
 *   [ja]タブバーを使う[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @seealso ons-tabbar
 *   [en]ons-tabbar component[/en]
 *   [ja]ons-tabbarコンポーネント[/ja]
 * @seealso ons-page
 *   [en]ons-page component[/en]
 *   [ja]ons-pageコンポーネント[/ja]
 * @seealso ons-icon
 *   [en]ons-icon component[/en]
 *   [ja]ons-iconコンポーネント[/ja]
 * @example
 * <ons-tabbar>
 *   <ons-tab page="home.html" active="true">
 *     <ons-icon icon="ion-home"></ons-icon>
 *     <span style="font-size: 14px">Home</span>
 *   </ons-tab>
 *   <ons-tab page="fav.html" active="true">
 *     <ons-icon icon="ion-star"></ons-icon>
 *     <span style="font-size: 14px">Favorites</span>
 *   </ons-tab>
 *   <ons-tab page="settings.html" active="true">
 *     <ons-icon icon="ion-gear-a"></ons-icon>
 *     <span style="font-size: 14px">Settings</span>
 *   </ons-tab>
 * </ons-tabbar>
 *
 * <ons-template id="home.html">
 *   ...
 * </ons-template>
 *
 * <ons-template id="fav.html">
 *   ...
 * </ons-template>
 *
 * <ons-template id="settings.html">
 *   ...
 * </ons-template>
 */

/**
 * @ngdoc attribute
 * @name page
 * @type {String}
 * @description
 *   [en]The page that this <code>&lt;ons-tab&gt;</code> points to.[/en]
 *   [ja]<code>&lt;ons-tab&gt;</code>が参照するページへのURLを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name icon
 * @type {String}
 * @description
 *   [en]
 *     The icon name for the tab. Can specify the same icon name as <code>&lt;ons-icon&gt;</code>.
 *     If you need to use your own icon, create a css class with background-image or any css properties and specify the name of your css class here.
 *   [/en]
 *   [ja]
 *     アイコン名を指定します。<code>&lt;ons-icon&gt;</code>と同じアイコン名を指定できます。
 *     個別にアイコンをカスタマイズする場合は、background-imageなどのCSSスタイルを用いて指定できます。
 *   [/ja]
 */

/**
 * @ngdoc attribute
 * @name active-icon
 * @type {String}
 * @description
 *   [en]The name of the icon when the tab is active.[/en]
 *   [ja]アクティブの際のアイコン名を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name label
 * @type {String}
 * @description
 *   [en]The label of the tab item.[/en]
 *   [ja]アイコン下に表示されるラベルを指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name active
 * @type {Boolean}
 * @default false
 * @description
 *   [en]Set whether this item should be active or not. Valid values are true and false.[/en]
 *   [ja]このタブアイテムをアクティブ状態にするかどうかを指定します。trueもしくはfalseを指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name no-reload
 * @description
 *   [en]Set if the page shouldn't be reloaded when clicking on the same tab twice.[/en]
 *   [ja]すでにアクティブになったタブを再びクリックするとページの再読み込みは発生しません。[/ja]
 */

/**
 * @ngdoc attribute
 * @name persistent
 * @description
 *   [en]
 *     Set to make the tab content persistent.
 *     If this attribute it set the DOM will not be destroyed when navigating to another tab.
 *   [/en]
 *   [ja]
 *     このタブで読み込んだページを永続化します。
 *     この属性があるとき、別のタブのページに切り替えても、
 *     読み込んだページのDOM要素は破棄されずに単に非表示になります。
 *   [/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsTab', tab);
    module.directive('onsTabbarItem', tab); // for BC

    var defaultInnerTemplate =
        '<div ng-if="icon != undefined" class="tab-bar__icon">' +
        '<ons-icon icon="{{tabIcon}}" style="font-size: 28px; line-height: 34px; vertical-align: top;"></ons-icon>' +
        '</div>' +
        '<div ng-if="label" class="tab-bar__label">{{label}}</div>';

    function tab($onsen, $compile) {
        return {
            restrict: 'E',
            transclude: true,

            scope: {
                page: '@',
                active: '@',
                icon: '@',
                activeIcon: '@',
                label: '@',
                noReload: '@',
                persistent: '@'
            },

            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/tab.tpl',

            compile: function (element, attrs) {
                element.addClass('tab-bar__item');

                return function (scope, element, attrs, controller, transclude) {
                    var tabbarView = element.inheritedData('ons-tabbar');
                    if (!tabbarView) {
                        throw new Error('This ons-tab element is must be child of ons-tabbar element.');
                    }

                    element.addClass(tabbarView._scope.modifierTemplater('tab-bar--*__item'));
                    element.addClass(tabbarView._scope.modifierTemplater('tab-bar__item--*'));

                    transclude(scope.$parent, function (cloned) {
                        var wrapper = angular.element(element[0].querySelector('.tab-bar-inner'));

                        if (attrs.icon || attrs.label || !cloned[0]) {
                            var innerElement = angular.element('<div>' + defaultInnerTemplate + '</div>').children();
                            wrapper.append(innerElement);
                            $compile(innerElement)(scope);
                        } else {
                            wrapper.append(cloned);
                        }
                    });

                    var radioButton = element[0].querySelector('input');

                    scope.tabbarModifierTemplater = tabbarView._scope.modifierTemplater;
                    scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);
                    scope.tabbarId = tabbarView._tabbarId;
                    scope.tabIcon = scope.icon;

                    tabbarView.addTabItem(scope);

                    // Make this tab active.
                    scope.setActive = function () {
                        element.addClass('active');
                        radioButton.checked = true;

                        if (scope.activeIcon) {
                            scope.tabIcon = scope.activeIcon;
                        }

                        angular.element(element[0].querySelectorAll('[ons-tab-inactive]')).css('display', 'none');
                        angular.element(element[0].querySelectorAll('[ons-tab-active]')).css('display', 'inherit');
                    };

                    // Make this tab inactive.
                    scope.setInactive = function () {
                        element.removeClass('active');
                        radioButton.checked = false;
                        scope.tabIcon = scope.icon;

                        angular.element(element[0].querySelectorAll('[ons-tab-inactive]')).css('display', 'inherit');
                        angular.element(element[0].querySelectorAll('[ons-tab-active]')).css('display', 'none');
                    };

                    scope.isPersistent = function () {
                        return typeof scope.persistent != 'undefined';
                    };

                    /**
                     * @return {Boolean}
                     */
                    scope.isActive = function () {
                        return element.hasClass('active');
                    };

                    scope.tryToChange = function () {
                        tabbarView.setActiveTab(tabbarView._tabItems.indexOf(scope));
                    };

                    if (scope.active) {
                        tabbarView.setActiveTab(tabbarView._tabItems.indexOf(scope));
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }

    tab.$inject = ['$onsen', '$compile'];
})();

/**
 * @ngdoc directive
 * @id tabbar
 * @name ons-tabbar
 * @category navigation
 * @description
 *   [en]A component to display a tab bar on the bottom of a page. Used with ons-tab to manage pages using tabs.[/en]
 *   [ja]タブバーをページ下部に表示するためのコンポーネントです。ons-tabと組み合わせて使うことで、ページを管理できます。[/ja]
 * @codepen pGuDL
 * @guide UsingTabBar
 *   [en]Using tab bar[/en]
 *   [ja]タブバーを使う[/ja]
 * @guide EventHandling
 *   [en]Event handling descriptions[/en]
 *   [ja]イベント処理の使い方[/ja]
 * @guide CallingComponentAPIsfromJavaScript
 *   [en]Using navigator from JavaScript[/en]
 *   [ja]JavaScriptからコンポーネントを呼び出す[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @seealso ons-tab
 *   [en]ons-tab component[/en]
 *   [ja]ons-tabコンポーネント[/ja]
 * @seealso ons-page
 *   [en]ons-page component[/en]
 *   [ja]ons-pageコンポーネント[/ja]
 * @example
 * <ons-tabbar>
 *   <ons-tab page="home.html" active="true">
 *     <ons-icon icon="ion-home"></ons-icon>
 *     <span style="font-size: 14px">Home</span>
 *   </ons-tab>
 *   <ons-tab page="fav.html" active="true">
 *     <ons-icon icon="ion-star"></ons-icon>
 *     <span style="font-size: 14px">Favorites</span>
 *   </ons-tab>
 *   <ons-tab page="settings.html" active="true">
 *     <ons-icon icon="ion-gear-a"></ons-icon>
 *     <span style="font-size: 14px">Settings</span>
 *   </ons-tab>
 * </ons-tabbar>
 *
 * <ons-template id="home.html">
 *   ...
 * </ons-template>
 *
 * <ons-template id="fav.html">
 *   ...
 * </ons-template>
 *
 * <ons-template id="settings.html">
 *   ...
 * </ons-template>
 */

/**
 * @ngdoc event
 * @name prechange
 * @description
 *   [en]Fires just before the tab is changed.[/en]
 *   [ja]アクティブなタブが変わる前に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Number} event.index
 *   [en]Current index.[/en]
 *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
 * @param {Object} event.tabItem
 *   [en]Tab item object.[/en]
 *   [ja]tabItemオブジェクト。[/ja]
 * @param {Function} event.cancel
 *   [en]Call this function to cancel the change event.[/en]
 *   [ja]この関数を呼び出すと、アクティブなタブの変更がキャンセルされます。[/ja]
 */

/**
 * @ngdoc event
 * @name postchange
 * @description
 *   [en]Fires just after the tab is changed.[/en]
 *   [ja]アクティブなタブが変わった後に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Number} event.index
 *   [en]Current index.[/en]
 *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
 * @param {Object} event.tabItem
 *   [en]Tab item object.[/en]
 *   [ja]tabItemオブジェクト。[/ja]
 */

/**
 * @ngdoc event
 * @name reactive
 * @description
 *   [en]Fires if the already open tab is tapped again.[/en]
 *   [ja]すでにアクティブになっているタブがもう一度タップやクリックされた場合に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクト。[/ja]
 * @param {Number} event.index
 *   [en]Current index.[/en]
 *   [ja]現在アクティブになっているons-tabのインデックスを返します。[/ja]
 * @param {Object} event.tabItem
 *   [en]Tab item object.[/en]
 *   [ja]tabItemオブジェクト。[/ja]
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this tab bar.[/en]
 *   [ja]このタブバーを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name hide-tabs
 * @type {Boolean}
 * @default false
 * @description
 *   [en]Whether to hide the tabs. Valid values are true/false.[/en]
 *   [ja]タブを非表示にする場合に指定します。trueもしくはfalseを指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name animation
 * @type {String}
 * @default none
 * @description
 *   [en]Animation name. Preset values are "none" and "fade". Default is "none".[/en]
 *   [ja]ページ読み込み時のアニメーションを指定します。"none"もしくは"fade"を選択できます。デフォルトは"none"です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name position
 * @type {String}
 * @default bottom
 * @description
 *   [en]Tabbar's position. Preset values are "bottom" and "top". Default is "bottom".[/en]
 *   [ja]タブバーの位置を指定します。"bottom"もしくは"top"を選択できます。デフォルトは"bottom"です。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-reactive
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "reactive" event is fired.[/en]
 *  [ja]"reactive"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-prechange
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "prechange" event is fired.[/en]
 *  [ja]"prechange"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-postchange
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "postchange" event is fired.[/en]
 *  [ja]"postchange"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name ons-destroy
 * @type {Expression}
 * @description
 *  [en]Allows you to specify custom behavior when the "destroy" event is fired.[/en]
 *  [ja]"destroy"イベントが発火された時の挙動を独自に指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature setActiveTab(index, [options])
 * @param {Number} index
 *   [en]Tab index.[/en]
 *   [ja]タブのインデックスを指定します。[/ja]
 * @param {Object} [options]
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクト。[/ja]
 * @param {Boolean} [options.keepPage]
 *   [en]If true the page will not be changed.[/en]
 *   [ja]タブバーが現在表示しているpageを変えない場合にはtrueを指定します。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "fade" and "none".[/en]
 *   [ja]アニメーション名を指定します。"fade", "none"のいずれかを指定できます。[/ja]
 * @return {Boolean}
 *   [en]true if the change was successful.[/en]
 *   [ja]変更が成功した場合にtrueを返します。[/ja]
 * @description
 *   [en]Show specified tab page. Animations and other options can be specified by the second parameter.[/en]
 *   [ja]指定したインデックスのタブを表示します。アニメーションなどのオプションを指定できます。[/ja]
 */

/**
 * @ngdoc method
 * @signature getActiveTabIndex()
 * @return {Number}
 *   [en]The index of the currently active tab.[/en]
 *   [ja]現在アクティブになっているタブのインデックスを返します。[/ja]
 * @description
 *   [en]Returns tab index on current active tab. If active tab is not found, returns -1.[/en]
 *   [ja]現在アクティブになっているタブのインデックスを返します。現在アクティブなタブがない場合には-1を返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature loadPage(url)
 * @param {String} url
 *   [en]Page URL. Can be either an HTML document or an <code>&lt;ons-template&gt;</code>.[/en]
 *   [ja]pageのURLか、もしくは<code>&lt;ons-template&gt;</code>で宣言したid属性の値を利用できます。[/ja]
 * @description
 *   [en]Displays a new page without changing the active index.[/en]
 *   [ja]現在のアクティブなインデックスを変更せずに、新しいページを表示します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsTabbar', ['$onsen', '$compile', 'TabbarView', function ($onsen, $compile, TabbarView) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,
            scope: true,
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/tab_bar.tpl',
            link: function (scope, element, attrs, controller, transclude) {

                scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);
                scope.selectedTabItem = {source: ''};

                attrs.$observe('hideTabs', function (hide) {
                    var visible = hide !== 'true';
                    tabbarView.setTabbarVisibility(visible);
                });

                var tabbarView = new TabbarView(scope, element, attrs);
                $onsen.addModifierMethods(tabbarView, 'tab-bar--*', angular.element(element.children()[1]));
                $onsen.registerEventHandlers(tabbarView, 'reactive prechange postchange destroy');

                scope.tabbarId = tabbarView._tabbarId;

                element.data('ons-tabbar', tabbarView);
                $onsen.declareVarAttribute(attrs, tabbarView);

                transclude(scope, function (cloned) {
                    angular.element(element[0].querySelector('.ons-tabbar-inner')).append(cloned);
                });

                scope.$on('$destroy', function () {
                    tabbarView._events = undefined;
                    $onsen.removeModifierMethods(tabbarView);
                    element.data('ons-tabbar', undefined);
                });

                $onsen.fireComponentEvent(element[0], 'init');
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id template
 * @name ons-template
 * @category util
 * @description
 *   [en]Define a separate HTML fragment and use as a template.[/en]
 *   [ja]テンプレートとして使用するためのHTMLフラグメントを定義します。この要素でHTMLを宣言すると、id属性に指定した名前をpageのURLとしてons-navigatorなどのコンポーネントから参照できます。[/ja]
 * @guide DefiningMultiplePagesinSingleHTML
 *   [en]Defining multiple pages in single html[/en]
 *   [ja]複数のページを1つのHTMLに記述する[/ja]
 * @example
 * <ons-template id="foobar.html">
 *   ...
 * </ons-template>
 */
(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsTemplate', ['$onsen', '$templateCache', function ($onsen, $templateCache) {
        return {
            restrict: 'E',
            transclude: false,
            priority: 1000,
            terminal: true,
            compile: function (element) {
                $templateCache.put(element.attr('id'), element.remove().html());
                $onsen.fireComponentEvent(element[0], 'init');
            }
        };
    }]);
})();

/**
 * @ngdoc directive
 * @id toolbar
 * @name ons-toolbar
 * @category toolbar
 * @modifier transparent
 *   [en]Transparent toolbar[/en]
 *   [ja]透明な背景を持つツールバーを表示します。[/ja]
 * @modifier android
 *   [en]Android style toolbar. Title is left-aligned.[/en]
 *   [ja]Androidライクなツールバーを表示します。タイトルが左に寄ります。[/ja]
 * @description
 *   [en]Toolbar component that can be used with navigation. Left, center and right container can be specified by class names.[/en]
 *   [ja]ナビゲーションで使用するツールバー用コンポーネントです。クラス名により、左、中央、右のコンテナを指定できます。[/ja]
 * @codepen aHmGL
 * @guide Addingatoolbar [en]Adding a toolbar[/en][ja]ツールバーの追加[/ja]
 * @seealso ons-bottom-toolbar
 *   [en]ons-bottom-toolbar component[/en]
 *   [ja]ons-bottom-toolbarコンポーネント[/ja]
 * @seealso ons-back-button
 *   [en]ons-back-button component[/en]
 *   [ja]ons-back-buttonコンポーネント[/ja]
 * @seealso ons-toolbar-button
 *   [en]ons-toolbar-button component[/en]
 *   [ja]ons-toolbar-buttonコンポーネント[/ja]
 * @example
 * <ons-page>
 *   <ons-toolbar>
 *     <div class="left"><ons-back-button>Back</ons-back-button></div>
 *     <div class="center">Title</div>
 *     <div class="right">Label</div>
 *   </ons-toolbar>
 * </ons-page>
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *  [en]Variable name to refer this toolbar.[/en]
 *  [ja]このツールバーを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name inline
 * @description
 *   [en]Display the toolbar as an inline element.[/en]
 *   [ja]ツールバーをインラインに置きます。スクロール領域内にそのまま表示されます。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @description
 *   [en]The appearance of the toolbar.[/en]
 *   [ja]ツールバーの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name fixed-style
 * @description
 *   [en]
 *     By default the center element will be left-aligned on Android and center-aligned on iOS.
 *     Use this attribute to override this behavior so it's always displayed in the center.
 *   [/en]
 *   [ja]
 *     このコンポーネントは、Androidではタイトルを左寄せ、iOSでは中央配置します。
 *     この属性を使用すると、要素はAndroidとiOSともに中央配置となります。
 *   [/ja]
 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    function ensureLeftContainer(element, modifierTemplater) {
        var container = element[0].querySelector('.left');

        if (!container) {
            container = document.createElement('div');
            container.setAttribute('class', 'left');
            container.innerHTML = '&nbsp;';
        }

        if (container.innerHTML.trim() === '') {
            container.innerHTML = '&nbsp;';
        }

        angular.element(container)
            .addClass('navigation-bar__left')
            .addClass(modifierTemplater('navigation-bar--*__left'));

        return container;
    }

    function ensureCenterContainer(element, modifierTemplater) {
        var container = element[0].querySelector('.center');

        if (!container) {
            container = document.createElement('div');
            container.setAttribute('class', 'center');
        }

        if (container.innerHTML.trim() === '') {
            container.innerHTML = '&nbsp;';
        }

        angular.element(container)
            .addClass('navigation-bar__title navigation-bar__center')
            .addClass(modifierTemplater('navigation-bar--*__center'));

        return container;
    }

    function ensureRightContainer(element, modifierTemplater) {
        var container = element[0].querySelector('.right');

        if (!container) {
            container = document.createElement('div');
            container.setAttribute('class', 'right');
            container.innerHTML = '&nbsp;';
        }

        if (container.innerHTML.trim() === '') {
            container.innerHTML = '&nbsp;';
        }

        angular.element(container)
            .addClass('navigation-bar__right')
            .addClass(modifierTemplater('navigation-bar--*__right'));

        return container;
    }

    /**
     * @param {jqLite} element
     * @return {Boolean}
     */
    function hasCenterClassElementOnly(element) {
        var hasCenter = false;
        var hasOther = false;
        var child, children = element.contents();

        for (var i = 0; i < children.length; i++) {
            child = angular.element(children[i]);

            if (child.hasClass('center')) {
                hasCenter = true;
                continue;
            }

            if (child.hasClass('left') || child.hasClass('right')) {
                hasOther = true;
                continue;
            }

        }

        return hasCenter && !hasOther;
    }

    function ensureToolbarItemElements(element, modifierTemplater) {
        var center;
        if (hasCenterClassElementOnly(element)) {
            center = ensureCenterContainer(element, modifierTemplater);
            element.contents().remove();
            element.append(center);
        } else {
            center = ensureCenterContainer(element, modifierTemplater);
            var left = ensureLeftContainer(element, modifierTemplater);
            var right = ensureRightContainer(element, modifierTemplater);

            element.contents().remove();
            element.append(angular.element([left, center, right]));
        }
    }

    /**
     * Toolbar directive.
     */
    module.directive('onsToolbar', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',
            replace: false,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclde.
            scope: false,
            transclude: false,

            compile: function (element, attrs) {
                var shouldAppendAndroidModifier = ons.platform.isAndroid() && !element[0].hasAttribute('fixed-style');
                var modifierTemplater = $onsen.generateModifierTemplater(attrs, shouldAppendAndroidModifier ? ['android'] : []),
                    inline = typeof attrs.inline !== 'undefined';
                element.addClass('navigation-bar');
                element.addClass(modifierTemplater('navigation-bar--*'));

                if (!inline) {
                    element.css({
                        'position': 'absolute',
                        'z-index': '10000',
                        'left': '0px',
                        'right': '0px',
                        'top': '0px'
                    });
                }

                ensureToolbarItemElements(element, modifierTemplater);

                return {
                    pre: function (scope, element, attrs) {
                        var toolbar = new GenericView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, toolbar);


                        scope.$on('$destroy', function () {
                            toolbar._events = undefined;
                            $onsen.removeModifierMethods(toolbar);
                            element.data('ons-toolbar', undefined);
                            element = null;
                        });

                        $onsen.addModifierMethods(toolbar, 'navigation-bar--*', element);
                        angular.forEach(['left', 'center', 'right'], function (position) {
                            var el = element[0].querySelector('.navigation-bar__' + position);
                            if (el) {
                                $onsen.addModifierMethods(toolbar, 'navigation-bar--*__' + position, angular.element(el));
                            }
                        });

                        var pageView = element.inheritedData('ons-page');

                        if (pageView && !inline) {
                            pageView.registerToolbar(element);
                        }

                        element.data('ons-toolbar', toolbar);
                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();

/**
 * @ngdoc directive
 * @id toolbar_button
 * @name ons-toolbar-button
 * @category toolbar
 * @modifier outline
 *   [en]A button with an outline.[/en]
 *   [ja]アウトラインをもったボタンを表示します。[/ja]
 * @description
 *   [en]Button component for ons-toolbar and ons-bottom-toolbar.[/en]
 *   [ja]ons-toolbarあるいはons-bottom-toolbarに設置できるボタン用コンポーネントです。[/ja]
 * @codepen aHmGL
 * @guide Addingatoolbar
 *   [en]Adding a toolbar[/en]
 *   [ja]ツールバーの追加[/ja]
 * @seealso ons-toolbar
 *   [en]ons-toolbar component[/en]
 *   [ja]ons-toolbarコンポーネント[/ja]
 * @seealso ons-back-button
 *   [en]ons-back-button component[/en]
 *   [ja]ons-back-buttonコンポーネント[/ja]
 * @seealso ons-toolbar-button
 *   [en]ons-toolbar-button component[/en]
 *   [ja]ons-toolbar-buttonコンポーネント[/ja]
 * @example
 * <ons-toolbar>
 *   <div class="left"><ons-toolbar-button>Button</ons-toolbar-button></div>
 *   <div class="center">Title</div>
 *   <div class="right"><ons-toolbar-button><ons-icon icon="ion-navion" size="28px"></ons-icon></ons-toolbar-button></div>
 * </ons-toolbar>
 */

/**
 * @ngdoc attribute
 * @name var
 * @type {String}
 * @description
 *   [en]Variable name to refer this buttom.[/en]
 *   [ja]このボタンを参照するための名前を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name modifier
 * @type {String}
 * @description
 *   [en]The appearance of the button.[/en]
 *   [ja]ボタンの表現を指定します。[/ja]
 */

/**
 * @ngdoc attribute
 * @name disabled
 * @description
 *   [en]Specify if button should be disabled.[/en]
 *   [ja]ボタンを無効化する場合は指定してください。[/ja]
 */

(function () {
    'use strict';
    var module = angular.module('onsen');

    module.directive('onsToolbarButton', ['$onsen', 'GenericView', function ($onsen, GenericView) {
        return {
            restrict: 'E',
            transclude: true,
            scope: {},
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/toolbar_button.tpl',
            link: {
                pre: function (scope, element, attrs) {
                    var toolbarButton = new GenericView(scope, element, attrs),
                        innerElement = element[0].querySelector('.toolbar-button');

                    $onsen.declareVarAttribute(attrs, toolbarButton);

                    element.data('ons-toolbar-button', toolbarButton);

                    scope.$on('$destroy', function () {
                        toolbarButton._events = undefined;
                        $onsen.removeModifierMethods(toolbarButton);
                        element.data('ons-toolbar-button', undefined);
                        element = null;
                    });

                    var modifierTemplater = $onsen.generateModifierTemplater(attrs);

                    if (attrs.ngController) {
                        throw new Error('This element can\'t accept ng-controller directive.');
                    }

                    attrs.$observe('disabled', function (value) {
                        if (value === false || typeof value === 'undefined') {
                            innerElement.removeAttribute('disabled');
                        }
                        else {
                            innerElement.setAttribute('disabled', 'disabled');
                        }
                    });

                    scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);
                    $onsen.addModifierMethods(toolbarButton, 'toolbar-button--*', element.children());

                    element.children('span').addClass(modifierTemplater('toolbar-button--*'));

                    $onsen.cleaner.onDestroy(scope, function () {
                        $onsen.clearComponent({
                            scope: scope,
                            attrs: attrs,
                            element: element,
                        });
                        scope = element = attrs = null;
                    });
                },
                post: function (scope, element, attrs) {
                    $onsen.fireComponentEvent(element[0], 'init');
                }
            }
        };
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    var ComponentCleaner = {

        /**
         * @param {jqLite} element
         */
        decomposeNode: function (element) {
            var children = element.remove().children();
            for (var i = 0; i < children.length; i++) {
                ComponentCleaner.decomposeNode(angular.element(children[i]));
            }
        },

        /**
         * @param {Attributes} attrs
         */
        destroyAttributes: function (attrs) {
            attrs.$$element = null;
            attrs.$$observers = null;
        },

        /**
         * @param {jqLite} element
         */
        destroyElement: function (element) {
            element.remove();
        },

        /**
         * @param {Scope} scope
         */
        destroyScope: function (scope) {
            scope.$$listeners = {};
            scope.$$watchers = null;
            scope = null;
        },

        /**
         * @param {Scope} scope
         * @param {Function} fn
         */
        onDestroy: function (scope, fn) {
            var clear = scope.$on('$destroy', function () {
                clear();
                fn.apply(null, arguments);
            });
        }
    };

    module.factory('ComponentCleaner', function () {
        return ComponentCleaner;
    });

    // override builtin ng-(eventname) directives
    (function () {
        var ngEventDirectives = {};
        'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' ').forEach(
            function (name) {
                var directiveName = directiveNormalize('ng-' + name);
                ngEventDirectives[directiveName] = ['$parse', function ($parse) {
                    return {
                        compile: function ($element, attr) {
                            var fn = $parse(attr[directiveName]);
                            return function (scope, element, attr) {
                                var listener = function (event) {
                                    scope.$apply(function () {
                                        fn(scope, {$event: event});
                                    });
                                };
                                element.on(name, listener);

                                ComponentCleaner.onDestroy(scope, function () {
                                    element.off(name, listener);
                                    element = null;

                                    ComponentCleaner.destroyScope(scope);
                                    scope = null;

                                    ComponentCleaner.destroyAttributes(attr);
                                    attr = null;
                                });
                            };
                        }
                    };
                }];

                function directiveNormalize(name) {
                    return name.replace(/-([a-z])/g, function (matches) {
                        return matches[1].toUpperCase();
                    });
                }
            }
        );
        module.config(['$provide', function ($provide) {
            var shift = function ($delegate) {
                $delegate.shift();
                return $delegate;
            };
            Object.keys(ngEventDirectives).forEach(function (directiveName) {
                $provide.decorator(directiveName + 'Directive', ['$delegate', shift]);
            });
        }]);
        Object.keys(ngEventDirectives).forEach(function (directiveName) {
            module.directive(directiveName, ngEventDirectives[directiveName]);
        });
    })();
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var util = {
        init: function () {
            this.ready = false;
        },

        addBackButtonListener: function (fn) {
            if (this._ready) {
                window.document.addEventListener('backbutton', fn, false);
            } else {
                window.document.addEventListener('deviceready', function () {
                    window.document.addEventListener('backbutton', fn, false);
                });
            }
        },

        removeBackButtonListener: function (fn) {
            if (this._ready) {
                window.document.removeEventListener('backbutton', fn, false);
            } else {
                window.document.addEventListener('deviceready', function () {
                    window.document.removeEventListener('backbutton', fn, false);
                });
            }
        }
    };
    util.init();

    /**
     * Internal service class for framework implementation.
     */
    angular.module('onsen').service('DeviceBackButtonHandler', function () {

        this._init = function () {
            if (window.ons.isWebView()) {
                window.document.addEventListener('deviceready', function () {
                    util._ready = true;
                }, false);
            } else {
                util._ready = true;
            }

            this._bindedCallback = this._callback.bind(this);

            this.enable();
        };

        this._isEnabled = false;

        /**
         * Enable to handle 'backbutton' events.
         */
        this.enable = function () {
            if (!this._isEnabled) {
                util.addBackButtonListener(this._bindedCallback);
                this._isEnabled = true;
            }
        };

        /**
         * Disable to handle 'backbutton' events.
         */
        this.disable = function () {
            if (this._isEnabled) {
                util.removeBackButtonListener(this._bindedCallback);
                this._isEnabled = false;
            }
        };

        /**
         * Fire a 'backbutton' event manually.
         */
        this.fireDeviceBackButtonEvent = function () {
            var event = document.createEvent('Event');
            event.initEvent('backbutton', true, true);
            document.dispatchEvent(event);
        };

        this._callback = function () {
            this._dispatchDeviceBackButtonEvent();
        };

        /**
         * @param {jqLite} element
         * @param {Function} callback
         */
        this.create = function (element, callback) {
            if (!(element instanceof angular.element().constructor)) {
                throw new Error('element must be an instance of jqLite');
            }

            if (!(callback instanceof Function)) {
                throw new Error('callback must be an instance of Function');
            }

            var handler = {
                _callback: callback,
                _element: element,

                disable: function () {
                    this._element.data('device-backbutton-handler', null);
                },

                setListener: function (callback) {
                    this._callback = callback;
                },

                enable: function () {
                    this._element.data('device-backbutton-handler', this);
                },

                isEnabled: function () {
                    return this._element.data('device-backbutton-handler') === this;
                },

                destroy: function () {
                    this._element.data('device-backbutton-handler', null);
                    this._callback = this._element = null;
                }
            };

            handler.enable();

            return handler;
        };

        /**
         * @param {Object} event
         */
        this._dispatchDeviceBackButtonEvent = function (event) {
            var tree = this._captureTree();
            var element = this._findHandlerLeafElement(tree);

            //this._dumpTree(tree);
            //this._dumpParents(element);

            var handler = element.data('device-backbutton-handler');
            handler._callback(createEvent(element));

            function createEvent(element) {
                return {
                    _element: element,
                    callParentHandler: function () {
                        var parent = this._element.parent();
                        var hander = null;

                        while (parent[0]) {
                            handler = parent.data('device-backbutton-handler');
                            if (handler) {
                                return handler._callback(createEvent(parent));
                            }
                            parent = parent.parent();
                        }
                    }
                };
            }
        };

        this._dumpParents = function (element) {
            while (element[0]) {
                console.log(element[0].nodeName.toLowerCase() + '.' + element.attr('class'));
                element = element.parent();
            }
        };

        /**
         * @return {Object}
         */
        this._captureTree = function () {
            return createTree(angular.element(document.body));

            function createTree(element) {
                return {
                    element: element,
                    children: Array.prototype.concat.apply([], Array.prototype.map.call(element.children(), function (child) {
                        child = angular.element(child);

                        if (child[0].style.display === 'none') {
                            return [];
                        }

                        if (child.children().length === 0 && !child.data('device-backbutton-handler')) {
                            return [];
                        }

                        var result = createTree(child);

                        if (result.children.length === 0 && !child.data('device-backbutton-handler')) {
                            return [];
                        }

                        return [result];
                    }))
                };
            }
        };

        this._dumpTree = function (node) {
            _dump(node, 0);

            function _dump(node, level) {
                var pad = new Array(level + 1).join('  ');
                console.log(pad + node.element[0].nodeName.toLowerCase());
                node.children.forEach(function (node) {
                    _dump(node, level + 1);
                });
            }
        };

        /**
         * @param {Object} tree
         * @return {jqLite}
         */
        this._findHandlerLeafElement = function (tree) {
            return find(tree);

            function find(node) {
                if (node.children.length === 0) {
                    return node.element;
                }

                if (node.children.length === 1) {
                    return find(node.children[0]);
                }

                return node.children.map(function (childNode) {
                    return childNode.element;
                }).reduce(function (left, right) {
                    if (left === null) {
                        return right;
                    }

                    var leftZ = parseInt(window.getComputedStyle(left[0], '').zIndex, 10);
                    var rightZ = parseInt(window.getComputedStyle(right[0], '').zIndex, 10);

                    if (!isNaN(leftZ) && !isNaN(rightZ)) {
                        return leftZ > rightZ ? left : right;
                    }

                    throw new Error('Capturing backbutton-handler is failure.');
                }, null);
            }
        };

        this._init();
    });

})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    var module = angular.module('onsen');

    /**
     * Internal service class for framework implementation.
     */
    module.factory('$onsen', ['$rootScope', '$window', '$cacheFactory', '$document', '$templateCache', '$http', '$q', '$onsGlobal', 'ComponentCleaner', 'DeviceBackButtonHandler', function ($rootScope, $window, $cacheFactory, $document, $templateCache, $http, $q, $onsGlobal, ComponentCleaner, DeviceBackButtonHandler) {

        var unlockerDict = createUnlockerDict();
        var $onsen = createOnsenService();

        return $onsen;

        function createOnsenService() {
            return {
                //增加组件注册服务功能
                instances :[],
                pendings :{},
                /**
                 * 注册实例
                 * @param 需要注册的实例
                 * @param handler
                 * @return Function 返回移除该实例的函数
                 */
                componentRegister: function(instance, handle) {
                    if ( !handle ) return angular.noop;
                    var self = this;
                    instance.$$hyHandle = handle;
                    this.instances.push(instance);
                    resolveWhen();

                    return deregister;

                    /**
                     * 移除注册的实例
                     */
                    function deregister() {
                        var index = self.instances.indexOf(instance);
                        if (index !== -1) {
                            self.instances.splice(index, 1);
                        }
                    }

                    /**
                     * 处理掉当前挂起的handler
                     */
                    function resolveWhen() {
                        var dfd = self.pendings[handle];
                        if ( dfd ) {
                            dfd.forEach(function (promise) {
                                promise.resolve(instance);
                            });
                            delete self.pendings[handle];
                        }
                    }
                },
                /**
                 * 异步访问注册组件的实例
                 * 如果无效则创建promis，当实例注册后通知监听者
                 */
                componentWhen : function(handle) {
                    if ( handle && (handle !== "") ) {
                        var deferred = $q.defer();
                        var instance = this.componentGet(handle);

                        if ( instance )  {
                            deferred.resolve( instance );
                        } else {
                            if (this.pendings[handle] === undefined) {
                                this.pendings[handle] = [];
                            }
                            this.pendings[handle].push(deferred);
                        }

                        return deferred.promise;
                    }
                    return $q.reject("Invalid `hy-component-id` value.");
                },
                /**
                 * 获取一个注册实例
                 * @param 查询注册实例的handler
                 */
                componentGet: function(handle) {
                    if ( handle && (handle !== "")  ) return null;

                    var i, j, instance;
                    for(i = 0, j = this.instances.length; i < j; i++) {
                        instance = this.instances[i];
                        if(instance.$$hyHandle === handle) {
                            return instance;
                        }
                    }
                    return null;
                },


                DIRECTIVE_TEMPLATE_URL: 'templates',

                cleaner: ComponentCleaner,

                DeviceBackButtonHandler: DeviceBackButtonHandler,

                _defaultDeviceBackButtonHandler: DeviceBackButtonHandler.create(angular.element(document.body), function () {
                    navigator.app.exitApp();
                }),

                getDefaultDeviceBackButtonHandler: function () {
                    return this._defaultDeviceBackButtonHandler;
                },

                /**
                 * @return {Boolean}
                 */
                isEnabledAutoStatusBarFill: function () {
                    return !!$onsGlobal._config.autoStatusBarFill;
                },

                /**
                 * @param {HTMLElement} element
                 * @return {Boolean}
                 */
                shouldFillStatusBar: function (element) {
                    if (this.isEnabledAutoStatusBarFill() && this.isWebView() && this.isIOS7Above()) {
                        if (!(element instanceof HTMLElement)) {
                            throw new Error('element must be an instance of HTMLElement');
                        }
                        var debug = element.tagName === 'ONS-TABBAR' ? console.log.bind(console) : angular.noop;

                        for (; ;) {
                            if (element.hasAttribute('no-status-bar-fill')) {
                                return false;
                            }

                            element = element.parentNode;
                            debug(element);
                            if (!element || !element.hasAttribute) {
                                return true;
                            }
                        }
                    }
                    return false;
                },

                /**
                 * @param {Object} params
                 * @param {Scope} [params.scope]
                 * @param {jqLite} [params.element]
                 * @param {Array} [params.elements]
                 * @param {Attributes} [params.attrs]
                 */
                clearComponent: function (params) {
                    if (params.scope) {
                        ComponentCleaner.destroyScope(params.scope);
                    }

                    if (params.attrs) {
                        ComponentCleaner.destroyAttributes(params.attrs);
                    }

                    if (params.element) {
                        ComponentCleaner.destroyElement(params.element);
                    }

                    if (params.elements) {
                        params.elements.forEach(function (element) {
                            ComponentCleaner.destroyElement(element);
                        });
                    }
                },

                /**
                 * Find first ancestor of el with tagName
                 * or undefined if not found
                 *
                 * @param {jqLite} element
                 * @param {String} tagName
                 */
                upTo: function (el, tagName) {
                    tagName = tagName.toLowerCase();

                    do {
                        if (!el) {
                            return null;
                        }
                        el = el.parentNode;
                        if (el.tagName.toLowerCase() == tagName) {
                            return el;
                        }
                    } while (el.parentNode);

                    return null;
                },


                /**
                 * @param {Array} dependencies
                 * @param {Function} callback
                 */
                waitForVariables: function (dependencies, callback) {
                    unlockerDict.addCallback(dependencies, callback);
                },

                /**
                 * @param {jqLite} element
                 * @param {String} name
                 */
                findElementeObject: function (element, name) {
                    return element.inheritedData(name);
                },

                /**
                 * @param {String} page
                 * @return {Promise}
                 */
                getPageHTMLAsync: function (page) {
                    var cache = $templateCache.get(page);

                    if (cache) {
                        var deferred = $q.defer();

                        var html = typeof cache === 'string' ? cache : cache[1];
                        deferred.resolve(this.normalizePageHTML(html));

                        return deferred.promise;

                    } else {
                        return $http({
                            url: page,
                            method: 'GET'
                        }).then(function (response) {
                            var html = response.data;

                            return this.normalizePageHTML(html);
                        }.bind(this));
                    }
                },

                /**
                 * @param {String} html
                 * @return {String}
                 */
                normalizePageHTML: function (html) {
                    html = ('' + html).trim();

                    if (!html.match(/^<(ons-page|ons-navigator|ons-tabbar|ons-sliding-menu|ons-split-view)/)) {
                        html = '<ons-page>' + html + '</ons-page>';
                    }

                    return html;
                },

                /**
                 * Create modifier templater function. The modifier templater generate css classes binded modifier name.
                 *
                 * @param {Object} attrs
                 * @param {Array} [modifiers] an array of appendix modifier
                 * @return {Function}
                 */
                generateModifierTemplater: function (attrs, modifiers) {
                    var attrModifiers = attrs && typeof attrs.modifier === 'string' ? attrs.modifier.trim().split(/ +/) : [];
                    modifiers = angular.isArray(modifiers) ? attrModifiers.concat(modifiers) : attrModifiers;

                    /**
                     * @return {String} template eg. 'ons-button--*', 'ons-button--*__item'
                     * @return {String}
                     */
                    return function (template) {
                        return modifiers.map(function (modifier) {
                            return template.replace('*', modifier);
                        }).join(' ');
                    };
                },

                /**
                 * Add modifier methods to view object.
                 *
                 * @param {Object} view object
                 * @param {String} template
                 * @param {jqLite} element
                 */
                addModifierMethods: function (view, template, element) {
                    var _tr = function (modifier) {
                        return template.replace('*', modifier);
                    };

                    var fns = {
                        hasModifier: function (modifier) {
                            return element.hasClass(_tr(modifier));
                        },

                        removeModifier: function (modifier) {
                            element.removeClass(_tr(modifier));
                        },

                        addModifier: function (modifier) {
                            element.addClass(_tr(modifier));
                        },

                        setModifier: function (modifier) {
                            var classes = element.attr('class').split(/\s+/),
                                patt = template.replace('*', '.');

                            for (var i = 0; i < classes.length; i++) {
                                var cls = classes[i];

                                if (cls.match(patt)) {
                                    element.removeClass(cls);
                                }
                            }

                            element.addClass(_tr(modifier));
                        },

                        toggleModifier: function (modifier) {
                            var cls = _tr(modifier);
                            if (element.hasClass(cls)) {
                                element.removeClass(cls);
                            } else {
                                element.addClass(cls);
                            }
                        }
                    };

                    var append = function (oldFn, newFn) {
                        if (typeof oldFn !== 'undefined') {
                            return function () {
                                return oldFn.apply(null, arguments) || newFn.apply(null, arguments);
                            };
                        } else {
                            return newFn;
                        }
                    };

                    view.hasModifier = append(view.hasModifier, fns.hasModifier);
                    view.removeModifier = append(view.removeModifier, fns.removeModifier);
                    view.addModifier = append(view.addModifier, fns.addModifier);
                    view.setModifier = append(view.setModifier, fns.setModifier);
                    view.toggleModifier = append(view.toggleModifier, fns.toggleModifier);
                },

                /**
                 * Remove modifier methods.
                 *
                 * @param {Object} view object
                 */
                removeModifierMethods: function (view) {
                    view.hasModifier = view.removeModifier =
                        view.addModifier = view.setModifier =
                            view.toggleModifier = undefined;
                },

                /**
                 * Define a variable to JavaScript global scope and AngularJS scope as 'var' attribute name.
                 *
                 * @param {Object} attrs
                 * @param object
                 */
                declareVarAttribute: function (attrs, object) {
                    if (typeof attrs['var'] === 'string') {
                        var varName = attrs['var'];

                        this._defineVar(varName, object);
                        this.componentRegister(object,varName);
                        unlockerDict.unlockVarName(varName);
                    }
                },

                _registerEventHandler: function (component, eventName) {
                    var capitalizedEventName = eventName.charAt(0).toUpperCase() + eventName.slice(1);

                    component.on(eventName, function (event) {
                        $onsen.fireComponentEvent(component._element[0], eventName, event);

                        var handler = component._attrs['ons' + capitalizedEventName];
                        if (handler) {
                            component._scope.$eval(handler, {$event: event});
                            component._scope.$evalAsync();
                        }
                    });
                },

                /**
                 * Register event handlers for attributes.
                 *
                 * @param {Object} component
                 * @param {String} eventNames
                 */
                registerEventHandlers: function (component, eventNames) {
                    eventNames = eventNames.trim().split(/\s+/);

                    for (var i = 0, l = eventNames.length; i < l; i++) {
                        var eventName = eventNames[i];
                        this._registerEventHandler(component, eventName);
                    }
                },

                /**
                 * @return {Boolean}
                 */
                isAndroid: function () {
                    return !!window.navigator.userAgent.match(/android/i);
                },

                /**
                 * @return {Boolean}
                 */
                isIOS: function () {
                    return !!window.navigator.userAgent.match(/(ipad|iphone|ipod touch)/i);
                },

                /**
                 * @return {Boolean}
                 */
                isWebView: function () {
                    return window.ons.isWebView();
                },

                /**
                 * @return {Boolean}
                 */
                isIOS7Above: (function () {
                    var ua = window.navigator.userAgent;
                    var match = ua.match(/(iPad|iPhone|iPod touch);.*CPU.*OS (\d+)_(\d+)/i);

                    var result = match ? ((parseFloat(match[2] + '.' + match[3]) >= 7)
                    && (parseFloat(match[2] + '.' + match[3]) < 11)) : false;

                    return function () {
                        return result;
                    };
                })(),

                /**
                 * Fire a named event for a component. The view object, if it exists, is attached to event.component.
                 *
                 * @param {HTMLElement} [dom]
                 * @param {String} event name
                 */
                fireComponentEvent: function (dom, eventName, data) {
                    data = data || {};

                    var event = document.createEvent('HTMLEvents');

                    for (var key in data) {
                        if (data.hasOwnProperty(key)) {
                            event[key] = data[key];
                        }
                    }

                    event.component = dom ?
                        angular.element(dom).data(dom.nodeName.toLowerCase()) || null : null;
                    event.initEvent(dom.nodeName.toLowerCase() + ':' + eventName, true, true);

                    dom.dispatchEvent(event);
                },

                /**
                 * Define a variable to JavaScript global scope and AngularJS scope.
                 *
                 * Util.defineVar('foo', 'foo-value');
                 * // => window.foo and $scope.foo is now 'foo-value'
                 *
                 * Util.defineVar('foo.bar', 'foo-bar-value');
                 * // => window.foo.bar and $scope.foo.bar is now 'foo-bar-value'
                 *
                 * @param {String} name
                 * @param object
                 */
                _defineVar: function (name, object) {
                    var names = name.split(/\./);

                    function set(container, names, object) {
                        var name;
                        for (var i = 0; i < names.length - 1; i++) {
                            name = names[i];
                            if (container[name] === undefined || container[name] === null) {
                                container[name] = {};
                            }
                            container = container[name];
                        }

                        container[names[names.length - 1]] = object;
                        //添加变量定义init事件
                        if (container == window) {
                            var ev = document.createEvent('CustomEvent');
                            ev.initCustomEvent(names[names.length - 1] + "init", false, false, '');
                            document.dispatchEvent(ev);
                        }

                        if (container[names[names.length - 1]] !== object) {
                            throw new Error('Cannot set var="' + object._attrs.var + '" because it will overwrite a read-only variable.');
                        }
                    }

                    if (ons.componentBase) {
                        set(ons.componentBase, names, object);
                    }

                    set($rootScope, names, object);
                }
            };
        }

        function createUnlockerDict() {

            return {
                _unlockersDict: {},

                _unlockedVarDict: {},

                /**
                 * @param {String} name
                 * @param {Function} unlocker
                 */
                _addVarLock: function (name, unlocker) {
                    if (!(unlocker instanceof Function)) {
                        throw new Error('unlocker argument must be an instance of Function.');
                    }

                    if (this._unlockersDict[name]) {
                        this._unlockersDict[name].push(unlocker);
                    } else {
                        this._unlockersDict[name] = [unlocker];
                    }
                },

                /**
                 * @param {String} varName
                 */
                unlockVarName: function (varName) {
                    var unlockers = this._unlockersDict[varName];

                    if (unlockers) {
                        unlockers.forEach(function (unlock) {
                            unlock();
                        });
                    }
                    this._unlockedVarDict[varName] = true;
                },

                /**
                 * @param {Array} dependencies an array of var name
                 * @param {Function} callback
                 */
                addCallback: function (dependencies, callback) {
                    if (!(callback instanceof Function)) {
                        throw new Error('callback argument must be an instance of Function.');
                    }

                    var doorLock = new DoorLock();
                    var self = this;

                    dependencies.forEach(function (varName) {

                        if (!self._unlockedVarDict[varName]) {
                            // wait for variable declaration
                            var unlock = doorLock.lock();
                            self._addVarLock(varName, unlock);
                        }

                    });

                    if (doorLock.isLocked()) {
                        doorLock.waitUnlock(callback);
                    } else {
                        callback();
                    }
                }
            };
        }
    }]);
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */


/**
 * Minimal animation library for managing css transition on mobile browsers.
 */
window.animit = (function () {
    'use strict';

    /**
     * @param {HTMLElement} element
     */
    var Animit = function (element) {
        if (!(this instanceof Animit)) {
            return new Animit(element);
        }

        if (element instanceof HTMLElement) {
            this.elements = [element];
        } else if (Object.prototype.toString.call(element) === '[object Array]') {
            this.elements = element;
        } else {
            throw new Error('First argument must be an array or an instance of HTMLElement.');
        }

        this.transitionQueue = [];
        this.lastStyleAttributeDict = [];

        var self = this;
        this.elements.forEach(function (element, index) {
            if (!element.hasAttribute('data-animit-orig-style')) {
                self.lastStyleAttributeDict[index] = element.getAttribute('style');
                element.setAttribute('data-animit-orig-style', self.lastStyleAttributeDict[index] || '');
            } else {
                self.lastStyleAttributeDict[index] = element.getAttribute('data-animit-orig-style');
            }
        });
    };

    Animit.prototype = {

        /**
         * @property {Array}
         */
        transitionQueue: undefined,

        /**
         * @property {HTMLElement}
         */
        element: undefined,

        /**
         * Start animation sequence with passed animations.
         *
         * @param {Function} callback
         */
        play: function (callback) {
            if (typeof callback === 'function') {
                this.transitionQueue.push(function (done) {
                    callback();
                    done();
                });
            }

            this.startAnimation();

            return this;
        },

        /**
         * Queue transition animations or other function.
         *
         * e.g. animit(elt).queue({color: 'red'})
         * e.g. animit(elt).queue({color: 'red'}, {duration: 0.4})
         * e.g. animit(elt).queue({css: {color: 'red'}, duration: 0.2})
         *
         * @param {Object|Animit.Transition|Function} transition
         * @param {Object} [options]
         */
        queue: function (transition, options) {
            var queue = this.transitionQueue;

            if (transition && options) {
                options.css = transition;
                transition = new Animit.Transition(options);
            }

            if (!(transition instanceof Function || transition instanceof Animit.Transition)) {
                if (transition.css) {
                    transition = new Animit.Transition(transition);
                } else {
                    transition = new Animit.Transition({
                        css: transition
                    });
                }
            }

            if (transition instanceof Function) {
                queue.push(transition);
            } else if (transition instanceof Animit.Transition) {
                queue.push(transition.build());
            } else {
                throw new Error('Invalid arguments');
            }

            return this;
        },

        /**
         * Queue transition animations.
         *
         * @param {Float} seconds
         */
        wait: function (seconds) {
            var self = this;
            this.transitionQueue.push(function (done) {
                setTimeout(done, 1000 * seconds);
            });

            return this;
        },

        /**
         * Reset element's style.
         *
         * @param {Object} [options]
         * @param {Float} [options.duration]
         * @param {String} [options.timing]
         * @param {String} [options.transition]
         */
        resetStyle: function (options) {
            options = options || {};
            var self = this;

            if (options.transition && !options.duration) {
                throw new Error('"options.duration" is required when "options.transition" is enabled.');
            }

            if (options.transition || (options.duration && options.duration > 0)) {
                var transitionValue = options.transition || ('all ' + options.duration + 's ' + (options.timing || 'linear'));
                var transitionStyle = 'transition: ' + transitionValue + '; -' + Animit.prefix + '-transition: ' + transitionValue + ';';

                this.transitionQueue.push(function (done) {
                    var elements = this.elements;

                    // transition and style settings
                    elements.forEach(function (element, index) {
                        element.style[Animit.prefix + 'Transition'] = transitionValue;
                        element.style.transition = transitionValue;

                        var styleValue = (self.lastStyleAttributeDict[index] ? self.lastStyleAttributeDict[index] + '; ' : '') + transitionStyle;
                        element.setAttribute('style', styleValue);
                    });

                    // add "transitionend" event handler
                    var removeListeners = util.addOnTransitionEnd(elements[0], function () {
                        clearTimeout(timeoutId);
                        reset();
                        done();
                    });

                    // for fail safe.
                    var timeoutId = setTimeout(function () {
                        removeListeners();
                        reset();
                        done();
                    }, options.duration * 1000 * 1.4);
                });
            } else {
                this.transitionQueue.push(function (done) {
                    reset();
                    done();
                });
            }

            return this;

            function reset() {
                // Clear transition animation settings.
                self.elements.forEach(function (element, index) {
                    element.style[Animit.prefix + 'Transition'] = 'none';
                    element.style.transition = 'none';

                    if (self.lastStyleAttributeDict[index]) {
                        element.setAttribute('style', self.lastStyleAttributeDict[index]);
                    } else {
                        element.setAttribute('style', '');
                        element.removeAttribute('style');
                    }
                });
            }
        },

        /**
         * Start animation sequence.
         */
        startAnimation: function () {
            this._dequeueTransition();

            return this;
        },

        _dequeueTransition: function () {
            var transition = this.transitionQueue.shift();
            if (this._currentTransition) {
                throw new Error('Current transition exists.');
            }
            this._currentTransition = transition;
            var self = this;
            var called = false;

            var done = function () {
                if (!called) {
                    called = true;
                    self._currentTransition = undefined;
                    self._dequeueTransition();
                } else {
                    throw new Error('Invalid state: This callback is called twice.');
                }
            };

            if (transition) {
                transition.call(this, done);
            }
        }

    };

    Animit.cssPropertyDict = (function () {
        var styles = window.getComputedStyle(document.documentElement, '');
        var dict = {};
        var a = 'A'.charCodeAt(0);
        var z = 'z'.charCodeAt(0);

        for (var key in styles) {
            if (styles.hasOwnProperty(key)) {
                var char = key.charCodeAt(0);
                if (a <= key.charCodeAt(0) && z >= key.charCodeAt(0)) {
                    if (key !== 'cssText' && key !== 'parentText' && key !== 'length') {
                        dict[key] = true;
                    }
                }
            }
        }

        return dict;
    })();

    Animit.hasCssProperty = function (name) {
        return !!Animit.cssPropertyDict[name];
    };

    /**
     * Vendor prefix for css property.
     */
    Animit.prefix = (function () {
        var styles = window.getComputedStyle(document.documentElement, ''),
            pre = (Array.prototype.slice
                    .call(styles)
                    .join('')
                    .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
            )[1];
        return pre;
    })();

    /**
     * @param {Animit} arguments
     */
    Animit.runAll = function (/* arguments... */) {
        for (var i = 0; i < arguments.length; i++) {
            arguments[i].play();
        }
    };


    /**
     * @param {Object} options
     * @param {Float} [options.duration]
     * @param {String} [options.property]
     * @param {String} [options.timing]
     */
    Animit.Transition = function (options) {
        this.options = options || {};
        this.options.duration = this.options.duration || 0;
        this.options.timing = this.options.timing || 'linear';
        this.options.css = this.options.css || {};
        this.options.property = this.options.property || 'all';
    };

    Animit.Transition.prototype = {

        /**
         * @param {HTMLElement} element
         * @return {Function}
         */
        build: function () {

            if (Object.keys(this.options.css).length === 0) {
                throw new Error('options.css is required.');
            }

            var css = createActualCssProps(this.options.css);

            if (this.options.duration > 0) {
                var transitionValue = util.buildTransitionValue(this.options);
                var self = this;

                return function (callback) {
                    var elements = this.elements;
                    var timeout = self.options.duration * 1000 * 1.4;

                    var removeListeners = util.addOnTransitionEnd(elements[0], function () {
                        clearTimeout(timeoutId);
                        callback();
                    });

                    var timeoutId = setTimeout(function () {
                        removeListeners();
                        callback();
                    }, timeout);

                    elements.forEach(function (element, index) {
                        element.style[Animit.prefix + 'Transition'] = transitionValue;
                        element.style.transition = transitionValue;

                        Object.keys(css).forEach(function (name) {
                            element.style[name] = css[name];
                        });
                    });

                };
            }

            if (this.options.duration <= 0) {
                return function (callback) {
                    var elements = this.elements;

                    elements.forEach(function (element, index) {
                        element.style[Animit.prefix + 'Transition'] = 'none';
                        element.transition = 'none';

                        Object.keys(css).forEach(function (name) {
                            element.style[name] = css[name];
                        });
                    });

                    if (elements.length) {
                        elements[0].offsetHeight;
                    }

                    if (window.requestAnimationFrame) {
                        requestAnimationFrame(callback);
                    } else {
                        setTimeout(callback, 1000 / 30);
                    }
                };
            }

            function createActualCssProps(css) {
                var result = {};

                Object.keys(css).forEach(function (name) {
                    var value = css[name];
                    name = util.normalizeStyleName(name);
                    var prefixed = Animit.prefix + util.capitalize(name);

                    if (Animit.cssPropertyDict[name]) {
                        result[name] = value;
                    } else if (Animit.cssPropertyDict[prefixed]) {
                        result[prefixed] = value;
                    } else {
                        result[prefixed] = value;
                        result[name] = value;
                    }
                });

                return result;
            }

        }
    };

    var util = {
        /**
         * Normalize style property name.
         */
        normalizeStyleName: function (name) {
            name = name.replace(/-[a-zA-Z]/g, function (all) {
                return all.slice(1).toUpperCase();
            });

            return name.charAt(0).toLowerCase() + name.slice(1);
        },

        // capitalize string
        capitalize: function (str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        },

        /**
         * @param {Object} params
         * @param {String} params.property
         * @param {Float} params.duration
         * @param {String} params.timing
         */
        buildTransitionValue: function (params) {
            params.property = params.property || 'all';
            params.duration = params.duration || 0.4;
            params.timing = params.timing || 'linear';

            var props = params.property.split(/ +/);

            return props.map(function (prop) {
                return prop + ' ' + params.duration + 's ' + params.timing;
            }).join(', ');
        },

        /**
         * Add an event handler on "transitionend" event.
         */
        addOnTransitionEnd: function (element, callback) {
            if (!element) {
                return function () {
                };
            }

            var fn = function (event) {
                if (element == event.target) {
                    event.stopPropagation();
                    removeListeners();

                    callback();
                }
            };

            var removeListeners = function () {
                util._transitionEndEvents.forEach(function (eventName) {
                    element.removeEventListener(eventName, fn);
                });
            };

            util._transitionEndEvents.forEach(function (eventName) {
                element.addEventListener(eventName, fn, false);
            });

            return removeListeners;
        },

        _transitionEndEvents: (function () {
            if (Animit.prefix === 'webkit' || Animit.prefix === 'o' || Animit.prefix === 'moz' || Animit.prefix === 'ms') {
                return [Animit.prefix + 'TransitionEnd', 'transitionend'];
            }

            return ['transitionend'];
        })()

    };

    return Animit;
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

/**
 * @ngdoc object
 * @name ons.notification
 * @category dialog
 * @codepen Qwwxyp
 * @description
 *   [en]Utility methods to create different kinds of alert dialogs. There are three methods available: alert, confirm and prompt.[/en]
 *   [ja]いくつかの種類のアラートダイアログを作成するためのユーティリティメソッドを収めたオブジェクトです。[/ja]
 * @example
 * <script>
 *   ons.notification.alert({
 *     message: 'Hello, world!'
 *   });
 *
 *   ons.notification.confirm({
 *     message: 'Are you ready?'
 *     callback: function(answer) {
 *       // Do something here.
 *     }
 *   });
 *
 *   ons.notification.prompt({
 *     message: 'How old are you?',
 *     callback: function(age) {
 *       ons.notification.alert({
 *         message: 'You are ' + age + ' years old.'
 *       });
 *     });
 *   });
 * </script>
 */

/**
 * @ngdoc method
 * @signature alert(options)
 * @param {Object} options
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクトです。[/ja]
 * @param {String} [options.message]
 *   [en]Alert message.[/en]
 *   [ja]アラートダイアログに表示する文字列を指定します。[/ja]
 * @param {String} [options.messageHTML]
 *   [en]Alert message in HTML.[/en]
 *   [ja]アラートダイアログに表示するHTMLを指定します。[/ja]
 * @param {String} [options.buttonLabel]
 *   [en]Label for confirmation button. Default is "OK".[/en]
 *   [ja]確認ボタンのラベルを指定します。"OK"がデフォルトです。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "none", "fade" and "slide".[/en]
 *   [ja]アラートダイアログを表示する際のアニメーション名を指定します。"none", "fade", "slide"のいずれかを指定できます。[/ja]
 * @param {String} [options.title]
 *   [en]Dialog title. Default is "Alert".[/en]
 *   [ja]アラートダイアログの上部に表示するタイトルを指定します。"Alert"がデフォルトです。[/ja]
 * @param {String} [options.modifier]
 *   [en]Modifier for the dialog.[/en]
 *   [ja]アラートダイアログのmodifier属性の値を指定します。[/ja]
 * @param {Function} [options.callback]
 *   [en]Function that executes after dialog has been closed.[/en]
 *   [ja]アラートダイアログが閉じられた時に呼び出される関数オブジェクトを指定します。[/ja]
 * @description
 *   [en]
 *     Display an alert dialog to show the user a message.
 *     The content of the message can be either simple text or HTML.
 *     Must specify either message or messageHTML.
 *   [/en]
 *   [ja]
 *     ユーザーへメッセージを見せるためのアラートダイアログを表示します。
 *     表示するメッセージは、テキストかもしくはHTMLを指定できます。
 *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
 *   [/ja]
 */

/**
 * @ngdoc method
 * @signature confirm(options)
 * @param {Object} options
 *   [en]Parameter object.[/en]
 * @param {String} [options.message]
 *   [en]Confirmation question.[/en]
 *   [ja]確認ダイアログに表示するメッセージを指定します。[/ja]
 * @param {String} [options.messageHTML]
 *   [en]Dialog content in HTML.[/en]
 *   [ja]確認ダイアログに表示するHTMLを指定します。[/ja]
 * @param {Array} [options.buttonLabels]
 *   [en]Labels for the buttons. Default is ["Cancel", "OK"].[/en]
 *   [ja]ボタンのラベルの配列を指定します。["Cancel", "OK"]がデフォルトです。[/ja]
 * @param {Number} [options.primaryButtonIndex]
 *   [en]Index of primary button. Default is 1.[/en]
 *   [ja]プライマリボタンのインデックスを指定します。デフォルトは 1 です。[/ja]
 * @param {Boolean} [options.cancelable]
 *   [en]Whether the dialog is cancelable or not. Default is false.[/en]
 *   [ja]ダイアログがキャンセル可能かどうかを指定します。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "none", "fade" and "slide".[/en]
 *   [ja]アニメーション名を指定します。"none", "fade", "slide"のいずれかを指定します。[/ja]
 * @param {String} [options.title]
 *   [en]Dialog title. Default is "Confirm".[/en]
 *   [ja]ダイアログのタイトルを指定します。"Confirm"がデフォルトです。[/ja]
 * @param {String} [options.modifier]
 *   [en]Modifier for the dialog.[/en]
 *   [ja]ダイアログのmodifier属性の値を指定します。[/ja]
 * @param {Function} [options.callback]
 *   [en]
 *     Function that executes after the dialog has been closed.
 *     Argument for the function is the index of the button that was pressed or -1 if the dialog was canceled.
 *   [/en]
 *   [ja]
 *     ダイアログが閉じられた後に呼び出される関数オブジェクトを指定します。
 *     この関数の引数として、押されたボタンのインデックス値が渡されます。
 *     もしダイアログがキャンセルされた場合には-1が渡されます。
 *   [/ja]
 * @description
 *   [en]
 *     Display a dialog to ask the user for confirmation.
 *     The default button labels are "Cancel" and "OK" but they can be customized.
 *     Must specify either message or messageHTML.
 *   [/en]
 *   [ja]
 *     ユーザに確認を促すダイアログを表示します。
 *     デオルとのボタンラベルは、"Cancel"と"OK"ですが、これはこのメソッドの引数でカスタマイズできます。
 *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
 *   [/ja]
 */

/**
 * @ngdoc method
 * @signature prompt(options)
 * @param {Object} options
 *   [en]Parameter object.[/en]
 *   [ja]オプションを指定するオブジェクトです。[/ja]
 * @param {String} [options.message]
 *   [en]Prompt question.[/en]
 *   [ja]ダイアログに表示するメッセージを指定します。[/ja]
 * @param {String} [options.messageHTML]
 *   [en]Dialog content in HTML.[/en]
 *   [ja]ダイアログに表示するHTMLを指定します。[/ja]
 * @param {String} [options.buttonLabel]
 *   [en]Label for confirmation button. Default is "OK".[/en]
 *   [ja]確認ボタンのラベルを指定します。"OK"がデフォルトです。[/ja]
 * @param {Number} [options.primaryButtonIndex]
 *   [en]Index of primary button. Default is 1.[/en]
 *   [ja]プライマリボタンのインデックスを指定します。デフォルトは 1 です。[/ja]
 * @param {Boolean} [options.cancelable]
 *   [en]Whether the dialog is cancelable or not. Default is false.[/en]
 *   [ja]ダイアログがキャンセル可能かどうかを指定します。デフォルトは false です。[/ja]
 * @param {String} [options.animation]
 *   [en]Animation name. Available animations are "none", "fade" and "slide".[/en]
 *   [ja]アニメーション名を指定します。"none", "fade", "slide"のいずれかを指定します。[/ja]
 * @param {String} [options.title]
 *   [en]Dialog title. Default is "Alert".[/en]
 *   [ja]ダイアログのタイトルを指定します。デフォルトは "Alert" です。[/ja]
 * @param {String} [options.modifier]
 *   [en]Modifier for the dialog.[/en]
 *   [ja]ダイアログのmodifier属性の値を指定します。[/ja]
 * @param {Function} [options.callback]
 *   [en]
 *     Function that executes after the dialog has been closed.
 *     Argument for the function is the value of the input field or null if the dialog was canceled.
 *   [/en]
 *   [ja]
 *     ダイアログが閉じられた後に実行される関数オブジェクトを指定します。
 *     関数の引数として、インプット要素の中の値が渡されます。ダイアログがキャンセルされた場合には、nullが渡されます。
 *   [/ja]
 * @description
 *   [en]
 *     Display a dialog with a prompt to ask the user a question.
 *     Must specify either message or messageHTML.
 *   [/en]
 *   [ja]
 *     ユーザーに入力を促すダイアログを表示します。
 *     このメソッドの引数には、options.messageもしくはoptions.messageHTMLのどちらかを必ず指定する必要があります。
 *   [/ja]
 */

window.ons.notification = (function () {
    var createAlertDialog = function (title, message, buttonLabels, primaryButtonIndex, modifier, animation, callback, messageIsHTML, cancelable, promptDialog, autofocus, placeholder) {
        var dialogEl = angular.element('<ons-alert-dialog>'),
            titleEl = angular.element('<div>').addClass('alert-dialog-title').text(title),
            messageEl = angular.element('<div>').addClass('alert-dialog-content'),
            footerEl = angular.element('<div>').addClass('alert-dialog-footer'),
            inputEl;

        if (modifier) {
            dialogEl.attr('modifier', modifier);
        }

        dialogEl.attr('animation', animation);

        if (messageIsHTML) {
            messageEl.html(message);
        } else {
            messageEl.text(message);
        }

        dialogEl.append(titleEl).append(messageEl);

        if (promptDialog) {
            inputEl = angular.element('<input>')
                .addClass('text-input')
                .attr('placeholder', placeholder)
                .css({width: '100%', marginTop: '10px'});
            messageEl.append(inputEl);
        }

        dialogEl.append(footerEl);

        angular.element(document.body).append(dialogEl);

        ons.$compile(dialogEl)(dialogEl.injector().get('$rootScope'));
        var alertDialog = dialogEl.data('ons-alert-dialog');

        if (buttonLabels.length <= 2) {
            footerEl.addClass('alert-dialog-footer--one');
        }

        var createButton = function (i) {
            var buttonEl = angular.element('<button>').addClass('alert-dialog-button').text(buttonLabels[i]);

            if (i == primaryButtonIndex) {
                buttonEl.addClass('alert-dialog-button--primal');
            }

            if (buttonLabels.length <= 2) {
                buttonEl.addClass('alert-dialog-button--one');
            }

            buttonEl.on('click', function () {
                buttonEl.off('click');

                alertDialog.hide({
                    callback: function () {
                        if (promptDialog) {
                            callback(inputEl.val());
                        } else {
                            callback(i);
                        }
                        alertDialog.destroy();
                        alertDialog = inputEl = buttonEl = null;
                    }
                });
            });
            footerEl.append(buttonEl);
        };

        for (var i = 0; i < buttonLabels.length; i++) {
            createButton(i);
        }

        if (cancelable) {
            alertDialog.setCancelable(cancelable);
            alertDialog.on('cancel', function () {
                if (promptDialog) {
                    callback(null);
                } else {
                    callback(-1);
                }
                setTimeout(function () {
                    alertDialog.destroy();
                    alertDialog = null;
                    inputEl = null;
                });
            });
        }

        alertDialog.show({
            callback: function () {
                if (promptDialog && autofocus) {
                    inputEl[0].focus();
                }
            }
        });

        dialogEl = titleEl = messageEl = footerEl = null;
    };

    return {
        /**
         * @param {Object} options
         * @param {String} [options.message]
         * @param {String} [options.messageHTML]
         * @param {String} [options.buttonLabel]
         * @param {String} [options.animation]
         * @param {String} [options.title]
         * @param {String} [options.modifier]
         * @param {Function} [options.callback]
         */
        alert: function (options) {
            var defaults = {
                buttonLabel: 'OK',
                animation: 'default',
                title: 'Alert',
                callback: function () {
                }
            };

            options = angular.extend({}, defaults, options);
            if (!options.message && !options.messageHTML) {
                throw new Error('Alert dialog must contain a message.');
            }
            createAlertDialog(
                options.title,
                options.message || options.messageHTML,
                [options.buttonLabel],
                0,
                options.modifier,
                options.animation,
                options.callback,
                !options.message ? true : false,
                false, false, false
            );
        },

        /**
         * @param {Object} options
         * @param {String} [options.message]
         * @param {String} [options.messageHTML]
         * @param {Array} [options.buttonLabels]
         * @param {Number} [options.primaryButtonIndex]
         * @param {Boolean} [options.cancelable]
         * @param {String} [options.animation]
         * @param {String} [options.title]
         * @param {String} [options.modifier]
         * @param {Function} [options.callback]
         */
        confirm: function (options) {
            var defaults = {
                buttonLabels: ['Cancel', 'OK'],
                primaryButtonIndex: 1,
                animation: 'default',
                title: 'Confirm',
                callback: function () {
                },
                cancelable: false
            };

            options = angular.extend({}, defaults, options);
            if (!options.message && !options.messageHTML) {
                throw new Error('Confirm dialog must contain a message.');
            }

            createAlertDialog(
                options.title,
                options.message || options.messageHTML,
                options.buttonLabels,
                options.primaryButtonIndex,
                options.modifier,
                options.animation,
                options.callback,
                !options.message ? true : false,
                options.cancelable,
                false, false
            );
        },

        /**
         * @param {Object} options
         * @param {String} [options.message]
         * @param {String} [options.messageHTML]
         * @param {String} [options.buttonLabel]
         * @param {Boolean} [options.cancelable]
         * @param {String} [options.animation]
         * @param {String} [options.placeholder]
         * @param {String} [options.title]
         * @param {String} [options.modifier]
         * @param {Function} [options.callback]
         * @param {Boolean} [options.autofocus]
         */
        prompt: function (options) {
            var defaults = {
                buttonLabel: 'OK',
                animation: 'default',
                title: 'Alert',
                placeholder: '',
                callback: function () {
                },
                cancelable: false,
                autofocus: true,
            };

            options = angular.extend({}, defaults, options);
            if (!options.message && !options.messageHTML) {
                throw new Error('Prompt dialog must contain a message.');
            }

            createAlertDialog(
                options.title,
                options.message || options.messageHTML,
                [options.buttonLabel],
                0,
                options.modifier,
                options.animation,
                options.callback,
                !options.message ? true : false,
                options.cancelable,
                true,
                options.autofocus,
                options.placeholder
            );
        }
    };
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

/**
 * @ngdoc object
 * @name ons.orientation
 * @category util
 * @description
 *   [en]Utility methods for orientation detection.[/en]
 *   [ja]画面のオリエンテーション検知のためのユーティリティメソッドを収めているオブジェクトです。[/ja]
 */

/**
 * @ngdoc event
 * @name change
 * @description
 *   [en]Fired when the device orientation changes.[/en]
 *   [ja]デバイスのオリエンテーションが変化した際に発火します。[/ja]
 * @param {Object} event
 *   [en]Event object.[/en]
 *   [ja]イベントオブジェクトです。[/ja]
 * @param {Boolean} event.isPortrait
 *   [en]Will be true if the current orientation is portrait mode.[/en]
 *   [ja]現在のオリエンテーションがportraitの場合にtrueを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isPortrait()
 * @return {Boolean}
 *   [en]Will be true if the current orientation is portrait mode.[/en]
 *   [ja]オリエンテーションがportraitモードの場合にtrueになります。[/ja]
 * @description
 *   [en]Returns whether the current screen orientation is portrait or not.[/en]
 *   [ja]オリエンテーションがportraitモードかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature isLandscape()
 * @return {Boolean}
 *   [en]Will be true if the current orientation is landscape mode.[/en]
 *   [ja]オリエンテーションがlandscapeモードの場合にtrueになります。[/ja]
 * @description
 *   [en]Returns whether the current screen orientation is landscape or not.[/en]
 *   [ja]オリエンテーションがlandscapeモードかどうかを返します。[/ja]
 */

/**
 * @ngdoc method
 * @signature on(eventName, listener)
 * @description
 *   [en]Add an event listener.[/en]
 *   [ja]イベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]このイベントが発火された際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature once(eventName, listener)
 * @description
 *  [en]Add an event listener that's only triggered once.[/en]
 *  [ja]一度だけ呼び出されるイベントリスナーを追加します。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]イベントが発火した際に呼び出される関数オブジェクトを指定します。[/ja]
 */

/**
 * @ngdoc method
 * @signature off(eventName, [listener])
 * @description
 *  [en]Remove an event listener. If the listener is not specified all listeners for the event type will be removed.[/en]
 *  [ja]イベントリスナーを削除します。もしイベントリスナーを指定しなかった場合には、そのイベントに紐づく全てのイベントリスナーが削除されます。[/ja]
 * @param {String} eventName
 *   [en]Name of the event.[/en]
 *   [ja]イベント名を指定します。[/ja]
 * @param {Function} listener
 *   [en]Function to execute when the event is triggered.[/en]
 *   [ja]削除するイベントリスナーを指定します。[/ja]
 */

window.ons.orientation = (function () {
    return create()._init();

    function create() {
        var obj = {
            // actual implementation to detect if whether current screen is portrait or not
            _isPortrait: false,

            /**
             * @return {Boolean}
             */
            isPortrait: function () {
                return this._isPortrait();
            },

            /**
             * @return {Boolean}
             */
            isLandscape: function () {
                return !this.isPortrait();
            },

            _init: function () {
                document.addEventListener('DOMContentLoaded', this._onDOMContentLoaded.bind(this), false);

                if ('orientation' in window) {
                    window.addEventListener('orientationchange', this._onOrientationChange.bind(this), false);
                } else {
                    window.addEventListener('resize', this._onResize.bind(this), false);
                }

                this._isPortrait = function () {
                    return window.innerHeight > window.innerWidth;
                };

                return this;
            },

            _onDOMContentLoaded: function () {
                this._installIsPortraitImplementation();
                this.emit('change', {isPortrait: this.isPortrait()});
            },

            _installIsPortraitImplementation: function () {
                var isPortrait = window.innerWidth < window.innerHeight;

                if (!('orientation' in window)) {
                    this._isPortrait = function () {
                        return window.innerHeight > window.innerWidth;
                    };
                } else if (window.orientation % 180 === 0) {
                    this._isPortrait = function () {
                        return Math.abs(window.orientation % 180) === 0 ? isPortrait : !isPortrait;
                    };
                } else {
                    this._isPortrait = function () {
                        return Math.abs(window.orientation % 180) === 90 ? isPortrait : !isPortrait;
                    };
                }
            },

            _onOrientationChange: function () {
                var isPortrait = this._isPortrait();

                // Wait for the dimensions to change because
                // of Android inconsistency.
                var nIter = 0;
                var interval = setInterval(function () {
                    nIter++;

                    var w = window.innerWidth,
                        h = window.innerHeight;

                    if ((isPortrait && w <= h) ||
                        (!isPortrait && w >= h)) {
                        this.emit('change', {isPortrait: isPortrait});
                        clearInterval(interval);
                    }
                    else if (nIter === 50) {
                        this.emit('change', {isPortrait: isPortrait});
                        clearInterval(interval);
                    }
                }.bind(this), 20);
            },

            // Run on not mobile browser.
            _onResize: function () {
                this.emit('change', {isPortrait: this.isPortrait()});
            }
        };

        MicroEvent.mixin(obj);

        return obj;
    }
})();


/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

/**
 * @ngdoc object
 * @name ons.platform
 * @category util
 * @description
 *   [en]Utility methods to detect current platform.[/en]
 *   [ja]現在実行されているプラットフォームを検知するためのユーティリティメソッドを収めたオブジェクトです。[/ja]
 */

/**
 * @ngdoc method
 * @signature isWebView()
 * @description
 *   [en]Returns whether app is running in Cordova.[/en]
 *   [ja]Cordova内で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isIOS()
 * @description
 *   [en]Returns whether the OS is iOS.[/en]
 *   [ja]iOS上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isAndroid()
 * @description
 *   [en]Returns whether the OS is Android.[/en]
 *   [ja]Android上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isIPhone()
 * @description
 *   [en]Returns whether the device is iPhone.[/en]
 *   [ja]iPhone上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isIPad()
 * @description
 *   [en]Returns whether the device is iPad.[/en]
 *   [ja]iPad上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isBlackBerry()
 * @description
 *   [en]Returns whether the device is BlackBerry.[/en]
 *   [ja]BlackBerry上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isOpera()
 * @description
 *   [en]Returns whether the browser is Opera.[/en]
 *   [ja]Opera上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isFirefox()
 * @description
 *   [en]Returns whether the browser is Firefox.[/en]
 *   [ja]Firefox上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isSafari()
 * @description
 *   [en]Returns whether the browser is Safari.[/en]
 *   [ja]Safari上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isChrome()
 * @description
 *   [en]Returns whether the browser is Chrome.[/en]
 *   [ja]Chrome上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isIE()
 * @description
 *   [en]Returns whether the browser is Internet Explorer.[/en]
 *   [ja]Internet Explorer上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

/**
 * @ngdoc method
 * @signature isIOS7above()
 * @description
 *   [en]Returns whether the iOS version is 7 or above.[/en]
 *   [ja]iOS7以上で実行されているかどうかを返します。[/ja]
 * @return {Boolean}
 */

(function () {
    'use strict';
    window.ons.platform = {
        /**
         * @return {Boolean}
         */
        isWebView: function () {
            return ons.isWebView();
        },
        /**
         * @return {Boolean}
         */
        isIOS: function () {
            return /iPhone|iPad|iPod/i.test(navigator.userAgent);
        },
        /**
         * @return {Boolean}
         */
        isAndroid: function () {
            return /Android/i.test(navigator.userAgent);
        },
        /**
         * @return {Boolean}
         */
        isIPhone: function () {
            return /iPhone/i.test(navigator.userAgent);
        },
        /**
         * @return {Boolean}
         */
        isIPad: function () {
            return /iPad/i.test(navigator.userAgent);
        },
        /**
         * @return {Boolean}
         */
        isBlackBerry: function () {
            return /BlackBerry|RIM Tablet OS|BB10/i.test(navigator.userAgent);
        },
        /**
         * @return {Boolean}
         */
        isOpera: function () {
            return (!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0);
        },
        /**
         * @return {Boolean}
         */
        isFirefox: function () {
            return (typeof InstallTrigger !== 'undefined');
        },
        /**
         * @return {Boolean}
         */
        isSafari: function () {
            return (Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0);
        },
        /**
         * @return {Boolean}
         */
        isChrome: function () {
            return (!!window.chrome && !(!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0));
        },
        /**
         * @return {Boolean}
         */
        isIE: function () {
            return false || !!document.documentMode;
        },
        /**
         * @return {Boolean}
         */
        isIOS7above: function () {
            if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                var ver = (navigator.userAgent.match(/\b[0-9]+_[0-9]+(?:_[0-9]+)?\b/) || [''])[0].replace(/_/g, '.');
                return (parseInt(ver.split('.')[0]) >= 7);
            }
            return false;
        }
    };
})();


(function () {
    'use strict';

    // fastclick
    window.addEventListener('load', function () {
        FastClick.attach(document.body);
    }, false);

    // viewport.js
    new Viewport().setup();

    // modernize
    Modernizr.testStyles('#modernizr { -webkit-overflow-scrolling:touch }', function (elem, rule) {
        Modernizr.addTest(
            'overflowtouch',
            window.getComputedStyle && window.getComputedStyle(elem).getPropertyValue('-webkit-overflow-scrolling') == 'touch');
    });

    // confirm to use jqLite
    if (window.jQuery && angular.element === window.jQuery) {
        console.warn('Onsen UI require jqLite. Load jQuery after loading AngularJS to fix this error. jQuery may break Onsen UI behavior.');
    }
})();

/*
 Copyright 2013-2015 ASIAL CORPORATION

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */

(function () {
    'use strict';

    angular.module('onsen').run(['$templateCache', function ($templateCache) {
        var templates = window.document.querySelectorAll('script[type="text/ons-template"]');

        for (var i = 0; i < templates.length; i++) {
            var template = angular.element(templates[i]);
            var id = template.attr('id');
            if (typeof id === 'string') {
                $templateCache.put(id, template.text());
            }
        }
    }]);

})();

// ---- Angular Hammer ----

// Copyright (c) 2014 Ryan S Mullins <ryan@ryanmullins.org>
// Licensed under the MIT Software License

(function (window, angular, Hammer) {
  'use strict';

  // Checking to make sure Hammer and Angular are defined

  if (typeof angular === 'undefined') {
    if (typeof require !== 'undefined' && require) {
      try {
        angular = require('angular');
      } catch (e) {
        return console.log('ERROR: Angular Hammer could not require() a reference to angular');
      }
    } else if (typeof window.angular !== 'undefined') {
      angular = window.angular;
    } else {
      return console.log('ERROR: Angular Hammer could not find or require() a reference to angular');
    }
  }

  if (typeof Hammer === 'undefined') {
    if (typeof require !== 'undefined' && require) {
      try {
        Hammer = require('hammerjs');
      } catch (e) {
        return console.log('ERROR: Angular Hammer could not require() a reference to Hammer');
      }
    } else if (typeof window.Hammer !== 'undefined') {
      Hammer = window.Hammer;
    } else {
      return console.log('ERROR: Angular Hammer could not find or require() a reference to Hammer');
    }
  }

  /**
   * Mapping of the gesture event names with the Angular attribute directive
   * names. Follows the form: <directiveName>:<eventName>.
   *
   * @type {Array}
   */
  var gestureTypes = [
    'hmCustom:custom',
    'hmSwipe:swipe',
    'hmSwipeleft:swipeleft',
    'hmSwiperight:swiperight',
    'hmSwipeup:swipeup',
    'hmSwipedown:swipedown',
    'hmPan:pan',
    'hmPanstart:panstart',
    'hmPanmove:panmove',
    'hmPanend:panend',
    'hmPancancel:pancancel',
    'hmPanleft:panleft',
    'hmPanright:panright',
    'hmPanup:panup',
    'hmPandown:pandown',
    'hmPress:press',
    'hmPressup:pressup',
    'hmRotate:rotate',
    'hmRotatestart:rotatestart',
    'hmRotatemove:rotatemove',
    'hmRotateend:rotateend',
    'hmRotatecancel:rotatecancel',
    'hmPinch:pinch',
    'hmPinchstart:pinchstart',
    'hmPinchmove:pinchmove',
    'hmPinchend:pinchend',
    'hmPinchcancel:pinchcancel',
    'hmPinchin:pinchin',
    'hmPinchout:pinchout',
    'hmTap:tap',
    'hmDoubletap:doubletap'
  ];

  // ---- Module Definition ----

  /**
   * @module hmTouchEvents
   * @description Angular.js module for adding Hammer.js event listeners to HTML
   * elements using attribute directives
   * @requires angular
   * @requires hammer
   */
  angular.module('hmTouchEvents', []);

  /**
   * Iterates through each gesture type mapping and creates a directive for
   * each of the
   *
   * @param  {String} type Mapping in the form of <directiveName>:<eventName>
   * @return None
   */
  angular.forEach(gestureTypes, function (type) {
    var directive = type.split(':'),
        directiveName = directive[0],
        eventName = directive[1];

    angular.module('hmTouchEvents')
      .directive(directiveName, ['$parse', '$window', function ($parse, $window) {
        return {
          'restrict' : 'A',
          'link' : function (scope, element, attrs) {

            // Check for Hammer and required functionality
            // If no Hammer, maybe bind tap and doubletap to click and dblclick

            if (!Hammer || !$window.addEventListener) {
              if (directiveName === 'hmTap') {
                element.bind('click', handler);
              }

              if (directiveName === 'hmDoubletap') {
                element.bind('dblclick', handler);
              }

              return;
            }

            var hammer = element.data('hammer'),
                managerOpts = angular.fromJson(attrs.hmManagerOptions),
                recognizerOpts = angular.fromJson(attrs.hmRecognizerOptions);


            // Check for a manager, make one if needed and destroy it when
            // the scope is destroyed

            if (!hammer) {
              hammer = new Hammer.Manager(element[0], managerOpts);
              element.data('hammer', hammer);
              scope.$on('$destroy', function () {
                hammer.destroy();
              });
            }

            // Instantiate the handler

            var handlerName = attrs[directiveName],
                handlerExpr = $parse(handlerName),
                handler = function (event) {
                  var phase = scope.$root.$$phase,
                      recognizer = hammer.get(event.type);

                  event.element = element;

                  if (recognizer) {
                    if (recognizer.options.preventDefault) {
                      event.preventDefault();
                    }

                    if (recognizer.options.stopPropagation) {
                      event.srcEvent.stopPropagation();
                    }
                  }

                  if (phase === '$apply' || phase === '$digest') {
                    callHandler();
                  } else {
                    scope.$apply(callHandler);
                  }

                  function callHandler () {
                    var fn = handlerExpr(scope, {'$event':event});

                    if (fn) {
                      fn.call(scope, event);
                    }
                  }
                };

            // Setting up the recognizers based on the supplied options

            if (angular.isArray(recognizerOpts)) {
              // The recognizer options may be stored in an array. In this
              // case, Angular Hammer iterates through the array of options
              // trying to find an occurrence of the options.type in the event
              // name. If it find the type in the event name, it applies those
              // options to the recognizer for events with that name. If it
              // does not find the type in the event name it moves on.

              angular.forEach(recognizerOpts, function (options) {
                if (directiveName === 'hmCustom') {
                  eventName = options.event;
                } else {
                  if (!options.type) {
                    options.type = getRecognizerTypeFromeventName(eventName);
                  }

                  if (options.event) {
                    delete options.event;
                  }
                }

                if (directiveName === 'hmCustom' ||
                    eventName.indexOf(options.type) > -1) {
                  setupRecognizerWithOptions(
                    hammer,
                    applyManagerOptions(managerOpts, options),
                    element);
                }
              });
            } else if (angular.isObject(recognizerOpts)) {
              // Recognizer options may be stored as an object. In this case,
              // Angular Hammer checks to make sure that the options type
              // property is found in the event name. If the options are
              // designated for this general type of event, Angular Hammer
              // applies the options directly to the manager instance for
              // this element.

              if (directiveName === 'hmCustom') {
                eventName = recognizerOpts.event;
              } else {
                  if (!recognizerOpts.type) {
                    recognizerOpts.type = getRecognizerTypeFromeventName(eventName);
                  }

                  if (recognizerOpts.event) {
                    delete recognizerOpts.event;
                  }
              }

              if (directiveName === 'hmCustom' ||
                  eventName.indexOf(recognizerOpts.type) > -1) {
                setupRecognizerWithOptions(
                  hammer,
                  applyManagerOptions(managerOpts, recognizerOpts),
                  element);
              }
            } else if (directiveName !== 'hmCustom') {
              // If no options are supplied, or the supplied options do not
              // match any of the above conditions, Angular Hammer sets up
              // the default options that a manager instantiated using
              // Hammer() would have.

              recognizerOpts = {
                'type': getRecognizerTypeFromeventName(eventName)
              };

              if (directiveName === 'hmDoubletap') {
                recognizerOpts.event = eventName;
                recognizerOpts.taps = 2;

                if (hammer.get('tap')) {
                  recognizerOpts.recognizeWith = 'tap';
                }
              }

              if (recognizerOpts.type.indexOf('pan') > -1 &&
                  hammer.get('swipe')) {
                recognizerOpts.recognizeWith = 'swipe';
              }

              if (recognizerOpts.type.indexOf('pinch') > -1 &&
                  hammer.get('rotate')) {
                recognizerOpts.recognizeWith = 'rotate';
              }

              setupRecognizerWithOptions(
                hammer,
                applyManagerOptions(managerOpts, recognizerOpts),
                element);
            } else {
              eventName = null;
            }

            if (eventName) {
              hammer.on(eventName, handler);
            }
          }
        };
      }]);
  });

  // ---- Private Functions -----

  /**
   * Adds a gesture recognizer to a given manager. The type of recognizer to
   * add is determined by the value of the options.type property.
   *
   * @param {Object}  manager Hammer.js manager object assigned to an element
   * @param {Object}  options Options that define the recognizer to add
   * @return {Object} Reference to the new gesture recognizer, if successful,
   *                  null otherwise.
   */
  function addRecognizer (manager, options) {
    if (manager === undefined ||
        options === undefined ||
        options.type === undefined) {
      return null;
    }

    var recognizer;

    if (options.type.indexOf('pan') > -1) {
      recognizer = new Hammer.Pan(options);
    } else if (options.type.indexOf('pinch') > -1) {
      recognizer = new Hammer.Pinch(options);
    } else if (options.type.indexOf('press') > -1) {
      recognizer = new Hammer.Press(options);
    } else if (options.type.indexOf('rotate') > -1) {
      recognizer = new Hammer.Rotate(options);
    } else if (options.type.indexOf('swipe') > -1) {
      recognizer = new Hammer.Swipe(options);
    } else if (options.type === 'doubletap') {
      recognizer = new Hammer.Tap({event:options.type,taps:2});
    } else {
      recognizer = new Hammer.Tap(options);
    }

    manager.add(recognizer);
    return recognizer;
  }

  /**
   * Applies certain manager options to individual recognizer options.
   *
   * @param  {Object} managerOpts    Manager options
   * @param  {Object} recognizerOpts Recognizer options
   * @return None
   */
  function applyManagerOptions (managerOpts, recognizerOpts) {
    if (managerOpts) {
      recognizerOpts.preventGhosts = managerOpts.preventGhosts;
    }

    return recognizerOpts;
  }

  /**
   * Extracts the type of recognizer that should be instantiated from a given
   * event name. Used only when no recognizer options are provided.
   *
   * @param  {String} eventName Name to derive the recognizer type from
   * @return {string}           Type of recognizer that fires events with that name
   */
  function getRecognizerTypeFromeventName (eventName) {
    if (eventName.indexOf('pan') > -1) {
      return 'pan';
    } else if (eventName.indexOf('pinch') > -1) {
      return 'pinch';
    } else if (eventName.indexOf('press') > -1) {
      return 'press';
    } else if (eventName.indexOf('rotate') > -1) {
      return 'rotate';
    } else if (eventName.indexOf('swipe') > -1) {
      return 'swipe';
    } else {
      return 'tap';
    }
  }

  /**
   * Applies the passed options object to the appropriate gesture recognizer.
   * Recognizers are created if they do not already exist. See the README for a
   * description of the options object that can be passed to this function.
   *
   * @param  {Object} manager Hammer.js manager object assigned to an element
   * @param  {Object} options Options applied to a recognizer managed by manager
   * @return None
   */
  function setupRecognizerWithOptions (manager, options, element) {
    if (!manager || !options) { return; }

    var recognizer = manager.get(options.type);

    if (!recognizer) {
      recognizer = addRecognizer(manager, options);
    }

    if (!options.directions) {
      if (options.type === 'pan' || options.type === 'swipe') {
        options.directions = 'DIRECTION_ALL';
      } else if (options.type.indexOf('left') > -1) {
        options.directions = 'DIRECTION_LEFT';
      } else if (options.type.indexOf('right') > -1) {
        options.directions = 'DIRECTION_RIGHT';
      } else if (options.type.indexOf('up') > -1) {
        options.directions = 'DIRECTION_UP';
      } else if (options.type.indexOf('down') > -1) {
        options.directions = 'DIRECTION_DOWN';
      } else {
        options.directions = '';
      }
    }

    options.direction = parseDirections(options.directions);
    recognizer.set(options);

    if (typeof options.recognizeWith === 'string') {
      if (manager.get(options.recognizeWith) == null){
        addRecognizer(manager, {type:options.recognizeWith});
      }

      recognizer.recognizeWith(manager.get(options.recognizeWith));
    }

    if (typeof options.dropRecognizeWith  === 'string' &&
        manager.get(options.dropRecognizeWith) != null) {
      recognizer.dropRecognizeWith(manager.get(options.dropRecognizeWith));
    }

    if (typeof options.requireFailure  === 'string') {
      if (manager.get(options.requireFailure) == null){
        addRecognizer(manager, {type:options.requireFailure});
      }

      recognizer.requireFailure(manager.get(options.requireFailure));
    }

    if (typeof options.dropRequireFailure === 'string' &&
        manager.get(options.dropRequireFailure) != null) {
      recognizer.dropRequireFailure(manager.get(options.dropRequireFailure));
    }

    if (options.preventGhosts === true && element != null) {
      preventGhosts(element);
    }
  }

  /**
   * Parses the value of the directions property of any Angular Hammer options
   * object and converts them into the standard Hammer.js directions values.
   *
   * @param  {String} dirs Direction names separated by '|' characters
   * @return {Number}      Hammer.js direction value
   */
  function parseDirections (dirs) {
    var directions = 0;

    angular.forEach(dirs.split('|'), function (direction) {
      if (Hammer.hasOwnProperty(direction)) {
        directions = directions | Hammer[direction];
      }
    });

    return directions;
  }

  // ---- Preventing Ghost Clicks ----

  /**
   * Modified from: https://gist.github.com/jtangelder/361052976f044200ea17
   *
   * Prevent click events after a touchend.
   *
   * Inspired/copy-paste from this article of Google by Ryan Fioravanti
   * https://developers.google.com/mobile/articles/fast_buttons#ghost
   */

  function preventGhosts (element) {
    if (!element) { return; }

    var coordinates = [],
        threshold = 25,
        timeout = 2500;

    if ('ontouchstart' in window) {
      element[0].addEventListener('touchstart', resetCoordinates, true);
      element[0].addEventListener('touchend', registerCoordinates, true);
      element[0].addEventListener('click', preventGhostClick, true);
      element[0].addEventListener('mouseup', preventGhostClick, true);
    }

    /**
     * prevent clicks if they're in a registered XY region
     * @param {MouseEvent} ev
     */
    function preventGhostClick (ev) {
      for (var i = 0; i < coordinates.length; i++) {
        var x = coordinates[i][0];
        var y = coordinates[i][1];

        // within the range, so prevent the click
        if (Math.abs(ev.clientX - x) < threshold &&
            Math.abs(ev.clientY - y) < threshold) {
          ev.stopPropagation();
          ev.preventDefault();
          break;
        }
      }
    }

    /**
     * reset the coordinates array
     */
    function resetCoordinates () {
      coordinates = [];
    }

    /**
     * remove the first coordinates set from the array
     */
    function popCoordinates () {
      coordinates.splice(0, 1);
    }

    /**
     * if it is an final touchend, we want to register it's place
     * @param {TouchEvent} ev
     */
    function registerCoordinates (ev) {
      // touchend is triggered on every releasing finger
      // changed touches always contain the removed touches on a touchend
      // the touches object might contain these also at some browsers (firefox os)
      // so touches - changedTouches will be 0 or lower, like -1, on the final touchend
      if(ev.touches.length - ev.changedTouches.length <= 0) {
        var touch = ev.changedTouches[0];
        coordinates.push([touch.clientX, touch.clientY]);

        setTimeout(popCoordinates, timeout);
      }
    }
  }
})(window, window.angular, window.Hammer);

/**
 * Created by Administrator on 2016/2/23.
 */

(function(){
    'use strict';
    var m = angular.module('haiyiMobile', ['onsen','hmTouchEvents']);
})();

/**
 * @ngdoc object
 * @name hyMui
 * @category util
 * @description
 *   提供一个使用hyMobile组件及服务的入口全局变量
 */


/**
 * @ngdoc method
 * @signature bootstrap([moduleName, [dependencies],{Object}])
 * @description
 *   初始化hyMobile UI组件及服务，可以不使用Angularjs的ng-app属性来加载hyMobile的UI，
 *   参数均可以不填，默认模块名为myHyApp，模块自动注入hyMobile
 * @param {String} [moduleName]
 *   AngularJS的模块名
 * @param {Array} [dependencies]
 *   需要依赖注入的第三方模块
 * @param {Object} [attribute]
 *   启动应用时需要配置的属性值
 *   {
 *   mainUrl: 'main.html', 可选属性，  主界面地址URL
 *   mainNavi: 'mainNavi',  可选属性  index页面的导航对象名
 *   appUrl:''.         可选属性，连接后台的统一服务地址，appUrl和appId必须同时填写
 *   appId:'',          可选属性，应用的标识
 *   }
 * @return {Object}
 *   返回一个AngularJS模块对象
 */

/**
 * @ngdoc method
 * @signature launcherNavi([params])
 * @description
 *   初始化应用启动导航组件，使应用第一次启动时调用导航页面进行欢迎向导，不调用该方法则没有此效果，
 * @params {object} [attributes]
 *{
 * isShow: true,    应用启动时显示导航页面
 * images: images,  应用导航页面中展现的图片列表
 * imageSize: 3     应用导航页面中显示的图片数量
 * displayUrl: 'launcherNavi.html', 应用导航要显示页面的地址
 * buttonText: '进入应用',  导航最后一页显示的按钮文本
 * targetUrl: 'main.html',  导航后显示的目标页面URL
 * closeButton: true,   每一个导航页是否有关闭按钮
 * }
 *
 * @usage
 * 应用导航的默认图片地址存储在项目根目录img/launcherNavi文件夹下
 * 如果需要更改图片，可按照图片名直接替换即可，文件名编写规则为launcher_？.jpg;
 * ?代表数字，如果需要显示5个图片，还需要在初始化时填入imageSize：5这个属性，默认是3
 *
 * 如果需要自己指定图片，需要按照自构建images数字，格式为
 * [{
 *  src:'img/***.jpg',
 * }]
 * 并在初始化时设置images:images属性
 *
 */

/**
 * @ngdoc method
 * @signature initLogin([params])
 * @description
 *   初始化登录页面及服务组件，并配置参数内容
 * @params {object} [attributes]
 *{
 * loginService: 'loginService',    应用登录调用的服务名
 * loginMode: 2,  登录模式：1 用户名、密码、手机号、设备UUID登录，2 用户名、密码 登录，3 手机号、密码 登录，4 设备UUID、密码 登录
 * loginImplFn: undefined ,   登录的具体实现函数
 * launcherLogin: true,  默认应用启动显示登录界面，false则不进行登录验证
 * loginPage:{          //登录页面的具体属性配置
 *      loginPage: 'login.html', // 登录页面地址
 *      showBackBtn: false, // 是否显示回退按钮
 *      autoLogin: false,  // 是否自动登录
 *      userNameText: '用户名', // 用户名提示
 *      passWordText: '密码', // 密码提示
 *      validateCodeText: '验证码', // 验证码提示
 *      failLoginCount: 0,  // 登录失败次数，弹出登录验证码 （0表示登录必须显示验证码）
 *      validateCodeImg: null, // 验证码图片，变量接受 字符串、函数 （null表示不显示验证码）
 *      loginbgImg: 'img/login/login_bg.png', // 登录背景图片
 *      loginIcon: 'img/login/login_logo.png' // 登录图标
 *  }
 * }
 *
 */

/**
 * @ngdoc method
 * @signature launcherNaviShow()
 * @description
 *   主动显示应用介绍导航界面 *
 */

/**
 * @ngdoc method
 * @signature isLogin()
 * @description
 *   判断当前用户是否已经登录
 */

/**
 * @ngdoc method
 * @signature showLogin(targetUrl)
 * @description
 *   主动显示登录界面
 * @params {object} [attributes]
 * {
 * url: 'path/page.html',    登录成功后要跳转的页面URL地址
 * tabbar: 登录成功后需要处理的TABBAR变量名
 * tabitem: 登录成功后需要展示的TABBAR的子项TABITEM对象
 * callback: 登录成功后执行的回调函数
 * }
 */

/**
 * @ngdoc method
 * @signature login(targetUrl)
 * @description
 *   进行登录功能，如果有设置自动登录则进行自动登录处理，如果登录失败则显示登录界面进行登录
 * @params {object} [attributes]
 * {
 * url: 'path/page.html',    登录成功后要跳转的页面URL地址
 * options:{}，表示跳转url的传递参数
 * mode:登录页面的加载方法，值为push和replace，默认是push
 * tabbar: 登录成功后需要处理的TABBAR变量名
 * tabitem: 登录成功后需要展示的TABBAR的子项TABITEM对象
 * callback: 登录成功后执行的回调函数,
 *
 * }
 */

/**
 * @ngdoc method
 * @signature loginOff()
 * @description
 *   退出登录状态
 */


window.hyMui = (function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    var hyMui = createHyMui();
    initService();
    return hyMui;

    /**
     * 初始化框架服务
     */
    function initService() {
        module.run(['$hymui', '$appConfig', function ($hymui, $appConfig) {
            $appConfig.initAppAttribute(hyMui);
            hyMui._appConfig = $appConfig;

            hyMui._hyMuiService = $hymui;
            if (hyMui._launcherNaviConfig.show) {
                hyMui._hyMuiService.launcherNavi(hyMui._launcherNaviConfig.params);
            }
            if (hyMui._loginConfig.show) {
                hyMui._hyMuiService.initLogin(hyMui._loginConfig.params);
            }

        }]);
    }

    /**
     * 创建框架对象
     * @returns {Object}
     */
    function createHyMui() {
        var hymui = {
            _hyMuiService: null,
            _appConfig: null,
            _config: {
                mainUrl: 'main.html',
                mainNavi: 'mainNavi',
                appUrl: undefined,
                appId: undefined,
                moduleName: 'myHyApp',
                isNative:true,

            },
            _init: true,
            _naviInit: false,
            _onload: false,
            _mainNavi: null,
            _launcherNaviConfig: {show: false, params: {}},
            _loginConfig: {show: false, params: {}},
            /**
             * 启动框架，并初始化基础内容
             * @param name  可选，要创建的模块名
             * @param deps  可选, 需要注入的第三方模块
             * @param params    可选，启动框架时自定义的配置参数
             * @returns {*}
             */
            bootstrap: function (name, deps, params) {
                //如果name即不是字符串也不是数组，则代表name是传递过来的对象参数
                if (!angular.isString(name) && !angular.isArray(name)) {
                    params = name;
                    deps = undefined;
                    name = undefined;
                }
                //如果name是数组，则代表name是传递过来的依赖注入
                if (angular.isArray(name)) {
                    params = deps;
                    deps = name;
                    name = undefined;
                }
                //如果name是字符串，deps不是数组，则deps是传递过来的配置参数
                if (angular.isString(name) && !angular.isArray(deps)) {
                    params = deps;
                    deps = undefined;
                }

                if (!name) {
                    name = 'myHyApp';
                }
                var defaults = {
                    mainUrl: 'main.html',
                    mainNavi: 'mainNavi',
                    appUrl: undefined,
                    appId: undefined,
                    moduleName: 'myHyApp'
                };
                params = params || {};
                for (var def in defaults) {
                    if (typeof params[def] === 'undefined') {
                        params[def] = defaults[def];
                    }
                }
                this._config = params;
                this._config.moduleName = name;
                deps = ['haiyiMobile'].concat(angular.isArray(deps) ? deps : []);

                var self = this;
                window.addEventListener("load", function () {
                    self._onload = true;
                    if (self._onload && self._naviInit) {
                        if (self._init) {
                            self._init = false;
                            //获取Navigator的全局变量名
                            self._mainNavi = window[self._config.mainNavi];
                            if (!self._mainNavi) {
                                console.error('window can not find ' + self._config.mainNavi + ' attribute');
                                return;
                            }
                            //将AngularJS解析生成的导航对象赋给应用配置服务
                            self._appConfig.mainNavi = self._mainNavi;
                            parseHashChange(self._mainNavi);
                            //启动框架服务
                            self._hyMuiService.run(self._config.debug);
                        }
                    }
                });
                document.addEventListener(self._config.mainNavi + "init", function () {
                    self._naviInit = true;

                    if (self._onload && self._naviInit) {
                        if (self._init) {
                            self._init = false;
                            //获取Navigator的全局变量名
                            self._mainNavi = window[self._config.mainNavi];
                            if (!self._mainNavi) {
                                console.error('window can not find ' + self._config.mainNavi + ' attribute');
                                return;
                            }
                            //将AngularJS解析生成的导航对象赋给应用配置服务
                            self._appConfig.mainNavi = self._mainNavi;
                            parseHashChange(self._mainNavi);
                            //启动框架服务
                            self._hyMuiService.run(self._config.debug);
                        }
                    }

                }, false);

                /**
                 * 回退路由
                 * @param mainNavi
                 */
                function parseHashChange(mainNavi){
                    if(!window.navigator.userAgent.match(/MicroMessenger/i)){
                        return;
                    }
                    if(!mainNavi) return;
                    mainNavi.on('postpush', function(event) {
                       var pages = event.navigator.pages;
                       var pageName = event.enterPage.page;
                       var hash = {index:pages?pages.length:0,page:pageName};
                       window.location.hash = window.btoa(angular.toJson(hash));
                    });
                    mainNavi.on('postpop', function(event) {
                       var pages = event.navigator.pages;
                       var pageName = event.enterPage.page;
                       var hash = {index:pages?pages.length:0,page:pageName};
                       window.location.hash = window.btoa(angular.toJson(hash));
                    });

                    angular.element(window).on('hashchange', function(event){
                        var newPage = self._mainNavi.pages[self._mainNavi.pages.length-1].page;
                        var hash = getUrlHash(event.newURL);
                        var oldHash = getUrlHash(event.oldURL);
                        if(!hash || !oldHash) return;
                        var hashJson = angular.fromJson(window.atob(hash));
                        var oldHashJson = angular.fromJson(window.atob(oldHash));
                        if(newPage == hashJson.page) return;
                        if(oldHashJson.index>hashJson.index && self._mainNavi.pages.length>1){
                            self._mainNavi.popPage();
                        }else{
                            self._mainNavi.pushPage(hashJson.page);
                        }
                    });

                    function getUrlHash(url){
                        var parse_url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
                        var result = parse_url.exec(url);
                        return result[7];
                    }
                }
                return ons.bootstrap(name, deps);
            },
            /**
             * 配置启动导航方法
             * @param params
             */
            launcherNavi: function (params) {
                this._launcherNaviConfig.show = true;
                this._launcherNaviConfig.params = params;
            },
            /**
             * 主动显示动态导航页面
             */
            launcherNaviShow: function () {
                this._hyMuiService.launcherNaviShow(true);
            },
            /**
             * 配置登录验证组件
             * @param params
             */
            initLogin: function (params) {
                this._loginConfig.show = true;
                this._loginConfig.params = params;
            },
            /**
             * 是否登录
             */
            isLogin: function () {
                this._hyMuiService.isLogin();
            },
            /**
             * 主动显示登录界面
             */
            showLogin: function (targetUrl) {
                this._hyMuiService.showLogin(targetUrl);
            },
            /**
             * 进行登录
             */
            login: function (targetUrl) {
                this._hyMuiService.login(targetUrl);
            },
            loginOff: function () {
                this._hyMuiService.loginOff();
            },
            createDB: function (dbName, description, size) {
                if (window.sqlitePlugin) {
                    persistence.store.cordovasql.config(persistence, dbName, '1.0.0', description, size, 0, null);
                } else {
                    persistence.store.websql.config(persistence, dbName, description, size);
                }
            },
            alert: function (message,callback, title, buttonName) {
                message = message || ' ';
                buttonName = buttonName || '確定';
                title = title || '提示';
                callback = callback || function () {};
                if (navigator.notification && this._config.isNative) {
                    navigator.notification.alert(message, callback, title, buttonName);
                } else {
                    ons.notification.alert({
                        message: message,
                        title: title,
                        buttonLabel: buttonName,
                        callback: callback
                    });
                }

            },
            confirm: function (options) {
                function _callback(index){
                    options.callback(index-1);
                }
                if (navigator.notification && this._config.isNative) {
                    navigator.notification.confirm(options.message, _callback, options.title, options.buttonLabels);
                } else {
                    ons.notification.confirm(options);
                }
            },
            logger: function(){
                var _isDev = this._config.isDev;
                return{
                    info: function (messages) {
                        this._log('log', messages);
                    },
                    error: function (messages) {
                        this._log('error', messages);
                    },
                    _log: function (type, messages) {
                        if (_isDev) {
                            if (angular.isArray(messages)) {
                                messages.forEach(function (msg) {
                                    console[type](msg);
                                })
                            } else {
                                console[type](messages);
                            }
                        }
                    }
                };
            },
        };
        return hymui;
    }

})();

;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS;

}));


(function(){

if (typeof exports !== 'undefined') {
	exports.createPersistence = function() {
		return initPersistence({})
	}
	var singleton;
	if (typeof (exports.__defineGetter__) === 'function') {
	    exports.__defineGetter__("persistence", function () {
	        if (!singleton)
	            singleton = exports.createPersistence();
	        return singleton;
	    });
	} else {
	    Object.defineProperty(exports, "persistence", {
	        get: function () {
	            if (!singleton)
	                singleton = exports.createPersistence();
	            return singleton;
	        },
	        enumerable: true, configurable: true
	    });
	}

}
else {
	window = window || {};
	window.persistence = initPersistence(window.persistence || {});
}


function initPersistence(persistence) {
	if (persistence.isImmutable) // already initialized
		return persistence;

/**
 * Check for immutable fields
 */
persistence.isImmutable = function(fieldName) {
  return (fieldName == "id");
};

/**
 * Default implementation for entity-property
 */
persistence.defineProp = function(scope, field, setterCallback, getterCallback) {
    if (typeof (scope.__defineSetter__) === 'function' && typeof (scope.__defineGetter__) === 'function') {
        scope.__defineSetter__(field, function (value) {
            setterCallback(value);
        });
        scope.__defineGetter__(field, function () {
            return getterCallback();
        });
    } else {
        Object.defineProperty(scope, field, {
            get: getterCallback,
            set: function (value) {
                setterCallback(value);
            },
            enumerable: true, configurable: true
        });
    }
};

/**
 * Default implementation for entity-property setter
 */
persistence.set = function(scope, fieldName, value) {
    if (persistence.isImmutable(fieldName)) throw new Error("immutable field: "+fieldName);
    scope[fieldName] = value;
};

/**
 * Default implementation for entity-property getter
 */
persistence.get = function(arg1, arg2) {
  return (arguments.length == 1) ? arg1 : arg1[arg2];
};


(function () {
    var entityMeta = {};
    var entityClassCache = {};
    persistence.getEntityMeta = function() { return entityMeta; }

    // Per-session data
    persistence.trackedObjects = {};
    persistence.objectsToRemove = {};
    persistence.objectsRemoved = []; // {id: ..., type: ...}
    persistence.globalPropertyListeners = {}; // EntityType__prop -> QueryColleciton obj
    persistence.queryCollectionCache = {}; // entityName -> uniqueString -> QueryCollection

    persistence.getObjectsToRemove = function() { return this.objectsToRemove; };
    persistence.getTrackedObjects = function() { return this.trackedObjects; };

    // Public Extension hooks
    persistence.entityDecoratorHooks = [];
    persistence.flushHooks = [];
    persistence.schemaSyncHooks = [];

    // Enable debugging (display queries using console.log etc)
    persistence.debug = true;

    persistence.subscribeToGlobalPropertyListener = function(coll, entityName, property) {
      var key = entityName + '__' + property;
      if(key in this.globalPropertyListeners) {
        var listeners = this.globalPropertyListeners[key];
        for(var i = 0; i < listeners.length; i++) {
          if(listeners[i] === coll) {
            return;
          }
        }
        this.globalPropertyListeners[key].push(coll);
      } else {
        this.globalPropertyListeners[key] = [coll];
      }
    }

    persistence.unsubscribeFromGlobalPropertyListener = function(coll, entityName, property) {
      var key = entityName + '__' + property;
      var listeners = this.globalPropertyListeners[key];
      for(var i = 0; i < listeners.length; i++) {
        if(listeners[i] === coll) {
          listeners.splice(i, 1);
          return;
        }
      }
    }

    persistence.propertyChanged = function(obj, property, oldValue, newValue) {
      if(!this.trackedObjects[obj.id]) return; // not yet added, ignore for now

      var entityName = obj._type;
      var key = entityName + '__' + property;
      if(key in this.globalPropertyListeners) {
        var listeners = this.globalPropertyListeners[key];
        for(var i = 0; i < listeners.length; i++) {
          var coll = listeners[i];
          var dummyObj = obj._data;
          dummyObj[property] = oldValue;
          var matchedBefore = coll._filter.match(dummyObj);
          dummyObj[property] = newValue;
          var matchedAfter = coll._filter.match(dummyObj);
          if(matchedBefore != matchedAfter) {
            coll.triggerEvent('change', coll, obj);
          }
        }
      }
    }

    persistence.objectRemoved = function(obj) {
      var entityName = obj._type;
      if(this.queryCollectionCache[entityName]) {
        var colls = this.queryCollectionCache[entityName];
        for(var key in colls) {
          if(colls.hasOwnProperty(key)) {
            var coll = colls[key];
            if(coll._filter.match(obj)) { // matched the filter -> was part of collection
              coll.triggerEvent('change', coll, obj);
            }
          }
        }
      }
    }

    /**
     * Retrieves metadata about entity, mostly for internal use
     */
    function getMeta(entityName) {
      return entityMeta[entityName];
    }

    persistence.getMeta = getMeta;


    /**
     * A database session
     */
    function Session(conn) {
      this.trackedObjects = {};
      this.objectsToRemove = {};
      this.objectsRemoved = [];
      this.globalPropertyListeners = {}; // EntityType__prop -> QueryColleciton obj
      this.queryCollectionCache = {}; // entityName -> uniqueString -> QueryCollection
      this.conn = conn;
    }

    Session.prototype = persistence; // Inherit everything from the root persistence object

    persistence.Session = Session;

    /**
     * Define an entity
     *
     * @param entityName
     *            the name of the entity (also the table name in the database)
     * @param fields
     *            an object with property names as keys and SQLite types as
     *            values, e.g. {name: "TEXT", age: "INT"}
     * @return the entity's constructor
     */
    persistence.define = function (entityName, fields) {
      if (entityMeta[entityName]) { // Already defined, ignore
        return getEntity(entityName);
      }
      var meta = {
        name: entityName,
        fields: fields,
        isMixin: false,
        indexes: [],
        hasMany: {},
        hasOne: {}
      };
      entityMeta[entityName] = meta;
      return getEntity(entityName);
    };

    /**
     * Checks whether an entity exists
     *
     * @param entityName
     *            the name of the entity (also the table name in the database)
     * @return `true` if the entity exists, otherwise `false`
     */
    persistence.isDefined = function (entityName) {
        return !!entityMeta[entityName];
    }

    /**
     * Define a mixin
     *
     * @param mixinName
     *            the name of the mixin
     * @param fields
     *            an object with property names as keys and SQLite types as
     *            values, e.g. {name: "TEXT", age: "INT"}
     * @return the entity's constructor
     */
    persistence.defineMixin = function (mixinName, fields) {
      var Entity = this.define(mixinName, fields);
      Entity.meta.isMixin = true;
      return Entity;
    };

    persistence.isTransaction = function(obj) {
      return !obj || (obj && obj.executeSql);
    };

    persistence.isSession = function(obj) {
      return !obj || (obj && obj.schemaSync);
    };

    /**
     * Adds the object to tracked entities to be persisted
     *
     * @param obj
     *            the object to be tracked
     */
    persistence.add = function (obj) {
      if(!obj) return;
      if (!this.trackedObjects[obj.id]) {
        this.trackedObjects[obj.id] = obj;
        if(obj._new) {
          for(var p in obj._data) {
            if(obj._data.hasOwnProperty(p)) {
              this.propertyChanged(obj, p, undefined, obj._data[p]);
            }
          }
        }
      }
      return this;
    };

    /**
     * Marks the object to be removed (on next flush)
     * @param obj object to be removed
     */
    persistence.remove = function(obj) {
      if (obj._new) {
        delete this.trackedObjects[obj.id];
      } else {
        if (!this.objectsToRemove[obj.id]) {
          this.objectsToRemove[obj.id] = obj;
        }
        this.objectsRemoved.push({id: obj.id, entity: obj._type});
      }
      this.objectRemoved(obj);
      return this;
    };


    /**
     * Clean the persistence context of cached entities and such.
     */
    persistence.clean = function () {
      this.trackedObjects = {};
      this.objectsToRemove = {};
      this.objectsRemoved = [];
      this.globalPropertyListeners = {};
      this.queryCollectionCache = {};
    };

    /**
     * asynchronous sequential version of Array.prototype.forEach
     * @param array the array to iterate over
     * @param fn the function to apply to each item in the array, function
     *        has two argument, the first is the item value, the second a
     *        callback function
     * @param callback the function to call when the forEach has ended
     */
    persistence.asyncForEach = function(array, fn, callback) {
      array = array.slice(0); // Just to be sure
      function processOne() {
        var item = array.pop();
        fn(item, function(result, err) {
            if(array.length > 0) {
              processOne();
            } else {
              callback(result, err);
            }
          });
      }
      if(array.length > 0) {
        processOne();
      } else {
        callback();
      }
    };

    /**
     * asynchronous parallel version of Array.prototype.forEach
     * @param array the array to iterate over
     * @param fn the function to apply to each item in the array, function
     *        has two argument, the first is the item value, the second a
     *        callback function
     * @param callback the function to call when the forEach has ended
     */
    persistence.asyncParForEach = function(array, fn, callback) {
      var completed = 0;
      var arLength = array.length;
      if(arLength === 0) {
        callback();
      }
      for(var i = 0; i < arLength; i++) {
        fn(array[i], function(result, err) {
            completed++;
            if(completed === arLength) {
              callback(result, err);
            }
          });
      }
    };

    /**
     * Retrieves or creates an entity constructor function for a given
     * entity name
     * @return the entity constructor function to be invoked with `new fn()`
     */
    function getEntity(entityName) {
      if (entityClassCache[entityName]) {
        return entityClassCache[entityName];
      }
      var meta = entityMeta[entityName];

      /**
       * @constructor
       */
      function Entity (session, obj, noEvents) {
        var args = argspec.getArgs(arguments, [
            { name: "session", optional: true, check: persistence.isSession, defaultValue: persistence },
            { name: "obj", optional: true, check: function(obj) { return obj; }, defaultValue: {} }
          ]);
        if (meta.isMixin)
          throw new Error("Cannot instantiate mixin");
        session = args.session;
        obj = args.obj;

        var that = this;
        this.id = obj.id || persistence.createUUID();
        this._new = true;
        this._type = entityName;
        this._dirtyProperties = {};
        this._data = {};
        this._data_obj = {}; // references to objects
        this._session = session || persistence;
        this.subscribers = {}; // observable

        for ( var field in meta.fields) {
          (function () {
              if (meta.fields.hasOwnProperty(field)) {
                var f = field; // Javascript scopes/closures SUCK
                persistence.defineProp(that, f, function(val) {
                    // setterCallback
                    var oldValue = that._data[f];
                    if(oldValue !== val || (oldValue && val && oldValue.getTime && val.getTime)) { // Don't mark properties as dirty and trigger events unnecessarily
                      that._data[f] = val;
                      that._dirtyProperties[f] = oldValue;
                      that.triggerEvent('set', that, f, val);
                      that.triggerEvent('change', that, f, val);
                      session.propertyChanged(that, f, oldValue, val);
                    }
                  }, function() {
                    // getterCallback
                    return that._data[f];
                  });
                that._data[field] = defaultValue(meta.fields[field]);
              }
            }());
        }

        for ( var it in meta.hasOne) {
          if (meta.hasOne.hasOwnProperty(it)) {
            (function () {
                var ref = it;
                var mixinClass = meta.hasOne[it].type.meta.isMixin ? ref + '_class' : null;
                persistence.defineProp(that, ref, function(val) {
                    // setterCallback
                    var oldValue = that._data[ref];
                    var oldValueObj = that._data_obj[ref] || session.trackedObjects[that._data[ref]];
                    if (val == null) {
                      that._data[ref] = null;
                      that._data_obj[ref] = undefined;
                      if (mixinClass)
                        that[mixinClass] = '';
                    } else if (val.id) {
                      that._data[ref] = val.id;
                      that._data_obj[ref] = val;
                      if (mixinClass)
                        that[mixinClass] = val._type;
                      session.add(val);
                      session.add(that);
                    } else { // let's assume it's an id
                      that._data[ref] = val;
                    }
                    that._dirtyProperties[ref] = oldValue;
                    that.triggerEvent('set', that, ref, val);
                    that.triggerEvent('change', that, ref, val);
                    // Inverse
                    if(meta.hasOne[ref].inverseProperty) {
                      var newVal = that[ref];
                      if(newVal) {
                        var inverse = newVal[meta.hasOne[ref].inverseProperty];
                        if(inverse.list && inverse._filter) {
                          inverse.triggerEvent('change', that, ref, val);
                        }
                      }
                      if(oldValueObj) {
                        var inverse = oldValueObj[meta.hasOne[ref].inverseProperty];
                        if(inverse.list && inverse._filter) {
                          inverse.triggerEvent('change', that, ref, val);
                        }
                      }
                    }
                  }, function() {
                    // getterCallback
                    if (!that._data[ref]) {
                      return null;
                    } else if(that._data_obj[ref] !== undefined) {
                      return that._data_obj[ref];
                    } else if(that._data[ref] && session.trackedObjects[that._data[ref]]) {
                      that._data_obj[ref] = session.trackedObjects[that._data[ref]];
                      return that._data_obj[ref];
                    } else {
                      throw new Error("Property '" + ref + "' of '" + meta.name + "' with id: " + that._data[ref] + " not fetched, either prefetch it or fetch it manually.");
                    }
                  });
              }());
          }
        }

        for ( var it in meta.hasMany) {
          if (meta.hasMany.hasOwnProperty(it)) {
            (function () {
                var coll = it;
                if (meta.hasMany[coll].manyToMany) {
                  persistence.defineProp(that, coll, function(val) {
                      // setterCallback
                      if(val && val._items) {
                        // Local query collection, just add each item
                        // TODO: this is technically not correct, should clear out existing items too
                        var items = val._items;
                        for(var i = 0; i < items.length; i++) {
                          persistence.get(that, coll).add(items[i]);
                        }
                      } else {
                        throw new Error("Not yet supported.");
                      }
                    }, function() {
                      // getterCallback
                      if (that._data[coll]) {
                        return that._data[coll];
                      } else {
                        var rel = meta.hasMany[coll];
                        var inverseMeta = rel.type.meta;
                        var inv = inverseMeta.hasMany[rel.inverseProperty];
                        var direct = rel.mixin ? rel.mixin.meta.name : meta.name;
                        var inverse = inv.mixin ? inv.mixin.meta.name : inverseMeta.name;

                        var queryColl = new persistence.ManyToManyDbQueryCollection(session, inverseMeta.name);
                        queryColl.initManyToMany(that, coll);
                        queryColl._manyToManyFetch = {
                            table: rel.tableName,
                            prop: direct + '_' + coll,
                            inverseProp: inverse + '_' + rel.inverseProperty,
                            id: that.id
                          };
                        that._data[coll] = queryColl;
                        return session.uniqueQueryCollection(queryColl);
                      }
                    });
                } else { // one to many
                  persistence.defineProp(that, coll, function(val) {
                      // setterCallback
                      if(val && val._items) {
                        // Local query collection, just add each item
                        // TODO: this is technically not correct, should clear out existing items too
                        var items = val._items;
                        for(var i = 0; i < items.length; i++) {
                          persistence.get(that, coll).add(items[i]);
                        }
                      } else {
                        throw new Error("Not yet supported.");
                      }
                    }, function() {
                      // getterCallback
                      if (that._data[coll]) {
                        return that._data[coll];
                      } else {
                        var queryColl = session.uniqueQueryCollection(new persistence.DbQueryCollection(session, meta.hasMany[coll].type.meta.name).filter(meta.hasMany[coll].inverseProperty, '=', that));
                        that._data[coll] = queryColl;
                        return queryColl;
                      }
                    });
                }
              }());
          }
        }

        if(this.initialize) {
          this.initialize();
        }

        for ( var f in obj) {
          if (obj.hasOwnProperty(f)) {
            if(f !== 'id') {
              persistence.set(that, f, obj[f]);
            }
          }
        }
      } // Entity

      Entity.prototype = new Observable();

      Entity.meta = meta;

      Entity.prototype.equals = function(other) {
        return this.id == other.id;
      };

      Entity.prototype.toJSON = function() {
        var json = {id: this.id};
        for(var p in this._data) {
          if(this._data.hasOwnProperty(p)) {
            if (typeof this._data[p] == "object" && this._data[p] != null) {
              if (this._data[p].toJSON != undefined) {
                json[p] = this._data[p].toJSON();
              }
            } else {
              json[p] = this._data[p];
            }
          }
        }
        return json;
      };


      /**
       * Select a subset of data as a JSON structure (Javascript object)
       *
       * A property specification is passed that selects the
       * properties to be part of the resulting JSON object. Examples:
       *    ['id', 'name'] -> Will return an object with the id and name property of this entity
       *    ['*'] -> Will return an object with all the properties of this entity, not recursive
       *    ['project.name'] -> will return an object with a project property which has a name
       *                        property containing the project name (hasOne relationship)
       *    ['project.[id, name]'] -> will return an object with a project property which has an
       *                              id and name property containing the project name
       *                              (hasOne relationship)
       *    ['tags.name'] -> will return an object with an array `tags` property containing
       *                     objects each with a single property: name
       *
       * @param tx database transaction to use, leave out to start a new one
       * @param props a property specification
       * @param callback(result)
       */
      Entity.prototype.selectJSON = function(tx, props, callback) {
        var that = this;
        var args = argspec.getArgs(arguments, [
            { name: "tx", optional: true, check: persistence.isTransaction, defaultValue: null },
            { name: "props", optional: false },
            { name: "callback", optional: false }
          ]);
        tx = args.tx;
        props = args.props;
        callback = args.callback;

        if(!tx) {
          this._session.transaction(function(tx) {
              that.selectJSON(tx, props, callback);
            });
          return;
        }
        var includeProperties = {};
        props.forEach(function(prop) {
            var current = includeProperties;
            var parts = prop.split('.');
            for(var i = 0; i < parts.length; i++) {
              var part = parts[i];
              if(i === parts.length-1) {
                if(part === '*') {
                  current.id = true;
                  for(var p in meta.fields) {
                    if(meta.fields.hasOwnProperty(p)) {
                      current[p] = true;
                    }
                  }
                  for(var p in meta.hasOne) {
                    if(meta.hasOne.hasOwnProperty(p)) {
                      current[p] = true;
                    }
                  }
                  for(var p in meta.hasMany) {
                    if(meta.hasMany.hasOwnProperty(p)) {
                      current[p] = true;
                    }
                  }
                } else if(part[0] === '[') {
                  part = part.substring(1, part.length-1);
                  var propList = part.split(/,\s*/);
                  propList.forEach(function(prop) {
                      current[prop] = true;
                    });
                } else {
                  current[part] = true;
                }
              } else {
                current[part] = current[part] || {};
                current = current[part];
              }
            }
          });
        buildJSON(this, tx, includeProperties, callback);
      };

      function buildJSON(that, tx, includeProperties, callback) {
        var session = that._session;
        var properties = [];
        var meta = getMeta(that._type);
        var fieldSpec = meta.fields;

        for(var p in includeProperties) {
          if(includeProperties.hasOwnProperty(p)) {
            properties.push(p);
          }
        }

        var cheapProperties = [];
        var expensiveProperties = [];

        properties.forEach(function(p) {
            if(includeProperties[p] === true && !meta.hasMany[p]) { // simple, loaded field
              cheapProperties.push(p);
            } else {
              expensiveProperties.push(p);
            }
          });

        var itemData = that._data;
        var item = {};

        cheapProperties.forEach(function(p) {
            if(p === 'id') {
              item.id = that.id;
            } else if(meta.hasOne[p]) {
              item[p] = itemData[p] ? {id: itemData[p]} : null;
            } else {
              item[p] = persistence.entityValToJson(itemData[p], fieldSpec[p]);
            }
          });
        properties = expensiveProperties.slice();

        persistence.asyncForEach(properties, function(p, callback) {
          if(meta.hasOne[p]) {
            that.fetch(tx, p, function(obj) {
                if(obj) {
                  buildJSON(obj, tx, includeProperties[p], function(result) {
                      item[p] = result;
                      callback();
                    });
                } else {
                  item[p] = null;
                  callback();
                }
              });
          } else if(meta.hasMany[p]) {
            persistence.get(that, p).list(function(objs) {
                item[p] = [];
                persistence.asyncForEach(objs, function(obj, callback) {
                    var obj = objs.pop();
                    if(includeProperties[p] === true) {
                      item[p].push({id: obj.id});
                      callback();
                    } else {
                      buildJSON(obj, tx, includeProperties[p], function(result) {
                          item[p].push(result);
                          callback();
                        });
                    }
                  }, callback);
              });
          }
        }, function() {
          callback(item);
        });
      }; // End of buildJson

      Entity.prototype.fetch = function(tx, rel, callback) {
        var args = argspec.getArgs(arguments, [
            { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
            { name: 'rel', optional: false, check: argspec.hasType('string') },
            { name: 'callback', optional: false, check: argspec.isCallback() }
          ]);
        tx = args.tx;
        rel = args.rel;
        callback = args.callback;

        var that = this;
        var session = this._session;

        if(!tx) {
          session.transaction(function(tx) {
              that.fetch(tx, rel, callback);
            });
          return;
        }
        if(!this._data[rel]) { // null
          if(callback) {
            callback(null);
          }
        } else if(this._data_obj[rel]) { // already loaded
          if(callback) {
            callback(this._data_obj[rel]);
          }
        } else {
          var type = meta.hasOne[rel].type;
          if (type.meta.isMixin) {
            type = getEntity(this._data[rel + '_class']);
          }
          type.load(session, tx, this._data[rel], function(obj) {
              that._data_obj[rel] = obj;
              if(callback) {
                callback(obj);
              }
            });
        }
      };

      /**
       * Currently this is only required when changing JSON properties
       */
      Entity.prototype.markDirty = function(prop) {
        this._dirtyProperties[prop] = true;
      };

      /**
       * Returns a QueryCollection implementation matching all instances
       * of this entity in the database
       */
      Entity.all = function(session) {
        var args = argspec.getArgs(arguments, [
            { name: 'session', optional: true, check: persistence.isSession, defaultValue: persistence }
          ]);
        session = args.session;
        return session.uniqueQueryCollection(new AllDbQueryCollection(session, entityName));
      };

      Entity.fromSelectJSON = function(session, tx, jsonObj, callback) {
        var args = argspec.getArgs(arguments, [
            { name: 'session', optional: true, check: persistence.isSession, defaultValue: persistence },
            { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
            { name: 'jsonObj', optional: false },
            { name: 'callback', optional: false, check: argspec.isCallback() }
          ]);
        session = args.session;
        tx = args.tx;
        jsonObj = args.jsonObj;
        callback = args.callback;

        if(!tx) {
          session.transaction(function(tx) {
              Entity.fromSelectJSON(session, tx, jsonObj, callback);
            });
          return;
        }

        if(typeof jsonObj === 'string') {
          jsonObj = JSON.parse(jsonObj);
        }

        if(!jsonObj) {
          callback(null);
          return;
        }

        function loadedObj(obj) {
          if(!obj) {
            obj = new Entity(session);
            if(jsonObj.id) {
              obj.id = jsonObj.id;
            }
          }
          session.add(obj);
          var expensiveProperties = [];
          for(var p in jsonObj) {
            if(jsonObj.hasOwnProperty(p)) {
              if(p === 'id') {
                continue;
              } else if(meta.fields[p]) { // regular field
                persistence.set(obj, p, persistence.jsonToEntityVal(jsonObj[p], meta.fields[p]));
              } else if(meta.hasOne[p] || meta.hasMany[p]){
                expensiveProperties.push(p);
              }
            }
          }
          persistence.asyncForEach(expensiveProperties, function(p, callback) {
              if(meta.hasOne[p]) {
                meta.hasOne[p].type.fromSelectJSON(session, tx, jsonObj[p], function(result) {
                    persistence.set(obj, p, result);
                    callback();
                  });
            } else if(meta.hasMany[p]) {
              var coll = persistence.get(obj, p);
              var ar = jsonObj[p].slice(0);
              var PropertyEntity = meta.hasMany[p].type;
              // get all current items
              coll.list(tx, function(currentItems) {
                  persistence.asyncForEach(ar, function(item, callback) {
                      PropertyEntity.fromSelectJSON(session, tx, item, function(result) {
                          // Check if not already in collection
                          for(var i = 0; i < currentItems.length; i++) {
                            if(currentItems[i].id === result.id) {
                              callback();
                              return;
                            }
                          }
                          coll.add(result);
                          callback();
                        });
                    }, function() {
                      callback();
                    });
                });
            }
          }, function() {
            callback(obj);
          });
        }
        if(jsonObj.id) {
          Entity.load(session, tx, jsonObj.id, loadedObj);
        } else {
          loadedObj(new Entity(session));
        }
      };

      Entity.load = function(session, tx, id, callback) {
        var args = argspec.getArgs(arguments, [
            { name: 'session', optional: true, check: persistence.isSession, defaultValue: persistence },
            { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
            { name: 'id', optional: false, check: argspec.hasType('string') },
            { name: 'callback', optional: true, check: argspec.isCallback(), defaultValue: function(){} }
          ]);
        Entity.findBy(args.session, args.tx, "id", args.id, args.callback);
      };

      Entity.findBy = function(session, tx, property, value, callback) {
        var args = argspec.getArgs(arguments, [
            { name: 'session', optional: true, check: persistence.isSession, defaultValue: persistence },
            { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
            { name: 'property', optional: false, check: argspec.hasType('string') },
            { name: 'value', optional: false },
            { name: 'callback', optional: true, check: argspec.isCallback(), defaultValue: function(){} }
          ]);
        session = args.session;
        tx = args.tx;
        property = args.property;
        value = args.value;
        callback = args.callback;

        if(property === 'id' && value in session.trackedObjects) {
          callback(session.trackedObjects[value]);
          return;
        }
        if(!tx) {
          session.transaction(function(tx) {
              Entity.findBy(session, tx, property, value, callback);
            });
          return;
        }
        Entity.all(session).filter(property, "=", value).one(tx, function(obj) {
            callback(obj);
          });
      }


      Entity.index = function(cols,options) {
        var opts = options || {};
        if (typeof cols=="string") {
          cols = [cols];
        }
        opts.columns = cols;
        meta.indexes.push(opts);
      };

      /**
       * Declares a one-to-many or many-to-many relationship to another entity
       * Whether 1:N or N:M is chosed depends on the inverse declaration
       * @param collName the name of the collection (becomes a property of
         *   Entity instances
         * @param otherEntity the constructor function of the entity to define
         *   the relation to
         * @param inverseRel the name of the inverse property (to be) defined on otherEntity
         */
      Entity.hasMany = function (collName, otherEntity, invRel) {
        var otherMeta = otherEntity.meta;
        if (otherMeta.hasMany[invRel]) {
          // other side has declared it as a one-to-many relation too -> it's in
          // fact many-to-many
          var tableName = meta.name + "_" + collName + "_" + otherMeta.name;
          var inverseTableName = otherMeta.name + '_' + invRel + '_' + meta.name;

          if (tableName > inverseTableName) {
            // Some arbitrary way to deterministically decide which table to generate
            tableName = inverseTableName;
          }
          meta.hasMany[collName] = {
            type: otherEntity,
            inverseProperty: invRel,
            manyToMany: true,
            tableName: tableName
          };
          otherMeta.hasMany[invRel] = {
            type: Entity,
            inverseProperty: collName,
            manyToMany: true,
            tableName: tableName
          };
          delete meta.hasOne[collName];
          delete meta.fields[collName + "_class"]; // in case it existed
        } else {
          meta.hasMany[collName] = {
            type: otherEntity,
            inverseProperty: invRel
          };
          otherMeta.hasOne[invRel] = {
            type: Entity,
            inverseProperty: collName
          };
          if (meta.isMixin)
            otherMeta.fields[invRel + "_class"] = persistence.typeMapper ? persistence.typeMapper.classNameType : "TEXT";
        }
      }

      Entity.hasOne = function (refName, otherEntity, inverseProperty) {
        meta.hasOne[refName] = {
          type: otherEntity,
          inverseProperty: inverseProperty
        };
        if (otherEntity.meta.isMixin)
          meta.fields[refName + "_class"] = persistence.typeMapper ? persistence.typeMapper.classNameType : "TEXT";
      };

      Entity.is = function(mixin){
        var mixinMeta = mixin.meta;
        if (!mixinMeta.isMixin)
          throw new Error("not a mixin: " + mixin);

        mixin.meta.mixedIns = mixin.meta.mixedIns || [];
        mixin.meta.mixedIns.push(meta);

        for (var field in mixinMeta.fields) {
          if (mixinMeta.fields.hasOwnProperty(field))
            meta.fields[field] = mixinMeta.fields[field];
        }
        for (var it in mixinMeta.hasOne) {
          if (mixinMeta.hasOne.hasOwnProperty(it))
            meta.hasOne[it] = mixinMeta.hasOne[it];
        }
        for (var it in mixinMeta.hasMany) {
          if (mixinMeta.hasMany.hasOwnProperty(it)) {
            mixinMeta.hasMany[it].mixin = mixin;
            meta.hasMany[it] = mixinMeta.hasMany[it];
          }
        }
      }

      // Allow decorator functions to add more stuff
      var fns = persistence.entityDecoratorHooks;
      for(var i = 0; i < fns.length; i++) {
        fns[i](Entity);
      }

      entityClassCache[entityName] = Entity;
      return Entity;
    }

    persistence.jsonToEntityVal = function(value, type) {
      if(type) {
        switch(type) {
        case 'DATE':
          if(typeof value === 'number') {
            if (value > 1000000000000) {
              // it's in milliseconds
              return new Date(value);
            } else {
              return new Date(value * 1000);
            }
          } else {
            return null;
          }
          break;
        default:
          return value;
        }
      } else {
        return value;
      }
    };

    persistence.entityValToJson = function(value, type) {
      if(type) {
        switch(type) {
        case 'DATE':
          if(value) {
            value = new Date(value);
            return Math.round(value.getTime() / 1000);
          } else {
            return null;
          }
          break;
        default:
          return value;
        }
      } else {
        return value;
      }
    };

    /**
     * Dumps the entire database into an object (that can be serialized to JSON for instance)
     * @param tx transaction to use, use `null` to start a new one
     * @param entities a list of entity constructor functions to serialize, use `null` for all
     * @param callback (object) the callback function called with the results.
     */
    persistence.dump = function(tx, entities, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'entities', optional: true, check: function(obj) { return !obj || (obj && obj.length && !obj.apply); }, defaultValue: null },
          { name: 'callback', optional: false, check: argspec.isCallback(), defaultValue: function(){} }
        ]);
      tx = args.tx;
      entities = args.entities;
      callback = args.callback;

      if(!entities) { // Default: all entity types
        entities = [];
        for(var e in entityClassCache) {
          if(entityClassCache.hasOwnProperty(e)) {
            entities.push(entityClassCache[e]);
          }
        }
      }

      var result = {};
      persistence.asyncParForEach(entities, function(Entity, callback) {
          Entity.all().list(tx, function(all) {
              var items = [];
              persistence.asyncParForEach(all, function(e, callback) {
                  var rec = {};
                  var fields = Entity.meta.fields;
                  for(var f in fields) {
                    if(fields.hasOwnProperty(f)) {
                      rec[f] = persistence.entityValToJson(e._data[f], fields[f]);
                    }
                  }
                  var refs = Entity.meta.hasOne;
                  for(var r in refs) {
                    if(refs.hasOwnProperty(r)) {
                      rec[r] = e._data[r];
                    }
                  }
                  var colls = Entity.meta.hasMany;
                  var collArray = [];
                  for(var coll in colls) {
                    if(colls.hasOwnProperty(coll)) {
                      collArray.push(coll);
                    }
                  }
                  persistence.asyncParForEach(collArray, function(collP, callback) {
                      var coll = persistence.get(e, collP);
                      coll.list(tx, function(results) {
                          rec[collP] = results.map(function(r) { return r.id; });
                          callback();
                        });
                    }, function() {
                      rec.id = e.id;
                      items.push(rec);
                      callback();
                    });
                }, function() {
                  result[Entity.meta.name] = items;
                  callback();
                });
            });
        }, function() {
          callback(result);
        });
    };

    /**
     * Loads a set of entities from a dump object
     * @param tx transaction to use, use `null` to start a new one
     * @param dump the dump object
     * @param callback the callback function called when done.
     */
    persistence.load = function(tx, dump, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'dump', optional: false },
          { name: 'callback', optional: true, check: argspec.isCallback(), defaultValue: function(){} }
        ]);
      tx = args.tx;
      dump = args.dump;
      callback = args.callback;

      var finishedCount = 0;
      var collItemsToAdd = [];
      var session = this;
      for(var entityName in dump) {
        if(dump.hasOwnProperty(entityName)) {
          var Entity = getEntity(entityName);
          var fields = Entity.meta.fields;
          var instances = dump[entityName];
          for(var i = 0; i < instances.length; i++) {
            var instance = instances[i];
            var ent = new Entity();
            ent.id = instance.id;
            for(var p in instance) {
              if(instance.hasOwnProperty(p)) {
                if (persistence.isImmutable(p)) {
                  ent[p] = instance[p];
                } else if(Entity.meta.hasMany[p]) { // collection
                  var many = Entity.meta.hasMany[p];
                  if(many.manyToMany && Entity.meta.name < many.type.meta.name) { // Arbitrary way to avoid double adding
                    continue;
                  }
                  var coll = persistence.get(ent, p);
                  if(instance[p].length > 0) {
                    instance[p].forEach(function(it) {
                        collItemsToAdd.push({Entity: Entity, coll: coll, id: it});
                      });
                  }
                } else {
                  persistence.set(ent, p, persistence.jsonToEntityVal(instance[p], fields[p]));
                }
              }
            }
            this.add(ent);
          }
        }
      }
      session.flush(tx, function() {
          persistence.asyncForEach(collItemsToAdd, function(collItem, callback) {
              collItem.Entity.load(session, tx, collItem.id, function(obj) {
                  collItem.coll.add(obj);
                  callback();
                });
            }, function() {
              session.flush(tx, callback);
            });
        });
    };

    /**
     * Dumps the entire database to a JSON string
     * @param tx transaction to use, use `null` to start a new one
     * @param entities a list of entity constructor functions to serialize, use `null` for all
     * @param callback (jsonDump) the callback function called with the results.
     */
    persistence.dumpToJson = function(tx, entities, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'entities', optional: true, check: function(obj) { return obj && obj.length && !obj.apply; }, defaultValue: null },
          { name: 'callback', optional: false, check: argspec.isCallback(), defaultValue: function(){} }
        ]);
      tx = args.tx;
      entities = args.entities;
      callback = args.callback;
      this.dump(tx, entities, function(obj) {
          callback(JSON.stringify(obj));
        });
    };

    /**
     * Loads data from a JSON string (as dumped by `dumpToJson`)
     * @param tx transaction to use, use `null` to start a new one
     * @param jsonDump JSON string
     * @param callback the callback function called when done.
     */
    persistence.loadFromJson = function(tx, jsonDump, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'jsonDump', optional: false },
          { name: 'callback', optional: true, check: argspec.isCallback(), defaultValue: function(){} }
        ]);
      tx = args.tx;
      jsonDump = args.jsonDump;
      callback = args.callback;
      this.load(tx, JSON.parse(jsonDump), callback);
    };


    /**
     * Generates a UUID according to http://www.ietf.org/rfc/rfc4122.txt
     */
    function createUUID () {
      if(persistence.typeMapper && persistence.typeMapper.newUuid) {
        return persistence.typeMapper.newUuid();
      }
      var s = [];
      var hexDigits = "0123456789ABCDEF";
      for ( var i = 0; i < 32; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
      }
      s[12] = "4";
      s[16] = hexDigits.substr((s[16] & 0x3) | 0x8, 1);

      var uuid = s.join("");
      return uuid;
    }

    persistence.createUUID = createUUID;


    function defaultValue(type) {
      if(persistence.typeMapper && persistence.typeMapper.defaultValue) {
        return persistence.typeMapper.defaultValue(type);
      }
      switch(type) {
      case "TEXT": return "";
      case "BOOL": return false;
      default:
        if(type.indexOf("INT") !== -1) {
          return 0;
        } else if(type.indexOf("CHAR") !== -1) {
          return "";
        } else {
          return null;
        }
      }
    }

    function arrayContains(ar, item) {
      var l = ar.length;
      for(var i = 0; i < l; i++) {
        var el = ar[i];
        if(el.equals && el.equals(item)) {
          return true;
        } else if(el === item) {
          return true;
        }
      }
      return false;
    }

    function arrayRemove(ar, item) {
      var l = ar.length;
      for(var i = 0; i < l; i++) {
        var el = ar[i];
        if(el.equals && el.equals(item)) {
          ar.splice(i, 1);
          return;
        } else if(el === item) {
          ar.splice(i, 1);
          return;
        }
      }
    }

    ////////////////// QUERY COLLECTIONS \\\\\\\\\\\\\\\\\\\\\\\

    function Subscription(obj, eventType, fn) {
      this.obj = obj;
      this.eventType = eventType;
      this.fn = fn;
    }

    Subscription.prototype.unsubscribe = function() {
      this.obj.removeEventListener(this.eventType, this.fn);
    };

    /**
     * Simple observable function constructor
     * @constructor
     */
    function Observable() {
      this.subscribers = {};
    }

    Observable.prototype.addEventListener = function (eventType, fn) {
      if (!this.subscribers[eventType]) {
        this.subscribers[eventType] = [];
      }
      this.subscribers[eventType].push(fn);
      return new Subscription(this, eventType, fn);
    };

    Observable.prototype.removeEventListener = function(eventType, fn) {
      var subscribers = this.subscribers[eventType];
      for ( var i = 0; i < subscribers.length; i++) {
        if(subscribers[i] == fn) {
          this.subscribers[eventType].splice(i, 1);
          return true;
        }
      }
      return false;
    };

    Observable.prototype.triggerEvent = function (eventType) {
      if (!this.subscribers[eventType]) { // No subscribers to this event type
        return;
      }
      var subscribers = this.subscribers[eventType].slice(0);
      for(var i = 0; i < subscribers.length; i++) {
        subscribers[i].apply(null, arguments);
      }
    };

    /*
     * Each filter has 4 methods:
     * - sql(prefix, values) -- returns a SQL representation of this filter,
     *     possibly pushing additional query arguments to `values` if ?'s are used
     *     in the query
     * - match(o) -- returns whether the filter matches the object o.
     * - makeFit(o) -- attempts to adapt the object o in such a way that it matches
     *     this filter.
     * - makeNotFit(o) -- the oppositive of makeFit, makes the object o NOT match
     *     this filter
     */

    /**
     * Default filter that does not filter on anything
     * currently it generates a 1=1 SQL query, which is kind of ugly
     */
    function NullFilter () {
    }

    NullFilter.prototype.match = function (o) {
      return true;
    };

    NullFilter.prototype.makeFit = function(o) {
    };

    NullFilter.prototype.makeNotFit = function(o) {
    };

    NullFilter.prototype.toUniqueString = function() {
      return "NULL";
    };

    NullFilter.prototype.subscribeGlobally = function() { };

    NullFilter.prototype.unsubscribeGlobally = function() { };

    /**
     * Filter that makes sure that both its left and right filter match
     * @param left left-hand filter object
     * @param right right-hand filter object
     */
    function AndFilter (left, right) {
      this.left = left;
      this.right = right;
    }

    AndFilter.prototype.match = function (o) {
      return this.left.match(o) && this.right.match(o);
    };

    AndFilter.prototype.makeFit = function(o) {
      this.left.makeFit(o);
      this.right.makeFit(o);
    };

    AndFilter.prototype.makeNotFit = function(o) {
      this.left.makeNotFit(o);
      this.right.makeNotFit(o);
    };

    AndFilter.prototype.toUniqueString = function() {
      return this.left.toUniqueString() + " AND " + this.right.toUniqueString();
    };

    AndFilter.prototype.subscribeGlobally = function(coll, entityName) {
      this.left.subscribeGlobally(coll, entityName);
      this.right.subscribeGlobally(coll, entityName);
    };

    AndFilter.prototype.unsubscribeGlobally = function(coll, entityName) {
      this.left.unsubscribeGlobally(coll, entityName);
      this.right.unsubscribeGlobally(coll, entityName);
    };

    /**
     * Filter that makes sure that either its left and right filter match
     * @param left left-hand filter object
     * @param right right-hand filter object
     */
    function OrFilter (left, right) {
      this.left = left;
      this.right = right;
    }

    OrFilter.prototype.match = function (o) {
      return this.left.match(o) || this.right.match(o);
    };

    OrFilter.prototype.makeFit = function(o) {
      this.left.makeFit(o);
      this.right.makeFit(o);
    };

    OrFilter.prototype.makeNotFit = function(o) {
      this.left.makeNotFit(o);
      this.right.makeNotFit(o);
    };

    OrFilter.prototype.toUniqueString = function() {
      return this.left.toUniqueString() + " OR " + this.right.toUniqueString();
    };

    OrFilter.prototype.subscribeGlobally = function(coll, entityName) {
      this.left.subscribeGlobally(coll, entityName);
      this.right.subscribeGlobally(coll, entityName);
    };

    OrFilter.prototype.unsubscribeGlobally = function(coll, entityName) {
      this.left.unsubscribeGlobally(coll, entityName);
      this.right.unsubscribeGlobally(coll, entityName);
    };

    /**
     * Filter that checks whether a certain property matches some value, based on an
     * operator. Supported operators are '=', '!=', '<', '<=', '>' and '>='.
     * @param property the property name
     * @param operator the operator to compare with
     * @param value the literal value to compare to
     */
    function PropertyFilter (property, operator, value) {
      this.property = property;
      this.operator = operator.toLowerCase();
      this.value = value;
    }

    PropertyFilter.prototype.match = function (o) {
      var value = this.value;
      var propValue = persistence.get(o, this.property);
      if(value && value.getTime) { // DATE
        // TODO: Deal with arrays of dates for 'in' and 'not in'
        value = Math.round(value.getTime() / 1000) * 1000; // Deal with precision
        if(propValue && propValue.getTime) { // DATE
          propValue = Math.round(propValue.getTime() / 1000) * 1000; // Deal with precision
        }
      }
      switch (this.operator) {
      case '=':
        return propValue === value;
        break;
      case '!=':
        return propValue !== value;
        break;
      case '<':
        return propValue < value;
        break;
      case '<=':
        return propValue <= value;
        break;
      case '>':
        return propValue > value;
        break;
      case '>=':
        return propValue >= value;
        break;
      case 'in':
        return arrayContains(value, propValue);
        break;
      case 'not in':
        return !arrayContains(value, propValue);
        break;
      }
    };

    PropertyFilter.prototype.makeFit = function(o) {
      if(this.operator === '=') {
        persistence.set(o, this.property, this.value);
      } else {
        throw new Error("Sorry, can't perform makeFit for other filters than =");
      }
    };

    PropertyFilter.prototype.makeNotFit = function(o) {
      if(this.operator === '=') {
        persistence.set(o, this.property, null);
      } else {
        throw new Error("Sorry, can't perform makeNotFit for other filters than =");
      }
    };

    PropertyFilter.prototype.subscribeGlobally = function(coll, entityName) {
      persistence.subscribeToGlobalPropertyListener(coll, entityName, this.property);
    };

    PropertyFilter.prototype.unsubscribeGlobally = function(coll, entityName) {
      persistence.unsubscribeFromGlobalPropertyListener(coll, entityName, this.property);
    };

    PropertyFilter.prototype.toUniqueString = function() {
      var val = this.value;
      if(val && val._type) {
        val = val.id;
      }
      return this.property + this.operator + val;
    };

    persistence.NullFilter = NullFilter;
    persistence.AndFilter = AndFilter;
    persistence.OrFilter = OrFilter;
    persistence.PropertyFilter = PropertyFilter;

    /**
     * Ensure global uniqueness of query collection object
     */
    persistence.uniqueQueryCollection = function(coll) {
      var entityName = coll._entityName;
      if(coll._items) { // LocalQueryCollection
        return coll;
      }
      if(!this.queryCollectionCache[entityName]) {
        this.queryCollectionCache[entityName] = {};
      }
      var uniqueString = coll.toUniqueString();
      if(!this.queryCollectionCache[entityName][uniqueString]) {
        this.queryCollectionCache[entityName][uniqueString] = coll;
      }
      return this.queryCollectionCache[entityName][uniqueString];
    }

    /**
     * The constructor function of the _abstract_ QueryCollection
     * DO NOT INSTANTIATE THIS
     * @constructor
     */
    function QueryCollection () {
    }

    QueryCollection.prototype = new Observable();

    QueryCollection.prototype.oldAddEventListener = QueryCollection.prototype.addEventListener;

    QueryCollection.prototype.setupSubscriptions = function() {
      this._filter.subscribeGlobally(this, this._entityName);
    };

    QueryCollection.prototype.teardownSubscriptions = function() {
      this._filter.unsubscribeGlobally(this, this._entityName);
    };

    QueryCollection.prototype.addEventListener = function(eventType, fn) {
      var that = this;
      var subscription = this.oldAddEventListener(eventType, fn);
      if(this.subscribers[eventType].length === 1) { // first subscriber
        this.setupSubscriptions();
      }
      subscription.oldUnsubscribe = subscription.unsubscribe;
      subscription.unsubscribe = function() {
        this.oldUnsubscribe();

        if(that.subscribers[eventType].length === 0) { // last subscriber
          that.teardownSubscriptions();
        }
      };
      return subscription;
    };

    /**
     * Function called when session is flushed, returns list of SQL queries to execute
     * (as [query, arg] tuples)
     */
    QueryCollection.prototype.persistQueries = function() { return []; };

    /**
     * Invoked by sub-classes to initialize the query collection
     */
    QueryCollection.prototype.init = function (session, entityName, constructor) {
      this._filter = new NullFilter();
      this._orderColumns = []; // tuples of [column, ascending]
      this._prefetchFields = [];
      this._entityName = entityName;
      this._constructor = constructor;
      this._limit = -1;
      this._skip = 0;
      this._reverse = false;
      this._session = session || persistence;
      // For observable
      this.subscribers = {};
    }

    QueryCollection.prototype.toUniqueString = function() {
      var s = this._constructor.name + ": " + this._entityName;
      s += '|Filter:';
      var values = [];
      s += this._filter.toUniqueString();
      s += '|Values:';
      for(var i = 0; i < values.length; i++) {
        s += values + "|^|";
      }
      s += '|Order:';
      for(var i = 0; i < this._orderColumns.length; i++) {
        var col = this._orderColumns[i];
        s += col[0] + ", " + col[1] + ", " + col[2];
      }
      s += '|Prefetch:';
      for(var i = 0; i < this._prefetchFields.length; i++) {
        s += this._prefetchFields[i];
      }
      s += '|Limit:';
      s += this._limit;
      s += '|Skip:';
      s += this._skip;
      s += '|Reverse:';
      s += this._reverse;
      return s;
    };

    /**
     * Creates a clone of this query collection
     * @return a clone of the collection
     */
    QueryCollection.prototype.clone = function (cloneSubscribers) {
      var c = new (this._constructor)(this._session, this._entityName);
      c._filter = this._filter;
      c._prefetchFields = this._prefetchFields.slice(0); // clone
      c._orderColumns = this._orderColumns.slice(0);
      c._limit = this._limit;
      c._skip = this._skip;
      c._reverse = this._reverse;
      if(cloneSubscribers) {
        var subscribers = {};
        for(var eventType in this.subscribers) {
          if(this.subscribers.hasOwnProperty(eventType)) {
            subscribers[eventType] = this.subscribers[eventType].slice(0);
          }
        }
        c.subscribers = subscribers; //this.subscribers;
      } else {
        c.subscribers = this.subscribers;
      }
      return c;
    };

    /**
     * Returns a new query collection with a property filter condition added
     * @param property the property to filter on
     * @param operator the operator to use
     * @param value the literal value that the property should match
     * @return the query collection with the filter added
     */
    QueryCollection.prototype.filter = function (property, operator, value) {
      var c = this.clone(true);
      c._filter = new AndFilter(this._filter, new PropertyFilter(property,
          operator, value));
      // Add global listener (TODO: memory leak waiting to happen!)
      var session = this._session;
      c = session.uniqueQueryCollection(c);
      //session.subscribeToGlobalPropertyListener(c, this._entityName, property);
      return session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection with an OR condition between the
     * current filter and the filter specified as argument
     * @param filter the other filter
     * @return the new query collection
     */
    QueryCollection.prototype.or = function (filter) {
      var c = this.clone(true);
      c._filter = new OrFilter(this._filter, filter);
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection with an AND condition between the
     * current filter and the filter specified as argument
     * @param filter the other filter
     * @return the new query collection
     */
    QueryCollection.prototype.and = function (filter) {
      var c = this.clone(true);
      c._filter = new AndFilter(this._filter, filter);
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection with an ordering imposed on the collection
     * @param property the property to sort on
     * @param ascending should the order be ascending (= true) or descending (= false)
     * @param caseSensitive should the order be case sensitive (= true) or case insensitive (= false)
     *        note: using case insensitive ordering for anything other than TEXT fields yields
     *        undefinded behavior
     * @return the query collection with imposed ordering
     */
    QueryCollection.prototype.order = function (property, ascending, caseSensitive) {
      ascending = ascending === undefined ? true : ascending;
      caseSensitive = caseSensitive === undefined ? true : caseSensitive;
      var c = this.clone();
      c._orderColumns.push( [ property, ascending, caseSensitive ]);
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection will limit its size to n items
    * @param n the number of items to limit it to
    * @return the limited query collection
    */
    QueryCollection.prototype.limit = function(n) {
      var c = this.clone();
      c._limit = n;
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection which will skip the first n results
     * @param n the number of results to skip
     * @return the query collection that will skip n items
     */
    QueryCollection.prototype.skip = function(n) {
      var c = this.clone();
      c._skip = n;
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection which reverse the order of the result set
     * @return the query collection that will reverse its items
     */
    QueryCollection.prototype.reverse = function() {
      var c = this.clone();
      c._reverse = true;
      return this._session.uniqueQueryCollection(c);
    };

    /**
     * Returns a new query collection which will prefetch a certain object relationship.
     * Only works with 1:1 and N:1 relations.
     * Relation must target an entity, not a mix-in.
     * @param rel the relation name of the relation to prefetch
     * @return the query collection prefetching `rel`
     */
    QueryCollection.prototype.prefetch = function (rel) {
      var c = this.clone();
      c._prefetchFields.push(rel);
      return this._session.uniqueQueryCollection(c);
    };


    /**
     * Select a subset of data, represented by this query collection as a JSON
     * structure (Javascript object)
     *
     * @param tx database transaction to use, leave out to start a new one
     * @param props a property specification
     * @param callback(result)
     */
    QueryCollection.prototype.selectJSON = function(tx, props, callback) {
      var args = argspec.getArgs(arguments, [
          { name: "tx", optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: "props", optional: false },
          { name: "callback", optional: false }
        ]);
      var session = this._session;
      var that = this;
      tx = args.tx;
      props = args.props;
      callback = args.callback;

      if(!tx) {
        session.transaction(function(tx) {
            that.selectJSON(tx, props, callback);
          });
        return;
      }
      var Entity = getEntity(this._entityName);
      // TODO: This could do some clever prefetching to make it more efficient
      this.list(function(items) {
          var resultArray = [];
          persistence.asyncForEach(items, function(item, callback) {
              item.selectJSON(tx, props, function(obj) {
                  resultArray.push(obj);
                  callback();
                });
            }, function() {
              callback(resultArray);
            });
        });
    };

    /**
     * Adds an object to a collection
     * @param obj the object to add
     */
    QueryCollection.prototype.add = function(obj) {
      if(!obj.id || !obj._type) {
        throw new Error("Cannot add object of non-entity type onto collection.");
      }
      this._session.add(obj);
      this._filter.makeFit(obj);
      this.triggerEvent('add', this, obj);
      this.triggerEvent('change', this, obj);
    }

    /**
     * Adds an an array of objects to a collection
     * @param obj the object to add
     */
    QueryCollection.prototype.addAll = function(objs) {
      for(var i = 0; i < objs.length; i++) {
        var obj = objs[i];
        this._session.add(obj);
        this._filter.makeFit(obj);
        this.triggerEvent('add', this, obj);
      }
      this.triggerEvent('change', this);
    }

    /**
     * Removes an object from a collection
     * @param obj the object to remove from the collection
     */
    QueryCollection.prototype.remove = function(obj) {
      if(!obj.id || !obj._type) {
        throw new Error("Cannot remove object of non-entity type from collection.");
      }
      this._filter.makeNotFit(obj);
      this.triggerEvent('remove', this, obj);
      this.triggerEvent('change', this, obj);
    }


    /**
     * A database implementation of the QueryCollection
     * @param entityName the name of the entity to create the collection for
     * @constructor
     */
    function DbQueryCollection (session, entityName) {
      this.init(session, entityName, DbQueryCollection);
    }

    /**
     * Execute a function for each item in the list
     * @param tx the transaction to use (or null to open a new one)
     * @param eachFn (elem) the function to be executed for each item
     */
    QueryCollection.prototype.each = function (tx, eachFn) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'eachFn', optional: true, check: argspec.isCallback() }
        ]);
      tx = args.tx;
      eachFn = args.eachFn;

      this.list(tx, function(results) {
          for(var i = 0; i < results.length; i++) {
            eachFn(results[i]);
          }
        });
    }

    // Alias
    QueryCollection.prototype.forEach = QueryCollection.prototype.each;

    QueryCollection.prototype.one = function (tx, oneFn) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'oneFn', optional: false, check: argspec.isCallback() }
        ]);
      tx = args.tx;
      oneFn = args.oneFn;

      var that = this;

      this.limit(1).list(tx, function(results) {
          if(results.length === 0) {
            oneFn(null);
          } else {
            oneFn(results[0]);
          }
        });
    }

    DbQueryCollection.prototype = new QueryCollection();


    /**
     * An implementation of QueryCollection, that is used
     * to represent all instances of an entity type
     * @constructor
     */
    function AllDbQueryCollection (session, entityName) {
      this.init(session, entityName, AllDbQueryCollection);
    }

    AllDbQueryCollection.prototype = new DbQueryCollection();

    AllDbQueryCollection.prototype.add = function(obj) {
      this._session.add(obj);
      this.triggerEvent('add', this, obj);
      this.triggerEvent('change', this, obj);
    };

    AllDbQueryCollection.prototype.remove = function(obj) {
      this._session.remove(obj);
      this.triggerEvent('remove', this, obj);
      this.triggerEvent('change', this, obj);
    };

    /**
     * A ManyToMany implementation of QueryCollection
     * @constructor
     */
    function ManyToManyDbQueryCollection (session, entityName) {
      this.init(session, entityName, persistence.ManyToManyDbQueryCollection);
      this._localAdded = [];
      this._localRemoved = [];
    }

    ManyToManyDbQueryCollection.prototype = new DbQueryCollection();

    ManyToManyDbQueryCollection.prototype.initManyToMany = function(obj, coll) {
      this._obj = obj;
      this._coll = coll;
    };

    ManyToManyDbQueryCollection.prototype.add = function(obj) {
      if(!arrayContains(this._localAdded, obj)) {
        this._session.add(obj);
        this._localAdded.push(obj);
        this.triggerEvent('add', this, obj);
        this.triggerEvent('change', this, obj);
      }
    };

    ManyToManyDbQueryCollection.prototype.addAll = function(objs) {
      for(var i = 0; i < objs.length; i++) {
        var obj = objs[i];
        if(!arrayContains(this._localAdded, obj)) {
          this._session.add(obj);
          this._localAdded.push(obj);
          this.triggerEvent('add', this, obj);
        }
      }
      this.triggerEvent('change', this);
    }

    ManyToManyDbQueryCollection.prototype.clone = function() {
      var c = DbQueryCollection.prototype.clone.call(this);
      c._localAdded = this._localAdded;
      c._localRemoved = this._localRemoved;
      c._obj = this._obj;
      c._coll = this._coll;
      return c;
    };

    ManyToManyDbQueryCollection.prototype.remove = function(obj) {
      if(arrayContains(this._localAdded, obj)) { // added locally, can just remove it from there
        arrayRemove(this._localAdded, obj);
      } else if(!arrayContains(this._localRemoved, obj)) {
        this._localRemoved.push(obj);
      }
      this.triggerEvent('remove', this, obj);
      this.triggerEvent('change', this, obj);
    };

    ////////// Local implementation of QueryCollection \\\\\\\\\\\\\\\\

    function LocalQueryCollection(initialArray) {
      this.init(persistence, null, LocalQueryCollection);
      this._items = initialArray || [];
    }

    LocalQueryCollection.prototype = new QueryCollection();

    LocalQueryCollection.prototype.clone = function() {
      var c = DbQueryCollection.prototype.clone.call(this);
      c._items = this._items;
      return c;
    };

    LocalQueryCollection.prototype.add = function(obj) {
      if(!arrayContains(this._items, obj)) {
        this._session.add(obj);
        this._items.push(obj);
        this.triggerEvent('add', this, obj);
        this.triggerEvent('change', this, obj);
      }
    };

    LocalQueryCollection.prototype.addAll = function(objs) {
      for(var i = 0; i < objs.length; i++) {
        var obj = objs[i];
        if(!arrayContains(this._items, obj)) {
          this._session.add(obj);
          this._items.push(obj);
          this.triggerEvent('add', this, obj);
        }
      }
      this.triggerEvent('change', this);
    }

    LocalQueryCollection.prototype.remove = function(obj) {
      var items = this._items;
      for(var i = 0; i < items.length; i++) {
        if(items[i] === obj) {
          this._items.splice(i, 1);
          this.triggerEvent('remove', this, obj);
          this.triggerEvent('change', this, obj);
        }
      }
    };

    LocalQueryCollection.prototype.list = function(tx, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'callback', optional: true, check: argspec.isCallback() }
        ]);
      callback = args.callback;

      if(!callback || callback.executeSql) { // first argument is transaction
        callback = arguments[1]; // set to second argument
      }
      var array = this._items.slice(0);
      var that = this;
      var results = [];
      for(var i = 0; i < array.length; i++) {
        if(this._filter.match(array[i])) {
          results.push(array[i]);
        }
      }
      results.sort(function(a, b) {
          for(var i = 0; i < that._orderColumns.length; i++) {
            var col = that._orderColumns[i][0];
            var asc = that._orderColumns[i][1];
            var sens = that._orderColumns[i][2];
            var aVal = persistence.get(a, col);
            var bVal = persistence.get(b, col);
            if (!sens) {
              aVal = aVal.toLowerCase();
              bVal = bVal.toLowerCase();
            }
            if(aVal < bVal) {
              return asc ? -1 : 1;
            } else if(aVal > bVal) {
              return asc ? 1 : -1;
            }
          }
          return 0;
        });
      if(this._skip) {
        results.splice(0, this._skip);
      }
      if(this._limit > -1) {
        results = results.slice(0, this._limit);
      }
      if(this._reverse) {
        results.reverse();
      }
      if(callback) {
        callback(results);
      } else {
        return results;
      }
    };

    LocalQueryCollection.prototype.destroyAll = function(callback) {
      if(!callback || callback.executeSql) { // first argument is transaction
        callback = arguments[1]; // set to second argument
      }
      this._items = [];
      this.triggerEvent('change', this);
      if(callback) callback();
    };

    LocalQueryCollection.prototype.count = function(tx, callback) {
      var args = argspec.getArgs(arguments, [
          { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
          { name: 'callback', optional: true, check: argspec.isCallback() }
        ]);
      tx = args.tx;
      callback = args.callback;

      var result = this.list();

      if(callback) {
        callback(result.length);
      } else {
        return result.length;
      }
    };

    persistence.QueryCollection             = QueryCollection;
    persistence.DbQueryCollection           = DbQueryCollection;
    persistence.ManyToManyDbQueryCollection = ManyToManyDbQueryCollection;
    persistence.LocalQueryCollection        = LocalQueryCollection;
    persistence.Observable                  = Observable;
    persistence.Subscription                = Subscription;
    persistence.AndFilter                   = AndFilter;
    persistence.OrFilter                    = OrFilter;
    persistence.PropertyFilter              = PropertyFilter;
  }());

// ArgSpec.js library: http://github.com/zefhemel/argspecjs
var argspec = {};

(function() {
    argspec.getArgs = function(args, specs) {
      var argIdx = 0;
      var specIdx = 0;
      var argObj = {};
      while(specIdx < specs.length) {
        var s = specs[specIdx];
        var a = args[argIdx];
        if(s.optional) {
          if(a !== undefined && s.check(a)) {
            argObj[s.name] = a;
            argIdx++;
            specIdx++;
          } else {
            if(s.defaultValue !== undefined) {
              argObj[s.name] = s.defaultValue;
            }
            specIdx++;
          }
        } else {
          if(s.check && !s.check(a)) {
            throw new Error("Invalid value for argument: " + s.name + " Value: " + a);
          }
          argObj[s.name] = a;
          specIdx++;
          argIdx++;
        }
      }
      return argObj;
    }

    argspec.hasProperty = function(name) {
      return function(obj) {
        return obj && obj[name] !== undefined;
      };
    }

    argspec.hasType = function(type) {
      return function(obj) {
        return typeof obj === type;
      };
    }

    argspec.isCallback = function() {
      return function(obj) {
        return obj && obj.apply;
      };
    }
  }());

persistence.argspec = argspec;

  return persistence;
} // end of createPersistence



// JSON2 library, source: http://www.JSON.org/js.html
// Most modern browsers already support this natively, but mobile
// browsers often don't, hence this implementation
// Relevant APIs:
//    JSON.stringify(value, replacer, space)
//    JSON.parse(text, reviver)

if(typeof JSON === 'undefined') {
  JSON = {};
}
//var JSON = typeof JSON === 'undefined' ? window.JSON : {};
if (!JSON.stringify) {
  (function () {
      function f(n) {
        return n < 10 ? '0' + n : n;
      }
      if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

          return isFinite(this.valueOf()) ?
          this.getUTCFullYear()   + '-' +
            f(this.getUTCMonth() + 1) + '-' +
            f(this.getUTCDate())      + 'T' +
            f(this.getUTCHours())     + ':' +
            f(this.getUTCMinutes())   + ':' +
            f(this.getUTCSeconds())   + 'Z' : null;
        };

        String.prototype.toJSON =
          Number.prototype.toJSON =
          Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
          };
      }

      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap, indent,
      meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
      },
      rep;

      function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ?
        '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' :
        '"' + string + '"';
      }


      function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];

        if (value && typeof value === 'object' &&
          typeof value.toJSON === 'function') {
          value = value.toJSON(key);
        }

        if (typeof rep === 'function') {
          value = rep.call(holder, key, value);
        }

        switch (typeof value) {
        case 'string':
          return quote(value);
        case 'number':
          return isFinite(value) ? String(value) : 'null';
        case 'boolean':
        case 'null':
          return String(value);
        case 'object':
          if (!value) {
            return 'null';
          }

          gap += indent;
          partial = [];

          if (Object.prototype.toString.apply(value) === '[object Array]') {
            length = value.length;
            for (i = 0; i < length; i += 1) {
              partial[i] = str(i, value) || 'null';
            }

            v = partial.length === 0 ? '[]' :
            gap ? '[\n' + gap +
              partial.join(',\n' + gap) + '\n' +
              mind + ']' :
            '[' + partial.join(',') + ']';
            gap = mind;
            return v;
          }

          if (rep && typeof rep === 'object') {
            length = rep.length;
            for (i = 0; i < length; i += 1) {
              k = rep[i];
              if (typeof k === 'string') {
                v = str(k, value);
                if (v) {
                  partial.push(quote(k) + (gap ? ': ' : ':') + v);
                }
              }
            }
          } else {
            for (k in value) {
              if (Object.hasOwnProperty.call(value, k)) {
                v = str(k, value);
                if (v) {
                  partial.push(quote(k) + (gap ? ': ' : ':') + v);
                }
              }
            }
          }

          v = partial.length === 0 ? '{}' :
          gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
            mind + '}' : '{' + partial.join(',') + '}';
          gap = mind;
          return v;
        }
      }

      if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {
          var i;
          gap = '';
          indent = '';
          if (typeof space === 'number') {
            for (i = 0; i < space; i += 1) {
              indent += ' ';
            }
          } else if (typeof space === 'string') {
            indent = space;
          }

          rep = replacer;
          if (replacer && typeof replacer !== 'function' &&
            (typeof replacer !== 'object' ||
              typeof replacer.length !== 'number')) {
            throw new Error('JSON.stringify');
          }

          return str('', {'': value});
        };
      }

      if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {
          var j;
          function walk(holder, key) {
            var k, v, value = holder[key];
            if (value && typeof value === 'object') {
              for (k in value) {
                if (Object.hasOwnProperty.call(value, k)) {
                  v = walk(value, k);
                  if (v !== undefined) {
                    value[k] = v;
                  } else {
                    delete value[k];
                  }
                }
              }
            }
            return reviver.call(holder, key, value);
          }

          cx.lastIndex = 0;
          if (cx.test(text)) {
            text = text.replace(cx, function (a) {
                return '\\u' +
                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
              });
          }

          if (/^[\],:{}\s]*$/.
          test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
            replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
            replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
            j = eval('(' + text + ')');
            return typeof reviver === 'function' ?
            walk({'': j}, '') : j;
          }
          throw new SyntaxError('JSON.parse');
        };
      }
    }());
}
})();


/**
 * @license
 * Copyright (c) 2010 Fábio Rehm <fgrehm@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

if(!window.persistence) { // persistence.js not loaded!
  throw new Error("persistence.js should be loaded before persistence.migrations.js");
}

(function() {

    var Migrator = {
      migrations: [],

      version: function(callback) {
        persistence.transaction(function(t){
          t.executeSql('SELECT current_version FROM schema_version', null, function(result){
            if (result.length == 0) {
              t.executeSql('INSERT INTO schema_version VALUES (0)', null, function(){
                callback(0);
              });
            } else {
              callback(result[0].current_version);
            }
          });
        });
      },

      setVersion: function(v, callback) {
        persistence.transaction(function(t){
          t.executeSql('UPDATE schema_version SET current_version = ?', [v], function(){
            Migrator._version = v;
            if (callback) callback();
          });
        });
      },

      setup: function(callback) {
        persistence.transaction(function(t){
          t.executeSql('CREATE TABLE IF NOT EXISTS schema_version (current_version INTEGER)', null, function(){
            // Creates a dummy migration just to force setting schema version when cleaning DB
            Migrator.migration(0, { up: function() { }, down: function() { } });
            if (callback) callback();
          });
        });
      },

      // Method should only be used for testing
      reset: function(callback) {
        // Creates a dummy migration just to force setting schema version when cleaning DB
        Migrator.migrations = [];
        Migrator.migration(0, { up: function() { }, down: function() { } });
        Migrator.setVersion(0, callback);
      },

      migration: function(version, actions) {
        Migrator.migrations[version] = new Migration(version, actions);
        return Migrator.migrations[version];
      },

      migrateUpTo: function(version, callback) {
        var migrationsToRun = [];

        function migrateOne() {
          var migration = migrationsToRun.pop();

          if (!migration) callback();

          migration.up(function(){
            if (migrationsToRun.length > 0) {
              migrateOne();
            } else if (callback) {
              callback();
            }
          });
        }

        this.version(function(currentVersion){
          for (var v = currentVersion+1; v <= version; v++)
            migrationsToRun.unshift(Migrator.migrations[v]);

          if (migrationsToRun.length > 0) {
            migrateOne();
          } else if (callback) {
            callback();
          }
        });
      },

      migrateDownTo: function(version, callback) {
        var migrationsToRun = [];

        function migrateOne() {
          var migration = migrationsToRun.pop();

          if (!migration) callback();

          migration.down(function(){
            if (migrationsToRun.length > 0) {
              migrateOne();
            } else if (callback) {
              callback();
            }
          });
        }

        this.version(function(currentVersion){
          for (var v = currentVersion; v > version; v--)
            migrationsToRun.unshift(Migrator.migrations[v]);

          if (migrationsToRun.length > 0) {
            migrateOne();
          } else if (callback) {
            callback();
          }
        });
      },

      migrate: function(version, callback) {
        if ( arguments.length === 1 ) {
          callback = version;
          version = this.migrations.length-1;
        }

        this.version(function(curVersion){
          if (curVersion < version)
            Migrator.migrateUpTo(version, callback);
          else if (curVersion > version)
            Migrator.migrateDownTo(version, callback);
          else
            callback();
        });
      }
    }

    var Migration = function(version, body) {
      this.version = version;
      // TODO check if actions contains up and down methods
      this.body = body;
      this.actions = [];
    };

    Migration.prototype.executeActions = function(callback, customVersion) {
      var actionsToRun = this.actions;
      var version = (customVersion!==undefined) ? customVersion : this.version;

      persistence.transaction(function(tx){
        function nextAction() {
          if (actionsToRun.length == 0)
            Migrator.setVersion(version, callback);
          else {
            var action = actionsToRun.pop();
            action(tx, nextAction);
          }
        }

        nextAction();
      });
    }

    Migration.prototype.up = function(callback) {
      if (this.body.up) this.body.up.apply(this);
      this.executeActions(callback);
    }

    Migration.prototype.down = function(callback) {
      if (this.body.down) this.body.down.apply(this);
      this.executeActions(callback, this.version-1);
    }

    Migration.prototype.createTable = function(tableName, callback) {
      var table = new ColumnsHelper();

      if (callback) callback(table);

      var column;
      var sql = 'CREATE TABLE ' + tableName + ' (id VARCHAR(32) PRIMARY KEY';
      while (column = table.columns.pop())
        sql += ', ' + column;

      this.executeSql(sql + ')');
    }

    Migration.prototype.dropTable = function(tableName) {
      var sql = 'DROP TABLE ' + tableName;
      this.executeSql(sql);
    }

    Migration.prototype.addColumn = function(tableName, columnName, columnType) {
      var sql = 'ALTER TABLE ' + tableName + ' ADD ' + columnName + ' ' + columnType;
      this.executeSql(sql);
    }

    Migration.prototype.removeColumn = function(tableName, columnName) {
      this.action(function(tx, nextCommand){
        var sql = 'select sql from sqlite_master where type = "table" and name == "'+tableName+'"';
        tx.executeSql(sql, null, function(result){
          var columns = new RegExp("CREATE TABLE `\\w+` |\\w+ \\((.+)\\)").exec(result[0].sql)[1].split(', ');
          var selectColumns = [];
          var columnsSql = [];

          for (var i = 0; i < columns.length; i++) {
            var colName = new RegExp("((`\\w+`)|(\\w+)) .+").exec(columns[i])[1];
            if (colName == columnName) continue;

            columnsSql.push(columns[i]);
            selectColumns.push(colName);
          }
          columnsSql = columnsSql.join(', ');
          selectColumns = selectColumns.join(', ');

          var queries = [];
          queries.unshift(["ALTER TABLE " + tableName + " RENAME TO " + tableName + "_bkp;", null]);
          queries.unshift(["CREATE TABLE " + tableName + " (" + columnsSql + ");", null]);
          queries.unshift(["INSERT INTO " + tableName + " SELECT " + selectColumns + " FROM " + tableName + "_bkp;", null]);
          queries.unshift(["DROP TABLE " + tableName + "_bkp;", null]);

          persistence.executeQueriesSeq(tx, queries, nextCommand);
        });
      });
    }

    Migration.prototype.addIndex = function(tableName, columnName, unique) {
      var sql = 'CREATE ' + (unique === true ? 'UNIQUE' : '') + ' INDEX ' + tableName + '_' + columnName + ' ON ' + tableName + ' (' + columnName + ')';
      this.executeSql(sql);
    }

    Migration.prototype.removeIndex = function(tableName, columnName) {
      var sql = 'DROP INDEX ' + tableName + '_' + columnName;
      this.executeSql(sql);
    }

    Migration.prototype.executeSql = function(sql, args) {
      this.action(function(tx, nextCommand){
        tx.executeSql(sql, args, nextCommand);
      });
    }

    Migration.prototype.action = function(callback) {
      this.actions.unshift(callback);
    }

    var ColumnsHelper = function() {
      this.columns = [];
    }

    ColumnsHelper.prototype.text = function(columnName) {
      this.columns.unshift(columnName + ' TEXT');
    }

    ColumnsHelper.prototype.integer = function(columnName) {
      this.columns.unshift(columnName + ' INT');
    }

    ColumnsHelper.prototype.real = function(columnName) {
      this.columns.unshift(columnName + ' REAL');
    }

    ColumnsHelper.prototype['boolean'] = function(columnName) {
      this.columns.unshift(columnName + ' BOOL');
    }

    ColumnsHelper.prototype.date = function(columnName) {
      this.columns.unshift(columnName + ' DATE');
    }

    ColumnsHelper.prototype.json = function(columnName) {
      this.columns.unshift(columnName + ' TEXT');
    }

    // Makes Migrator and Migration available to tests
    persistence.migrations = {};
    persistence.migrations.Migrator = Migrator;
    persistence.migrations.Migration = Migration;
    persistence.migrations.init = function() { Migrator.setup.apply(Migrator, Array.prototype.slice.call(arguments, 0))};

    persistence.migrate = function() { Migrator.migrate.apply(Migrator, Array.prototype.slice.call(arguments, 0))};
    persistence.defineMigration = function() { Migrator.migration.apply(Migrator, Array.prototype.slice.call(arguments, 0))};

}());

/**
 * Default type mapper. Override to support more types or type options.
 */
(function(){


var defaultTypeMapper = {
  /**
   * SQL type for ids
   */
  idType: "VARCHAR(32)",

  /**
   * SQL type for class names (used by mixins)
   */
  classNameType: "TEXT",

  /**
   * Returns SQL type for column definition
   */
  columnType: function(type){
    switch(type) {
    case 'JSON': return 'TEXT';
    case 'BOOL': return 'INT';
    case 'DATE': return 'INT';
    default: return type;
    }
  },

  inVar: function(str, type){
    return str;
  },
  outVar: function(str, type){
    return str;
  },
  outId: function(str){
    return "'" + str + "'";
  },
  /**
   * Converts a value from the database to a value suitable for the entity
   * (also does type conversions, if necessary)
   */
  dbValToEntityVal: function(val, type){
    if (val === null || val === undefined) {
      return val;
    }
    switch (type) {
      case 'DATE':
        // SQL is in seconds and JS in miliseconds
        if (val > 1000000000000) {
          // usually in seconds, but sometimes it's milliseconds
          return new Date(parseInt(val, 10));
        } else {
          return new Date(parseInt(val, 10) * 1000);
        }
      case 'BOOL':
        return val === 1 || val === '1';
        break;
      case 'INT':
        return +val;
        break;
      case 'BIGINT':
        return +val;
        break;
      case 'JSON':
        if (val) {
          return JSON.parse(val);
        }
        else {
          return val;
        }
        break;
      default:
        return val;
    }
  },

  /**
   * Converts an entity value to a database value, inverse of
   *   dbValToEntityVal
   */
  entityValToDbVal: function(val, type){
    if (val === undefined || val === null) {
      return null;
    }
    else if (type === 'JSON' && val) {
      return JSON.stringify(val);
    }
    else if (val.id) {
      return val.id;
    }
    else if (type === 'BOOL') {
      return (val === 'false') ? 0 : (val ? 1 : 0);
    }
    else if (type === 'DATE' || val.getTime) {
      // In order to make SQLite Date/Time functions work we should store
      // values in seconds and not as miliseconds as JS Date.getTime()
      val = new Date(val);
      return Math.round(val.getTime() / 1000);
    }
    else if(type === 'VARCHAR(32)'){
      return val.toString();
    }
    else {
      return val;
    }
  },
  /**
   * Shortcut for inVar when type is id -- no need to override
   */
  inIdVar: function(str){
    return this.inVar(str, this.idType);
  },
  /**
   * Shortcut for outVar when type is id -- no need to override
   */
  outIdVar: function(str){
    return this.outVar(str, this.idType);
  },
  /**
   * Shortcut for entityValToDbVal when type is id -- no need to override
   */
  entityIdToDbId: function(id){
    return this.entityValToDbVal(id, this.idType);
  }
}

function config(persistence, dialect) {
  var argspec = persistence.argspec;

  persistence.typeMapper = dialect.typeMapper || defaultTypeMapper;

  persistence.generatedTables = {}; // set

  /**
   * Synchronize the data model with the database, creates table that had not
   * been defined before
   *
   * @param tx
   *            transaction object to use (optional)
   * @param callback
   *            function to be called when synchronization has completed,
   *            takes started transaction as argument
   */
  persistence.schemaSync = function (tx, callback, emulate) {
    var args = argspec.getArgs(arguments, [
        { name: "tx", optional: true, check: persistence.isTransaction, defaultValue: null },
        { name: "callback", optional: true, check: argspec.isCallback(), defaultValue: function(){} },
        { name: "emulate", optional: true, check: argspec.hasType('boolean') }
      ]);
    tx = args.tx;
    callback = args.callback;
    emulate = args.emulate;

    if(!tx) {
      var session = this;
      this.transaction(function(tx) { session.schemaSync(tx, callback, emulate); });
      return;
    }
    var queries = [], meta, colDefs, otherMeta, tableName;

	var tm = persistence.typeMapper;
    var entityMeta = persistence.getEntityMeta();
    for (var entityName in entityMeta) {
      if (entityMeta.hasOwnProperty(entityName)) {
        meta = entityMeta[entityName];
        if (!meta.isMixin) {
          colDefs = [];
          for (var prop in meta.fields) {
            if (meta.fields.hasOwnProperty(prop)) {
              colDefs.push([prop, meta.fields[prop]]);
            }
          }
          for (var rel in meta.hasOne) {
            if (meta.hasOne.hasOwnProperty(rel)) {
              otherMeta = meta.hasOne[rel].type.meta;
              colDefs.push([rel, tm.idType]);
              queries.push([dialect.createIndex(meta.name, [rel]), null]);
            }
          }
          for (var i = 0; i < meta.indexes.length; i++) {
            queries.push([dialect.createIndex(meta.name, meta.indexes[i].columns, meta.indexes[i]), null]);
          }
        }
        for (var rel in meta.hasMany) {
          if (meta.hasMany.hasOwnProperty(rel) && meta.hasMany[rel].manyToMany) {
            tableName = meta.hasMany[rel].tableName;
            if (!persistence.generatedTables[tableName]) {
              var otherMeta = meta.hasMany[rel].type.meta;
              var inv = meta.hasMany[rel].inverseProperty;
              // following test ensures that mixin mtm tables get created with the mixin itself
              // it seems superfluous because mixin will be processed before entitites that use it
              // but better be safe than sorry.
              if (otherMeta.hasMany[inv].type.meta != meta)
                continue;
              var p1 = meta.name + "_" + rel;
              var p2 = otherMeta.name + "_" + inv;
              queries.push([dialect.createIndex(tableName, [p1]), null]);
              queries.push([dialect.createIndex(tableName, [p2]), null]);
              var columns = [[p1, tm.idType], [p2, tm.idType]];
              if (meta.isMixin)
                columns.push([p1 + "_class", tm.classNameType])
              if (otherMeta.isMixin)
                columns.push([p2 + "_class", tm.classNameType])
              queries.push([dialect.createTable(tableName, columns), null]);
              persistence.generatedTables[tableName] = true;
            }
          }
        }
        if (!meta.isMixin) {
          colDefs.push(["id", tm.idType, "PRIMARY KEY"]);
          persistence.generatedTables[meta.name] = true;
          queries.push([dialect.createTable(meta.name, colDefs), null]);
        }
      }
    }
    var fns = persistence.schemaSyncHooks;
    for(var i = 0; i < fns.length; i++) {
      fns[i](tx);
    }
    if(emulate) {
      // Done
      callback(tx);
    } else {
      executeQueriesSeq(tx, queries, function(_, err) {
          callback(tx, err);
        });
    }
  };

  /**
   * Persists all changes to the database transaction
   *
   * @param tx
   *            transaction to use
   * @param callback
   *            function to be called when done
   */
  persistence.flush = function (tx, callback) {
    var args = argspec.getArgs(arguments, [
        { name: "tx", optional: true, check: persistence.isTransaction },
        { name: "callback", optional: true, check: argspec.isCallback(), defaultValue: null }
      ]);
    tx = args.tx;
    callback = args.callback;

    var session = this;
    if(!tx) {
      this.transaction(function(tx) { session.flush(tx, callback); });
      return;
    }
    var fns = persistence.flushHooks;
    persistence.asyncForEach(fns, function(fn, callback) {
        fn(session, tx, callback);
      }, function() {
        // After applying the hooks
        var persistObjArray = [];
        for (var id in session.trackedObjects) {
          if (session.trackedObjects.hasOwnProperty(id)) {
            persistObjArray.push(session.trackedObjects[id]);
          }
        }
        var removeObjArray = [];
        for (var id in session.objectsToRemove) {
          if (session.objectsToRemove.hasOwnProperty(id)) {
            removeObjArray.push(session.objectsToRemove[id]);
            delete session.trackedObjects[id]; // Stop tracking
          }
        }
        session.objectsToRemove = {};
        if(callback) {
          persistence.asyncParForEach(removeObjArray, function(obj, callback) {
              remove(obj, tx, callback);
            }, function(result, err) {
              if (err) return callback(result, err);
              persistence.asyncParForEach(persistObjArray, function(obj, callback) {
                  save(obj, tx, callback);
                }, callback);
            });
        } else { // More efficient
          for(var i = 0; i < persistObjArray.length; i++) {
            save(persistObjArray[i], tx);
          }
          for(var i = 0; i < removeObjArray.length; i++) {
            remove(removeObjArray[i], tx);
          }
        }
      });
  };

  /**
   * Remove all tables in the database (as defined by the model)
   */
  persistence.reset = function (tx, callback) {
    var args = argspec.getArgs(arguments, [
        { name: "tx", optional: true, check: persistence.isTransaction, defaultValue: null },
        { name: "callback", optional: true, check: argspec.isCallback(), defaultValue: function(){} }
      ]);
    tx = args.tx;
    callback = args.callback;

    var session = this;
    if(!tx) {
      session.transaction(function(tx) { session.reset(tx, callback); });
      return;
    }
    // First emulate syncing the schema (to know which tables were created)
    this.schemaSync(tx, function() {
        var tableArray = [];
        for (var p in persistence.generatedTables) {
          if (persistence.generatedTables.hasOwnProperty(p)) {
            tableArray.push(p);
          }
        }
        function dropOneTable () {
          var tableName = tableArray.pop();
          tx.executeSql("DROP TABLE IF EXISTS `" + tableName + "`", null, function () {
              if (tableArray.length > 0) {
                dropOneTable();
              } else {
                cb();
              }
            }, cb);
        }
        if(tableArray.length > 0) {
          dropOneTable();
        } else {
          cb();
        }

        function cb(result, err) {
          session.clean();
          persistence.generatedTables = {};
          if (callback) callback(result, err);
        }
      }, true);
  };

  /**
   * Converts a database row into an entity object
   */
  function rowToEntity(session, entityName, row, prefix) {
    prefix = prefix || '';
    if (session.trackedObjects[row[prefix + "id"]]) { // Cached version
      return session.trackedObjects[row[prefix + "id"]];
    }
    var tm = persistence.typeMapper;
    var rowMeta = persistence.getMeta(entityName);
    var ent = persistence.define(entityName); // Get entity
    if(!row[prefix+'id']) { // null value, no entity found
      return null;
    }
    var o = new ent(session, undefined, true);
    o.id = tm.dbValToEntityVal(row[prefix + 'id'], tm.idType);
    o._new = false;
    for ( var p in row) {
      if (row.hasOwnProperty(p)) {
        if (p.substring(0, prefix.length) === prefix) {
          var prop = p.substring(prefix.length);
          if (prop != 'id') {
            o._data[prop] = tm.dbValToEntityVal(row[p], rowMeta.fields[prop] || tm.idType);
          }
        }
      }
    }
    return o;
  }

  /**
   * Internal function to persist an object to the database
   * this function is invoked by persistence.flush()
   */
  function save(obj, tx, callback) {
    var meta = persistence.getMeta(obj._type);
    var tm = persistence.typeMapper;
    var properties = [];
    var values = [];
    var qs = [];
    var propertyPairs = [];
    if(obj._new) { // Mark all properties dirty
      for (var p in meta.fields) {
        if(meta.fields.hasOwnProperty(p)) {
          obj._dirtyProperties[p] = true;
        }
      }
    }
    for ( var p in obj._dirtyProperties) {
      if (obj._dirtyProperties.hasOwnProperty(p)) {
        properties.push("`" + p + "`");
        var type = meta.fields[p] || tm.idType;
        values.push(tm.entityValToDbVal(obj._data[p], type));
        qs.push(tm.outVar("?", type));
        propertyPairs.push("`" + p + "` = " + tm.outVar("?", type));
      }
    }
    var additionalQueries = [];
    if(meta && meta.hasMany) {
      for(var p in meta.hasMany) {
        if(meta.hasMany.hasOwnProperty(p)) {
          additionalQueries = additionalQueries.concat(persistence.get(obj, p).persistQueries());
        }
      }
    }
    executeQueriesSeq(tx, additionalQueries, function() {
        if (!obj._new && properties.length === 0) { // Nothing changed and not new
          if(callback) callback();
          return;
        }
        obj._dirtyProperties = {};
        if (obj._new) {
          properties.push('id');
          values.push(tm.entityIdToDbId(obj.id));
          qs.push(tm.outIdVar('?'));
          var sql = "INSERT INTO `" + obj._type + "` (" + properties.join(", ") + ") VALUES (" + qs.join(', ') + ")";
          obj._new = false;
          tx.executeSql(sql, values, callback, callback);
        } else {
          var sql = "UPDATE `" + obj._type + "` SET " + propertyPairs.join(',') + " WHERE id = " + tm.outId(obj.id);
          tx.executeSql(sql, values, callback, callback);
        }
      });
  }

  persistence.save = save;

  function remove (obj, tx, callback) {
    var meta = persistence.getMeta(obj._type);
	var tm = persistence.typeMapper;
    var queries = [["DELETE FROM `" + obj._type + "` WHERE id = " + tm.outId(obj.id), null]];
    for (var rel in meta.hasMany) {
      if (meta.hasMany.hasOwnProperty(rel) && meta.hasMany[rel].manyToMany) {
        var tableName = meta.hasMany[rel].tableName;
        //var inverseProperty = meta.hasMany[rel].inverseProperty;
        queries.push(["DELETE FROM `" + tableName + "` WHERE `" + meta.name + '_' + rel + "` = " + tm.outId(obj.id), null]);
      }
    }
    executeQueriesSeq(tx, queries, callback);
  }

  /**
   * Utility function to execute a series of queries in an asynchronous way
   * @param tx the transaction to execute the queries on
   * @param queries an array of [query, args] tuples
   * @param callback the function to call when all queries have been executed
   */
  function executeQueriesSeq (tx, queries, callback) {
    // queries.reverse();
    var callbackArgs = [];
    for ( var i = 3; i < arguments.length; i++) {
      callbackArgs.push(arguments[i]);
    }
    persistence.asyncForEach(queries, function(queryTuple, callback) {
        tx.executeSql(queryTuple[0], queryTuple[1], callback, function(_, err) {
            console.log(err.message);
            callback(_, err);
          });
      }, function(result, err) {
        if (err && callback) {
          callback(result, err);
          return;
        }
        if(callback) callback.apply(null, callbackArgs);
      });
  }

  persistence.executeQueriesSeq = executeQueriesSeq;

  /////////////////////////// QueryCollection patches to work in SQL environment

  /**
   * Function called when session is flushed, returns list of SQL queries to execute
   * (as [query, arg] tuples)
   */
  persistence.QueryCollection.prototype.persistQueries = function() { return []; };

  var oldQCClone = persistence.QueryCollection.prototype.clone;

  persistence.QueryCollection.prototype.clone = function (cloneSubscribers) {
    var c = oldQCClone.call(this, cloneSubscribers);
    c._additionalJoinSqls = this._additionalJoinSqls.slice(0);
    c._additionalWhereSqls = this._additionalWhereSqls.slice(0);
    c._additionalGroupSqls = this._additionalGroupSqls.slice(0);
    c._manyToManyFetch = this._manyToManyFetch;
    return c;
  };

  var oldQCInit = persistence.QueryCollection.prototype.init;

  persistence.QueryCollection.prototype.init = function(session, entityName, constructor) {
    oldQCInit.call(this, session, entityName, constructor);
    this._manyToManyFetch = null;
    this._additionalJoinSqls = [];
    this._additionalWhereSqls = [];
    this._additionalGroupSqls = [];
  };

  var oldQCToUniqueString = persistence.QueryCollection.prototype.toUniqueString;

  persistence.QueryCollection.prototype.toUniqueString = function() {
    var s = oldQCToUniqueString.call(this);
    s += '|JoinSQLs:';
    for(var i = 0; i < this._additionalJoinSqls.length; i++) {
      s += this._additionalJoinSqls[i];
    }
    s += '|WhereSQLs:';
    for(var i = 0; i < this._additionalWhereSqls.length; i++) {
      s += this._additionalWhereSqls[i];
    }
    s += '|GroupSQLs:';
    for(var i = 0; i < this._additionalGroupSqls.length; i++) {
      s += this._additionalGroupSqls[i];
    }
    if(this._manyToManyFetch) {
      s += '|ManyToManyFetch:';
      s += JSON.stringify(this._manyToManyFetch); // TODO: Do something more efficient
    }
    return s;
  };

  persistence.NullFilter.prototype.sql = function (meta, alias, values) {
    return "1=1";
  };

  persistence.AndFilter.prototype.sql = function (meta, alias, values) {
    return "(" + this.left.sql(meta, alias, values) + " AND "
    + this.right.sql(meta, alias, values) + ")";
  };

  persistence.OrFilter.prototype.sql = function (meta, alias, values) {
    return "(" + this.left.sql(meta, alias, values) + " OR "
    + this.right.sql(meta, alias, values) + ")";
  };

  persistence.PropertyFilter.prototype.sql = function (meta, alias, values) {
    var tm = persistence.typeMapper;
    var aliasPrefix = alias ? "`" + alias + "`." : "";
  	var sqlType = meta.fields[this.property] || tm.idType;
    if (this.operator === '=' && this.value === null) {
      return aliasPrefix + '`' + this.property + "` IS NULL";
    } else if (this.operator === '!=' && this.value === null) {
      return aliasPrefix + '`' + this.property + "` IS NOT NULL";
    } else if (this.operator === 'in') {
      var vals = this.value;
      var qs = [];
      for(var i = 0; i < vals.length; i++) {
        qs.push('?');
        values.push(tm.entityValToDbVal(vals[i], sqlType));
      }
      if(vals.length === 0) {
        // Optimize this a little
        return "1 = 0";
      } else {
        return aliasPrefix + '`' + this.property + "` IN (" + qs.join(', ') + ")";
      }
    } else if (this.operator === 'not in') {
      var vals = this.value;
      var qs = [];
      for(var i = 0; i < vals.length; i++) {
        qs.push('?');
        values.push(tm.entityValToDbVal(vals[i], sqlType));
      }

      if(vals.length === 0) {
        // Optimize this a little
        return "1 = 1";
      } else {
        return aliasPrefix + '`' + this.property + "` NOT IN (" + qs.join(', ') + ")";
      }
    } else {
      var value = this.value;
      if(value === true || value === false) {
        value = value ? 1 : 0;
      }
      values.push(tm.entityValToDbVal(value, sqlType));
 	  return aliasPrefix + '`' + this.property + "` " + this.operator + " " + tm.outVar("?", sqlType);
   }
  };

  // QueryColleciton's list

  /**
   * Asynchronous call to actually fetch the items in the collection
   * @param tx transaction to use
   * @param callback function to be called taking an array with
   *   result objects as argument
   */
  persistence.DbQueryCollection.prototype.list = function (tx, callback) {
    var args = argspec.getArgs(arguments, [
        { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
        { name: 'callback', optional: false, check: argspec.isCallback() }
      ]);
    tx = args.tx;
    callback = args.callback;

    var that = this;
    var session = this._session;
    if(!tx) { // no transaction supplied
      session.transaction(function(tx) {
          that.list(tx, callback);
        });
      return;
    }
    var entityName = this._entityName;
    var meta = persistence.getMeta(entityName);
    var tm = persistence.typeMapper;

    // handles mixin case -- this logic is generic and could be in persistence.
    if (meta.isMixin) {
      var result = [];
      persistence.asyncForEach(meta.mixedIns, function(realMeta, next) {
        var query = that.clone();
        query._entityName = realMeta.name;
        query.list(tx, function(array) {
          result = result.concat(array);
          next();
        });
      }, function() {
        var query = new persistence.LocalQueryCollection(result);
        query._orderColumns = that._orderColumns;
        query._reverse = that._reverse;
        // TODO: handle skip and limit -- do we really want to do it?
        query.list(null, callback);
      });
      return;
    }

    function selectAll (meta, tableAlias, prefix) {
      var selectFields = [ tm.inIdVar("`" + tableAlias + "`.id") + " AS " + prefix + "id" ];
      for ( var p in meta.fields) {
        if (meta.fields.hasOwnProperty(p)) {
          selectFields.push(tm.inVar("`" + tableAlias + "`.`" + p + "`", meta.fields[p]) + " AS `"
            + prefix + p + "`");
        }
      }
      for ( var p in meta.hasOne) {
        if (meta.hasOne.hasOwnProperty(p)) {
          selectFields.push(tm.inIdVar("`" + tableAlias + "`.`" + p + "`") + " AS `"
            + prefix + p + "`");
        }
      }
      return selectFields;
    }
    var args = [];
    var mainPrefix = entityName + "_";

    var mainAlias = 'root';
    var selectFields = selectAll(meta, mainAlias, mainPrefix);

    var joinSql = '';
    var additionalWhereSqls = this._additionalWhereSqls.slice(0);
    var mtm = this._manyToManyFetch;
    if(mtm) {
      joinSql += "LEFT JOIN `" + mtm.table + "` AS mtm ON mtm.`" + mtm.inverseProp + "` = `root`.`id` ";
      additionalWhereSqls.push("mtm.`" + mtm.prop + "` = " + tm.outId(mtm.id));
    }

    joinSql += this._additionalJoinSqls.join(' ');

    for ( var i = 0; i < this._prefetchFields.length; i++) {
      var prefetchFieldParts = this._prefetchFields[i].split('.');
      var prefetchField = prefetchFieldParts[0];
      var eName = entityName;
      if(prefetchFieldParts.length > 1){
        prefetchField = prefetchFieldParts[1];
        eName = prefetchFieldParts[0];
      }
      var theMeta = persistence.getMeta(eName);
      var thisMeta = theMeta.hasOne[prefetchField].type.meta;
      if (thisMeta.isMixin)
        throw new Error("cannot prefetch a mixin");
      var tableAlias = thisMeta.name + '_' + prefetchField + "_tbl";
      var PrefetchFrom = mainAlias;
      if(prefetchFieldParts.length > 1){
        PrefetchFrom = eName + '_' + eName + "_tbl";;
      }
      selectFields = selectFields.concat(selectAll(thisMeta, tableAlias,
          prefetchField + "_"));
      joinSql += "LEFT JOIN `" + thisMeta.name + "` AS `" + tableAlias
      + "` ON `" + tableAlias + "`.`id` = `" + PrefetchFrom + '`.`' + prefetchField + "` ";

    }

    var whereSql = "WHERE "
    + [ this._filter.sql(meta, mainAlias, args) ].concat(additionalWhereSqls).join(' AND ');

    var sql = "SELECT " + selectFields.join(", ") + " FROM `" + entityName
    + "` AS `" + mainAlias + "` " + joinSql + " " + whereSql;

    if(this._additionalGroupSqls.length > 0) {
      sql += this._additionalGroupSqls.join(' ');
    }

    if(this._orderColumns.length > 0) {
      sql += " ORDER BY "
      + this._orderColumns.map(
        function (c) {
          return (c[2] ? "`" : "LOWER(`") + mainPrefix + c[0] + (c[2] ? "` " : "`) ")
          + (c[1] ? "ASC" : "DESC");
        }).join(", ");
    }
    if(this._limit >= 0) {
      sql += " LIMIT " + this._limit;
    }
    if(this._skip > 0) {
      sql += " OFFSET " + this._skip;
    }
    session.flush(tx, function () {
        tx.executeSql(sql, args, function (rows) {
            var results = [];
            if(that._reverse) {
              rows.reverse();
            }
            for ( var i = 0; i < rows.length; i++) {
              var r = rows[i];
              var e = rowToEntity(session, entityName, r, mainPrefix);
              for ( var j = 0; j < that._prefetchFields.length; j++) {

                var prefetchFieldParts = that._prefetchFields[j].split('.');
                var prefetchField = prefetchFieldParts[0];
                var eName = entityName;
                if(prefetchFieldParts.length > 1){
                  prefetchField = prefetchFieldParts[1];
                  eName = prefetchFieldParts[0];
                }
                var theMeta = persistence.getMeta(eName);
                var thisMeta = theMeta.hasOne[prefetchField].type.meta;

                e._data_obj[prefetchField] = rowToEntity(session, thisMeta.name, r, prefetchField + '_');
                session.add(e._data_obj[prefetchField]);
              }
              results.push(e);
              session.add(e);
            }
            callback(results);
            that.triggerEvent('list', that, results);
          });
      });
  };

  /**
   * Asynchronous call to remove all the items in the collection.
   * Note: does not only remove the items from the collection, but
   * the items themselves.
   * @param tx transaction to use
   * @param callback function to be called when clearing has completed
   */
  persistence.DbQueryCollection.prototype.destroyAll = function (tx, callback) {
    var args = argspec.getArgs(arguments, [
        { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
        { name: 'callback', optional: true, check: argspec.isCallback(), defaultValue: function(){} }
      ]);
    tx = args.tx;
    callback = args.callback;

    var that = this;
    var session = this._session;
    if(!tx) { // no transaction supplied
      session.transaction(function(tx) {
          that.destroyAll(tx, callback);
        });
      return;
    }
    var entityName = this._entityName;
    var meta = persistence.getMeta(entityName);
    var tm = persistence.typeMapper;

    // handles mixin case -- this logic is generic and could be in persistence.
    if (meta.isMixin) {
      persistence.asyncForEach(meta.mixedIns, function(realMeta, next) {
        var query = that.clone();
        query._entityName = realMeta.name;
        query.destroyAll(tx, callback);
      }, callback);
      return;
    }

    var joinSql = '';
    var additionalWhereSqls = this._additionalWhereSqls.slice(0);
    var mtm = this._manyToManyFetch;
    if(mtm) {
      joinSql += "LEFT JOIN `" + mtm.table + "` AS mtm ON mtm.`" + mtm.inverseProp + "` = `root`.`id` ";
      additionalWhereSqls.push("mtm.`" + mtm.prop + "` = " + tm.outId(mtm.id));
    }

    joinSql += this._additionalJoinSqls.join(' ');

    var args = [];
    var whereSql = "WHERE "
    + [ this._filter.sql(meta, null, args) ].concat(additionalWhereSqls).join(' AND ');

    var selectSql = "SELECT id FROM `" + entityName + "` " + joinSql + ' ' + whereSql;
    var deleteSql = "DELETE FROM `" + entityName + "` " + joinSql + ' ' + whereSql;
    var args2 = args.slice(0);

    session.flush(tx, function () {
        tx.executeSql(selectSql, args, function(results) {
            for(var i = 0; i < results.length; i++) {
              delete session.trackedObjects[results[i].id];
              session.objectsRemoved.push({id: results[i].id, entity: entityName});
            }
            that.triggerEvent('change', that);
            tx.executeSql(deleteSql, args2, callback, callback);
          }, callback);
      });
  };

  /**
   * Asynchronous call to count the number of items in the collection.
   * @param tx transaction to use
   * @param callback function to be called when clearing has completed
   */
  persistence.DbQueryCollection.prototype.count = function (tx, callback) {
    var args = argspec.getArgs(arguments, [
        { name: 'tx', optional: true, check: persistence.isTransaction, defaultValue: null },
        { name: 'callback', optional: false, check: argspec.isCallback() }
      ]);
    tx = args.tx;
    callback = args.callback;

    var that = this;
    var session = this._session;
    if(tx && !tx.executeSql) { // provided callback as first argument
      callback = tx;
      tx = null;
    }
    if(!tx) { // no transaction supplied
      session.transaction(function(tx) {
          that.count(tx, callback);
        });
      return;
    }
    var entityName = this._entityName;
    var meta = persistence.getMeta(entityName);
    var tm = persistence.typeMapper;

    // handles mixin case -- this logic is generic and could be in persistence.
    if (meta.isMixin) {
      var result = 0;
      persistence.asyncForEach(meta.mixedIns, function(realMeta, next) {
        var query = that.clone();
        query._entityName = realMeta.name;
        query.count(tx, function(count) {
          result += count;
          next();
        });
      }, function() {
        callback(result);
      });
      return;
    }

    var joinSql = '';
    var additionalWhereSqls = this._additionalWhereSqls.slice(0);
    var mtm = this._manyToManyFetch;
    if(mtm) {
      joinSql += "LEFT JOIN `" + mtm.table + "` AS mtm ON mtm.`" + mtm.inverseProp + "` = `root`.`id` ";
      additionalWhereSqls.push("mtm.`" + mtm.prop + "` = " + tm.outId(mtm.id));
    }

    joinSql += this._additionalJoinSqls.join(' ');
    var args = [];
    var whereSql = "WHERE " + [ this._filter.sql(meta, "root", args) ].concat(additionalWhereSqls).join(' AND ');

    var sql = "SELECT COUNT(*) AS cnt FROM `" + entityName + "` AS `root` " + joinSql + " " + whereSql;

    session.flush(tx, function () {
        tx.executeSql(sql, args, function(results) {
            callback(parseInt(results[0].cnt, 10));
          });
      });
  };

  persistence.ManyToManyDbQueryCollection.prototype.persistQueries = function() {
    var queries = [];
    var meta = persistence.getMeta(this._obj._type);
    var inverseMeta = meta.hasMany[this._coll].type.meta;
    var tm = persistence.typeMapper;
    var rel = meta.hasMany[this._coll];
    var inv = inverseMeta.hasMany[rel.inverseProperty];
    var direct = rel.mixin ? rel.mixin.meta.name : meta.name;
    var inverse = inv.mixin ? inv.mixin.meta.name : inverseMeta.name;

    // Added
    for(var i = 0; i < this._localAdded.length; i++) {
      var columns = [direct + "_" + this._coll, inverse + '_' + rel.inverseProperty];
      var vars = [tm.outIdVar("?"), tm.outIdVar("?")];
      var args = [tm.entityIdToDbId(this._obj.id), tm.entityIdToDbId(this._localAdded[i].id)];
      if (rel.mixin) {
        columns.push(direct + "_" + this._coll + "_class");
        vars.push("?");
        args.push(meta.name);
      }
      if (inv.mixin) {
        columns.push(inverse + "_" + rel.inverseProperty + "_class");
        vars.push("?");
        args.push(inverseMeta.name);
      }
      queries.push(["INSERT INTO " + rel.tableName +
            " (`" + columns.join("`, `") + "`) VALUES (" + vars.join(",") + ")", args]);
    }
    this._localAdded = [];
    // Removed
    for(var i = 0; i < this._localRemoved.length; i++) {
    queries.push(["DELETE FROM  " + rel.tableName +
          " WHERE `" + direct + "_" + this._coll + "` = " + tm.outIdVar("?") + " AND `" +
          inverse + '_' + rel.inverseProperty +
          "` = " + tm.outIdVar("?"), [tm.entityIdToDbId(this._obj.id), tm.entityIdToDbId(this._localRemoved[i].id)]]);
    }
    this._localRemoved = [];
    return queries;
  };
};

if (typeof exports !== 'undefined') {
	exports.defaultTypeMapper = defaultTypeMapper;
	exports.config = config;
}
else {
	window = window || {};
	window.persistence = window.persistence || persistence || {};
	window.persistence.store = window.persistence.store || {};
	window.persistence.store.sql = {
		defaultTypeMapper: defaultTypeMapper,
		config: config
	};
}

})();
(function(){
  'use strict';

try {
  if(!window) {
    window = {};
    //exports.console = console;
  }
} catch(e) {
  window = {};
  exports.console = console;
}

var persistence = (window && window.persistence) ? window.persistence : {};

if(!persistence.store) {
  persistence.store = {};
}

persistence.store.websql = {};


persistence.store.websql.config = function(persistence, dbname, description, size) {
    var conn = null;

    /**
     * Create a transaction
     *
     * @param callback,
     *            the callback function to be invoked when the transaction
     *            starts, taking the transaction object as argument
     */
    persistence.transaction = function (callback) {
        if (!conn) {
            throw new Error("No ongoing database connection, please connect first.");
        } else {
            conn.transaction(callback);
        }
    };

    ////////// Low-level database interface, abstracting from HTML5 and Gears databases \\\\
    persistence.db = persistence.db || {};

    persistence.db.implementation = "unsupported";
    persistence.db.conn = null;

    // window object does not exist on Qt Declarative UI (http://doc.trolltech.org/4.7-snapshot/declarativeui.html)
    if (window && window.DB) {
        persistence.db.implementation = "exmobi";
    } else if (window && window.openDatabase) {
        persistence.db.implementation = "html5";
    } else if (window && window.google && google.gears) {
        persistence.db.implementation = "gears";
    } else {
    try {
      if (openDatabaseSync) {
        // TODO: find a browser that implements openDatabaseSync and check out if
        //       it is attached to the window or some other object
        persistence.db.implementation = "html5-sync";
      }
    } catch(e) {
    }
  }

  persistence.db.html5 = {};

  persistence.db.html5.connect = function (dbname, description, size) {
    var that = {};
    var conn = openDatabase(dbname, '1.0.0', description, size);

    that.transaction = function (fn) {
      return conn.transaction(function (sqlt) {
          return fn(persistence.db.html5.transaction(sqlt));
        });
    };
    return that;
  };

  persistence.db.html5.transaction = function (t) {
    var that = {};
    that.executeSql = function (query, args, successFn, errorFn) {
      if(persistence.debug) {
        console.log(query, args);
      }
      t.executeSql(query, args, function (_, result) {
          if (successFn) {
            var results = [];
            for ( var i = 0; i < result.rows.length; i++) {
              results.push(result.rows.item(i));
            }
            successFn(results);
          }
        }, errorFn);
    };
    return that;
  };

  persistence.db.html5Sync = {};

  persistence.db.html5Sync.connect = function (dbname, description, size) {
    var that = {};
    var conn = openDatabaseSync(dbname, '1.0', description, size);

    that.transaction = function (fn) {
      return conn.transaction(function (sqlt) {
          return fn(persistence.db.html5Sync.transaction(sqlt));
        });
    };
    return that;
  };

  persistence.db.html5Sync.transaction = function (t) {
    var that = {};
    that.executeSql = function (query, args, successFn, errorFn) {
      if (args == null) args = [];

      if(persistence.debug) {
        console.log(query, args);
      }

      var result = t.executeSql(query, args);
      if (result) {
        if (successFn) {
          var results = [];
          for ( var i = 0; i < result.rows.length; i++) {
            results.push(result.rows.item(i));
          }
          successFn(results);
        }
      }
    };
    return that;
  };

  persistence.db.gears = {};

  persistence.db.gears.connect = function (dbname) {
    var that = {};
    var conn = google.gears.factory.create('beta.database');
    conn.open(dbname);

    that.transaction = function (fn) {
      fn(persistence.db.gears.transaction(conn));
    };
    return that;
  };

  persistence.db.gears.transaction = function (conn) {
    var that = {};
    that.executeSql = function (query, args, successFn, errorFn) {
      if(persistence.debug) {
        console.log(query, args);
      }
      var rs = conn.execute(query, args);
      if (successFn) {
        var results = [];
        while (rs.isValidRow()) {
          var result = {};
          for ( var i = 0; i < rs.fieldCount(); i++) {
            result[rs.fieldName(i)] = rs.field(i);
          }
          results.push(result);
          rs.next();
        }
        successFn(results);
      }
    };
    return that;
  };

  persistence.db.exmobi = {};
  persistence.db.exmobi.connect = function (dbname) {
        var that = {};
        var conn = new DB();
        conn.open(dbname, 'sys:db/');

        that.transaction = function (fn) {
            fn(persistence.db.exmobi.transaction(conn));
        };
        return that;
  };

  persistence.db.exmobi.transaction = function (conn) {
      var that = {};
      that.executeSql = function (query, args, successFn, errorFn) {
          if(persistence.debug) {
              console.log(query, args);
          }
          if(args && args.length){
              var i = 0;
              var re = /(\?)/g;
              query = query.replace(re,function(){
                  if(i >= args.length){
                      return '';
                  }
                  var arg = args[i];
                  i++;
                  return "'"+arg+"'";
              })
          }
          var results = [];
          if(query.toUpperCase().indexOf("SELECT") >= 0){
              results = conn.query(query);
          }else{
              results = conn.execute(query);
          }
          if (results && successFn) {
              results = results.length ? results : [];
              successFn(results);
          }
      };
      return that;
  };
  persistence.db.connect = function (dbname, description, size) {
    if(persistence.db.implementation == "exmobi"){
      return persistence.db.exmobi.connect(dbname);
    } else if (persistence.db.implementation == "html5") {
      return persistence.db.html5.connect(dbname, description, size);
    } else if (persistence.db.implementation == "html5-sync") {
      return persistence.db.html5Sync.connect(dbname, description, size);
    } else if (persistence.db.implementation == "gears") {
      return persistence.db.gears.connect(dbname);
    }
  };

  ///////////////////////// SQLite dialect

  persistence.store.websql.sqliteDialect = {
    // columns is an array of arrays, e.g.
    // [["id", "VARCHAR(32)", "PRIMARY KEY"], ["name", "TEXT"]]
    createTable: function(tableName, columns) {
      var tm = persistence.typeMapper;
      var sql = "CREATE TABLE IF NOT EXISTS `" + tableName + "` (";
      var defs = [];
      for(var i = 0; i < columns.length; i++) {
        var column = columns[i];
        defs.push("`" + column[0] + "` " + tm.columnType(column[1]) + (column[2] ? " " + column[2] : ""));
      }
      sql += defs.join(", ");
      sql += ')';
      return sql;
    },

    // columns is array of column names, e.g.
    // ["id"]
    createIndex: function(tableName, columns, options) {
      options = options || {};
      return "CREATE "+(options.unique?"UNIQUE ":"")+"INDEX IF NOT EXISTS `" + tableName + "__" + columns.join("_") +
             "` ON `" + tableName + "` (" +
             columns.map(function(col) { return "`" + col + "`"; }).join(", ") + ")";
    }
  };

  // Configure persistence for generic sql persistence, using sqliteDialect
  persistence.store.sql.config(persistence, persistence.store.websql.sqliteDialect);

  // Make the connection
  conn = persistence.db.connect(dbname, description, size);
  if(!conn) {
    throw new Error("No supported database found in this browser.");
  }
};

try {
  exports.persistence = persistence;
} catch(e) {}

})();

;(function() {
var util = {}, events = {}, base = {}, easing = {}, timer = {}, animate = {}, hammer = {}, boundry = {}, components_sticky = {}, components_fixed = {}, core = {}, components_scrollbar = {}, components_controller = {}, simulate_scroll = {}, origin_scroll = {}, xscroll = {};
util = function (exports) {
  var SUBSTITUTE_REG = /\\?\{([^{}]+)\}/g, EMPTY = '';
  var RE_TRIM = /^[\s\xa0]+|[\s\xa0]+$/g, trim = String.prototype.trim;
  var _trim = trim ? function (str) {
    return str == null ? EMPTY : trim.call(str);
  } : function (str) {
    return str == null ? EMPTY : (str + '').replace(RE_TRIM, EMPTY);
  };
  function upperCase() {
    return arguments[1].toUpperCase();
  }
  function Empty() {
  }
  function createObject(proto, constructor) {
    var newProto;
    if (Object.create) {
      newProto = Object.create(proto);
    } else {
      Empty.prototype = proto;
      newProto = new Empty();
    }
    newProto.constructor = constructor;
    return newProto;
  }
  function getNodes(node, rootNode) {
    if (!node)
      return;
    if (node.nodeType)
      return [node];
    var rootNode = rootNode && rootNode.nodeType ? rootNode : document;
    if (node && typeof node === 'string') {
      return rootNode.querySelectorAll(node);
    }
    return;
  }
  // Useful for temporary DOM ids.
  var idCounter = 0;
  var getOffsetTop = function (el) {
    var offset = el.offsetTop;
    if (el.offsetParent != null)
      offset += getOffsetTop(el.offsetParent);
    return offset;
  };
  var getOffsetLeft = function (el) {
    var offset = el.offsetLeft;
    if (el.offsetParent != null)
      offset += getOffsetLeft(el.offsetParent);
    return offset;
  };
  var Util = {
    // Is a given variable an object?
    isObject: function (obj) {
      return obj === Object(obj);
    },
    isArray: Array.isArray || function (obj) {
      return toString.call(obj) == '[object Array]';
    },
    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    isEmpty: function (obj) {
      if (obj == null)
        return true;
      if (this.isArray(obj) || this.isString(obj))
        return obj.length === 0;
      for (var key in obj)
        if (this.has(obj, key))
          return false;
      return true;
    },
    mix: function (to, from, deep) {
      for (var i in from) {
        to[i] = from[i];
      }
      return to;
    },
    extend: function (r, s, px, sx) {
      if (!s || !r) {
        return r;
      }
      var sp = s.prototype, rp;
      // add prototype chain
      rp = createObject(sp, r);
      r.prototype = this.mix(rp, r.prototype);
      r.superclass = createObject(sp, s);
      // add prototype overrides
      if (px) {
        this.mix(rp, px);
      }
      // add object overrides
      if (sx) {
        this.mix(r, sx);
      }
      return r;
    },
    /**
    * test whether a string start with a specified substring
    * @param {String} str the whole string
    * @param {String} prefix a specified substring
    * @return {Boolean} whether str start with prefix
    * @member util
    */
    startsWith: function (str, prefix) {
      return str.lastIndexOf(prefix, 0) === 0;
    },
    /**
    * test whether a string end with a specified substring
    * @param {String} str the whole string
    * @param {String} suffix a specified substring
    * @return {Boolean} whether str end with suffix
    * @member util
    */
    endsWith: function (str, suffix) {
      var ind = str.length - suffix.length;
      return ind >= 0 && str.indexOf(suffix, ind) === ind;
    },
    /**
    * Removes the whitespace from the beginning and end of a string.
    * @method
    * @member util
    */
    trim: _trim,
    /**
    * Substitutes keywords in a string using an object/array.
    * Removes undef keywords and ignores escaped keywords.
    * @param {String} str template string
    * @param {Object} o json data
    * @member util
    * @param {RegExp} [regexp] to match a piece of template string
    */
    substitute: function (str, o, regexp) {
      if (typeof str !== 'string' || !o) {
        return str;
      }
      return str.replace(regexp || SUBSTITUTE_REG, function (match, name) {
        if (match.charAt(0) === '\\') {
          return match.slice(1);
        }
        return o[name] === undefined ? EMPTY : o[name];
      });
    },
    /**
    * vendors
    * @return { String } webkit|moz|ms|o
    * @memberOf Util
    */
    vendor: function () {
      var el = document.createElement('div').style;
      var vendors = [
          't',
          'webkitT',
          'MozT',
          'msT',
          'OT'
        ], transform, i = 0, l = vendors.length;
      for (; i < l; i++) {
        transform = vendors[i] + 'ransform';
        if (transform in el)
          return vendors[i].substr(0, vendors[i].length - 1);
      }
      return false;
    }(),
    /**
    *  add vendor to attribute
    *  @memberOf Util
    *  @param {String} attrName name of attribute
    *  @return { String }
    **/
    prefixStyle: function (attrName) {
      if (this.vendor === false)
        return false;
      if (this.vendor === '')
        return attrName;
      return this.vendor + attrName.charAt(0).toUpperCase() + attrName.substr(1);
    },
    /**
    * judge if has class
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    * @return {Boolean}
    */
    hasClass: function (el, className) {
      return el && el.className && className && el.className.indexOf(className) != -1;
    },
    /**
    * add className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    addClass: function (el, className) {
      if (el && className && !this.hasClass(el, className)) {
        el.className += ' ' + className;
      }
    },
    /**
    * remove className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    removeClass: function (el, className) {
      if (el && el.className && className) {
        el.className = el.className.replace(className, '');
      }
    },
    /**
    * remove an element
    * @memberOf Util
    * @param  {HTMLElement}  el
    */
    remove: function (el) {
      if (!el || !el.parentNode)
        return;
      el.parentNode.removeChild(el);
    },
    /**
    * get offset top
    * @memberOf Util
    * @param  {HTMLElement}   el
    * @return {Number} offsetTop
    */
    getOffsetTop: getOffsetTop,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @return {Number} offsetLeft
    */
    getOffsetLeft: getOffsetLeft,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement} el
    * @param  {String} selector
    * @param  {HTMLElement} rootNode
    * @return {HTMLElement} parent element
    */
    findParentEl: function (el, selector, rootNode) {
      var rs = null, parent = null;
      var type = /^#/.test(selector) ? 'id' : /^\./.test(selector) ? 'class' : 'tag';
      var sel = selector.replace(/\.|#/g, '');
      if (rootNode && typeof rootNode === 'string') {
        rootNode = document.querySelector(rootNode);
      }
      rootNode = rootNode || document.body;
      if (!el || !selector)
        return;
      if (type == 'class' && el.className && el.className.match(sel)) {
        return el;
      } else if (type == 'id' && el.id && _trim(el.id) == sel) {
        return el;
      } else if (type == 'tag' && el.tagName.toLowerCase() == sel) {
        return el;
      }
      while (!rs) {
        if (parent == rootNode)
          break;
        parent = el.parentNode;
        if (!parent)
          break;
        if (type == 'class' && parent.className && parent.className.match(sel) || type == 'id' && parent.id && _trim(parent.id) == sel || type == 'tag' && parent.tagName && parent.tagName.toLowerCase() == sel) {
          rs = parent;
          return rs;
          break;
        } else {
          el = parent;
        }
      }
      return null;
    },
    /**
    * Generate a unique integer id (unique within the entire client session).
    * @param  {String} prefix
    * @return {String} guid
    */
    guid: function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    },
    /**
    * judge if is an android os
    * @return {Boolean} [description]
    */
    isAndroid: function () {
      return /Android /.test(window.navigator.appVersion);
    },
    /**
    * judge if is an android device with low  performance
    * @return {Boolean}
    */
    isBadAndroid: function () {
      return /Android /.test(window.navigator.appVersion) && !/Chrome\/\d/.test(window.navigator.appVersion);
    },
    px2Num: function (px) {
      return Number(px.replace(/px/, ''));
    },
    getNodes: getNodes,
    getNode: function (node, rootNode) {
      var nodes = getNodes(node, rootNode);
      return nodes && nodes[0];
    },
    stringifyStyle: function (style) {
      var styleStr = '';
      for (var i in style) {
        styleStr += [
          i,
          ':',
          style[i],
          ';'
        ].join('');
      }
      return styleStr;
    }
  };
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  var names = [
    'Arguments',
    'Function',
    'String',
    'Number',
    'Date',
    'RegExp'
  ];
  for (var i = 0; i < names.length; i++) {
    Util['is' + names[i]] = function (obj) {
      return toString.call(obj) == '[object ' + names[i] + ']';
    };
  }
  if (typeof module == 'object' && module.exports) {
    exports = Util;
  }  /** ignored by jsdoc **/ else {
    return Util;
  }
  return exports;
}(util);
events = function (exports) {
  var Util = util;
  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var _once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  /**
   * @discription events
   * @mixin
   */
  var Events = {
    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function (name, callback, context) {
      if (!eventsApi(this, 'on', name, [
          callback,
          context
        ]) || !callback)
        return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    },
    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function (name, callback, context) {
      if (!eventsApi(this, 'once', name, [
          callback,
          context
        ]) || !callback)
        return this;
      var self = this;
      var once = _once(function () {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },
    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function (name, callback, context) {
      if (!this._events || !eventsApi(this, 'off', name, [
          callback,
          context
        ]))
        return this;
      // Remove all callbacks for all events.
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      var names = name ? [name] : Object.keys(this._events);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];
        // Bail out if there are no events stored.
        var events = this._events[name];
        if (!events)
          continue;
        // Remove all callbacks for this event.
        if (!callback && !context) {
          delete this._events[name];
          continue;
        }
        // Find any remaining events.
        var remaining = [];
        for (var j = 0, k = events.length; j < k; j++) {
          var event = events[j];
          if (callback && callback !== event.callback && callback !== event.callback._callback || context && context !== event.context) {
            remaining.push(event);
          }
        }
        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
          this._events[name] = remaining;
        } else {
          delete this._events[name];
        }
      }
      return this;
    },
    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function (name) {
      if (!this._events)
        return this;
      var args = Array.prototype.slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args))
        return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events)
        triggerEvents(events, args);
      if (allEvents)
        triggerEvents(allEvents, arguments);
      return this;
    },
    // Inversion-of-control versions of `on` and `once`. Tell *this* object to
    // listen to an event in another object ... keeping track of what it's
    // listening to.
    listenTo: function (obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = Util.guid('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object')
        callback = this;
      obj.on(name, callback, this);
      return this;
    },
    listenToOnce: function (obj, name, callback) {
      if (typeof name === 'object') {
        for (var event in name)
          this.listenToOnce(obj, event, name[event]);
        return this;
      }
      var cb = _once(function () {
        this.stopListening(obj, name, cb);
        callback.apply(this, arguments);
      });
      cb._callback = callback;
      return this.listenTo(obj, name, cb);
    },
    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function (obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo)
        return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object')
        callback = this;
      if (obj)
        (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || Util.isEmpty(obj._events))
          delete this._listeningTo[id];
      }
      return this;
    }
  };
  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;
  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function (obj, action, name, rest) {
    if (!name)
      return true;
    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [
          key,
          name[key]
        ].concat(rest));
      }
      return false;
    }
    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, length = names.length; i < length; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }
    return true;
  };
  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  var triggerEvents = function (events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
    case 0:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx);
      return;
    case 1:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1);
      return;
    case 2:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2);
      return;
    case 3:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
      return;
    default:
      while (++i < l)
        (ev = events[i]).callback.apply(ev.ctx, args);
      return;
    }
  };
  // Aliases for backwards compatibility.
  Events.bind = Events.on;
  Events.unbind = Events.off;
  if (typeof module == 'object' && module.exports) {
    exports = Events;
  }  /** ignored by jsdoc **/ else {
    return Events;
  }
  return exports;
}(events);
base = function (exports) {
  var Util = util;
  var Events = events;
  /**
  @constructor
  @mixes Events
  */
  var Base = function () {
  };
  Util.mix(Base.prototype, Events);
  Util.mix(Base.prototype, {
    /**
    * @memberof Base
    * @param  {object} plugin plug a plugin
    */
    plug: function (plugin) {
      var self = this;
      if (!plugin || !plugin.pluginId)
        return;
      if (!self.__plugins) {
        self.__plugins = [];
      }
      var __plugin = self.getPlugin(plugin.pluginId);
      __plugin && self.unplug(plugin.pluginId);
      plugin.pluginInitializer(self);
      self.__plugins.push(plugin);
      return self;
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin unplug a plugin by pluginId or plugin instance
    */
    unplug: function (plugin) {
      var self = this;
      if (!plugin || !self.__plugins)
        return;
      var _plugin = typeof plugin == 'string' ? self.getPlugin(plugin) : plugin;
      _plugin.pluginDestructor(self);
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] == _plugin) {
          return self.__plugins.splice(i, 1);
        }
      }
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin get plugin by pluginId
    */
    getPlugin: function (pluginId) {
      var self = this;
      var plugins = [];
      if (!self.__plugins)
        return;
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] && self.__plugins[i].pluginId == pluginId) {
          plugins.push(self.__plugins[i]);
        }
      }
      return plugins.length > 1 ? plugins : plugins[0] || null;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Base;
  }  /** ignored by jsdoc **/ else {
    return Base;
  }
  return exports;
}(base);
easing = function (exports) {
  //easing
  var Easing = {
    'linear': [
      0,
      0,
      1,
      1
    ],
    'ease': [
      0.25,
      0.1,
      0.25,
      1
    ],
    'ease-in': [
      0.42,
      0,
      1,
      1
    ],
    'ease-out': [
      0,
      0,
      0.58,
      1
    ],
    'ease-in-out': [
      0.42,
      0,
      0.58,
      1
    ],
    'quadratic': [
      0.33,
      0.66,
      0.66,
      1
    ],
    'circular': [
      0.1,
      0.57,
      0.1,
      1
    ],
    'bounce': [
      0.71,
      1.35,
      0.47,
      1.41
    ],
    format: function (easing) {
      if (!easing)
        return;
      if (typeof easing === 'string' && this[easing]) {
        return this[easing] instanceof Array ? [
          ' cubic-bezier(',
          this[easing],
          ') '
        ].join('') : this[easing];
      }
      if (easing instanceof Array) {
        return [
          ' cubic-bezier(',
          easing,
          ') '
        ].join('');
      }
      return easing;
    }
  };
  if (typeof module == 'object' && module.exports) {
    exports = Easing;
  }  /** ignored by jsdoc **/ else {
    return Easing;
  }
  return exports;
}(easing);
timer = function (exports) {
  var Util = util;
  var Base = base;
  var Easing = easing;
  var RAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
    window.setTimeout(callback, 1000 / 60);
  };
  var vendors = [
    'webkit',
    'moz',
    'ms',
    'o'
  ];
  var cancelRAF = window.cancelAnimationFrame;
  for (var i = 0; i < vendors.length; i++) {
    if (window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame']) {
      cancelRAF = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];
    }
  }
  cancelRAF = cancelRAF || window.clearTimeout;
  function Bezier(x1, y1, x2, y2, epsilon) {
    var curveX = function (t) {
      var v = 1 - t;
      return 3 * v * v * t * x1 + 3 * v * t * t * x2 + t * t * t;
    };
    var curveY = function (t) {
      var v = 1 - t;
      return 3 * v * v * t * y1 + 3 * v * t * t * y2 + t * t * t;
    };
    var derivativeCurveX = function (t) {
      var v = 1 - t;
      return 3 * (2 * (t - 1) * t + v * v) * x1 + 3 * (-t * t * t + 2 * v * t) * x2;
    };
    return function (t) {
      var x = t, t0, t1, t2, x2, d2, i;
      // First try a few iterations of Newton's method -- normally very fast.
      for (t2 = x, i = 0; i < 8; i++) {
        x2 = curveX(t2) - x;
        if (Math.abs(x2) < epsilon)
          return curveY(t2);
        d2 = derivativeCurveX(t2);
        if (Math.abs(d2) < 0.000001)
          break;
        t2 = t2 - x2 / d2;
      }
      t0 = 0, t1 = 1, t2 = x;
      if (t2 < t0)
        return curveY(t0);
      if (t2 > t1)
        return curveY(t1);
      // Fallback to the bisection method for reliability.
      while (t0 < t1) {
        x2 = curveX(t2);
        if (Math.abs(x2 - x) < epsilon)
          return curveY(t2);
        if (x > x2)
          t0 = t2;
        else
          t1 = t2;
        t2 = (t1 - t0) * 0.5 + t0;
      }
      // Failure
      return curveY(t2);
    };
  }
  function Timer(cfg) {
    var self = this;
    self.cfg = Util.mix({ easing: 'linear' }, cfg);
  }
  Timer.MIN_DURATION = 1;
  Util.extend(Timer, Base, {
    reset: function (cfg) {
      var self = this;
      Util.mix(self.cfg, cfg);
      self.isfinished = false;
      self.percent = 0;
      self._stop = null;
    },
    run: function () {
      var self = this;
      var duration = self.cfg.duration;
      if (duration <= Timer.MIN_DURATION) {
        self.isfinished = true;
        self.trigger('run', { percent: 1 });
        self.trigger('end', { percent: 1 });
      }
      if (self.isfinished)
        return;
      self._hasFinishedPercent = self._stop && self._stop.percent || 0;
      self._stop = null;
      self.start = Date.now();
      self.percent = 0;
      // epsilon determines the precision of the solved values
      var epsilon = 1000 / 60 / duration / 4;
      var b = Easing[self.cfg.easing];
      self.easingFn = Bezier(b[0], b[1], b[2], b[3], epsilon);
      self._run();
    },
    _run: function () {
      var self = this;
      cancelRAF(self._raf);
      self._raf = RAF(function () {
        self.now = Date.now();
        self.duration = self.now - self.start >= self.cfg.duration ? self.cfg.duration : self.now - self.start;
        self.progress = self.easingFn(self.duration / self.cfg.duration);
        self.percent = self.duration / self.cfg.duration + self._hasFinishedPercent;
        if (self.percent >= 1 || self._stop) {
          self.percent = self._stop && self._stop.percent ? self._stop.percent : 1;
          self.duration = self._stop && self._stop.duration ? self._stop.duration : self.duration;
          var param = { percent: self.percent };
          self.trigger('stop', param);
          if (self.percent >= 1) {
            self.isfinished = true;
            self.trigger('end', { percent: 1 });
          }
          return;
        }
        self.trigger('run', {
          percent: self.progress,
          originPercent: self.percent
        });
        self._run();
      });
    },
    stop: function () {
      var self = this;
      self._stop = {
        percent: self.percent,
        now: self.now
      };
      cancelRAF(self._raf);
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Timer;
  }  /** ignored by jsdoc **/ else {
    return Timer;
  }
  return exports;
}(timer);
animate = function (exports) {
  var Util = util;
  var Timer = timer;
  var Easing = easing;
  var Base = base;
  //transform
  var vendorTransform = Util.prefixStyle('transform');
  //transition webkitTransition MozTransition OTransition msTtransition
  var vendorTransition = Util.prefixStyle('transition');
  var vendorTransitionDuration = Util.prefixStyle('transitionDuration');
  var vendorTransformOrigin = Util.prefixStyle('transformOrigin');
  var vendorTransitionEnd = Util.vendor ? Util.prefixStyle('transitionEnd') : 'transitionend';
  var vendorTransformStr = Util.vendor ? [
    '-',
    Util.vendor,
    '-transform'
  ].join('') : 'transform';
  var translateTpl = 'translateX({translateX}px) translateY({translateY}px) translateZ(0)';
  //limit attrs
  var animAttrs = {
    'transform': true,
    'opacity': true,
    'scrollTop': true,
    'scrollLeft': true
  };
  function myParse(v) {
    return Math.round(parseFloat(v) * 100000) / 100000;
  }
  function defaultDecompose() {
    return {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      skewY: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
  function toMatrixArray(matrix) {
    matrix = matrix.split(/,/);
    matrix = Array.prototype.map.call(matrix, function (v) {
      return myParse(v);
    });
    return matrix;
  }
  function decomposeMatrix(matrix) {
    matrix = toMatrixArray(matrix);
    var scaleX, scaleY, skew, A = matrix[0], B = matrix[1], C = matrix[2], D = matrix[3];
    // Make sure matrix is not singular
    if (A * D - B * C) {
      scaleX = Math.sqrt(A * A + B * B);
      skew = (A * C + B * D) / (A * D - C * B);
      scaleY = (A * D - B * C) / scaleX;
      // step (6)
      if (A * D < B * C) {
        skew = -skew;
        scaleX = -scaleX;
      }  // matrix is singular and cannot be interpolated
    } else {
      // In this case the elem shouldn't be rendered, hence scale == 0
      scaleX = scaleY = skew = 0;
    }
    // The recomposition order is very important
    // see http://hg.mozilla.org/mozilla-central/file/7cb3e9795d04/layout/style/nsStyleAnimation.cpp#l971
    return {
      translateX: myParse(matrix[4]),
      translateY: myParse(matrix[5]),
      rotate: myParse(Math.atan2(B, A) * 180 / Math.PI),
      skewX: myParse(Math.atan(skew) * 180 / Math.PI),
      skewY: 0,
      scaleX: myParse(scaleX),
      scaleY: myParse(scaleY)
    };
  }
  function getTransformInfo(transform) {
    transform = transform.split(')');
    var trim = Util.trim, i = -1, l = transform.length - 1, split, prop, val, ret = defaultDecompose();
    // Loop through the transform properties, parse and multiply them
    while (++i < l) {
      split = transform[i].split('(');
      prop = trim(split[0]);
      val = split[1];
      switch (prop) {
      case 'translateX':
      case 'translateY':
      case 'scaleX':
      case 'scaleY':
        ret[prop] = myParse(val);
        break;
      case 'translate':
      case 'translate3d':
        val = val.split(',');
        ret.translateX = myParse(val[0]);
        ret.translateY = myParse(val[1] || 0);
        break;
      case 'scale':
        val = val.split(',');
        ret.scaleX = myParse(val[0]);
        ret.scaleY = myParse(val[1] || val[0]);
        break;
      case 'matrix':
        return decomposeMatrix(val);
      }
    }
    return ret;
  }
  /**
   * animate function
   * @constructor
   * @param {HTMLElement} el element to animate
   * @param {Object} config config for animate
   * @param {Object} config.css
   * @param {Number} config.duration
   * @param {String} config.easing
   * @extends {Base}
   */
  function Animate(el, cfg) {
    if (!el || !cfg || !cfg.css)
      return;
    var self = this;
    self.cfg = cfg;
    self.el = el;
    var duration = cfg.duration || 0, easing = cfg.easing || 'ease', delay = cfg.delay || 0;
    //trigger run
    if (cfg.run) {
      //frame animate
      self.timer = self.timer || new Timer({
        duration: Math.round(duration),
        easing: easing
      });
      self.timer.on('run', cfg.run);
    }
    self._bindEvt();
    return self;
  }
  function computeTransform(prevTransform, destTransform) {
    var transform = getTransformInfo(prevTransform);
    var dest = getTransformInfo(destTransform);
    var trans = {};
    for (var i in dest) {
      trans[i] = {
        prevVal: transform[i],
        newVal: dest[i]
      };
    }
    return trans;
  }
  //for scroll only
  function setStyle(el, styleName, prevVal, newVal, percent) {
    prevVal = isNaN(Number(prevVal)) ? 0 : Number(prevVal);
    var curVal = (newVal - prevVal) * percent + prevVal;
    css(el, styleName, curVal);
  }
  function css(el, styleName, val) {
    switch (styleName) {
    case 'scrollTop':
    case 'scrollLeft':
      el[styleName] = val;
      break;
    case 'transform':
      el.style[vendorTransform] = val;
    case 'opacity':
      el.style[styleName] = val;
      break;
    }
  }
  Util.extend(Animate, Base, {
    /**
    * to start the animation
    * @memberof Animate
    * @return {Animate}
    */
    run: function () {
      var self = this;
      var cfg = self.cfg, el = self.el, duration = cfg.duration || 0, easing = cfg.easing || 'ease', delay = cfg.delay || 0;
      self.__isTransitionEnd = false;
      clearTimeout(self.__itv);
      self.timer && self.timer.run();
      if (duration <= Timer.MIN_DURATION) {
        for (var i in cfg.css) {
          css(el, i, cfg.css[i]);
        }
        self.stop();
        self.__handlers.stop.call(self);
        return;
      }
      if (Util.isBadAndroid()) {
        //use frame animate on bad android device
        cfg.useTransition = false;
      }
      if (cfg.useTransition) {
        //transition
        el.style[vendorTransition] = Util.substitute('all {duration}ms {easing} {delay}ms', {
          duration: Math.round(duration),
          easing: Easing.format(easing),
          delay: delay
        });
        for (var i in cfg.css) {
          //set css
          css(el, i, cfg.css[i]);
        }
        self.__itv = setTimeout(function () {
          if (!self.__isTransitionEnd) {
            self.__isTransitionEnd = true;
            self.trigger('transitionend');
          }
        }, Number(duration) + 60);
      } else {
        self.computeStyle = self.computeStyle || window.getComputedStyle(el);
        //transform
        if (cfg.css.transform && self.timer) {
          var transmap = self.transmap = computeTransform(self.computeStyle[vendorTransform], cfg.css.transform);
          self.timer.off('run', self.__handlers.transRun);
          self.timer.on('run', self.__handlers.transRun, self);
          self.timer.off('end', self.__handlers.transRun);
          self.timer.on('end', self.__handlers.transRun, self);
        }
      }
      return self;
    },
    _transitionEndHandler: function (e) {
      var self = this;
      self.stop();
      self.__handlers.stop.call(self);
    },
    __handlers: {
      transRun: function (e) {
        var self = this;
        var transmap = self.transmap;
        var el = self.el;
        var newTrans = {};
        for (var i in transmap) {
          newTrans[i] = (transmap[i].newVal - transmap[i].prevVal) * e.percent + transmap[i].prevVal;
        }
        var ret = Util.substitute(translateTpl + ' ' + 'scale({scaleX},{scaleY})', newTrans);
        el.style[vendorTransform] = ret;
      },
      stop: function (e) {
        var self = this;
        var cfg = self.cfg;
        cfg.end && cfg.end({ percent: 1 });
      }
    },
    _bindEvt: function () {
      var self = this;
      var cfg = self.cfg;
      var el = self.el;
      self.el.addEventListener(vendorTransitionEnd, function (e) {
        self.__isTransitionEnd = true;
        if (e.target !== e.currentTarget)
          return;
        self.trigger('transitionend', e);
      });
      self.on('transitionend', self._transitionEndHandler, self);
      var cssRun = function (e) {
        self.computeStyle = self.computeStyle || window.getComputedStyle(el);
        for (var i in cfg.css) {
          if (!/transform/.test(i)) {
            setStyle(self.el, i, self.computeStyle[i], cfg.css[i], e.percent);
          }
        }
      };
      self.timer && self.timer.on('run', cssRun);
      self.timer && self.timer.on('stop', self.__handlers.stop, self);
    },
    /**
    * to stop the animation
    * @memberof Animate
    * @return {Animate}
    */
    stop: function () {
      var self = this;
      if (self.cfg.useTransition && self.cfg.duration > Timer.MIN_DURATION) {
        var computeStyle = window.getComputedStyle(this.el);
        for (var i in self.cfg.css) {
          if (animAttrs[i]) {
            var value = /transform/.test(i) ? computeStyle[vendorTransform] : computeStyle[i];
            css(self.el, i, Util.substitute(translateTpl + ' ' + 'scale({scaleX},{scaleY})', getTransformInfo(value)));
          }
        }
        self.el.style[vendorTransition] = 'none';
      }
      self.timer && self.timer.stop() && self.timer.reset();
      self.computeStyle = null;
      return self;
    },
    /**
    * to reset the animation to a new state
    * @memberof Animate
    * @param {object} cfg cfg for new animation
    * @return {Animate}
    */
    reset: function (cfg) {
      var self = this;
      self.computeStyle = null;
      Util.mix(self.cfg, cfg);
      this.timer && self.timer.reset({
        duration: Math.round(self.cfg.duration),
        easing: self.cfg.easing
      });
      return self;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Animate;
  }  /** ignored by jsdoc **/ else {
    return Animate;
  }
  return exports;
}(animate);
hammer = function (exports) {
  var VENDOR_PREFIXES = [
    '',
    'webkit',
    'moz',
    'MS',
    'ms',
    'o'
  ];
  var TEST_ELEMENT = document.createElement('div');
  var TYPE_FUNCTION = 'function';
  var round = Math.round;
  var abs = Math.abs;
  var now = Date.now;
  /**
   * set a timeout with a given scope
   * @param {Function} fn
   * @param {Number} timeout
   * @param {Object} context
   * @returns {number}
   */
  function setTimeoutContext(fn, timeout, context) {
    return setTimeout(bindFn(fn, context), timeout);
  }
  /**
   * if the argument is an array, we want to execute the fn on each entry
   * if it aint an array we don't want to do a thing.
   * this is used by all the methods that accept a single and array argument.
   * @param {*|Array} arg
   * @param {String} fn
   * @param {Object} [context]
   * @returns {Boolean}
   */
  function invokeArrayArg(arg, fn, context) {
    if (Array.isArray(arg)) {
      each(arg, context[fn], context);
      return true;
    }
    return false;
  }
  /**
   * walk objects and arrays
   * @param {Object} obj
   * @param {Function} iterator
   * @param {Object} context
   */
  function each(obj, iterator, context) {
    var i;
    if (!obj) {
      return;
    }
    if (obj.forEach) {
      obj.forEach(iterator, context);
    } else if (obj.length !== undefined) {
      i = 0;
      while (i < obj.length) {
        iterator.call(context, obj[i], i, obj);
        i++;
      }
    } else {
      for (i in obj) {
        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
      }
    }
  }
  /**
   * extend object.
   * means that properties in dest will be overwritten by the ones in src.
   * @param {Object} dest
   * @param {Object} src
   * @param {Boolean} [merge]
   * @returns {Object} dest
   */
  function extend(dest, src, merge) {
    var keys = Object.keys(src);
    var i = 0;
    while (i < keys.length) {
      if (!merge || merge && dest[keys[i]] === undefined) {
        dest[keys[i]] = src[keys[i]];
      }
      i++;
    }
    return dest;
  }
  /**
   * merge the values from src in the dest.
   * means that properties that exist in dest will not be overwritten by src
   * @param {Object} dest
   * @param {Object} src
   * @returns {Object} dest
   */
  function merge(dest, src) {
    return extend(dest, src, true);
  }
  /**
   * simple class inheritance
   * @param {Function} child
   * @param {Function} base
   * @param {Object} [properties]
   */
  function inherit(child, base, properties) {
    var baseP = base.prototype, childP;
    childP = child.prototype = Object.create(baseP);
    childP.constructor = child;
    childP._super = baseP;
    if (properties) {
      extend(childP, properties);
    }
  }
  /**
   * simple function bind
   * @param {Function} fn
   * @param {Object} context
   * @returns {Function}
   */
  function bindFn(fn, context) {
    return function boundFn() {
      return fn.apply(context, arguments);
    };
  }
  /**
   * let a boolean value also be a function that must return a boolean
   * this first item in args will be used as the context
   * @param {Boolean|Function} val
   * @param {Array} [args]
   * @returns {Boolean}
   */
  function boolOrFn(val, args) {
    if (typeof val == TYPE_FUNCTION) {
      return val.apply(args ? args[0] || undefined : undefined, args);
    }
    return val;
  }
  /**
   * use the val2 when val1 is undefined
   * @param {*} val1
   * @param {*} val2
   * @returns {*}
   */
  function ifUndefined(val1, val2) {
    return val1 === undefined ? val2 : val1;
  }
  /**
   * addEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */
  function addEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
      target.addEventListener(type, handler, false);
    });
  }
  /**
   * removeEventListener with multiple events at once
   * @param {EventTarget} target
   * @param {String} types
   * @param {Function} handler
   */
  function removeEventListeners(target, types, handler) {
    each(splitStr(types), function (type) {
      target.removeEventListener(type, handler, false);
    });
  }
  /**
   * find if a node is in the given parent
   * @method hasParent
   * @param {HTMLElement} node
   * @param {HTMLElement} parent
   * @return {Boolean} found
   */
  function hasParent(node, parent) {
    while (node) {
      if (node == parent) {
        return true;
      }
      node = node.parentNode;
    }
    return false;
  }
  /**
   * small indexOf wrapper
   * @param {String} str
   * @param {String} find
   * @returns {Boolean} found
   */
  function inStr(str, find) {
    return str.indexOf(find) > -1;
  }
  /**
   * split string on whitespace
   * @param {String} str
   * @returns {Array} words
   */
  function splitStr(str) {
    return str.trim().split(/\s+/g);
  }
  /**
   * find if a array contains the object using indexOf or a simple polyFill
   * @param {Array} src
   * @param {String} find
   * @param {String} [findByKey]
   * @return {Boolean|Number} false when not found, or the index
   */
  function inArray(src, find, findByKey) {
    if (src.indexOf && !findByKey) {
      return src.indexOf(find);
    } else {
      var i = 0;
      while (i < src.length) {
        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
          return i;
        }
        i++;
      }
      return -1;
    }
  }
  /**
   * convert array-like objects to real arrays
   * @param {Object} obj
   * @returns {Array}
   */
  function toArray(obj) {
    return Array.prototype.slice.call(obj, 0);
  }
  /**
   * unique array with objects based on a key (like 'id') or just by the array's value
   * @param {Array} src [{id:1},{id:2},{id:1}]
   * @param {String} [key]
   * @param {Boolean} [sort=False]
   * @returns {Array} [{id:1},{id:2}]
   */
  function uniqueArray(src, key, sort) {
    var results = [];
    var values = [];
    var i = 0;
    while (i < src.length) {
      var val = key ? src[i][key] : src[i];
      if (inArray(values, val) < 0) {
        results.push(src[i]);
      }
      values[i] = val;
      i++;
    }
    if (sort) {
      if (!key) {
        results = results.sort();
      } else {
        results = results.sort(function sortUniqueArray(a, b) {
          return a[key] > b[key];
        });
      }
    }
    return results;
  }
  /**
   * get the prefixed property
   * @param {Object} obj
   * @param {String} property
   * @returns {String|Undefined} prefixed
   */
  function prefixed(obj, property) {
    var prefix, prop;
    var camelProp = property[0].toUpperCase() + property.slice(1);
    var i = 0;
    while (i < VENDOR_PREFIXES.length) {
      prefix = VENDOR_PREFIXES[i];
      prop = prefix ? prefix + camelProp : property;
      if (prop in obj) {
        return prop;
      }
      i++;
    }
    return undefined;
  }
  /**
   * get a unique id
   * @returns {number} uniqueId
   */
  var _uniqueId = 1;
  function uniqueId() {
    return _uniqueId++;
  }
  /**
   * get the window object of an element
   * @param {HTMLElement} element
   * @returns {DocumentView|Window}
   */
  function getWindowForElement(element) {
    var doc = element.ownerDocument;
    return doc.defaultView || doc.parentWindow;
  }
  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
  var SUPPORT_TOUCH = 'ontouchstart' in window;
  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
  var INPUT_TYPE_TOUCH = 'touch';
  var INPUT_TYPE_PEN = 'pen';
  var INPUT_TYPE_MOUSE = 'mouse';
  var INPUT_TYPE_KINECT = 'kinect';
  var COMPUTE_INTERVAL = 25;
  var INPUT_START = 1;
  var INPUT_MOVE = 2;
  var INPUT_END = 4;
  var INPUT_CANCEL = 8;
  var DIRECTION_NONE = 1;
  var DIRECTION_LEFT = 2;
  var DIRECTION_RIGHT = 4;
  var DIRECTION_UP = 8;
  var DIRECTION_DOWN = 16;
  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
  var PROPS_XY = [
    'x',
    'y'
  ];
  var PROPS_CLIENT_XY = [
    'clientX',
    'clientY'
  ];
  /**
   * create new input type manager
   * @param {Manager} manager
   * @param {Function} callback
   * @returns {Input}
   * @constructor
   */
  function Input(manager, callback) {
    var self = this;
    this.manager = manager;
    this.callback = callback;
    this.element = manager.element;
    this.target = manager.options.inputTarget;
    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.
    this.domHandler = function (ev) {
      if (boolOrFn(manager.options.enable, [manager])) {
        self.handler(ev);
      }
    };
    this.init();
  }
  Input.prototype = {
    /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */
    handler: function () {
    },
    /**
     * bind the events
     */
    init: function () {
      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    },
    /**
     * unbind the events
     */
    destroy: function () {
      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
    }
  };
  /**
   * create new input type manager
   * called by the Manager constructor
   * @param {Hammer} manager
   * @returns {Input}
   */
  function createInputInstance(manager) {
    var Type;
    var inputClass = manager.options.inputClass;
    if (inputClass) {
      Type = inputClass;
    } else if (SUPPORT_POINTER_EVENTS) {
      Type = PointerEventInput;
    } else if (SUPPORT_ONLY_TOUCH) {
      Type = TouchInput;
    } else if (!SUPPORT_TOUCH) {
      Type = MouseInput;
    } else {
      Type = TouchMouseInput;
    }
    return new Type(manager, inputHandler);
  }
  /**
   * handle input events
   * @param {Manager} manager
   * @param {String} eventType
   * @param {Object} input
   */
  function inputHandler(manager, eventType, input) {
    var pointersLen = input.pointers.length;
    var changedPointersLen = input.changedPointers.length;
    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
    input.isFirst = !!isFirst;
    input.isFinal = !!isFinal;
    if (isFirst) {
      manager.session = {};
    }
    // source event is the normalized value of the domEvents
    // like 'touchstart, mouseup, pointerdown'
    input.eventType = eventType;
    // compute scale, rotation etc
    computeInputData(manager, input);
    // emit secret event
    manager.emit('hammer.input', input);
    manager.recognize(input);
    manager.session.prevInput = input;
  }
  /**
   * extend the data with some usable properties like scale, rotate, velocity etc
   * @param {Object} manager
   * @param {Object} input
   */
  function computeInputData(manager, input) {
    var session = manager.session;
    var pointers = input.pointers;
    var pointersLength = pointers.length;
    // store the first input to calculate the distance and direction
    if (!session.firstInput) {
      session.firstInput = simpleCloneInputData(input);
    }
    // to compute scale and rotation we need to store the multiple touches
    if (pointersLength > 1 && !session.firstMultiple) {
      session.firstMultiple = simpleCloneInputData(input);
    } else if (pointersLength === 1) {
      session.firstMultiple = false;
    }
    var firstInput = session.firstInput;
    var firstMultiple = session.firstMultiple;
    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
    var center = input.center = getCenter(pointers);
    input.timeStamp = now();
    input.deltaTime = input.timeStamp - firstInput.timeStamp;
    input.angle = getAngle(offsetCenter, center);
    input.distance = getDistance(offsetCenter, center);
    computeDeltaXY(session, input);
    input.offsetDirection = getDirection(input.deltaX, input.deltaY);
    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
    computeIntervalInputData(session, input);
    // find the correct target
    var target = manager.element;
    if (hasParent(input.srcEvent.target, target)) {
      target = input.srcEvent.target;
    }
    input.target = target;
  }
  function computeDeltaXY(session, input) {
    var center = input.center;
    var offset = session.offsetDelta || {};
    var prevDelta = session.prevDelta || {};
    var prevInput = session.prevInput || {};
    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
      prevDelta = session.prevDelta = {
        x: prevInput.deltaX || 0,
        y: prevInput.deltaY || 0
      };
      offset = session.offsetDelta = {
        x: center.x,
        y: center.y
      };
    }
    input.deltaX = prevDelta.x + (center.x - offset.x);
    input.deltaY = prevDelta.y + (center.y - offset.y);
  }
  /**
   * velocity is calculated every x ms
   * @param {Object} session
   * @param {Object} input
   */
  function computeIntervalInputData(session, input) {
    var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
      var deltaX = last.deltaX - input.deltaX;
      var deltaY = last.deltaY - input.deltaY;
      var v = getVelocity(deltaTime, deltaX, deltaY);
      velocityX = v.x;
      velocityY = v.y;
      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
      direction = getDirection(deltaX, deltaY);
      session.lastInterval = input;
    } else {
      // use latest velocity info if it doesn't overtake a minimum period
      velocity = last.velocity;
      velocityX = last.velocityX;
      velocityY = last.velocityY;
      direction = last.direction;
    }
    input.velocity = velocity;
    input.velocityX = velocityX;
    input.velocityY = velocityY;
    input.direction = direction;
  }
  /**
   * create a simple clone from the input used for storage of firstInput and firstMultiple
   * @param {Object} input
   * @returns {Object} clonedInputData
   */
  function simpleCloneInputData(input) {
    // make a simple copy of the pointers because we will get a reference if we don't
    // we only need clientXY for the calculations
    var pointers = [];
    var i = 0;
    while (i < input.pointers.length) {
      pointers[i] = {
        clientX: round(input.pointers[i].clientX),
        clientY: round(input.pointers[i].clientY)
      };
      i++;
    }
    return {
      timeStamp: now(),
      pointers: pointers,
      center: getCenter(pointers),
      deltaX: input.deltaX,
      deltaY: input.deltaY
    };
  }
  /**
   * get the center of all the pointers
   * @param {Array} pointers
   * @return {Object} center contains `x` and `y` properties
   */
  function getCenter(pointers) {
    var pointersLength = pointers.length;
    // no need to loop when only one touch
    if (pointersLength === 1) {
      return {
        x: round(pointers[0].clientX),
        y: round(pointers[0].clientY)
      };
    }
    var x = 0, y = 0, i = 0;
    while (i < pointersLength) {
      x += pointers[i].clientX;
      y += pointers[i].clientY;
      i++;
    }
    return {
      x: round(x / pointersLength),
      y: round(y / pointersLength)
    };
  }
  /**
   * calculate the velocity between two points. unit is in px per ms.
   * @param {Number} deltaTime
   * @param {Number} x
   * @param {Number} y
   * @return {Object} velocity `x` and `y`
   */
  function getVelocity(deltaTime, x, y) {
    return {
      x: x / deltaTime || 0,
      y: y / deltaTime || 0
    };
  }
  /**
   * get the direction between two points
   * @param {Number} x
   * @param {Number} y
   * @return {Number} direction
   */
  function getDirection(x, y) {
    if (x === y) {
      return DIRECTION_NONE;
    }
    if (abs(x) >= abs(y)) {
      return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;
  }
  /**
   * calculate the absolute distance between two points
   * @param {Object} p1 {x, y}
   * @param {Object} p2 {x, y}
   * @param {Array} [props] containing x and y keys
   * @return {Number} distance
   */
  function getDistance(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
    return Math.sqrt(x * x + y * y);
  }
  /**
   * calculate the angle between two coordinates
   * @param {Object} p1
   * @param {Object} p2
   * @param {Array} [props] containing x and y keys
   * @return {Number} angle
   */
  function getAngle(p1, p2, props) {
    if (!props) {
      props = PROPS_XY;
    }
    var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
    return Math.atan2(y, x) * 180 / Math.PI;
  }
  /**
   * calculate the rotation degrees between two pointersets
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} rotation
   */
  function getRotation(start, end) {
    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);
  }
  /**
   * calculate the scale factor between two pointersets
   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
   * @param {Array} start array of pointers
   * @param {Array} end array of pointers
   * @return {Number} scale
   */
  function getScale(start, end) {
    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
  }
  var MOUSE_INPUT_MAP = {
    mousedown: INPUT_START,
    mousemove: INPUT_MOVE,
    mouseup: INPUT_END
  };
  var MOUSE_ELEMENT_EVENTS = 'mousedown';
  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';
  /**
   * Mouse events input
   * @constructor
   * @extends Input
   */
  function MouseInput() {
    this.evEl = MOUSE_ELEMENT_EVENTS;
    this.evWin = MOUSE_WINDOW_EVENTS;
    this.allow = true;
    // used by Input.TouchMouse to disable mouse events
    this.pressed = false;
    // mousedown state
    Input.apply(this, arguments);
  }
  inherit(MouseInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function MEhandler(ev) {
      var eventType = MOUSE_INPUT_MAP[ev.type];
      // on start we want to have the left mouse button down
      if (eventType & INPUT_START && ev.button === 0) {
        this.pressed = true;
      }
      if (eventType & INPUT_MOVE && ev.which !== 1) {
        eventType = INPUT_END;
      }
      // mouse must be down, and mouse events are allowed (see the TouchMouse input)
      if (!this.pressed || !this.allow) {
        return;
      }
      if (eventType & INPUT_END) {
        this.pressed = false;
      }
      this.callback(this.manager, eventType, {
        pointers: [ev],
        changedPointers: [ev],
        pointerType: INPUT_TYPE_MOUSE,
        srcEvent: ev
      });
    }
  });
  var POINTER_INPUT_MAP = {
    pointerdown: INPUT_START,
    pointermove: INPUT_MOVE,
    pointerup: INPUT_END,
    pointercancel: INPUT_CANCEL,
    pointerout: INPUT_CANCEL
  };
  // in IE10 the pointer types is defined as an enum
  var IE10_POINTER_TYPE_ENUM = {
    2: INPUT_TYPE_TOUCH,
    3: INPUT_TYPE_PEN,
    4: INPUT_TYPE_MOUSE,
    5: INPUT_TYPE_KINECT  // see https://twitter.com/jacobrossi/status/480596438489890816
  };
  var POINTER_ELEMENT_EVENTS = 'pointerdown';
  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
  // IE10 has prefixed support, and case-sensitive
  if (window.MSPointerEvent) {
    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
  }
  /**
   * Pointer events input
   * @constructor
   * @extends Input
   */
  function PointerEventInput() {
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;
    Input.apply(this, arguments);
    this.store = this.manager.session.pointerEvents = [];
  }
  inherit(PointerEventInput, Input, {
    /**
     * handle mouse events
     * @param {Object} ev
     */
    handler: function PEhandler(ev) {
      var store = this.store;
      var removePointer = false;
      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
      var isTouch = pointerType == INPUT_TYPE_TOUCH;
      // get index of the event in the store
      var storeIndex = inArray(store, ev.pointerId, 'pointerId');
      // start and mouse must be down
      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
        if (storeIndex < 0) {
          store.push(ev);
          storeIndex = store.length - 1;
        }
      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
        removePointer = true;
      }
      // it not found, so the pointer hasn't been down (so it's probably a hover)
      if (storeIndex < 0) {
        return;
      }
      // update the event in the store
      store[storeIndex] = ev;
      this.callback(this.manager, eventType, {
        pointers: store,
        changedPointers: [ev],
        pointerType: pointerType,
        srcEvent: ev
      });
      if (removePointer) {
        // remove from the store
        store.splice(storeIndex, 1);
      }
    }
  });
  var SINGLE_TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';
  /**
   * Touch events input
   * @constructor
   * @extends Input
   */
  function SingleTouchInput() {
    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
    this.started = false;
    Input.apply(this, arguments);
  }
  inherit(SingleTouchInput, Input, {
    handler: function TEhandler(ev) {
      var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
      // should we handle the touch events?
      if (type === INPUT_START) {
        this.started = true;
      }
      if (!this.started) {
        return;
      }
      var touches = normalizeSingleTouches.call(this, ev, type);
      // when done, reset the started state
      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
        this.started = false;
      }
      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    }
  });
  /**
   * @this {TouchInput}
   * @param {Object} ev
   * @param {Number} type flag
   * @returns {undefined|Array} [all, changed]
   */
  function normalizeSingleTouches(ev, type) {
    var all = toArray(ev.touches);
    var changed = toArray(ev.changedTouches);
    if (type & (INPUT_END | INPUT_CANCEL)) {
      all = uniqueArray(all.concat(changed), 'identifier', true);
    }
    return [
      all,
      changed
    ];
  }
  var TOUCH_INPUT_MAP = {
    touchstart: INPUT_START,
    touchmove: INPUT_MOVE,
    touchend: INPUT_END,
    touchcancel: INPUT_CANCEL
  };
  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';
  /**
   * Multi-user touch events input
   * @constructor
   * @extends Input
   */
  function TouchInput() {
    this.evTarget = TOUCH_TARGET_EVENTS;
    this.targetIds = {};
    Input.apply(this, arguments);
  }
  inherit(TouchInput, Input, {
    handler: function MTEhandler(ev) {
      var type = TOUCH_INPUT_MAP[ev.type];
      var touches = getTouches.call(this, ev, type);
      if (!touches) {
        return;
      }
      this.callback(this.manager, type, {
        pointers: touches[0],
        changedPointers: touches[1],
        pointerType: INPUT_TYPE_TOUCH,
        srcEvent: ev
      });
    }
  });
  /**
   * @this {TouchInput}
   * @param {Object} ev
   * @param {Number} type flag
   * @returns {undefined|Array} [all, changed]
   */
  function getTouches(ev, type) {
    var allTouches = toArray(ev.touches);
    var targetIds = this.targetIds;
    // when there is only one touch, the process can be simplified
    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
      targetIds[allTouches[0].identifier] = true;
      return [
        allTouches,
        allTouches
      ];
    }
    var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
    // get target touches from touches
    targetTouches = allTouches.filter(function (touch) {
      return hasParent(touch.target, target);
    });
    // collect touches
    if (type === INPUT_START) {
      i = 0;
      while (i < targetTouches.length) {
        targetIds[targetTouches[i].identifier] = true;
        i++;
      }
    }
    // filter changed touches to only contain touches that exist in the collected target ids
    i = 0;
    while (i < changedTouches.length) {
      if (targetIds[changedTouches[i].identifier]) {
        changedTargetTouches.push(changedTouches[i]);
      }
      // cleanup removed touches
      if (type & (INPUT_END | INPUT_CANCEL)) {
        delete targetIds[changedTouches[i].identifier];
      }
      i++;
    }
    if (!changedTargetTouches.length) {
      return;
    }
    return [
      // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
      uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
      changedTargetTouches
    ];
  }
  /**
   * Combined touch and mouse input
   *
   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
   * This because touch devices also emit mouse events while doing a touch.
   *
   * @constructor
   * @extends Input
   */
  function TouchMouseInput() {
    Input.apply(this, arguments);
    var handler = bindFn(this.handler, this);
    this.touch = new TouchInput(this.manager, handler);
    this.mouse = new MouseInput(this.manager, handler);
  }
  inherit(TouchMouseInput, Input, {
    /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */
    handler: function TMEhandler(manager, inputEvent, inputData) {
      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
      // when we're in a touch event, so  block all upcoming mouse events
      // most mobile browser also emit mouseevents, right after touchstart
      if (isTouch) {
        this.mouse.allow = false;
      } else if (isMouse && !this.mouse.allow) {
        return;
      }
      // reset the allowMouse when we're done
      if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
        this.mouse.allow = true;
      }
      this.callback(manager, inputEvent, inputData);
    },
    /**
     * remove the event listeners
     */
    destroy: function destroy() {
      this.touch.destroy();
      this.mouse.destroy();
    }
  });
  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
  // magical touchAction value
  var TOUCH_ACTION_COMPUTE = 'compute';
  var TOUCH_ACTION_AUTO = 'auto';
  var TOUCH_ACTION_MANIPULATION = 'manipulation';
  // not implemented
  var TOUCH_ACTION_NONE = 'none';
  var TOUCH_ACTION_PAN_X = 'pan-x';
  var TOUCH_ACTION_PAN_Y = 'pan-y';
  /**
   * Touch Action
   * sets the touchAction property or uses the js alternative
   * @param {Manager} manager
   * @param {String} value
   * @constructor
   */
  function TouchAction(manager, value) {
    this.manager = manager;
    this.set(value);
  }
  TouchAction.prototype = {
    /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */
    set: function (value) {
      // find out the touch-action by the event handlers
      if (value == TOUCH_ACTION_COMPUTE) {
        value = this.compute();
      }
      if (NATIVE_TOUCH_ACTION) {
        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
      }
      this.actions = value.toLowerCase().trim();
    },
    /**
     * just re-set the touchAction value
     */
    update: function () {
      this.set(this.manager.options.touchAction);
    },
    /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */
    compute: function () {
      var actions = [];
      each(this.manager.recognizers, function (recognizer) {
        if (boolOrFn(recognizer.options.enable, [recognizer])) {
          actions = actions.concat(recognizer.getTouchAction());
        }
      });
      return cleanTouchActions(actions.join(' '));
    },
    /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */
    preventDefaults: function (input) {
      // not needed with native support for the touchAction property
      if (NATIVE_TOUCH_ACTION) {
        return;
      }
      var srcEvent = input.srcEvent;
      var direction = input.offsetDirection;
      // if the touch action did prevented once this session
      if (this.manager.session.prevented) {
        srcEvent.preventDefault();
        return;
      }
      var actions = this.actions;
      var hasNone = inStr(actions, TOUCH_ACTION_NONE);
      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
        return this.preventSrc(srcEvent);
      }
    },
    /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */
    preventSrc: function (srcEvent) {
      this.manager.session.prevented = true;
      srcEvent.preventDefault();
    }
  };
  /**
   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
   * @param {String} actions
   * @returns {*}
   */
  function cleanTouchActions(actions) {
    // none
    if (inStr(actions, TOUCH_ACTION_NONE)) {
      return TOUCH_ACTION_NONE;
    }
    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
    // pan-x and pan-y can be combined
    if (hasPanX && hasPanY) {
      return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;
    }
    // pan-x OR pan-y
    if (hasPanX || hasPanY) {
      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
    }
    // manipulation
    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
      return TOUCH_ACTION_MANIPULATION;
    }
    return TOUCH_ACTION_AUTO;
  }
  /**
   * Recognizer flow explained; *
   * All recognizers have the initial state of POSSIBLE when a input session starts.
   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
   * Example session for mouse-input: mousedown -> mousemove -> mouseup
   *
   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
   * which determines with state it should be.
   *
   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
   * POSSIBLE to give it another change on the next cycle.
   *
   *               Possible
   *                  |
   *            +-----+---------------+
   *            |                     |
   *      +-----+-----+               |
   *      |           |               |
   *   Failed      Cancelled          |
   *                          +-------+------+
   *                          |              |
   *                      Recognized       Began
   *                                         |
   *                                      Changed
   *                                         |
   *                                  Ended/Recognized
   */
  var STATE_POSSIBLE = 1;
  var STATE_BEGAN = 2;
  var STATE_CHANGED = 4;
  var STATE_ENDED = 8;
  var STATE_RECOGNIZED = STATE_ENDED;
  var STATE_CANCELLED = 16;
  var STATE_FAILED = 32;
  /**
   * Recognizer
   * Every recognizer needs to extend from this class.
   * @constructor
   * @param {Object} options
   */
  function Recognizer(options) {
    this.id = uniqueId();
    this.manager = null;
    this.options = merge(options || {}, this.defaults);
    // default is enable true
    this.options.enable = ifUndefined(this.options.enable, true);
    this.state = STATE_POSSIBLE;
    this.simultaneous = {};
    this.requireFail = [];
  }
  Recognizer.prototype = {
    /**
     * @virtual
     * @type {Object}
     */
    defaults: {},
    /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */
    set: function (options) {
      extend(this.options, options);
      // also update the touchAction, in case something changed about the directions/enabled state
      this.manager && this.manager.touchAction.update();
      return this;
    },
    /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    recognizeWith: function (otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
        return this;
      }
      var simultaneous = this.simultaneous;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      if (!simultaneous[otherRecognizer.id]) {
        simultaneous[otherRecognizer.id] = otherRecognizer;
        otherRecognizer.recognizeWith(this);
      }
      return this;
    },
    /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRecognizeWith: function (otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
        return this;
      }
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      delete this.simultaneous[otherRecognizer.id];
      return this;
    },
    /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    requireFailure: function (otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
        return this;
      }
      var requireFail = this.requireFail;
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      if (inArray(requireFail, otherRecognizer) === -1) {
        requireFail.push(otherRecognizer);
        otherRecognizer.requireFailure(this);
      }
      return this;
    },
    /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */
    dropRequireFailure: function (otherRecognizer) {
      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
        return this;
      }
      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
      var index = inArray(this.requireFail, otherRecognizer);
      if (index > -1) {
        this.requireFail.splice(index, 1);
      }
      return this;
    },
    /**
     * has require failures boolean
     * @returns {boolean}
     */
    hasRequireFailures: function () {
      return this.requireFail.length > 0;
    },
    /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */
    canRecognizeWith: function (otherRecognizer) {
      return !!this.simultaneous[otherRecognizer.id];
    },
    /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */
    emit: function (input) {
      var self = this;
      var state = this.state;
      function emit(withState) {
        self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);
      }
      // 'panstart' and 'panmove'
      if (state < STATE_ENDED) {
        emit(true);
      }
      emit();
      // simple 'eventName' events
      // panend and pancancel
      if (state >= STATE_ENDED) {
        emit(true);
      }
    },
    /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */
    tryEmit: function (input) {
      if (this.canEmit()) {
        return this.emit(input);
      }
      // it's failing anyway
      this.state = STATE_FAILED;
    },
    /**
     * can we emit?
     * @returns {boolean}
     */
    canEmit: function () {
      var i = 0;
      while (i < this.requireFail.length) {
        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
          return false;
        }
        i++;
      }
      return true;
    },
    /**
     * update the recognizer
     * @param {Object} inputData
     */
    recognize: function (inputData) {
      // make a new copy of the inputData
      // so we can change the inputData without messing up the other recognizers
      var inputDataClone = extend({}, inputData);
      // is is enabled and allow recognizing?
      if (!boolOrFn(this.options.enable, [
          this,
          inputDataClone
        ])) {
        this.reset();
        this.state = STATE_FAILED;
        return;
      }
      // reset when we've reached the end
      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
        this.state = STATE_POSSIBLE;
      }
      this.state = this.process(inputDataClone);
      // the recognizer has recognized a gesture
      // so trigger an event
      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
        this.tryEmit(inputDataClone);
      }
    },
    /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */
    process: function (inputData) {
    },
    // jshint ignore:line
    /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */
    getTouchAction: function () {
    },
    /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */
    reset: function () {
    }
  };
  /**
   * get a usable string, used as event postfix
   * @param {Const} state
   * @returns {String} state
   */
  function stateStr(state) {
    if (state & STATE_CANCELLED) {
      return 'cancel';
    } else if (state & STATE_ENDED) {
      return 'end';
    } else if (state & STATE_CHANGED) {
      return 'move';
    } else if (state & STATE_BEGAN) {
      return 'start';
    }
    return '';
  }
  /**
   * direction cons to string
   * @param {Const} direction
   * @returns {String}
   */
  function directionStr(direction) {
    if (direction == DIRECTION_DOWN) {
      return 'down';
    } else if (direction == DIRECTION_UP) {
      return 'up';
    } else if (direction == DIRECTION_LEFT) {
      return 'left';
    } else if (direction == DIRECTION_RIGHT) {
      return 'right';
    }
    return '';
  }
  /**
   * get a recognizer by name if it is bound to a manager
   * @param {Recognizer|String} otherRecognizer
   * @param {Recognizer} recognizer
   * @returns {Recognizer}
   */
  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
    var manager = recognizer.manager;
    if (manager) {
      return manager.get(otherRecognizer);
    }
    return otherRecognizer;
  }
  /**
   * This recognizer is just used as a base for the simple attribute recognizers.
   * @constructor
   * @extends Recognizer
   */
  function AttrRecognizer() {
    Recognizer.apply(this, arguments);
  }
  inherit(AttrRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof AttrRecognizer
     */
    defaults: {
      /**
       * @type {Number}
       * @default 1
       */
      pointers: 1
    },
    /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */
    attrTest: function (input) {
      var optionPointers = this.options.pointers;
      return optionPointers === 0 || input.pointers.length === optionPointers;
    },
    /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */
    process: function (input) {
      var state = this.state;
      var eventType = input.eventType;
      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
      var isValid = this.attrTest(input);
      // on cancel input and we've recognized before, return STATE_CANCELLED
      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
        return state | STATE_CANCELLED;
      } else if (isRecognized || isValid) {
        if (eventType & INPUT_END) {
          return state | STATE_ENDED;
        } else if (!(state & STATE_BEGAN)) {
          return STATE_BEGAN;
        }
        return state | STATE_CHANGED;
      }
      return STATE_FAILED;
    }
  });
  /**
   * Pan
   * Recognized when the pointer is down and moved in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */
  function PanRecognizer() {
    AttrRecognizer.apply(this, arguments);
    this.pX = null;
    this.pY = null;
  }
  inherit(PanRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PanRecognizer
     */
    defaults: {
      event: 'pan',
      threshold: 10,
      pointers: 1,
      direction: DIRECTION_ALL
    },
    getTouchAction: function () {
      var direction = this.options.direction;
      var actions = [];
      if (direction & DIRECTION_HORIZONTAL) {
        actions.push(TOUCH_ACTION_PAN_Y);
      }
      if (direction & DIRECTION_VERTICAL) {
        actions.push(TOUCH_ACTION_PAN_X);
      }
      return actions;
    },
    directionTest: function (input) {
      var options = this.options;
      var hasMoved = true;
      var distance = input.distance;
      var direction = input.direction;
      var x = input.deltaX;
      var y = input.deltaY;
      // lock to axis?
      if (!(direction & options.direction)) {
        if (options.direction & DIRECTION_HORIZONTAL) {
          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
          hasMoved = x != this.pX;
          distance = Math.abs(input.deltaX);
        } else {
          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
          hasMoved = y != this.pY;
          distance = Math.abs(input.deltaY);
        }
      }
      input.direction = direction;
      return hasMoved && distance > options.threshold && direction & options.direction;
    },
    attrTest: function (input) {
      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
    },
    emit: function (input) {
      this.pX = input.deltaX;
      this.pY = input.deltaY;
      var direction = directionStr(input.direction);
      if (direction) {
        this.manager.emit(this.options.event + direction, input);
      }
      this._super.emit.call(this, input);
    },
    reset: function () {
    }
  });
  /**
   * Pinch
   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
   * @constructor
   * @extends AttrRecognizer
   */
  function PinchRecognizer() {
    AttrRecognizer.apply(this, arguments);
  }
  inherit(PinchRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
      event: 'pinch',
      threshold: 0,
      pointers: 2
    },
    getTouchAction: function () {
      return [TOUCH_ACTION_NONE];
    },
    attrTest: function (input) {
      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
    },
    emit: function (input) {
      this._super.emit.call(this, input);
      if (input.scale !== 1) {
        var inOut = input.scale < 1 ? 'in' : 'out';
        this.manager.emit(this.options.event + inOut, input);
      }
    }
  });
  /**
   * Press
   * Recognized when the pointer is down for x ms without any movement.
   * @constructor
   * @extends Recognizer
   */
  function PressRecognizer() {
    Recognizer.apply(this, arguments);
    this._timer = null;
    this._input = null;
  }
  inherit(PressRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PressRecognizer
     */
    defaults: {
      event: 'press',
      pointers: 1,
      time: 500,
      // minimal time of the pointer to be pressed
      threshold: 5  // a minimal movement is ok, but keep it low
    },
    getTouchAction: function () {
      return [TOUCH_ACTION_AUTO];
    },
    process: function (input) {
      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTime = input.deltaTime > options.time;
      this._input = input;
      // we only allow little movement
      // and we've reached an end event, so a tap is possible
      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
        this.reset();
      } else if (input.eventType & INPUT_START) {
        this.reset();
        this._timer = setTimeoutContext(function () {
          this.state = STATE_RECOGNIZED;
          this.tryEmit();
        }, options.time, this);
      } else if (input.eventType & INPUT_END) {
        return STATE_RECOGNIZED;
      }
      return STATE_FAILED;
    },
    reset: function () {
      clearTimeout(this._timer);
    },
    emit: function (input) {
      if (this.state !== STATE_RECOGNIZED) {
        return;
      }
      if (input && input.eventType & INPUT_END) {
        this.manager.emit(this.options.event + 'up', input);
      } else {
        this._input.timeStamp = now();
        this.manager.emit(this.options.event, this._input);
      }
    }
  });
  /**
   * Rotate
   * Recognized when two or more pointer are moving in a circular motion.
   * @constructor
   * @extends AttrRecognizer
   */
  function RotateRecognizer() {
    AttrRecognizer.apply(this, arguments);
  }
  inherit(RotateRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof RotateRecognizer
     */
    defaults: {
      event: 'rotate',
      threshold: 0,
      pointers: 2
    },
    getTouchAction: function () {
      return [TOUCH_ACTION_NONE];
    },
    attrTest: function (input) {
      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
    }
  });
  /**
   * Swipe
   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
   * @constructor
   * @extends AttrRecognizer
   */
  function SwipeRecognizer() {
    AttrRecognizer.apply(this, arguments);
  }
  inherit(SwipeRecognizer, AttrRecognizer, {
    /**
     * @namespace
     * @memberof SwipeRecognizer
     */
    defaults: {
      event: 'swipe',
      threshold: 10,
      velocity: 0.65,
      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
      pointers: 1
    },
    getTouchAction: function () {
      return PanRecognizer.prototype.getTouchAction.call(this);
    },
    attrTest: function (input) {
      var direction = this.options.direction;
      var velocity;
      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
        velocity = input.velocity;
      } else if (direction & DIRECTION_HORIZONTAL) {
        velocity = input.velocityX;
      } else if (direction & DIRECTION_VERTICAL) {
        velocity = input.velocityY;
      }
      return this._super.attrTest.call(this, input) && direction & input.direction && input.distance > this.options.threshold && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
    },
    emit: function (input) {
      var direction = directionStr(input.direction);
      if (direction) {
        this.manager.emit(this.options.event + direction, input);
      }
      this.manager.emit(this.options.event, input);
    }
  });
  /**
   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
   * a single tap.
   *
   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
   * multi-taps being recognized.
   * @constructor
   * @extends Recognizer
   */
  function TapRecognizer() {
    Recognizer.apply(this, arguments);
    // previous time and center,
    // used for tap counting
    this.pTime = false;
    this.pCenter = false;
    this._timer = null;
    this._input = null;
    this.count = 0;
  }
  inherit(TapRecognizer, Recognizer, {
    /**
     * @namespace
     * @memberof PinchRecognizer
     */
    defaults: {
      event: 'tap',
      pointers: 1,
      taps: 1,
      interval: 300,
      // max time between the multi-tap taps
      time: 250,
      // max time of the pointer to be down (like finger on the screen)
      threshold: 10,
      // a minimal movement is ok, but keep it low
      posThreshold: 10  // a multi-tap can be a bit off the initial position
    },
    getTouchAction: function () {
      return [TOUCH_ACTION_MANIPULATION];
    },
    process: function (input) {
      var options = this.options;
      var validPointers = input.pointers.length === options.pointers;
      var validMovement = input.distance < options.threshold;
      var validTouchTime = input.deltaTime < options.time;
      this.reset();
      if (input.eventType & INPUT_START && this.count === 0) {
        return this.failTimeout();
      }
      // we only allow little movement
      // and we've reached an end event, so a tap is possible
      if (validMovement && validTouchTime && validPointers) {
        if (input.eventType != INPUT_END) {
          return this.failTimeout();
        }
        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
        this.pTime = input.timeStamp;
        this.pCenter = input.center;
        if (!validMultiTap || !validInterval) {
          this.count = 1;
        } else {
          this.count += 1;
        }
        this._input = input;
        // if tap count matches we have recognized it,
        // else it has began recognizing...
        var tapCount = this.count % options.taps;
        if (tapCount === 0) {
          // no failing requirements, immediately trigger the tap event
          // or wait as long as the multitap interval to trigger
          if (!this.hasRequireFailures()) {
            return STATE_RECOGNIZED;
          } else {
            this._timer = setTimeoutContext(function () {
              this.state = STATE_RECOGNIZED;
              this.tryEmit();
            }, options.interval, this);
            return STATE_BEGAN;
          }
        }
      }
      return STATE_FAILED;
    },
    failTimeout: function () {
      this._timer = setTimeoutContext(function () {
        this.state = STATE_FAILED;
      }, this.options.interval, this);
      return STATE_FAILED;
    },
    reset: function () {
      clearTimeout(this._timer);
    },
    emit: function () {
      if (this.state == STATE_RECOGNIZED) {
        this._input.tapCount = this.count;
        this.manager.emit(this.options.event, this._input);
      }
    }
  });
  /**
   * Simple way to create an manager with a default set of recognizers.
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */
  function Hammer(element, options) {
    options = options || {};
    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
    return new Manager(element, options);
  }
  /**
   * @const {string}
   */
  Hammer.VERSION = '2.0.4';
  /**
   * default settings
   * @namespace
   */
  Hammer.defaults = {
    /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */
    domEvents: false,
    /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */
    touchAction: TOUCH_ACTION_COMPUTE,
    /**
     * @type {Boolean}
     * @default true
     */
    enable: true,
    /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */
    inputTarget: null,
    /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */
    inputClass: null,
    /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */
    preset: [
      // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
      [
        RotateRecognizer,
        { enable: false }
      ],
      [
        PinchRecognizer,
        { enable: false },
        ['rotate']
      ],
      [
        SwipeRecognizer,
        { direction: DIRECTION_HORIZONTAL }
      ],
      [
        PanRecognizer,
        { direction: DIRECTION_HORIZONTAL },
        ['swipe']
      ],
      [TapRecognizer],
      [
        TapRecognizer,
        {
          event: 'doubletap',
          taps: 2
        },
        ['tap']
      ],
      [PressRecognizer]
    ],
    /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */
    cssProps: {
      /**
       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userSelect: 'none',
      /**
       * Disable the Windows Phone grippers when pressing an element.
       * @type {String}
       * @default 'none'
       */
      touchSelect: 'none',
      /**
       * Disables the default callout shown when you touch and hold a touch target.
       * On iOS, when you touch and hold a touch target such as a link, Safari displays
       * a callout containing information about the link. This property allows you to disable that callout.
       * @type {String}
       * @default 'none'
       */
      touchCallout: 'none',
      /**
       * Specifies whether zooming is enabled. Used by IE10>
       * @type {String}
       * @default 'none'
       */
      contentZooming: 'none',
      /**
       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
       * @type {String}
       * @default 'none'
       */
      userDrag: 'none',
      /**
       * Overrides the highlight color shown when the user taps a link or a JavaScript
       * clickable element in iOS. This property obeys the alpha value, if specified.
       * @type {String}
       * @default 'rgba(0,0,0,0)'
       */
      tapHighlightColor: 'rgba(0,0,0,0)'
    }
  };
  var STOP = 1;
  var FORCED_STOP = 2;
  /**
   * Manager
   * @param {HTMLElement} element
   * @param {Object} [options]
   * @constructor
   */
  function Manager(element, options) {
    options = options || {};
    this.options = merge(options, Hammer.defaults);
    this.options.inputTarget = this.options.inputTarget || element;
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.element = element;
    this.input = createInputInstance(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    toggleCssProps(this, true);
    each(options.recognizers, function (item) {
      var recognizer = this.add(new item[0](item[1]));
      item[2] && recognizer.recognizeWith(item[2]);
      item[3] && recognizer.requireFailure(item[3]);
    }, this);
  }
  Manager.prototype = {
    /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */
    set: function (options) {
      extend(this.options, options);
      // Options that need a little more setup
      if (options.touchAction) {
        this.touchAction.update();
      }
      if (options.inputTarget) {
        // Clean up existing event listeners and reinitialize
        this.input.destroy();
        this.input.target = options.inputTarget;
        this.input.init();
      }
      return this;
    },
    /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */
    stop: function (force) {
      this.session.stopped = force ? FORCED_STOP : STOP;
    },
    /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */
    recognize: function (inputData) {
      var session = this.session;
      if (session.stopped) {
        return;
      }
      // run the touch-action polyfill
      this.touchAction.preventDefaults(inputData);
      var recognizer;
      var recognizers = this.recognizers;
      // this holds the recognizer that is being recognized.
      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
      // if no recognizer is detecting a thing, it is set to `null`
      var curRecognizer = session.curRecognizer;
      // reset when the last recognizer is recognized
      // or when we're in a new session
      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
        curRecognizer = session.curRecognizer = null;
      }
      var i = 0;
      while (i < recognizers.length) {
        recognizer = recognizers[i];
        // find out if we are allowed try to recognize the input for this one.
        // 1.   allow if the session is NOT forced stopped (see the .stop() method)
        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
        //      that is being recognized.
        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
        //      this can be setup with the `recognizeWith()` method on the recognizer.
        if (session.stopped !== FORCED_STOP && // 1
          (!curRecognizer || recognizer == curRecognizer || // 2
          recognizer.canRecognizeWith(curRecognizer))) {
          // 3
          recognizer.recognize(inputData);
        } else {
          recognizer.reset();
        }
        // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
        // current active recognizer. but only if we don't already have an active recognizer
        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
          curRecognizer = session.curRecognizer = recognizer;
        }
        i++;
      }
    },
    /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */
    get: function (recognizer) {
      if (recognizer instanceof Recognizer) {
        return recognizer;
      }
      var recognizers = this.recognizers;
      for (var i = 0; i < recognizers.length; i++) {
        if (recognizers[i].options.event == recognizer) {
          return recognizers[i];
        }
      }
      return null;
    },
    /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */
    add: function (recognizer) {
      if (invokeArrayArg(recognizer, 'add', this)) {
        return this;
      }
      // remove existing
      var existing = this.get(recognizer.options.event);
      if (existing) {
        this.remove(existing);
      }
      this.recognizers.push(recognizer);
      recognizer.manager = this;
      this.touchAction.update();
      return recognizer;
    },
    /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */
    remove: function (recognizer) {
      if (invokeArrayArg(recognizer, 'remove', this)) {
        return this;
      }
      var recognizers = this.recognizers;
      recognizer = this.get(recognizer);
      recognizers.splice(inArray(recognizers, recognizer), 1);
      this.touchAction.update();
      return this;
    },
    /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */
    on: function (events, handler) {
      var handlers = this.handlers;
      each(splitStr(events), function (event) {
        handlers[event] = handlers[event] || [];
        handlers[event].push(handler);
      });
      return this;
    },
    /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */
    off: function (events, handler) {
      var handlers = this.handlers;
      each(splitStr(events), function (event) {
        if (!handler) {
          delete handlers[event];
        } else {
          handlers[event].splice(inArray(handlers[event], handler), 1);
        }
      });
      return this;
    },
    /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */
    emit: function (event, data) {
      // we also want to trigger dom events
      if (this.options.domEvents) {
        triggerDomEvent(event, data);
      }
      // no handlers, so skip it all
      var handlers = this.handlers[event] && this.handlers[event].slice();
      if (!handlers || !handlers.length) {
        return;
      }
      data.type = event;
      data.preventDefault = function () {
        data.srcEvent.preventDefault();
      };
      var i = 0;
      while (i < handlers.length) {
        handlers[i](data);
        i++;
      }
    },
    /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */
    destroy: function () {
      this.element && toggleCssProps(this, false);
      this.handlers = {};
      this.session = {};
      this.input.destroy();
      this.element = null;
    }
  };
  /**
   * add/remove the css properties as defined in manager.options.cssProps
   * @param {Manager} manager
   * @param {Boolean} add
   */
  function toggleCssProps(manager, add) {
    var element = manager.element;
    each(manager.options.cssProps, function (value, name) {
      element.style[prefixed(element.style, name)] = add ? value : '';
    });
  }
  /**
   * trigger dom event
   * @param {String} event
   * @param {Object} data
   */
  function triggerDomEvent(event, data) {
    var gestureEvent = document.createEvent('Event');
    gestureEvent.initEvent(event, true, true);
    gestureEvent.gesture = data;
    data.target.dispatchEvent(gestureEvent);
  }
  extend(Hammer, {
    INPUT_START: INPUT_START,
    INPUT_MOVE: INPUT_MOVE,
    INPUT_END: INPUT_END,
    INPUT_CANCEL: INPUT_CANCEL,
    STATE_POSSIBLE: STATE_POSSIBLE,
    STATE_BEGAN: STATE_BEGAN,
    STATE_CHANGED: STATE_CHANGED,
    STATE_ENDED: STATE_ENDED,
    STATE_RECOGNIZED: STATE_RECOGNIZED,
    STATE_CANCELLED: STATE_CANCELLED,
    STATE_FAILED: STATE_FAILED,
    DIRECTION_NONE: DIRECTION_NONE,
    DIRECTION_LEFT: DIRECTION_LEFT,
    DIRECTION_RIGHT: DIRECTION_RIGHT,
    DIRECTION_UP: DIRECTION_UP,
    DIRECTION_DOWN: DIRECTION_DOWN,
    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
    DIRECTION_ALL: DIRECTION_ALL,
    Manager: Manager,
    Input: Input,
    TouchAction: TouchAction,
    TouchInput: TouchInput,
    MouseInput: MouseInput,
    PointerEventInput: PointerEventInput,
    TouchMouseInput: TouchMouseInput,
    SingleTouchInput: SingleTouchInput,
    Recognizer: Recognizer,
    AttrRecognizer: AttrRecognizer,
    Tap: TapRecognizer,
    Pan: PanRecognizer,
    Swipe: SwipeRecognizer,
    Pinch: PinchRecognizer,
    Rotate: RotateRecognizer,
    Press: PressRecognizer,
    on: addEventListeners,
    off: removeEventListeners,
    each: each,
    merge: merge,
    extend: extend,
    inherit: inherit,
    bindFn: bindFn,
    prefixed: prefixed
  });
  if (typeof module == 'object' && module.exports) {
    exports = Hammer;
  }  /** ignored by jsdoc **/ else {
    return Hammer;
  }
  return exports;
}(hammer);
boundry = function (exports) {
  var Util = util;
  function Boundry(cfg) {
    this.cfg = Util.mix({
      width: 0,
      height: 0
    }, cfg);
    this.init();
  }
  Util.mix(Boundry.prototype, {
    init: function () {
      var self = this;
      self._xtop = 0;
      self._xright = 0;
      self._xleft = 0;
      self._xbottom = 0;
      self.refresh({
        width: self.cfg.width,
        height: self.cfg.height
      });
    },
    reset: function () {
      this.resetTop();
      this.resetLeft();
      this.resetBottom();
      this.resetRight();
      return this;
    },
    resetTop: function () {
      this._xtop = 0;
      this.refresh();
      return this;
    },
    resetLeft: function () {
      this._xleft = 0;
      this.refresh();
      return this;
    },
    resetBottom: function () {
      this._xbottom = 0;
      this.refresh();
      return this;
    },
    resetRight: function () {
      this._xright = 0;
      this.refresh();
      return this;
    },
    expandTop: function (top) {
      this._xtop = top;
      this.refresh();
      return this;
    },
    expandLeft: function (left) {
      this._xleft = left;
      this.refresh();
      return this;
    },
    expandRight: function (right) {
      this._xright = right;
      this.refresh();
      return this;
    },
    expandBottom: function (bottom) {
      this._xbottom = bottom;
      this.refresh();
      return this;
    },
    refresh: function (cfg) {
      Util.mix(this.cfg, cfg);
      this.top = this._xtop;
      this.left = this._xleft;
      this.bottom = (cfg && cfg.height || this.cfg.height || 0) - this._xbottom;
      this.right = (cfg && cfg.width || this.cfg.width || 0) - this._xright;
      this.width = this.right - this.left > 0 ? this.right - this.left : 0;
      this.height = this.bottom - this.top > 0 ? this.bottom - this.top : 0;
      return this;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Boundry;
  }  /** ignored by jsdoc **/ else {
    return Boundry;
  }
  return exports;
}(boundry);
components_sticky = function (exports) {
  var Util = util;
  var Base = base;
  //transform
  var transform = Util.prefixStyle('transform');
  // default render function for position:sticky elements
  var defaultStickyRenderFunc = function (e) {
    var stickyElement = e.stickyElement;
    var curStickyElement = e.curStickyElement;
    var xscroll = e.xscroll;
    var _ = e._;
    var infinite = xscroll.getPlugin('infinite');
    if (infinite) {
      infinite.userConfig.renderHook.call(self, stickyElement, curStickyElement);
      stickyElement.setAttribute('xs-guid', curStickyElement.guid);
      Util.addClass(stickyElement, curStickyElement.className);
      for (var attrName in curStickyElement.style) {
        if (attrName != 'display' && attrName != 'position') {
          //copy styles
          stickyElement.style[attrName] = attrName == _.height ? curStickyElement.style[attrName] + 'px' : curStickyElement.style[attrName];
        }
      }
    } else {
      var style = curStickyElement.getAttribute('style');
      stickyElement.innerHTML = curStickyElement.innerHTML;
      stickyElement.className = curStickyElement.className;
      style && stickyElement.setAttribute('style', style);
    }
  };
  var Sticky = function (cfg) {
    Sticky.superclass.constructor.call(this, cfg);
    this.userConfig = Util.mix({
      stickyRenderTo: undefined,
      forceSticky: true,
      prefix: 'xs-sticky-container',
      stickyRenderFunc: defaultStickyRenderFunc,
      zoomType: 'y'
    }, cfg);
    this.init();
  };
  Util.extend(Sticky, Base, {
    init: function () {
      var self = this, userConfig = self.userConfig, xscroll = self.xscroll = userConfig.xscroll;
      var isY = self.isY = !!(userConfig.zoomType == 'y');
      self._ = {
        top: self.isY ? 'top' : 'left',
        left: self.isY ? 'left' : 'bottom',
        right: self.isY ? 'right' : 'top',
        height: self.isY ? 'height' : 'width',
        width: self.isY ? 'width' : 'height'
      };
      self.stickyRenderTo = Util.getNode(userConfig.stickyRenderTo);
      self._handlers = [];
      return self;
    },
    getStickiesPos: function () {
      var self = this;
      var xscroll = self.xscroll;
      var isInfinite = self.isInfinite;
      var isY = self.isY;
      var _ = self._;
      var stickiesPos = [];
      var getPos = function (sticky) {
        var pos = {};
        if (isInfinite) {
          pos[_.top] = isY ? sticky._top : sticky._left;
          pos[_.height] = isY ? sticky._height : sticky._width;
        } else {
          pos[_.top] = self.isY ? Util.getOffsetTop(sticky) : Util.getOffsetLeft(sticky);
          pos[_.height] = self.isY ? sticky.offsetHeight : sticky.offsetWidth;
        }
        return pos;
      };
      for (var i = 0; i < self.stickiesNum; i++) {
        var pos = getPos(self.stickyElements[i]);
        self._handlers[i] = self._handlers[i] || self.createStickyEl();
        pos.el = self._handlers[i];
        pos.isRender = false;
        stickiesPos.push(pos);
      }
      return stickiesPos;
    },
    getStickyElements: function () {
      var self = this;
      var xscroll = self.xscroll;
      var userConfig = self.userConfig;
      var isInfinite = self.isInfinite;
      var infinite = xscroll.getPlugin('infinite');
      if (infinite) {
        var stickyElements = [], serializedData = infinite.__serializedData;
        for (var i in serializedData) {
          var rowData = serializedData[i];
          if (rowData && rowData.style && 'sticky' == rowData.style.position) {
            stickyElements.push(rowData);
          }
        }
        return stickyElements;
      } else {
        return Util.getNodes(xscroll.userConfig.stickyElements, xscroll.content);
      }
    },
    render: function (force) {
      var self = this;
      var userConfig = self.userConfig;
      var xscroll = self.xscroll;
      self.isInfinite = !!xscroll.getPlugin('infinite');
      var _ = self._;
      self.stickyElements = self.getStickyElements();
      self.stickiesNum = self.stickyElements && self.stickyElements.length;
      if (!self.stickiesNum)
        return;
      if (!self.stickyRenderTo) {
        self.stickyRenderTo = document.createElement('div');
        xscroll.renderTo.appendChild(self.stickyRenderTo);
      }
      self.stickiesPos = self.getStickiesPos();
      var stickyRenderTo = self.stickyRenderTo;
      stickyRenderTo.style[_.top] = 0;
      stickyRenderTo.style[_.left] = 0;
      stickyRenderTo.style[_.right] = 0;
      stickyRenderTo.style.position = xscroll.userConfig.useOriginScroll ? 'fixed' : 'absolute';
      Util.addClass(self.stickyRenderTo, userConfig.prefix);
      self.stickyHandler(force);
      self._bindEvt();
    },
    createStickyEl: function () {
      var self = this;
      var el = document.createElement('div');
      el.style.display = 'none';
      Util.addClass(el, 'xs-sticky-handler');
      self.stickyRenderTo.appendChild(el);
      return el;
    },
    _bindEvt: function () {
      var self = this, xscroll = self.xscroll;
      xscroll.on('scroll', self.stickyHandler, self);
    },
    stickyHandler: function (force) {
      var self = this;
      var xscroll = self.xscroll;
      var userConfig = self.userConfig;
      var scrollTop = self.isY ? xscroll.getScrollTop() : xscroll.getScrollLeft();
      var stickiesPos = self.stickiesPos;
      var _ = self._;
      var indexes = [];
      for (var i = 0, l = stickiesPos.length; i < l; i++) {
        var top = stickiesPos[i][_.top];
        if (scrollTop > top) {
          indexes.push(i);
        }
      }
      if (!indexes.length) {
        if (self.stickyElement) {
          self.stickyElement.style.display = 'none';
        }
        self.curStickyIndex = undefined;
        return;
      }
      var curStickyIndex = Math.max.apply(null, indexes);
      if (self.curStickyIndex != curStickyIndex || force) {
        var prevStickyIndex = self.curStickyIndex;
        self.curStickyIndex = curStickyIndex;
        self.curStickyElement = self.stickyElements[curStickyIndex];
        self.curStickyPos = stickiesPos[curStickyIndex];
        self.stickyElement = self.curStickyPos.el;
        for (var i = 0, l = stickiesPos.length; i < l; i++) {
          stickiesPos[i].el.style.display = 'none';
        }
        var eventsObj = {
          stickyElement: self.stickyElement,
          curStickyIndex: self.curStickyIndex,
          prevStickyIndex: prevStickyIndex,
          curStickyPos: self.curStickyPos,
          isRender: self.curStickyPos.isRender
        };
        xscroll.trigger('beforestickychange', eventsObj);
        self._stickyRenderFunc(self);
        xscroll.trigger('stickychange', eventsObj);
      }
      var trans = 0;
      if (self.stickiesPos[self.curStickyIndex + 1]) {
        var cur = self.stickiesPos[self.curStickyIndex];
        var next = self.stickiesPos[self.curStickyIndex + 1];
        if (scrollTop + cur[_.height] > next[_.top] && scrollTop + cur[_.height] < next[_.top] + cur[_.height]) {
          trans = cur[_.height] + scrollTop - next[_.top];
        } else {
          trans = 0;
        }
      }
      self.stickyElement.style[transform] = self.isY ? 'translateY(-' + trans + 'px) translateZ(0)' : 'translateX(-' + trans + 'px) translateZ(0)';
    },
    _stickyRenderFunc: function (e) {
      var self = this;
      var _ = self._;
      var stickyRenderFunc = self.userConfig.stickyRenderFunc;
      var el = self.curStickyPos.el;
      if (!self.curStickyPos.isRender) {
        el.style[_.left] = 0;
        el.style[_.right] = 0;
        stickyRenderFunc && stickyRenderFunc.call(self, e);
      }
      el.style.display = 'block';
      self.curStickyPos.isRender = true;
    },
    destroy: function () {
      var self = this;
      self.stickyElements = undefined;
      self.stickiesNum = undefined;
      self.stickiesPos = undefined;
      Util.remove(self.stickyElement);
      self.stickyElement = undefined;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Sticky;
  }  /** ignored by jsdoc **/ else {
    return Sticky;
  }
  return exports;
}(components_sticky);
components_fixed = function (exports) {
  var Util = util;
  var Base = base;
  var transform = Util.prefixStyle('transform');
  var Fixed = function (cfg) {
    Fixed.superclass.constructor.call(this, cfg);
    this.userConfig = Util.mix({
      fixedRenderTo: undefined,
      fixedElements: '.xs-fixed',
      prefix: 'xs-fixed-container',
      zoomType: 'y'
    }, cfg);
    this.init();
  };
  Util.extend(Fixed, Base, {
    fixedElements: [],
    init: function () {
      var self = this, userConfig = self.userConfig, xscroll = self.xscroll = userConfig.xscroll, xscrollConfig = self.xscrollConfig = xscroll.userConfig;
      self.isY = !!(userConfig.zoomType == 'y');
      self._ = self.isY ? {
        top: 'top',
        height: 'height',
        width: 'width',
        offsetTop: 'offsetTop'
      } : {
        top: 'left',
        height: 'width',
        width: 'height',
        offsetTop: 'offsetLeft'
      };
      self.fixedRenderTo = Util.getNode(userConfig.fixedRenderTo);
      return self;
    },
    render: function () {
      var self = this;
      var xscroll = self.xscroll;
      self.infinite = xscroll.getPlugin('infinite');
      if (!self.fixedRenderTo) {
        self.fixedRenderTo = document.createElement('div');
        xscroll.renderTo.appendChild(self.fixedRenderTo);
      }
      Util.addClass(self.fixedRenderTo, self.userConfig.prefix);
      var originalFixedElements = self.originalFixedElements = self.getFixedElements();
      for (var i = 0, l = originalFixedElements.length; i < l; i++) {
        self.renderFixedElement(originalFixedElements[i], i, self.fixedRenderTo);
      }
      return self;
    },
    getFixedElements: function () {
      var self = this;
      var infinite = self.infinite;
      var userConfig = self.userConfig;
      if (infinite) {
        var els = [];
        for (var i in infinite.__serializedData) {
          var data = infinite.__serializedData[i];
          if (data && data.style && data.style.position == 'fixed') {
            els.push(data);
          }
        }
        return els;
      } else {
        return Util.getNodes(userConfig.fixedElements, self.xscroll.content);
      }
    },
    renderFixedElement: function (el, fixedIndex, fixedRenderTo) {
      var self = this;
      var isRender = true;
      var _ = self._;
      var xscroll = self.xscroll;
      var userConfig = self.userConfig;
      var xscrollConfig = self.xscrollConfig;
      var useOriginScroll = xscrollConfig.useOriginScroll;
      var infinite = self.infinite;
      var fixedElement = self.fixedElements[fixedIndex];
      if (!self.fixedElements[fixedIndex]) {
        isRender = false;
        if (useOriginScroll && !infinite) {
          //use original position:fixed stylesheet
          el.style.position = 'fixed';
          el.style.display = 'block';
        } else {
          //deep clone fixed nodes and hide original nodes
          fixedElement = document.createElement('div');
          if (infinite) {
            fixedElement.setAttribute('style', Util.stringifyStyle(Util.mix(el.style, {
              display: 'block',
              width: '100%'
            })));
            fixedElement.style[_.top] = (el.style[_.top] >= 0 ? el.style[_.top] : el._top) + 'px';
            if (el.style[_.height]) {
              fixedElement.style[_.height] = el.style[_.height] + 'px';
            }
            infinite.userConfig.renderHook.call(self, fixedElement, el);
          } else {
            fixedElement.style.display = 'block';
            fixedElement.style.position = 'absolute';
            fixedElement.style[_.width] = '100%';
            fixedElement.innerHTML = el.innerHTML;
            fixedElement.className = el.className;
            fixedElement.setAttribute('style', el.getAttribute('style'));
            fixedElement.style[_.top] = el[_.offsetTop] + 'px';
            el.style.display = 'none';
          }
          fixedRenderTo.appendChild(fixedElement);
          self.fixedElements.push(fixedElement);
        }
      }
      xscroll.trigger('fixedchange', {
        fixedIndex: fixedIndex,
        fixedElement: useOriginScroll ? el : fixedElement,
        originalFixedElement: el,
        isRender: isRender
      });
    },
    destroy: function () {
      var self = this;
      self.fixedElements = undefined;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Fixed;
  }  /** ignored by jsdoc **/ else {
    return Fixed;
  }
  return exports;
}(components_fixed);
core = function (exports) {
  var Util = util, Base = base, Animate = animate, Boundry = boundry, Hammer = hammer, Sticky = components_sticky, Fixed = components_fixed;
  // boundry checked bounce effect
  var BOUNDRY_CHECK_DURATION = 500;
  var BOUNDRY_CHECK_EASING = 'ease';
  var BOUNDRY_CHECK_ACCELERATION = 0.1;
  /**
   * @constructor
   * @param {object} cfg config for scroll
   * @param {number} cfg.SCROLL_ACCELERATION  acceleration for scroll, min value make the scrolling smoothly
   * @param {number} cfg.BOUNDRY_CHECK_DURATION duration for boundry bounce
   * @param {number} cfg.BOUNDRY_CHECK_EASING easing for boundry bounce
   * @param {number} cfg.BOUNDRY_CHECK_ACCELERATION acceleration for boundry bounce
   * @param {boolean} cfg.lockX just like overflow-x:hidden
   * @param {boolean} cfg.lockY just like overflow-y:hidden
   * @param {boolean} cfg.scrollbarX config if the scrollbar-x is visible
   * @param {boolean} cfg.scrollbarY config if the scrollbar-y is visible
   * @param {boolean} cfg.useTransition config if use css3 transition or raf for scroll animation
   * @param {boolean} cfg.useOriginScroll config if use simulate or origin scroll
   * @param {boolean} cfg.bounce config if use has the bounce effect when scrolling outside of the boundry
   * @param {boolean} cfg.boundryCheck config if scrolling inside of the boundry
   * @param {boolean} cfg.preventDefault prevent touchstart
   * @param {boolean} cfg.preventTouchMove prevent touchmove
   * @param {string|HTMLElement}  cfg.container config for scroller's container which default value is ".xs-container"
   * @param {string|HTMLElement}  cfg.content config for scroller's content which default value is ".xs-content"
   * @param {object}  cfg.indicatorInsets  config scrollbars position {top: number, left: number, bottom: number, right: number}
   * @param {string}  cfg.stickyElements config for sticky-positioned elements
   * @param {string}  cfg.fixedElements config for fixed-positioned elements
   * @param {string}  cfg.touchAction config for touchAction of the scroller
   * @extends XScroll
   * @example
   * var xscroll = new XScroll({
   *    renderTo:"#scroll",
   *    lockX:false,
   *    scrollbarX:true
   * });
   * xscroll.render();
   */
  function XScroll(cfg) {
    XScroll.superclass.constructor.call(this);
    this.userConfig = cfg;
    this.init();
  }
  Util.extend(XScroll, Base, {
    /**
     * version
     * @memberof XScroll
     * @type {string}
     */
    version: '3.0.13',
    /**
     * init scroll
     * @memberof XScroll
     * @return {XScroll}
     */
    init: function () {
      var self = this;
      var defaultCfg = {
        preventDefault: true,
        bounce: true,
        boundryCheck: true,
        useTransition: true,
        gpuAcceleration: true,
        BOUNDRY_CHECK_EASING: BOUNDRY_CHECK_EASING,
        BOUNDRY_CHECK_DURATION: BOUNDRY_CHECK_DURATION,
        BOUNDRY_CHECK_ACCELERATION: BOUNDRY_CHECK_ACCELERATION,
        useOriginScroll: false,
        zoomType: 'y',
        indicatorInsets: {
          top: 3,
          bottom: 3,
          left: 3,
          right: 3,
          width: 3,
          spacing: 5
        },
        container: '.xs-container',
        content: '.xs-content',
        stickyElements: '.xs-sticky',
        fixedElements: '.xs-fixed',
        touchAction: 'auto'
      };
      //generate guid
      self.guid = Util.guid();
      self.renderTo = Util.getNode(self.userConfig.renderTo);
      //timer for animtion
      self.__timers = {};
      //config attributes on element
      var elCfg = JSON.parse(self.renderTo.getAttribute('xs-cfg'));
      var userConfig = self.userConfig = Util.mix(Util.mix(defaultCfg, elCfg), self.userConfig);
      self.container = Util.getNode(userConfig.container, self.renderTo);
      self.content = Util.getNode(userConfig.content, self.renderTo);
      self.boundry = new Boundry();
      self.boundry.refresh();
      return self;
    },
    /**
     * destroy scroll
     * @memberof XScroll
     * @return {XScroll}
     */
    destroy: function () {
      var self = this;
      self.mc && self.mc.destroy();
      self.sticky && self.sticky.destroy();
      self.fixed && self.fixed.destroy();
    },
    _initContainer: function () {
    },
    /**
     * @memberof XScroll
     * @return {XScroll}
     */
    enableGPUAcceleration: function () {
      this.userConfig.gpuAcceleration = true;
      return this;
    },
    /**
     * @memberof XScroll
     * @return {XScroll}
     */
    disableGPUAcceleration: function () {
      this.userConfig.gpuAcceleration = false;
      return this;
    },
    /**
     * get scroll offset
     * @memberof XScroll
     * @return {Object} {scrollTop:scrollTop,scrollLeft:scrollLeft}
     */
    getScrollPos: function () {
      var self = this;
      return {
        scrollLeft: self.getScrollLeft(),
        scrollTop: self.getScrollTop()
      };
    },
    /**
     * get scroll top value
     * @memberof XScroll
     * @return {number} scrollTop
     */
    getScrollTop: function () {
    },
    /**
     * get scroll left value
     * @memberof XScroll
     * @return {number} scrollLeft
     */
    getScrollLeft: function () {
    },
    /**
     * scroll absolute to the destination
     * @memberof XScroll
     * @param scrollLeft {number} scrollLeft
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollTo: function (scrollLeft, scrollTop, duration, easing, callback) {
      var self = this;
      var scrollLeft = undefined === scrollLeft || isNaN(scrollLeft) ? -self.getScrollLeft() : scrollLeft;
      var scrollTop = undefined === scrollTop || isNaN(scrollTop) ? -self.getScrollTop() : scrollTop;
      self.scrollLeft(scrollLeft, duration, easing, callback);
      self.scrollTop(scrollTop, duration, easing, callback);
    },
    /**
     * scroll relative to the destination
     * @memberof XScroll
     * @param scrollLeft {number} scrollLeft
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollBy: function (scrollLeft, scrollTop, duration, easing, callback) {
      this.scrollByX(scrollLeft, duration, easing, callback);
      this.scrollByY(scrollTop, duration, easing, callback);
    },
    /**
     * horizontal scroll relative to the destination
     * @memberof XScroll
     * @param scrollLeft {number} scrollLeft
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollLeftBy: function (scrollLeft, duration, easing, callback) {
      this.scrollLeft(Number(scrollLeft) + Number(this.getScrollLeft()), duration, easing, callback);
    },
    /**
     * vertical scroll relative to the destination
     * @memberof XScroll
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollTopBy: function (scrollTop, duration, easing, callback) {
      this.scrollTop(Number(scrollTop) + Number(this.getScrollTop()), duration, easing, callback);
    },
    /**
     * horizontal scroll absolute to the destination
     * @memberof XScroll
     * @param scrollLeft {number} scrollLeft
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollLeft: function (scrollLeft, duration, easing, callback) {
    },
    /**
     * vertical scroll absolute to the destination
     * @memberof XScroll
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollTop: function (scrollTop, duration, easing, callback) {
    },
    /**
     * reset the boundry size
     * @memberof XScroll
     * @return {XScroll}
     **/
    resetSize: function () {
      var self = this;
      if (!self.container || !self.content)
        return;
      var userConfig = self.userConfig;
      var renderToStyle = getComputedStyle(self.renderTo);
      var width = self.width = (userConfig.width || self.renderTo.offsetWidth) - Util.px2Num(renderToStyle['padding-left']) - Util.px2Num(renderToStyle['padding-right']);
      var height = self.height = (userConfig.height || self.renderTo.offsetHeight) - Util.px2Num(renderToStyle['padding-top']) - Util.px2Num(renderToStyle['padding-bottom']);
      var containerWidth = userConfig.containerWidth || self.content.offsetWidth;
      var containerHeight = userConfig.containerHeight || self.content.offsetHeight;
      self.containerWidth = containerWidth < self.width ? self.width : containerWidth;
      self.containerHeight = containerHeight < self.height ? self.height : containerHeight;
      self.boundry.refresh({
        width: self.width,
        height: self.height
      });
      return self;
    },
    /**
     * render scroll
     * @memberof XScroll
     * @return {XScroll}
     **/
    render: function () {
      var self = this;
      self.resetSize();
      //init stickies
      self.initSticky();
      //init fixed elements
      self.initFixed();
      self.trigger('afterrender', { type: 'afterrender' });
      self._bindEvt();
      //update touch-action
      self.initTouchAction();
      return self;
    },
    /**
     * init touch action
     * @memberof XScroll
     * @return {XScroll}
     */
    initTouchAction: function () {
      var self = this;
      self.mc.set({ touchAction: self.userConfig.touchAction });
      return self;
    },
    initFixed: function () {
      var self = this, userConfig = self.userConfig;
      self.fixed = self.fixed || new Fixed({
        fixedElements: userConfig.fixedElements,
        xscroll: self,
        fixedRenderTo: userConfig.fixedRenderTo
      });
      self.fixed.render();
      self.resetSize();
      return self;
    },
    initSticky: function () {
      var self = this, userConfig = self.userConfig;
      var sticky = self.sticky = self.sticky || new Sticky({
        xscroll: self,
        zoomType: userConfig.zoomType,
        stickyRenderTo: userConfig.stickyRenderTo
      });
      sticky.render();
    },
    /**
     * bounce to the boundry vertical and horizontal
     * @memberof XScroll
     * @return {XScroll}
     **/
    boundryCheck: function () {
      return this;
    },
    /**
     * bounce to the boundry horizontal
     * @memberof XScroll
     * @return {XScroll}
     **/
    boundryCheckX: function () {
      return this;
    },
    /**
     * bounce to the boundry vertical
     * @memberof XScroll
     * @return {XScroll}
     **/
    boundryCheckY: function () {
      return this;
    },
    _bindEvt: function () {
      var self = this;
      if (self.___isEvtBind)
        return;
      self.___isEvtBind = true;
      var mc = self.mc = new Hammer.Manager(self.renderTo);
      var tap = new Hammer.Tap();
      var pan = new Hammer.Pan();
      var pinch = new Hammer.Pinch();
      mc.add([
        tap,
        pan
      ]);
      //trigger all events
      self.mc.on('panstart pan panend pancancel pinchstart pinchmove pinchend pinchcancel pinchin pinchout', function (e) {
        self.trigger(e.type, e);
      });
      //trigger touch events
      var touchEvents = [
        'touchstart',
        'touchmove',
        'touchend',
        'touchcancel',
        'mousedown'
      ];
      for (var i = 0, l = touchEvents.length; i < l; i++) {
        self.renderTo.addEventListener(touchEvents[i], function (e) {
          self.trigger(e.type, e);
        });
      }
      self.mc.on('tap', function (e) {
        if (e.tapCount == 1) {
          e.type = 'tap';
          self.trigger(e.type, e);
        } else if (e.tapCount == 2) {
          e.type = 'doubletap';
          self.trigger('doubletap', e);
        }
      });
      return self;
    },
    _resetLockConfig: function () {
    },
    stop: function () {
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = XScroll;
  }  /** ignored by jsdoc **/ else {
    return XScroll;
  }
  return exports;
}(core);
components_scrollbar = function (exports) {
  var Util = util;
  var Animate = animate;
  var MAX_BOUNCE_DISTANCE = 40;
  var MIN_BAR_SCROLLED_SIZE = 10;
  var MIN_BAR_SIZE = 50;
  var transform = Util.prefixStyle('transform');
  var transformStr = Util.vendor ? [
    '-',
    Util.vendor,
    '-transform'
  ].join('') : 'transform';
  var transition = Util.prefixStyle('transition');
  var borderRadius = Util.prefixStyle('borderRadius');
  var transitionDuration = Util.prefixStyle('transitionDuration');
  var ScrollBar = function (cfg) {
    this.userConfig = Util.mix({
      MIN_BAR_SCROLLED_SIZE: MIN_BAR_SCROLLED_SIZE,
      MIN_BAR_SIZE: MIN_BAR_SIZE,
      MAX_BOUNCE_DISTANCE: MAX_BOUNCE_DISTANCE,
      spacing: 5
    }, cfg);
    this.init(cfg.xscroll);
  };
  Util.mix(ScrollBar.prototype, {
    init: function (xscroll) {
      var self = this;
      self.xscroll = xscroll;
      self.type = self.userConfig.type;
      self.isY = self.type == 'y' ? true : false;
      self.scrollTopOrLeft = self.isY ? 'scrollTop' : 'scrollLeft';
    },
    destroy: function () {
      var self = this;
      Util.remove(self.scrollbar);
      self.xscroll.off('scroll', self._scrollHandler, self);
      self.xscroll.off('scrollend', self._scrollEndHandler, self);
    },
    render: function () {
      var self = this;
      var xscroll = self.xscroll;
      var boundry = xscroll.boundry;
      var indicatorInsets = self.xscroll.userConfig.indicatorInsets;
      var translateZ = xscroll.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      var transform = translateZ ? transformStr + ':' + translateZ + ';' : '';
      var commonCss = 'opacity:0;position:absolute;z-index:999;overflow:hidden;-webkit-border-radius:3px;-moz-border-radius:3px;-o-border-radius:3px;' + transform;
      indicatorInsets._xright = indicatorInsets.right + indicatorInsets.spacing;
      indicatorInsets._xbottom = indicatorInsets.bottom + indicatorInsets.spacing;
      var css = self.isY ? Util.substitute('width:{width}px;bottom:{_xbottom}px;top:{top}px;right:{right}px;', indicatorInsets) + commonCss : Util.substitute('height:{width}px;left:{left}px;right:{_xright}px;bottom:{bottom}px;', indicatorInsets) + commonCss;
      if (!self.scrollbar) {
        self.scrollbar = document.createElement('div');
        self.indicate = document.createElement('div');
        xscroll.renderTo.appendChild(self.scrollbar);
        self.scrollbar.appendChild(self.indicate);
      }
      self.scrollbar.style.cssText = css;
      var size = self.isY ? 'width:100%;' : 'height:100%;';
      self.indicate.style.cssText = size + 'position:absolute;background:rgba(0,0,0,0.3);-webkit-border-radius:3px;-moz-border-radius:3px;-o-border-radius:3px;';
      self._update();
      self.hide(0);
      self._bindEvt();
    },
    _update: function (pos, duration, easing, callback) {
      var self = this;
      var pos = undefined === pos ? self.isY ? self.xscroll.getScrollTop() : self.xscroll.getScrollLeft() : pos;
      var barInfo = self.computeScrollBar(pos);
      var size = self.isY ? 'height' : 'width';
      self.indicate.style[size] = Math.round(barInfo.size) + 'px';
      if (duration && easing) {
        self.scrollTo(barInfo.pos, duration, easing, callback);
      } else {
        self.moveTo(barInfo.pos);
      }
    },
    //compute the position and size of the scrollbar
    computeScrollBar: function (pos) {
      var self = this;
      var type = self.isY ? 'y' : 'x';
      var spacing = self.userConfig.spacing;
      var xscroll = self.xscroll;
      var boundry = xscroll.boundry;
      var userConfig = self.userConfig;
      var pos = self.isY ? Math.round(pos) + boundry._xtop : Math.round(pos) + boundry._xleft;
      var MIN_BAR_SCROLLED_SIZE = userConfig.MIN_BAR_SCROLLED_SIZE;
      var MIN_BAR_SIZE = userConfig.MIN_BAR_SIZE;
      var MAX_BOUNCE_DISTANCE = userConfig.MAX_BOUNCE_DISTANCE;
      self.containerSize = self.isY ? xscroll.containerHeight + boundry._xtop + boundry._xbottom : self.xscroll.containerWidth + boundry._xright + boundry._xleft;
      self.size = self.isY ? boundry.cfg.height : boundry.cfg.width;
      self.indicateSize = self.isY ? boundry.cfg.height - spacing * 2 : boundry.cfg.width - spacing * 2;
      var indicateSize = self.indicateSize;
      var containerSize = self.containerSize;
      var barPos = indicateSize * pos / containerSize;
      var barSize = Math.round(indicateSize * self.size / containerSize);
      var overTop = self.isY ? xscroll.getBoundryOutTop() : xscroll.getBoundryOutLeft();
      var overBottom = self.isY ? xscroll.getBoundryOutBottom() : xscroll.getBoundryOutRight();
      var barShiftSize = MIN_BAR_SIZE - barSize > 0 ? MIN_BAR_SIZE - barSize : 0;
      barSize = barSize < MIN_BAR_SIZE ? MIN_BAR_SIZE : barSize;
      barPos = (indicateSize - barShiftSize) * pos / containerSize;
      if (overTop >= 0) {
        var pct = overTop / MAX_BOUNCE_DISTANCE;
        pct = pct > 1 ? 1 : pct;
        barPos = -pct * (barSize - MIN_BAR_SCROLLED_SIZE);
      }
      if (overBottom >= 0) {
        var pct = overBottom / MAX_BOUNCE_DISTANCE;
        pct = pct > 1 ? 1 : pct;
        barPos = pct * (barSize - MIN_BAR_SCROLLED_SIZE) + indicateSize - barSize;
      }
      self.barPos = Math.round(barPos);
      return {
        size: Math.round(barSize),
        pos: self.barPos
      };
    },
    scrollTo: function (pos, duration, easing, callback) {
      var self = this;
      self.show();
      var translateZ = self.xscroll.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      var config = {
        css: { transform: self.isY ? 'translateY(' + pos + 'px)' + translateZ : 'translateX(' + pos + 'px)' + translateZ },
        duration: duration,
        easing: easing,
        useTransition: self.xscroll.userConfig.useTransition,
        end: callback
      };
      self.__timer = self.__timer || new Animate(self.indicate, config);
      //run
      self.__timer.stop();
      self.__timer.reset(config);
      self.__timer.run();
    },
    moveTo: function (pos) {
      var self = this;
      self.show();
      var translateZ = self.xscroll.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      self.isY ? self.indicate.style[transform] = 'translateY(' + pos + 'px) ' + translateZ : self.indicate.style[transform] = 'translateX(' + pos + 'px) ' + translateZ;
      self.indicate.style[transition] = '';
    },
    _scrollHandler: function (e) {
      var self = this;
      self._update(e[self.scrollTopOrLeft]);
      return self;
    },
    isBoundryOut: function () {
      var self = this;
      return !self.isY ? self.xscroll.isBoundryOutLeft() || self.xscroll.isBoundryOutRight() : self.xscroll.isBoundryOutTop() || self.xscroll.isBoundryOutBottom();
    },
    _scrollEndHandler: function (e) {
      var self = this;
      if (!self.isBoundryOut()) {
        self._update(e[self.scrollTopOrLeft]);
        self.hide();
      }
      return self;
    },
    _bindEvt: function () {
      var self = this;
      if (self.__isEvtBind)
        return;
      self.__isEvtBind = true;
      self.xscroll.on('scroll', self._scrollHandler, self);
      self.xscroll.on('scrollend', self._scrollEndHandler, self);
    },
    reset: function () {
      var self = this;
      self.pos = 0;
      self._update();
    },
    hide: function (duration, easing, delay) {
      var self = this;
      var duration = duration >= 0 ? duration : 300;
      var easing = easing || 'ease-out';
      var delay = delay >= 0 ? delay : 100;
      self.scrollbar.style.opacity = 0;
      self.scrollbar.style[transition] = [
        'opacity ',
        duration,
        'ms ',
        ' ease-out ',
        delay,
        'ms'
      ].join('');
    },
    show: function () {
      var self = this;
      self.scrollbar.style.opacity = 1;
      self.scrollbar.style[transition] = '';
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = ScrollBar;
  }  /** ignored by jsdoc **/ else {
    return ScrollBar;
  }
  return exports;
}(components_scrollbar);
components_controller = function (exports) {
  var Util = util, Base = base;
  var Controller = function (cfg) {
    Controller.superclass.constructor.call(this, cfg);
    this.userConfig = Util.mix({}, cfg);
    this.init();
  };
  Util.extend(Controller, Base, {
    init: function () {
      var self = this;
      self.xscroll = self.userConfig.xscroll;
    },
    add: function (scroll, cfg) {
      var self = this;
      cfg = Util.extend({
        captureBounce: false,
        stopPropagation: true
      }, cfg);
      if (!self.__scrolls) {
        self.__scrolls = {};
      }
      if (scroll.guid && !self.__scrolls[scroll.guid]) {
        scroll.parentscroll = self.xscroll;
        self._bind(scroll);
        return self.__scrolls[scroll.guid] = scroll;
      }
      return;
    },
    remove: function (scroll) {
      var self = this;
      if (!scroll || !scroll.guid)
        return;
      var subscroll = self.__scrolls[scroll.guid];
      if (subscroll) {
        subscroll.parentscroll = null;
        self._unbind(scroll);
        subscroll = null;
      }
    },
    get: function (guid) {
      if (guid) {
        return this.__scrolls[guid];
      }
      return this.__scrolls;
    },
    _unbind: function (sub) {
    },
    _bind: function (sub) {
      var self = this, xscroll = self.xscroll;
      xscroll.renderTo.addEventListener('touchstart', function () {
        xscroll._resetLockConfig();
      });
      sub.renderTo.addEventListener('touchstart', function () {
        sub._resetLockConfig();
      });
      xscroll.on('panend', xscroll._resetLockConfig);
      sub.on('panend', sub._resetLockConfig);
      sub.on('panstart', function (e) {
        //vertical scroll enabled
        if (!sub.userConfig.lockY && !xscroll.userConfig.lockY) {
          //outside of boundry
          if (sub.isBoundryOut()) {
            xscroll.userConfig.lockY = true;
            return;
          }
          if (e.direction == 16 && sub.getBoundryOutTop() >= 0) {
            sub.userConfig.lockY = true;
          } else if (e.direction == 8 && sub.getBoundryOutTop() >= 0 && sub.getBoundryOutBottom() < 0) {
            xscroll.userConfig.lockY = true;
          }
          if (e.direction == 8 && sub.getBoundryOutBottom() >= 0) {
            sub.userConfig.lockY = true;
          } else if (e.direction == 16 && sub.getBoundryOutBottom() >= 0 && sub.getBoundryOutTop() < 0) {
            xscroll.userConfig.lockY = true;
          }
          if (sub.getBoundryOutTop() < 0 && sub.getBoundryOutBottom() < 0) {
            xscroll.userConfig.lockY = true;
          }
        }
        //horizontal scroll enabled
        if (!sub.userConfig.lockX && !xscroll.userConfig.lockX) {
          if (sub.isBoundryOut()) {
            xscroll.userConfig.lockX = true;
            return;
          }
          if (e.direction == 4 && sub.getBoundryOutLeft() >= 0) {
            sub.userConfig.lockX = true;
          } else if (e.direction == 2 && sub.getBoundryOutLeft() >= 0 && sub.getBoundryOutRight() < 0) {
            xscroll.userConfig.lockX = true;
          }
          if (e.direction == 2 && sub.getBoundryOutRight() >= 0) {
            sub.userConfig.lockX = true;
          } else if (e.direction == 4 && sub.getBoundryOutRight() >= 0 && sub.getBoundryOutLeft() < 0) {
            xscroll.userConfig.lockX = true;
          }
          if (sub.getBoundryOutLeft() < 0 && sub.getBoundryOutRight() < 0) {
            xscroll.userConfig.lockX = true;
          }
        }
        if (!sub.userConfig.lockX && xscroll.userConfig.lockX) {
          //pan x
          if (e.direction == 2 || e.direction == 4) {
            xscroll.userConfig.lockY = true;
          } else {
            sub.userConfig.lockX = true;
          }
        }
        if (!sub.userConfig.lockY && xscroll.userConfig.lockY) {
          //pan y
          if (e.direction == 8 || e.direction == 16) {
            xscroll.userConfig.lockX = true;
          } else {
            sub.userConfig.lockY = true;
          }
        }
      });
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Controller;
  }  /** ignored by jsdoc **/ else {
    return Controller;
  }
  return exports;
}(components_controller);
simulate_scroll = function (exports) {
  var Util = util, Base = base, Core = core, Animate = animate, Hammer = hammer, ScrollBar = components_scrollbar, Controller = components_controller;
  //reduced boundry pan distance
  var PAN_RATE = 1 - 0.618;
  //constant for scrolling acceleration
  var SCROLL_ACCELERATION = 0.0005;
  //constant for outside of boundry acceleration
  var BOUNDRY_ACCELERATION = 0.03;
  //transform-origin
  var transformOrigin = Util.prefixStyle('transformOrigin');
  //transform
  var transform = Util.prefixStyle('transform');
  /**
   * @constructor
   * @param {object} cfg config for scroll
   * @param {number} cfg.SCROLL_ACCELERATION  acceleration for scroll, min value make the scrolling smoothly
   * @param {number} cfg.BOUNDRY_CHECK_DURATION duration for boundry bounce
   * @param {number} cfg.BOUNDRY_CHECK_EASING easing for boundry bounce
   * @param {number} cfg.BOUNDRY_CHECK_ACCELERATION acceleration for boundry bounce
   * @param {boolean} cfg.lockX just like overflow-x:hidden
   * @param {boolean} cfg.lockY just like overflow-y:hidden
   * @param {boolean} cfg.scrollbarX config if the scrollbar-x is visible
   * @param {boolean} cfg.scrollbarY config if the scrollbar-y is visible
   * @param {boolean} cfg.useTransition config if use css3 transition or raf for scroll animation
   * @param {boolean} cfg.bounce config if use has the bounce effect when scrolling outside of the boundry
   * @param {boolean} cfg.boundryCheck config if scrolling inside of the boundry
   * @param {boolean} cfg.preventDefault prevent touchstart
   * @param {boolean} cfg.preventTouchMove prevent touchmove
   * @param {string|HTMLElement}  cfg.container config for scroller's container which default value is ".xs-container"
   * @param {string|HTMLElement}  cfg.content config for scroller's content which default value is ".xs-content"
   * @param {object}  cfg.indicatorInsets  config scrollbars position {top: number, left: number, bottom: number, right: number}
   * @param {string}  cfg.stickyElements config for sticky-positioned elements
   * @param {string}  cfg.fixedElements config for fixed-positioned elements
   * @param {string}  cfg.touchAction config for touchAction of the scroller
   * @extends XScroll
   * @example
   * var xscroll = new SimuScroll({
   *    renderTo:"#scroll",
   *    lockX:false,
   *    scrollbarX:true
   * });
   * xscroll.render();
   */
  function SimuScroll(cfg) {
    SimuScroll.superclass.constructor.call(this, cfg);
  }
  Util.extend(SimuScroll, Core, {
    /**
     * @memberof SimuScroll
     * @override
     */
    init: function () {
      var self = this;
      var defaultCfg = {
        preventDefault: true,
        preventTouchMove: true
      };
      SimuScroll.superclass.init.call(this);
      self.userConfig = Util.mix(defaultCfg, self.userConfig);
      self.SCROLL_ACCELERATION = self.userConfig.SCROLL_ACCELERATION || SCROLL_ACCELERATION;
      self.BOUNDRY_ACCELERATION = self.userConfig.BOUNDRY_ACCELERATION || BOUNDRY_ACCELERATION;
      self._initContainer();
      self.resetSize();
      //set overflow behaviors
      self._setOverflowBehavior();
      self.defaltConfig = {
        lockY: self.userConfig.lockY,
        lockX: self.userConfig.lockX
      };
      return self;
    },
    destroy: function () {
      var self = this;
      SimuScroll.superclass.destroy.call(this);
      self.renderTo.style.overflow = '';
      self.renderTo.style.touchAction = '';
      self.container.style.transform = '';
      self.container.style.transformOrigin = '';
      self.content.style.transform = '';
      self.content.style.transformOrigin = '';
      self.off('touchstart mousedown', self._ontouchstart);
      self.off('touchmove', self._ontouchmove);
      self.destroyScrollBars();
    },
    /**
     * set overflow behavior
     * @return {boolean} [description]
     */
    _setOverflowBehavior: function () {
      var self = this;
      var renderTo = self.renderTo;
      var computeStyle = getComputedStyle(renderTo);
      self.userConfig.lockX = undefined === self.userConfig.lockX ? computeStyle['overflow-x'] == 'hidden' || self.width == self.containerWidth ? true : false : self.userConfig.lockX;
      self.userConfig.lockY = undefined === self.userConfig.lockY ? computeStyle['overflow-y'] == 'hidden' || self.height == self.containerHeight ? true : false : self.userConfig.lockY;
      self.userConfig.scrollbarX = undefined === self.userConfig.scrollbarX ? self.userConfig.lockX ? false : true : self.userConfig.scrollbarX;
      self.userConfig.scrollbarY = undefined === self.userConfig.scrollbarY ? self.userConfig.lockY ? false : true : self.userConfig.scrollbarY;
      return self;
    },
    /**
     * reset lockX or lockY config to the default value
     */
    _resetLockConfig: function () {
      var self = this;
      self.userConfig.lockX = self.defaltConfig.lockX;
      self.userConfig.lockY = self.defaltConfig.lockY;
      return self;
    },
    /**
     * init container
     * @override
     * @return {SimuScroll}
     */
    _initContainer: function () {
      var self = this;
      SimuScroll.superclass._initContainer.call(self);
      if (self.__isContainerInited || !self.container || !self.content)
        return;
      self.container.style[transformOrigin] = '0 0';
      self.content.style[transformOrigin] = '0 0';
      self.translate(0, 0);
      self.__isContainerInited = true;
      return self;
    },
    /**
     * get scroll top value
     * @memberof SimuScroll
     * @return {number} scrollTop
     */
    getScrollTop: function () {
      var transY = window.getComputedStyle(this.container)[transform].match(/[-\d\.*\d*]+/g);
      return transY ? Math.round(transY[5]) === 0 ? 0 : -Math.round(transY[5]) : 0;
    },
    /**
     * get scroll left value
     * @memberof SimuScroll
     * @return {number} scrollLeft
     */
    getScrollLeft: function () {
      var transX = window.getComputedStyle(this.content)[transform].match(/[-\d\.*\d*]+/g);
      return transX ? Math.round(transX[4]) === 0 ? 0 : -Math.round(transX[4]) : 0;
    },
    /**
     * horizontal scroll absolute to the destination
     * @memberof SimuScroll
     * @param scrollLeft {number} scrollLeft
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollLeft: function (x, duration, easing, callback) {
      if (this.userConfig.lockX)
        return;
      var translateZ = this.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      this.x = undefined === x || isNaN(x) || 0 === x ? 0 : -Math.round(x);
      this._animate('x', 'translateX(' + this.x + 'px) scale(' + this.scale + ')' + translateZ, duration, easing, callback);
      return this;
    },
    /**
     * vertical scroll absolute to the destination
     * @memberof SimuScroll
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollTop: function (y, duration, easing, callback) {
      if (this.userConfig.lockY)
        return;
      var translateZ = this.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      this.y = undefined === y || isNaN(y) || 0 === y ? 0 : -Math.round(y);
      this._animate('y', 'translateY(' + this.y + 'px) ' + translateZ, duration, easing, callback);
      return this;
    },
    /**
     * translate the scroller to a new destination includes x , y , scale
     * @memberof SimuScroll
     * @param x {number} x
     * @param y {number} y
     * @param scale {number} scale
     **/
    translate: function (x, y, scale) {
      var translateZ = this.userConfig.gpuAcceleration ? ' translateZ(0) ' : '';
      this.x = x || this.x || 0;
      this.y = y || this.y || 0;
      this.scale = scale || this.scale || 1;
      this.content.style[transform] = 'translate(' + this.x + 'px,0px) scale(' + this.scale + ') ' + translateZ;
      this.container.style[transform] = 'translate(0px,' + this.y + 'px) ' + translateZ;
      return this;
    },
    _animate: function (type, transform, duration, easing, callback) {
      var self = this;
      var duration = duration || 0;
      var easing = easing || 'quadratic';
      var el = type == 'y' ? self.container : self.content;
      var config = {
        css: { transform: transform },
        duration: duration,
        easing: easing,
        run: function (e) {
          /**
           * @event {@link SimuScroll#"scroll"}
           */
          self.trigger('scroll', {
            scrollTop: self.getScrollTop(),
            scrollLeft: self.getScrollLeft(),
            type: 'scroll'
          });
        },
        useTransition: self.userConfig.useTransition,
        end: function (e) {
          callback && callback();
          if ((self['_bounce' + type] === 0 || self['_bounce' + type] === undefined) && easing != 'linear') {
            self['isScrolling' + type.toUpperCase()] = false;
            self['isRealScrolling' + type.toUpperCase()] = false;
            self.trigger('scrollend', {
              type: 'scrollend',
              scrollTop: self.getScrollTop(),
              scrollLeft: self.getScrollLeft(),
              zoomType: type,
              duration: duration,
              easing: easing
            });
          }
        }
      };
      var timer = self.__timers[type] = self.__timers[type] || new Animate(el, config);
      timer.stop();
      timer.reset(config);
      timer.run();
      self.trigger('scrollanimate', {
        type: 'scrollanimate',
        scrollTop: -self.y,
        scrollLeft: -self.x,
        duration: duration,
        easing: easing,
        zoomType: type
      });
      return this;
    },
    _ontap: function (e) {
      var self = this;
      self.boundryCheck();
      self._unPreventHref(e);
      if (!self.isRealScrollingX && !self.isRealScrollingY) {
        self._triggerClick(e);
      }
      self._preventHref(e);
      self.isRealScrollingY = false;
      self.isRealScrollingY = false;
    },
    _bindEvt: function () {
      SimuScroll.superclass._bindEvt.call(this);
      var self = this;
      if (self.__isEvtBind)
        return;
      self.__isEvtBind = true;
      var pinch = new Hammer.Pinch();
      self.mc.add(pinch);
      self.on('touchstart mousedown', self._ontouchstart, self);
      self.on('touchmove', self._ontouchmove, self);
      self.on('tap', self._ontap, self);
      self.on('panstart', self._onpanstart, self);
      self.on('pan', self._onpan, self);
      self.on('panend', self._onpanend, self);
      //window resize
      window.addEventListener('resize', function (e) {
        setTimeout(function () {
          self.resetSize();
          self.boundryCheck(0);
          self.render();
        }, 100);
      }, self);
      return this;
    },
    _ontouchstart: function (e) {
      var self = this;
      if (!/(SELECT|INPUT|TEXTAREA)/i.test(e.target.tagName) && self.userConfig.preventDefault) {
        e.preventDefault();
      }
      self.render();
      self.stop();
    },
    _ontouchmove: function (e) {
      this.userConfig.preventTouchMove && e.preventDefault();
    },
    _onpanstart: function (e) {
      this.userConfig.preventTouchMove && e.preventDefault();
      var self = this;
      self.render();
      var scrollLeft = self.getScrollLeft();
      var scrollTop = self.getScrollTop();
      self.stop();
      self.translate(-scrollLeft, -scrollTop);
      var threshold = self.mc.get('pan').options.threshold;
      self.thresholdY = e.direction == '8' ? threshold : e.direction == '16' ? -threshold : 0;
      self.thresholdX = e.direction == '2' ? threshold : e.direction == '4' ? -threshold : 0;
      return self;
    },
    _onpan: function (e) {
      this.userConfig.preventTouchMove && e.preventDefault();
      var self = this;
      var boundry = self.boundry;
      var userConfig = self.userConfig;
      var boundryCheck = userConfig.boundryCheck;
      var bounce = userConfig.bounce;
      var scrollTop = self.__topstart || (self.__topstart = -self.getScrollTop());
      var scrollLeft = self.__leftstart || (self.__leftstart = -self.getScrollLeft());
      var y = userConfig.lockY ? Number(scrollTop) : Number(scrollTop) + (e.deltaY + self.thresholdY);
      var x = userConfig.lockX ? Number(scrollLeft) : Number(scrollLeft) + (e.deltaX + self.thresholdX);
      var containerWidth = self.containerWidth;
      var containerHeight = self.containerHeight;
      if (boundryCheck) {
        //over top
        y = y > boundry.top ? bounce ? (y - boundry.top) * PAN_RATE + boundry.top : boundry.top : y;
        //over bottom
        y = y < boundry.bottom - containerHeight ? bounce ? y + (boundry.bottom - containerHeight - y) * PAN_RATE : boundry.bottom - containerHeight : y;
        //over left
        x = x > boundry.left ? bounce ? (x - boundry.left) * PAN_RATE + boundry.left : boundry.left : x;
        //over right
        x = x < boundry.right - containerWidth ? bounce ? x + (boundry.right - containerWidth - x) * PAN_RATE : boundry.right - containerWidth : x;
      }
      //move to x,y
      self.translate(x, y);
      //pan trigger the opposite direction
      self.directionX = e.type == 'panleft' ? 'right' : e.type == 'panright' ? 'left' : '';
      self.directionY = e.type == 'panup' ? 'down' : e.type == 'pandown' ? 'up' : '';
      self.trigger('scroll', {
        scrollTop: -y,
        scrollLeft: -x,
        triggerType: 'pan',
        type: 'scroll'
      });
      return self;
    },
    _onpanend: function (e) {
      var self = this;
      var userConfig = self.userConfig;
      var transX = self.computeScroll('x', e.velocityX);
      var transY = self.computeScroll('y', e.velocityY);
      var scrollLeft = transX ? transX.pos : 0;
      var scrollTop = transY ? transY.pos : 0;
      var duration;
      if (transX && transY && transX.status == 'inside' && transY.status == 'inside' && transX.duration && transY.duration) {
        //ensure the same duration
        duration = Math.max(transX.duration, transY.duration);
      }
      transX && self.scrollLeft(scrollLeft, duration || transX.duration, transX.easing, function (e) {
        self.boundryCheckX();
      });
      transY && self.scrollTop(scrollTop, duration || transY.duration, transY.easing, function (e) {
        self.boundryCheckY();
      });
      //judge the direction
      self.directionX = e.velocityX < 0 ? 'left' : 'right';
      self.directionY = e.velocityY < 0 ? 'up' : 'down';
      //clear start
      self.__topstart = null;
      self.__leftstart = null;
      return self;
    },
    /**
     * judge the scroller is out of boundry horizontally and vertically
     * @memberof SimuScroll
     * @return {boolean} isBoundryOut
     **/
    isBoundryOut: function () {
      return this.isBoundryOutLeft() || this.isBoundryOutRight() || this.isBoundryOutTop() || this.isBoundryOutBottom();
    },
    /**
     * judge if the scroller is outsideof left
     * @memberof SimuScroll
     * @return {boolean} isBoundryOut
     **/
    isBoundryOutLeft: function () {
      return this.getBoundryOutLeft() > 0 ? true : false;
    },
    /**
     * judge if the scroller is outsideof right
     * @memberof SimuScroll
     * @return {boolean} isBoundryOut
     **/
    isBoundryOutRight: function () {
      return this.getBoundryOutRight() > 0 ? true : false;
    },
    /**
     * judge if the scroller is outsideof top
     * @memberof SimuScroll
     * @return {boolean} isBoundryOut
     **/
    isBoundryOutTop: function () {
      return this.getBoundryOutTop() > 0 ? true : false;
    },
    /**
     * judge if the scroller is outsideof bottom
     * @memberof SimuScroll
     * @return {boolean} isBoundryOut
     **/
    isBoundryOutBottom: function () {
      return this.getBoundryOutBottom() > 0 ? true : false;
    },
    /**
     * get the offset value outsideof top
     * @memberof SimuScroll
     * @return {number} offset
     **/
    getBoundryOutTop: function () {
      return -this.boundry.top - this.getScrollTop();
    },
    /**
     * get the offset value outsideof left
     * @memberof SimuScroll
     * @return {number} offset
     **/
    getBoundryOutLeft: function () {
      return -this.boundry.left - this.getScrollLeft();
    },
    /**
     * get the offset value outsideof bottom
     * @memberof SimuScroll
     * @return {number} offset
     **/
    getBoundryOutBottom: function () {
      return this.boundry.bottom - this.containerHeight + this.getScrollTop();
    },
    /**
     * get the offset value outsideof right
     * @memberof SimuScroll
     * @return {number} offset
     **/
    getBoundryOutRight: function () {
      return this.boundry.right - this.containerWidth + this.getScrollLeft();
    },
    /**
     * compute scroll transition by zoomType and velocity
     * @memberof SimuScroll
     * @param {string} zoomType zoomType of scrolling
     * @param {number} velocity velocity after panend
     * @example
     * var info = xscroll.computeScroll("x",2);
     * // return {pos:90,easing:"easing",status:"inside",duration:500}
     * @return {Object}
     **/
    computeScroll: function (type, v) {
      var self = this;
      var userConfig = self.userConfig;
      var boundry = self.boundry;
      var pos = type == 'x' ? self.getScrollLeft() : self.getScrollTop();
      var boundryStart = type == 'x' ? boundry.left : boundry.top;
      var boundryEnd = type == 'x' ? boundry.right : boundry.bottom;
      var innerSize = type == 'x' ? self.containerWidth : self.containerHeight;
      var maxSpeed = userConfig.maxSpeed || 2;
      var boundryCheck = userConfig.boundryCheck;
      var bounce = userConfig.bounce;
      var transition = {};
      var status = 'inside';
      if (boundryCheck) {
        if (type == 'x' && (self.isBoundryOutLeft() || self.isBoundryOutRight())) {
          self.boundryCheckX();
          return;
        } else if (type == 'y' && (self.isBoundryOutTop() || self.isBoundryOutBottom())) {
          self.boundryCheckY();
          return;
        }
      }
      if (type == 'x' && self.userConfig.lockX)
        return;
      if (type == 'y' && self.userConfig.lockY)
        return;
      v = v > maxSpeed ? maxSpeed : v < -maxSpeed ? -maxSpeed : v;
      var a = self.SCROLL_ACCELERATION * (v / (Math.abs(v) || 1));
      var a2 = self.BOUNDRY_ACCELERATION;
      var t = isNaN(v / a) ? 0 : v / a;
      var s = Number(pos) + t * v / 2;
      //over top boundry check bounce
      if (s < -boundryStart && boundryCheck) {
        var _s = -boundryStart - pos;
        var _t = (Math.sqrt(-2 * a * _s + v * v) + v) / a;
        var v0 = v - a * _t;
        var _t2 = Math.abs(v0 / a2);
        var s2 = v0 / 2 * _t2;
        t = _t + _t2;
        s = bounce ? -boundryStart + s2 : -boundryStart;
        status = 'outside';
      } else if (s > innerSize - boundryEnd && boundryCheck) {
        var _s = boundryEnd - innerSize + pos;
        var _t = (Math.sqrt(-2 * a * _s + v * v) - v) / a;
        var v0 = v - a * _t;
        var _t2 = Math.abs(v0 / a2);
        var s2 = v0 / 2 * _t2;
        t = _t + _t2;
        s = bounce ? innerSize - boundryEnd + s2 : innerSize - boundryEnd;
        status = 'outside';
      }
      if (isNaN(s) || isNaN(t))
        return;
      transition.pos = s;
      transition.duration = t;
      transition.easing = Math.abs(v) > 2 ? 'circular' : 'quadratic';
      transition.status = status;
      var Type = type.toUpperCase();
      self['isScrolling' + Type] = true;
      self['isRealScrolling' + Type] = true;
      return transition;
    },
    /**
     * bounce to the boundry horizontal
     * @memberof SimuScroll
     * @return {SimuScroll}
     **/
    boundryCheckX: function (duration, easing, callback) {
      var self = this;
      if (!self.userConfig.boundryCheck)
        return;
      if (typeof arguments[0] == 'function') {
        callback = arguments[0];
        duration = self.userConfig.BOUNDRY_CHECK_DURATION;
        easing = self.userConfig.BOUNDRY_CHECK_EASING;
      } else {
        duration = duration === 0 ? 0 : self.userConfig.BOUNDRY_CHECK_DURATION, easing = easing || self.userConfig.BOUNDRY_CHECK_EASING;
      }
      if (!self.userConfig.bounce || self.userConfig.lockX)
        return;
      var boundry = self.boundry;
      if (self.isBoundryOutLeft()) {
        self.scrollLeft(-boundry.left, duration, easing, callback);
      } else if (self.isBoundryOutRight()) {
        self.scrollLeft(self.containerWidth - boundry.right, duration, easing, callback);
      }
      return self;
    },
    /**
     * bounce to the boundry vertical
     * @memberof SimuScroll
     * @return {SimuScroll}
     **/
    boundryCheckY: function (duration, easing, callback) {
      var self = this;
      if (!self.userConfig.boundryCheck)
        return;
      if (typeof arguments[0] == 'function') {
        callback = arguments[0];
        duration = self.userConfig.BOUNDRY_CHECK_DURATION;
        easing = self.userConfig.BOUNDRY_CHECK_EASING;
      } else {
        duration = duration === 0 ? 0 : self.userConfig.BOUNDRY_CHECK_DURATION, easing = easing || self.userConfig.BOUNDRY_CHECK_EASING;
      }
      if (!self.userConfig.boundryCheck || self.userConfig.lockY)
        return;
      var boundry = self.boundry;
      if (self.isBoundryOutTop()) {
        self.scrollTop(-boundry.top, duration, easing, callback);
      } else if (self.isBoundryOutBottom()) {
        self.scrollTop(self.containerHeight - boundry.bottom, duration, easing, callback);
      }
      return self;
    },
    /**
     * bounce to the boundry vertical and horizontal
     * @memberof SimuScroll
     * @return {SimuScroll}
     **/
    boundryCheck: function (duration, easing, callback) {
      this.boundryCheckX(duration, easing, callback);
      this.boundryCheckY(duration, easing, callback);
      return this;
    },
    /**
     * stop scrolling immediatelly
     * @memberof SimuScroll
     * @return {SimuScroll}
     **/
    stop: function () {
      var self = this;
      self.__timers.x && self.__timers.x.stop();
      self.__timers.y && self.__timers.y.stop();
      if (self.isScrollingX || self.isScrollingY) {
        var scrollTop = self.getScrollTop(), scrollLeft = self.getScrollLeft();
        self.trigger('scrollend', {
          scrollTop: scrollTop,
          scrollLeft: scrollLeft
        });
        self.trigger('stop', {
          scrollTop: scrollTop,
          scrollLeft: scrollLeft
        });
        self.isScrollingX = false;
        self.isScrollingY = false;
      }
      return self;
    },
    /**
     * render scroll
     * @memberof SimuScroll
     * @return {SimuScroll}
     **/
    render: function () {
      var self = this;
      SimuScroll.superclass.render.call(this);
      //fixed for scrollbars
      if (getComputedStyle(self.renderTo).position == 'static') {
        self.renderTo.style.position = 'relative';
      }
      self.renderTo.style.overflow = 'hidden';
      self.initScrollBars();
      self.initController();
      return self;
    },
    /**
     * init scrollbars
     * @memberof SimuScroll
     * @return {SimuScroll}
     */
    initScrollBars: function () {
      var self = this;
      if (!self.userConfig.boundryCheck)
        return;
      var indicatorInsets = self.userConfig.indicatorInsets;
      if (self.userConfig.scrollbarX) {
        self.scrollbarX = self.scrollbarX || new ScrollBar({
          xscroll: self,
          type: 'x',
          spacing: indicatorInsets.spacing
        });
        self.scrollbarX.render();
        self.scrollbarX._update();
        self.scrollbarX.hide();
      }
      if (self.userConfig.scrollbarY) {
        self.scrollbarY = self.scrollbarY || new ScrollBar({
          xscroll: self,
          type: 'y',
          spacing: indicatorInsets.spacing
        });
        self.scrollbarY.render();
        self.scrollbarY._update();
        self.scrollbarY.hide();
      }
      return self;
    },
    /**
     * destroy scrollbars
     * @memberof SimuScroll
     * @return {SimuScroll}
     */
    destroyScrollBars: function () {
      this.scrollbarX && this.scrollbarX.destroy();
      this.scrollbarY && this.scrollbarY.destroy();
      return this;
    },
    /**
     * init controller for multi-scrollers
     * @memberof SimuScroll
     * @return {SimuScroll}
     */
    initController: function () {
      var self = this;
      self.controller = self.controller || new Controller({ xscroll: self });
      return self;
    },
    _unPreventHref: function (e) {
      var target = Util.findParentEl(e.target, 'a', this.renderTo);
      if (!target)
        return;
      if (target.tagName.toLowerCase() == 'a') {
        var href = target.getAttribute('data-xs-href');
        if (href) {
          target.setAttribute('href', href);
        }
      }
    },
    _preventHref: function (e) {
      var target = Util.findParentEl(e.target, 'a', this.renderTo);
      if (!target)
        return;
      if (target.tagName.toLowerCase() == 'a') {
        var href = target.getAttribute('href');
        href && target.setAttribute('href', 'javascript:void(0)');
        href && target.setAttribute('data-xs-href', href);
      }
    },
    _triggerClick: function (e) {
      var target = e.target;
      if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {
        var ev = document.createEvent('MouseEvents');
        ev.initMouseEvent('click', true, true, e.view, 1, target.screenX, target.screenY, target.clientX, target.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);
        target.dispatchEvent(ev);
      }
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = SimuScroll;
  }  /** ignored by jsdoc **/ else {
    return SimuScroll;
  }
  return exports;
}(simulate_scroll);
origin_scroll = function (exports) {
  var Util = util, Base = base, Core = core, Animate = animate;
  var transformOrigin = Util.prefixStyle('transformOrigin');
  /**
   * @constructor
   * @param {object} cfg config for scroll
   * @extends XScroll
   * @example
   * var xscroll = new OriginScroll({
   *    renderTo:"#scroll"
   * });
   * xscroll.render();
   */
  function OriginScroll(cfg) {
    OriginScroll.superclass.constructor.call(this, cfg);
  }
  Util.extend(OriginScroll, Core, {
    init: function () {
      var self = this;
      OriginScroll.superclass.init.call(this);
      self.resetSize();
    },
    /**
     * get scroll top value
     * @memberof OriginScroll
     * @return {number} scrollTop
     */
    getScrollTop: function () {
      return this.renderTo.scrollTop;
    },
    /**
     * get scroll left value
     * @memberof OriginScroll
     * @return {number} scrollLeft
     */
    getScrollLeft: function () {
      return this.renderTo.scrollLeft;
    },
    /**
     * vertical scroll absolute to the destination
     * @memberof SimuScroll
     * @param scrollTop {number} scrollTop
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollTop: function (y, duration, easing, callback) {
      var self = this;
      var y = Math.round(y);
      if (self.userConfig.lockY)
        return;
      var duration = duration || 0;
      var easing = easing || 'quadratic';
      var config = {
        css: { scrollTop: y },
        duration: duration,
        easing: easing,
        run: function (e) {
          //trigger scroll event
          self.trigger('scroll', {
            scrollTop: self.getScrollTop(),
            scrollLeft: self.getScrollLeft()
          });
        },
        useTransition: false,
        //scrollTop
        end: callback
      };
      self.__timers.y = self.__timers.y || new Animate(self.renderTo, config);
      //run
      self.__timers.y.stop();
      self.__timers.y.reset(config);
      self.__timers.y.run();
    },
    /**
     * horizontal scroll absolute to the destination
     * @memberof SimuScroll
     * @param scrollLeft {number} scrollLeft
     * @param duration {number} duration for animte
     * @param easing {string} easing functio for animate : ease-in | ease-in-out | ease | bezier(n,n,n,n)
     **/
    scrollLeft: function (x, duration, easing, callback) {
      var self = this;
      var x = Math.round(x);
      if (self.userConfig.lockX)
        return;
      var duration = duration || 0;
      var easing = easing || 'quadratic';
      var config = {
        css: { scrollLeft: x },
        duration: duration,
        easing: easing,
        run: function (e) {
          //trigger scroll event
          self.trigger('scroll', {
            scrollTop: self.getScrollTop(),
            scrollLeft: self.getScrollLeft()
          });
        },
        useTransition: false,
        //scrollTop
        end: callback
      };
      self.__timers.x = self.__timers.x || new Animate(self.renderTo, config);
      //run
      self.__timers.x.stop();
      self.__timers.x.reset(config);
      self.__timers.x.run();
    },
    _bindEvt: function () {
      OriginScroll.superclass._bindEvt.call(this);
      var self = this;
      if (self.__isEvtBind)
        return;
      self.__isEvtBind = true;
      self.renderTo.addEventListener('scroll', function (e) {
        self.trigger('scroll', {
          type: 'scroll',
          scrollTop: self.getScrollTop(),
          scrollLeft: self.getScrollLeft()
        });
      }, false);
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = OriginScroll;
  }  /** ignored by jsdoc **/ else {
    return OriginScroll;
  }
  return exports;
}(origin_scroll);
xscroll = function (exports) {
  var Util = util, Base = base, Timer = timer, Animate = animate, Hammer = hammer, SimuScroll = simulate_scroll, OriginScroll = origin_scroll;
  var XScroll = function (cfg) {
    var _ = cfg && cfg.useOriginScroll ? OriginScroll : SimuScroll;
    return new _(cfg);
  };
  /**
   * Util
   * @namespace Util
   * @type {Object}
   */
  XScroll.Util = Util;
  /**
   * Base
   * @namespace Base
   * @type {Base}
   */
  XScroll.Base = Base;
  /**
   * Timer
   * @namespace Timer
   * @type {Timer}
   */
  XScroll.Timer = Timer;
  /**
   * Animate
   * @namespace Animate
   * @type {Animate}
   */
  XScroll.Animate = Animate;
  /**
   * Hammer
   * @namespace Hammer
   * @type {Hammer}
   */
  XScroll.Hammer = Hammer;
  /**
   * plugins
   * @namespace Plugins
   * @type {Object}
   */
  XScroll.Plugins = {};
  if (typeof module == 'object' && module.exports) {
    exports = XScroll;
  }  /** ignored by jsdoc **/ else {
    return window.XScroll = XScroll;
  }
  return exports;
}(xscroll);
}());
;(function() {
var util = {}, events = {}, base = {}, plugins_pulldown = {};
util = function (exports) {
  var SUBSTITUTE_REG = /\\?\{([^{}]+)\}/g, EMPTY = '';
  var RE_TRIM = /^[\s\xa0]+|[\s\xa0]+$/g, trim = String.prototype.trim;
  var _trim = trim ? function (str) {
    return str == null ? EMPTY : trim.call(str);
  } : function (str) {
    return str == null ? EMPTY : (str + '').replace(RE_TRIM, EMPTY);
  };
  function upperCase() {
    return arguments[1].toUpperCase();
  }
  function Empty() {
  }
  function createObject(proto, constructor) {
    var newProto;
    if (Object.create) {
      newProto = Object.create(proto);
    } else {
      Empty.prototype = proto;
      newProto = new Empty();
    }
    newProto.constructor = constructor;
    return newProto;
  }
  function getNodes(node, rootNode) {
    if (!node)
      return;
    if (node.nodeType)
      return [node];
    var rootNode = rootNode && rootNode.nodeType ? rootNode : document;
    if (node && typeof node === 'string') {
      return rootNode.querySelectorAll(node);
    }
    return;
  }
  // Useful for temporary DOM ids.
  var idCounter = 0;
  var getOffsetTop = function (el) {
    var offset = el.offsetTop;
    if (el.offsetParent != null)
      offset += getOffsetTop(el.offsetParent);
    return offset;
  };
  var getOffsetLeft = function (el) {
    var offset = el.offsetLeft;
    if (el.offsetParent != null)
      offset += getOffsetLeft(el.offsetParent);
    return offset;
  };
  var Util = {
    // Is a given variable an object?
    isObject: function (obj) {
      return obj === Object(obj);
    },
    isArray: Array.isArray || function (obj) {
      return toString.call(obj) == '[object Array]';
    },
    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    isEmpty: function (obj) {
      if (obj == null)
        return true;
      if (this.isArray(obj) || this.isString(obj))
        return obj.length === 0;
      for (var key in obj)
        if (this.has(obj, key))
          return false;
      return true;
    },
    mix: function (to, from, deep) {
      for (var i in from) {
        to[i] = from[i];
      }
      return to;
    },
    extend: function (r, s, px, sx) {
      if (!s || !r) {
        return r;
      }
      var sp = s.prototype, rp;
      // add prototype chain
      rp = createObject(sp, r);
      r.prototype = this.mix(rp, r.prototype);
      r.superclass = createObject(sp, s);
      // add prototype overrides
      if (px) {
        this.mix(rp, px);
      }
      // add object overrides
      if (sx) {
        this.mix(r, sx);
      }
      return r;
    },
    /**
    * test whether a string start with a specified substring
    * @param {String} str the whole string
    * @param {String} prefix a specified substring
    * @return {Boolean} whether str start with prefix
    * @member util
    */
    startsWith: function (str, prefix) {
      return str.lastIndexOf(prefix, 0) === 0;
    },
    /**
    * test whether a string end with a specified substring
    * @param {String} str the whole string
    * @param {String} suffix a specified substring
    * @return {Boolean} whether str end with suffix
    * @member util
    */
    endsWith: function (str, suffix) {
      var ind = str.length - suffix.length;
      return ind >= 0 && str.indexOf(suffix, ind) === ind;
    },
    /**
    * Removes the whitespace from the beginning and end of a string.
    * @method
    * @member util
    */
    trim: _trim,
    /**
    * Substitutes keywords in a string using an object/array.
    * Removes undef keywords and ignores escaped keywords.
    * @param {String} str template string
    * @param {Object} o json data
    * @member util
    * @param {RegExp} [regexp] to match a piece of template string
    */
    substitute: function (str, o, regexp) {
      if (typeof str !== 'string' || !o) {
        return str;
      }
      return str.replace(regexp || SUBSTITUTE_REG, function (match, name) {
        if (match.charAt(0) === '\\') {
          return match.slice(1);
        }
        return o[name] === undefined ? EMPTY : o[name];
      });
    },
    /**
    * vendors
    * @return { String } webkit|moz|ms|o
    * @memberOf Util
    */
    vendor: function () {
      var el = document.createElement('div').style;
      var vendors = [
          't',
          'webkitT',
          'MozT',
          'msT',
          'OT'
        ], transform, i = 0, l = vendors.length;
      for (; i < l; i++) {
        transform = vendors[i] + 'ransform';
        if (transform in el)
          return vendors[i].substr(0, vendors[i].length - 1);
      }
      return false;
    }(),
    /**
    *  add vendor to attribute
    *  @memberOf Util
    *  @param {String} attrName name of attribute
    *  @return { String }
    **/
    prefixStyle: function (attrName) {
      if (this.vendor === false)
        return false;
      if (this.vendor === '')
        return attrName;
      return this.vendor + attrName.charAt(0).toUpperCase() + attrName.substr(1);
    },
    /**
    * judge if has class
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    * @return {Boolean}
    */
    hasClass: function (el, className) {
      return el && el.className && className && el.className.indexOf(className) != -1;
    },
    /**
    * add className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    addClass: function (el, className) {
      if (el && className && !this.hasClass(el, className)) {
        el.className += ' ' + className;
      }
    },
    /**
    * remove className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    removeClass: function (el, className) {
      if (el && el.className && className) {
        el.className = el.className.replace(className, '');
      }
    },
    /**
    * remove an element
    * @memberOf Util
    * @param  {HTMLElement}  el
    */
    remove: function (el) {
      if (!el || !el.parentNode)
        return;
      el.parentNode.removeChild(el);
    },
    /**
    * get offset top
    * @memberOf Util
    * @param  {HTMLElement}   el
    * @return {Number} offsetTop
    */
    getOffsetTop: getOffsetTop,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @return {Number} offsetLeft
    */
    getOffsetLeft: getOffsetLeft,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement} el
    * @param  {String} selector
    * @param  {HTMLElement} rootNode
    * @return {HTMLElement} parent element
    */
    findParentEl: function (el, selector, rootNode) {
      var rs = null, parent = null;
      var type = /^#/.test(selector) ? 'id' : /^\./.test(selector) ? 'class' : 'tag';
      var sel = selector.replace(/\.|#/g, '');
      if (rootNode && typeof rootNode === 'string') {
        rootNode = document.querySelector(rootNode);
      }
      rootNode = rootNode || document.body;
      if (!el || !selector)
        return;
      if (type == 'class' && el.className && el.className.match(sel)) {
        return el;
      } else if (type == 'id' && el.id && _trim(el.id) == sel) {
        return el;
      } else if (type == 'tag' && el.tagName.toLowerCase() == sel) {
        return el;
      }
      while (!rs) {
        if (parent == rootNode)
          break;
        parent = el.parentNode;
        if (!parent)
          break;
        if (type == 'class' && parent.className && parent.className.match(sel) || type == 'id' && parent.id && _trim(parent.id) == sel || type == 'tag' && parent.tagName && parent.tagName.toLowerCase() == sel) {
          rs = parent;
          return rs;
          break;
        } else {
          el = parent;
        }
      }
      return null;
    },
    /**
    * Generate a unique integer id (unique within the entire client session).
    * @param  {String} prefix
    * @return {String} guid
    */
    guid: function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    },
    /**
    * judge if is an android os
    * @return {Boolean} [description]
    */
    isAndroid: function () {
      return /Android /.test(window.navigator.appVersion);
    },
    /**
    * judge if is an android device with low  performance
    * @return {Boolean}
    */
    isBadAndroid: function () {
      return /Android /.test(window.navigator.appVersion) && !/Chrome\/\d/.test(window.navigator.appVersion);
    },
    px2Num: function (px) {
      return Number(px.replace(/px/, ''));
    },
    getNodes: getNodes,
    getNode: function (node, rootNode) {
      var nodes = getNodes(node, rootNode);
      return nodes && nodes[0];
    },
    stringifyStyle: function (style) {
      var styleStr = '';
      for (var i in style) {
        styleStr += [
          i,
          ':',
          style[i],
          ';'
        ].join('');
      }
      return styleStr;
    }
  };
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  var names = [
    'Arguments',
    'Function',
    'String',
    'Number',
    'Date',
    'RegExp'
  ];
  for (var i = 0; i < names.length; i++) {
    Util['is' + names[i]] = function (obj) {
      return toString.call(obj) == '[object ' + names[i] + ']';
    };
  }
  if (typeof module == 'object' && module.exports) {
    exports = Util;
  }  /** ignored by jsdoc **/ else {
    return Util;
  }
  return exports;
}(util);
events = function (exports) {
  var Util = util;
  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var _once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  /**
   * @discription events
   * @mixin
   */
  var Events = {
    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function (name, callback, context) {
      if (!eventsApi(this, 'on', name, [
          callback,
          context
        ]) || !callback)
        return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    },
    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function (name, callback, context) {
      if (!eventsApi(this, 'once', name, [
          callback,
          context
        ]) || !callback)
        return this;
      var self = this;
      var once = _once(function () {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },
    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function (name, callback, context) {
      if (!this._events || !eventsApi(this, 'off', name, [
          callback,
          context
        ]))
        return this;
      // Remove all callbacks for all events.
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      var names = name ? [name] : Object.keys(this._events);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];
        // Bail out if there are no events stored.
        var events = this._events[name];
        if (!events)
          continue;
        // Remove all callbacks for this event.
        if (!callback && !context) {
          delete this._events[name];
          continue;
        }
        // Find any remaining events.
        var remaining = [];
        for (var j = 0, k = events.length; j < k; j++) {
          var event = events[j];
          if (callback && callback !== event.callback && callback !== event.callback._callback || context && context !== event.context) {
            remaining.push(event);
          }
        }
        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
          this._events[name] = remaining;
        } else {
          delete this._events[name];
        }
      }
      return this;
    },
    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function (name) {
      if (!this._events)
        return this;
      var args = Array.prototype.slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args))
        return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events)
        triggerEvents(events, args);
      if (allEvents)
        triggerEvents(allEvents, arguments);
      return this;
    },
    // Inversion-of-control versions of `on` and `once`. Tell *this* object to
    // listen to an event in another object ... keeping track of what it's
    // listening to.
    listenTo: function (obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = Util.guid('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object')
        callback = this;
      obj.on(name, callback, this);
      return this;
    },
    listenToOnce: function (obj, name, callback) {
      if (typeof name === 'object') {
        for (var event in name)
          this.listenToOnce(obj, event, name[event]);
        return this;
      }
      var cb = _once(function () {
        this.stopListening(obj, name, cb);
        callback.apply(this, arguments);
      });
      cb._callback = callback;
      return this.listenTo(obj, name, cb);
    },
    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function (obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo)
        return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object')
        callback = this;
      if (obj)
        (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || Util.isEmpty(obj._events))
          delete this._listeningTo[id];
      }
      return this;
    }
  };
  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;
  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function (obj, action, name, rest) {
    if (!name)
      return true;
    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [
          key,
          name[key]
        ].concat(rest));
      }
      return false;
    }
    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, length = names.length; i < length; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }
    return true;
  };
  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  var triggerEvents = function (events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
    case 0:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx);
      return;
    case 1:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1);
      return;
    case 2:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2);
      return;
    case 3:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
      return;
    default:
      while (++i < l)
        (ev = events[i]).callback.apply(ev.ctx, args);
      return;
    }
  };
  // Aliases for backwards compatibility.
  Events.bind = Events.on;
  Events.unbind = Events.off;
  if (typeof module == 'object' && module.exports) {
    exports = Events;
  }  /** ignored by jsdoc **/ else {
    return Events;
  }
  return exports;
}(events);
base = function (exports) {
  var Util = util;
  var Events = events;
  /**
  @constructor
  @mixes Events
  */
  var Base = function () {
  };
  Util.mix(Base.prototype, Events);
  Util.mix(Base.prototype, {
    /**
    * @memberof Base
    * @param  {object} plugin plug a plugin
    */
    plug: function (plugin) {
      var self = this;
      if (!plugin || !plugin.pluginId)
        return;
      if (!self.__plugins) {
        self.__plugins = [];
      }
      var __plugin = self.getPlugin(plugin.pluginId);
      __plugin && self.unplug(plugin.pluginId);
      plugin.pluginInitializer(self);
      self.__plugins.push(plugin);
      return self;
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin unplug a plugin by pluginId or plugin instance
    */
    unplug: function (plugin) {
      var self = this;
      if (!plugin || !self.__plugins)
        return;
      var _plugin = typeof plugin == 'string' ? self.getPlugin(plugin) : plugin;
      _plugin.pluginDestructor(self);
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] == _plugin) {
          return self.__plugins.splice(i, 1);
        }
      }
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin get plugin by pluginId
    */
    getPlugin: function (pluginId) {
      var self = this;
      var plugins = [];
      if (!self.__plugins)
        return;
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] && self.__plugins[i].pluginId == pluginId) {
          plugins.push(self.__plugins[i]);
        }
      }
      return plugins.length > 1 ? plugins : plugins[0] || null;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Base;
  }  /** ignored by jsdoc **/ else {
    return Base;
  }
  return exports;
}(base);
plugins_pulldown = function (exports) {
  var Util = util;
  var Base = base;
  var clsPrefix;
  var containerCls;
  var content = 'Pull Down To Refresh';
  var loadingContent = 'Loading...';
  /**
   * A pulldown to refresh plugin for xscroll.
   * @constructor
   * @param {object} cfg
   * @param {number} cfg.height
   * @param {string} cfg.content default html for pulldown
   * @param {string} cfg.downContent html for pulldown when scrollTop is smaller than cfg.height
   * @param {string} cfg.upContent html for pulldown when scrollTop is larger than cfg.height
   * @param {string} cfg.loadingContent html for pulldown when released
   * @param {string} cfg.clsPrefix  class prefix which default value is "xs-plugin-pulldown-"
   * @extends {Base}
   */
  var PullDown = function (cfg) {
    PullDown.superclass.constructor.call(this, cfg);
    this.userConfig = Util.mix({
      content: content,
      height: 60,
      autoRefresh: true,
      downContent: 'Pull Down To Refresh',
      upContent: 'Release To Refresh',
      loadingContent: loadingContent,
      clsPrefix: 'xs-plugin-pulldown-'
    }, cfg);
  };
  Util.extend(PullDown, Base, {
    /**
    * a pluginId
    * @memberOf PullDown
    * @type {string}
    */
    pluginId: 'pulldown',
    /**
    * plugin initializer
    * @memberOf PullDown
    * @override Base
    * @return {PullDown}
    */
    pluginInitializer: function (xscroll) {
      var self = this;
      self.xscroll = xscroll.render();
      clsPrefix = self.userConfig.clsPrefix;
      self.render();
      return self;
    },
    /**
    * detroy the plugin
    * @memberOf PullDown
    * @override Base
    * @return {PullDown}
    */
    pluginDestructor: function () {
      var self = this;
      Util.remove(self.pulldown);
      self.xscroll.off('panstart', self._panStartHandler, self);
      self.xscroll.off('pan', self._panHandler, self);
      self.xscroll.off('panend', self._panEndHandler, self);
      self.__isRender = false;
      self._evtBinded = false;
    },
    /**
    * render pulldown plugin
    * @memberOf PullDown
    * @return {PullDown}
    */
    render: function () {
      var self = this;
      if (self.__isRender)
        return;
      self.__isRender = true;
      var containerCls = clsPrefix + 'container';
      var height = self.userConfig.height || 60;
      var pulldown = self.pulldown = document.createElement('div');
      pulldown.className = containerCls;
      pulldown.style.position = 'absolute';
      pulldown.style.width = '100%';
      pulldown.style.height = height + 'px';
      pulldown.style.lineHeight = height + 'px';
      pulldown.style.top = -height + 'px';
      pulldown.style.textAlign = 'center';
      self.xscroll.container.appendChild(pulldown);
      self.status = 'up';
      Util.addClass(pulldown, clsPrefix + self.status);
      pulldown.innerHTML = self.userConfig[self.status + 'Content'] || self.userConfig.content;
      self._bindEvt();
      return self;
    },
    _bindEvt: function () {
      var self = this;
      if (self._evtBinded)
        return;
      self._evtBinded = true;
      var pulldown = self.pulldown;
      var xscroll = self.xscroll;
      xscroll.on('pan', self._panHandler, self);
      xscroll.on('panstart', self._panStartHandler, self);
      xscroll.on('panend', self._panEndHandler, self);
    },
    _changeStatus: function (status) {
      var prevVal = this.status;
      this.status = status;
      Util.removeClass(this.pulldown, clsPrefix + prevVal);
      Util.addClass(this.pulldown, clsPrefix + status);
      if (this.userConfig[status + 'Content']) {
        this.pulldown.innerHTML = this.userConfig[status + 'Content'];
      }
      if (prevVal != status) {
        this.trigger('statuschange', {
          prevVal: prevVal,
          newVal: status
        });
        if (status == 'loading') {
          this.trigger('loading');
        }
      }
    },
    /**
    * reset the pulldown plugin
    * @memberOf PullDown
    * @param {function} callback
    * @return {PullDown}
    */
    reset: function (callback) {
      this.xscroll.boundry.resetTop();
      this.xscroll.boundryCheckY(callback);
      this._expanded = false;
      this._changeStatus('down');
      return this;
    },
    _panStartHandler: function (e) {
      clearTimeout(this.loadingItv);
    },
    _panHandler: function (e) {
      var self = this;
      var scrollTop = self.xscroll.getScrollTop();
      if (scrollTop > 0)
        return;
      self._changeStatus(Math.abs(scrollTop) < self.userConfig.height ? 'down' : 'up');
    },
    _panEndHandler: function (e) {
      var self = this;
      var xscroll = self.xscroll;
      var height = self.userConfig.height || 60;
      var scrollTop = xscroll.getScrollTop();
      if (scrollTop < -height) {
        //prevent default bounce
        e.preventDefault();
        xscroll.boundry.resetTop();
        xscroll.boundry.expandTop(height);
        xscroll.boundryCheckY(function () {
          self._changeStatus('loading');
        });
        if (self.userConfig.autoRefresh) {
          clearTimeout(self.loadingItv);
          self.loadingItv = setTimeout(function () {
            xscroll.boundry.resetTop();
            xscroll.boundryCheckY(function () {
              window.location.reload();
            });
          }, 800);
        }
      }
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = PullDown;
  }  /** ignored by jsdoc **/ else if (window.XScroll && window.XScroll.Plugins) {
    return XScroll.Plugins.PullDown = PullDown;
  }
  return exports;
}(plugins_pulldown);
}());
;(function() {
var util = {}, events = {}, base = {}, plugins_pullup = {};
util = function (exports) {
  var SUBSTITUTE_REG = /\\?\{([^{}]+)\}/g, EMPTY = '';
  var RE_TRIM = /^[\s\xa0]+|[\s\xa0]+$/g, trim = String.prototype.trim;
  var _trim = trim ? function (str) {
    return str == null ? EMPTY : trim.call(str);
  } : function (str) {
    return str == null ? EMPTY : (str + '').replace(RE_TRIM, EMPTY);
  };
  function upperCase() {
    return arguments[1].toUpperCase();
  }
  function Empty() {
  }
  function createObject(proto, constructor) {
    var newProto;
    if (Object.create) {
      newProto = Object.create(proto);
    } else {
      Empty.prototype = proto;
      newProto = new Empty();
    }
    newProto.constructor = constructor;
    return newProto;
  }
  function getNodes(node, rootNode) {
    if (!node)
      return;
    if (node.nodeType)
      return [node];
    var rootNode = rootNode && rootNode.nodeType ? rootNode : document;
    if (node && typeof node === 'string') {
      return rootNode.querySelectorAll(node);
    }
    return;
  }
  // Useful for temporary DOM ids.
  var idCounter = 0;
  var getOffsetTop = function (el) {
    var offset = el.offsetTop;
    if (el.offsetParent != null)
      offset += getOffsetTop(el.offsetParent);
    return offset;
  };
  var getOffsetLeft = function (el) {
    var offset = el.offsetLeft;
    if (el.offsetParent != null)
      offset += getOffsetLeft(el.offsetParent);
    return offset;
  };
  var Util = {
    // Is a given variable an object?
    isObject: function (obj) {
      return obj === Object(obj);
    },
    isArray: Array.isArray || function (obj) {
      return toString.call(obj) == '[object Array]';
    },
    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    isEmpty: function (obj) {
      if (obj == null)
        return true;
      if (this.isArray(obj) || this.isString(obj))
        return obj.length === 0;
      for (var key in obj)
        if (this.has(obj, key))
          return false;
      return true;
    },
    mix: function (to, from, deep) {
      for (var i in from) {
        to[i] = from[i];
      }
      return to;
    },
    extend: function (r, s, px, sx) {
      if (!s || !r) {
        return r;
      }
      var sp = s.prototype, rp;
      // add prototype chain
      rp = createObject(sp, r);
      r.prototype = this.mix(rp, r.prototype);
      r.superclass = createObject(sp, s);
      // add prototype overrides
      if (px) {
        this.mix(rp, px);
      }
      // add object overrides
      if (sx) {
        this.mix(r, sx);
      }
      return r;
    },
    /**
    * test whether a string start with a specified substring
    * @param {String} str the whole string
    * @param {String} prefix a specified substring
    * @return {Boolean} whether str start with prefix
    * @member util
    */
    startsWith: function (str, prefix) {
      return str.lastIndexOf(prefix, 0) === 0;
    },
    /**
    * test whether a string end with a specified substring
    * @param {String} str the whole string
    * @param {String} suffix a specified substring
    * @return {Boolean} whether str end with suffix
    * @member util
    */
    endsWith: function (str, suffix) {
      var ind = str.length - suffix.length;
      return ind >= 0 && str.indexOf(suffix, ind) === ind;
    },
    /**
    * Removes the whitespace from the beginning and end of a string.
    * @method
    * @member util
    */
    trim: _trim,
    /**
    * Substitutes keywords in a string using an object/array.
    * Removes undef keywords and ignores escaped keywords.
    * @param {String} str template string
    * @param {Object} o json data
    * @member util
    * @param {RegExp} [regexp] to match a piece of template string
    */
    substitute: function (str, o, regexp) {
      if (typeof str !== 'string' || !o) {
        return str;
      }
      return str.replace(regexp || SUBSTITUTE_REG, function (match, name) {
        if (match.charAt(0) === '\\') {
          return match.slice(1);
        }
        return o[name] === undefined ? EMPTY : o[name];
      });
    },
    /**
    * vendors
    * @return { String } webkit|moz|ms|o
    * @memberOf Util
    */
    vendor: function () {
      var el = document.createElement('div').style;
      var vendors = [
          't',
          'webkitT',
          'MozT',
          'msT',
          'OT'
        ], transform, i = 0, l = vendors.length;
      for (; i < l; i++) {
        transform = vendors[i] + 'ransform';
        if (transform in el)
          return vendors[i].substr(0, vendors[i].length - 1);
      }
      return false;
    }(),
    /**
    *  add vendor to attribute
    *  @memberOf Util
    *  @param {String} attrName name of attribute
    *  @return { String }
    **/
    prefixStyle: function (attrName) {
      if (this.vendor === false)
        return false;
      if (this.vendor === '')
        return attrName;
      return this.vendor + attrName.charAt(0).toUpperCase() + attrName.substr(1);
    },
    /**
    * judge if has class
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    * @return {Boolean}
    */
    hasClass: function (el, className) {
      return el && el.className && className && el.className.indexOf(className) != -1;
    },
    /**
    * add className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    addClass: function (el, className) {
      if (el && className && !this.hasClass(el, className)) {
        el.className += ' ' + className;
      }
    },
    /**
    * remove className for the element
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @param  {String}  className
    */
    removeClass: function (el, className) {
      if (el && el.className && className) {
        el.className = el.className.replace(className, '');
      }
    },
    /**
    * remove an element
    * @memberOf Util
    * @param  {HTMLElement}  el
    */
    remove: function (el) {
      if (!el || !el.parentNode)
        return;
      el.parentNode.removeChild(el);
    },
    /**
    * get offset top
    * @memberOf Util
    * @param  {HTMLElement}   el
    * @return {Number} offsetTop
    */
    getOffsetTop: getOffsetTop,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement}  el
    * @return {Number} offsetLeft
    */
    getOffsetLeft: getOffsetLeft,
    /**
    * get offset left
    * @memberOf Util
    * @param  {HTMLElement} el
    * @param  {String} selector
    * @param  {HTMLElement} rootNode
    * @return {HTMLElement} parent element
    */
    findParentEl: function (el, selector, rootNode) {
      var rs = null, parent = null;
      var type = /^#/.test(selector) ? 'id' : /^\./.test(selector) ? 'class' : 'tag';
      var sel = selector.replace(/\.|#/g, '');
      if (rootNode && typeof rootNode === 'string') {
        rootNode = document.querySelector(rootNode);
      }
      rootNode = rootNode || document.body;
      if (!el || !selector)
        return;
      if (type == 'class' && el.className && el.className.match(sel)) {
        return el;
      } else if (type == 'id' && el.id && _trim(el.id) == sel) {
        return el;
      } else if (type == 'tag' && el.tagName.toLowerCase() == sel) {
        return el;
      }
      while (!rs) {
        if (parent == rootNode)
          break;
        parent = el.parentNode;
        if (!parent)
          break;
        if (type == 'class' && parent.className && parent.className.match(sel) || type == 'id' && parent.id && _trim(parent.id) == sel || type == 'tag' && parent.tagName && parent.tagName.toLowerCase() == sel) {
          rs = parent;
          return rs;
          break;
        } else {
          el = parent;
        }
      }
      return null;
    },
    /**
    * Generate a unique integer id (unique within the entire client session).
    * @param  {String} prefix
    * @return {String} guid
    */
    guid: function (prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    },
    /**
    * judge if is an android os
    * @return {Boolean} [description]
    */
    isAndroid: function () {
      return /Android /.test(window.navigator.appVersion);
    },
    /**
    * judge if is an android device with low  performance
    * @return {Boolean}
    */
    isBadAndroid: function () {
      return /Android /.test(window.navigator.appVersion) && !/Chrome\/\d/.test(window.navigator.appVersion);
    },
    px2Num: function (px) {
      return Number(px.replace(/px/, ''));
    },
    getNodes: getNodes,
    getNode: function (node, rootNode) {
      var nodes = getNodes(node, rootNode);
      return nodes && nodes[0];
    },
    stringifyStyle: function (style) {
      var styleStr = '';
      for (var i in style) {
        styleStr += [
          i,
          ':',
          style[i],
          ';'
        ].join('');
      }
      return styleStr;
    }
  };
  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  var names = [
    'Arguments',
    'Function',
    'String',
    'Number',
    'Date',
    'RegExp'
  ];
  for (var i = 0; i < names.length; i++) {
    Util['is' + names[i]] = function (obj) {
      return toString.call(obj) == '[object ' + names[i] + ']';
    };
  }
  if (typeof module == 'object' && module.exports) {
    exports = Util;
  }  /** ignored by jsdoc **/ else {
    return Util;
  }
  return exports;
}(util);
events = function (exports) {
  var Util = util;
  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var _once = function (func) {
    var ran = false, memo;
    return function () {
      if (ran)
        return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };
  /**
   * @discription events
   * @mixin
   */
  var Events = {
    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function (name, callback, context) {
      if (!eventsApi(this, 'on', name, [
          callback,
          context
        ]) || !callback)
        return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({
        callback: callback,
        context: context,
        ctx: context || this
      });
      return this;
    },
    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function (name, callback, context) {
      if (!eventsApi(this, 'once', name, [
          callback,
          context
        ]) || !callback)
        return this;
      var self = this;
      var once = _once(function () {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },
    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function (name, callback, context) {
      if (!this._events || !eventsApi(this, 'off', name, [
          callback,
          context
        ]))
        return this;
      // Remove all callbacks for all events.
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      var names = name ? [name] : Object.keys(this._events);
      for (var i = 0, length = names.length; i < length; i++) {
        name = names[i];
        // Bail out if there are no events stored.
        var events = this._events[name];
        if (!events)
          continue;
        // Remove all callbacks for this event.
        if (!callback && !context) {
          delete this._events[name];
          continue;
        }
        // Find any remaining events.
        var remaining = [];
        for (var j = 0, k = events.length; j < k; j++) {
          var event = events[j];
          if (callback && callback !== event.callback && callback !== event.callback._callback || context && context !== event.context) {
            remaining.push(event);
          }
        }
        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
          this._events[name] = remaining;
        } else {
          delete this._events[name];
        }
      }
      return this;
    },
    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function (name) {
      if (!this._events)
        return this;
      var args = Array.prototype.slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args))
        return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events)
        triggerEvents(events, args);
      if (allEvents)
        triggerEvents(allEvents, arguments);
      return this;
    },
    // Inversion-of-control versions of `on` and `once`. Tell *this* object to
    // listen to an event in another object ... keeping track of what it's
    // listening to.
    listenTo: function (obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = Util.guid('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object')
        callback = this;
      obj.on(name, callback, this);
      return this;
    },
    listenToOnce: function (obj, name, callback) {
      if (typeof name === 'object') {
        for (var event in name)
          this.listenToOnce(obj, event, name[event]);
        return this;
      }
      var cb = _once(function () {
        this.stopListening(obj, name, cb);
        callback.apply(this, arguments);
      });
      cb._callback = callback;
      return this.listenTo(obj, name, cb);
    },
    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function (obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo)
        return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object')
        callback = this;
      if (obj)
        (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || Util.isEmpty(obj._events))
          delete this._listeningTo[id];
      }
      return this;
    }
  };
  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;
  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function (obj, action, name, rest) {
    if (!name)
      return true;
    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [
          key,
          name[key]
        ].concat(rest));
      }
      return false;
    }
    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, length = names.length; i < length; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }
    return true;
  };
  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  var triggerEvents = function (events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
    case 0:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx);
      return;
    case 1:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1);
      return;
    case 2:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2);
      return;
    case 3:
      while (++i < l)
        (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
      return;
    default:
      while (++i < l)
        (ev = events[i]).callback.apply(ev.ctx, args);
      return;
    }
  };
  // Aliases for backwards compatibility.
  Events.bind = Events.on;
  Events.unbind = Events.off;
  if (typeof module == 'object' && module.exports) {
    exports = Events;
  }  /** ignored by jsdoc **/ else {
    return Events;
  }
  return exports;
}(events);
base = function (exports) {
  var Util = util;
  var Events = events;
  /**
  @constructor
  @mixes Events
  */
  var Base = function () {
  };
  Util.mix(Base.prototype, Events);
  Util.mix(Base.prototype, {
    /**
    * @memberof Base
    * @param  {object} plugin plug a plugin
    */
    plug: function (plugin) {
      var self = this;
      if (!plugin || !plugin.pluginId)
        return;
      if (!self.__plugins) {
        self.__plugins = [];
      }
      var __plugin = self.getPlugin(plugin.pluginId);
      __plugin && self.unplug(plugin.pluginId);
      plugin.pluginInitializer(self);
      self.__plugins.push(plugin);
      return self;
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin unplug a plugin by pluginId or plugin instance
    */
    unplug: function (plugin) {
      var self = this;
      if (!plugin || !self.__plugins)
        return;
      var _plugin = typeof plugin == 'string' ? self.getPlugin(plugin) : plugin;
      _plugin.pluginDestructor(self);
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] == _plugin) {
          return self.__plugins.splice(i, 1);
        }
      }
    },
    /**
    * @memberof Base
    * @param  {object|string} plugin get plugin by pluginId
    */
    getPlugin: function (pluginId) {
      var self = this;
      var plugins = [];
      if (!self.__plugins)
        return;
      for (var i = 0, l = self.__plugins.length; i < l; i++) {
        if (self.__plugins[i] && self.__plugins[i].pluginId == pluginId) {
          plugins.push(self.__plugins[i]);
        }
      }
      return plugins.length > 1 ? plugins : plugins[0] || null;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = Base;
  }  /** ignored by jsdoc **/ else {
    return Base;
  }
  return exports;
}(base);
plugins_pullup = function (exports) {
  var Util = util;
  var Base = base;
  var clsPrefix;
  var containerCls;
  var loadingContent = 'Loading...';
  var upContent = 'Pull Up To Refresh';
  var downContent = 'Release To Refresh';
  var PULL_UP_HEIGHT = 60;
  var HEIGHT = 40;
  /**
   * A pullup to load plugin for xscroll.
   * @constructor
   * @param {object} cfg
   * @param {number} cfg.height
   * @param {string} cfg.downContent
   * @param {string} cfg.upContent
   * @param {string} cfg.loadingContent
   * @param {string} cfg.clsPrefix  class prefix which default value is "xs-plugin-pullup-"
   * @param {number} cfg.bufferHeight preload data before scrolling to the bottom of the boundry
   * @extends {Base}
   */
  var PullUp = function (cfg) {
    PullUp.superclass.constructor.call(this);
    this.userConfig = Util.mix({
      upContent: upContent,
      downContent: downContent,
      pullUpHeight: PULL_UP_HEIGHT,
      height: HEIGHT,
      loadingContent: loadingContent,
      bufferHeight: 0,
      clsPrefix: 'xs-plugin-pullup-'
    }, cfg);
  };
  Util.extend(PullUp, Base, {
    /**
    * a pluginId
    * @memberOf PullUp
    * @type {string}
    */
    pluginId: 'pullup',
    /**
    * plugin initializer
    * @memberOf PullUp
    * @override Base
    * @return {PullUp}
    */
    pluginInitializer: function (xscroll) {
      var self = this;
      self.xscroll = xscroll.render();
      clsPrefix = self.userConfig.clsPrefix;
      self.render();
      return self;
    },
    /**
    * detroy the plugin
    * @memberOf PullUp
    * @override Base
    * @return {PullUp}
    */
    pluginDestructor: function () {
      var self = this;
      Util.remove(self.pullup);
      self.xscroll.off('scrollend', self._scrollEndHandler, self);
      self.xscroll.off('scroll', self._scrollHandler, self);
      self.xscroll.off('pan', self._panHandler, self);
      self.xscroll.boundry.resetBottom();
      self.__isRender = false;
      self._evtBinded = false;
    },
    /**
    * render pullup plugin
    * @memberOf PullUp
    * @return {PullUp}
    */
    render: function () {
      var self = this;
      if (self.__isRender)
        return;
      self.__isRender = true;
      var containerCls = clsPrefix + 'container';
      var height = self.userConfig.height;
      var pullup = self.pullup = document.createElement('div');
      pullup.className = containerCls;
      pullup.style.position = 'absolute';
      pullup.style.width = '100%';
      pullup.style.height = height + 'px';
      pullup.style.bottom = -height + 'px';
      self.xscroll.container.appendChild(pullup);
      self.xscroll.boundry.expandBottom(self.userConfig.height);
      self.status = 'up';
      Util.addClass(pullup, clsPrefix + self.status);
      pullup.innerHTML = self.userConfig[self.status + 'Content'] || self.userConfig.content;
      self._bindEvt();
      return self;
    },
    _bindEvt: function () {
      var self = this;
      if (self._evtBinded)
        return;
      self._evtBinded = true;
      var pullup = self.pullup;
      var xscroll = self.xscroll;
      xscroll.on('pan', self._panHandler, self);
      //load width a buffer
      if (self.userConfig.bufferHeight > 0) {
        xscroll.on('scroll', self._scrollHandler, self);
      }
      //bounce bottom
      xscroll.on('scrollend', self._scrollEndHandler, self);
      return self;
    },
    _scrollEndHandler: function (e) {
      var self = this, xscroll = self.xscroll, scrollTop = xscroll.getScrollTop();
      if (scrollTop == xscroll.containerHeight - xscroll.height + self.userConfig.height) {
        self._changeStatus('loading');
      }
      return self;
    },
    _scrollHandler: function (e) {
      var self = this, xscroll = self.xscroll;
      if (!self.isLoading && Math.abs(e.scrollTop) + xscroll.height + self.userConfig.height + self.userConfig.bufferHeight >= xscroll.containerHeight + xscroll.boundry._xtop + xscroll.boundry._xbottom) {
        self._changeStatus('loading');
      }
      return self;
    },
    _panHandler: function (e) {
      var self = this;
      var xscroll = self.xscroll;
      var offsetTop = -xscroll.getScrollTop();
      if (offsetTop < xscroll.height - xscroll.containerHeight - self.userConfig.pullUpHeight) {
        self._changeStatus('down');
      } else {
        self._changeStatus('up');
      }
      return self;
    },
    _changeStatus: function (status) {
      if (status != 'loading' && this.isLoading)
        return;
      var prevVal = this.status;
      this.status = status;
      Util.removeClass(this.pullup, clsPrefix + prevVal);
      Util.addClass(this.pullup, clsPrefix + status);
      this.pullup.innerHTML = this.userConfig[status + 'Content'];
      if (prevVal != status) {
        this.trigger('statuschange', {
          prevVal: prevVal,
          newVal: status
        });
        if (status == 'loading') {
          this.isLoading = true;
          this.trigger('loading');
        }
      }
      return this;
    },
    /**
    * notify pullup plugin to complete state after a remote data request
    * @memberOf PullUp
    * @return {PullUp}
    */
    complete: function () {
      var self = this;
      var xscroll = self.xscroll;
      self.isLoading = false;
      self._changeStatus('up');
      return self;
    }
  });
  if (typeof module == 'object' && module.exports) {
    exports = PullUp;
  }  /** ignored by jsdoc **/ else if (window.XScroll && window.XScroll.Plugins) {
    return XScroll.Plugins.PullUp = PullUp;
  }
  return exports;
}(plugins_pullup);
}());
/**
 * 页面吐司 - v1.0.0 - 2016-11-30
 * @author liukeyu
 * @ngdoc service
 * @name hyToast
 * @description
 *   [ch]页面吐司.[/ch]
 * @example
 *
 */
(function(){
	"use strict";
    var HyToast;
    HyToast = Class.extend({

        toastElement:null,
        init: function () {
            return this;
        },
        toast: function (options,showSuccess,hideSuccess) {
            options = options || {};
            //提示内容
            options.message = options.message || '网络开小差了，请稍后再试！';
            //显示时间
            options.duration = options.duration || 3000;
            //位置 top上边显示 bottom下边显示
            options.position = 'top'==options.position?'top':'bottom';
            //偏移值 像素
            options.pixelsY = options.pixelsY || 60;

            this.show(options,showSuccess);

            var timer = setTimeout(function(){
                this.hide(hideSuccess);
                if(timer) clearTimeout(timer);
            }.bind(this),options.duration);

            return this;
        },
        show: function (options,callback) {
            var ele = this._createToast(options);
            if(!ele) return;
            angular.element(document.body).append(ele);
            this._showToast(ele,callback);
            this.hide();
            this.toastElement = ele;
        },
        hide: function (callback) {
            var ele = this.toastElement;
            if(!ele) return;
            this._hideToast(ele,callback);
        },

        _createToast : function(options){
            //提示内容
            var message = options.message;
            //位置 top上边显示 bottom下边显示
            var position = options.position;
            //偏移值 像素
            var pixelsY = options.pixelsY;

            var html = '<div class="hy-toast-body"><div class="hy-toast-content"><span>'+message+'</span></div></div>';
            var toast = angular.element(html);
            if('top'==position)
                toast.css({'top':pixelsY+'px'});
            else
                toast.css({'bottom':pixelsY+'px'});
            return toast;
        },

        _showToast : function(ele,callback){
            if(!ele) return;
            ele.css({'display':'block'});
            animit(ele[0])
                .queue({
                    opacity:0.2,
                    transform: 'translate3d(0,100%,0)'
                })
                .queue({
                    opacity:1,
                    transform: 'translate3d(0,0,0)'
                }, {
                    duration: 1,
                    timing: 'cubic-bezier(.1, .7, .1, 1)'
                })
                .play(function(){
                    if(callback && angular.isFunction(callback)){
                        callback.call(this,ele);
                    }
                }.bind(this));
        },

        _hideToast : function(ele,callback){
            if(!ele) return;
            animit(ele[0])
                .queue({
                    opacity:0,
                    transform: 'translate3d(0,100%,0)'
                        }, {
                    duration: 1,
                    timing: 'cubic-bezier(.1, .7, .1, 1)'
                })
                .play(function(){
                    ele.css({'display':'none'});
                    if(callback && angular.isFunction(callback)){
                        callback.call(this,ele);
                    }
                    ele.remove();
                }.bind(this));
        }
    });
    MicroEvent.mixin(HyToast);
    window.hyMui = window.hyMui || {};
    var hyToast = new HyToast();
    window.hyMui.toast = hyToast.toast.bind(hyToast);
})();



/**
 * 文件大小转换过滤器
 * Created by GuoLinHao on 2016.03.21 .
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile',[]);
    }

    module.filter('fileSizeTransform',function(){
        return function(input){
            if (input === 0) return '0 B';
            var k = 1024,
                sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                i = Math.floor(Math.log(input) / Math.log(k));
            return (input / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
        };
    });

})();
/**
 * @ngdoc factory
 * @name $hyAccelerService
 * @module haiyiMobile
 * @description   使用加速器实现 摇一摇
 * @returns
 * @usage
 * @author LinZhiYong
 * @date 2016-08-03
 * @version V1.0
 *
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.factory('$hyAccelerService', ['$timeout', function ($timeout) {

        var isShake = true;

        /** 应用挂起 */
        document.addEventListener("pause", function() {
            isShake = false;
        });

        /** 应用唤醒 */
        document.addEventListener("resume", function() {
            isShake = true;
        });

        var $hyAccelerService = {

            /**
             * 灵敏度
             */
            _sensitivity: 18,

            /**
             * 加速器ID
             */
            _accelerID: null,

            /**
             * 摇一摇方法
             *
             * @param callback
             * @param sensitivity 灵敏度
             * @param isVibrator 是否触发震动
             * @param interval 振动间隔, 单位毫秒
             */
            shake: function (callback, sensitivity, isVibrator, interval) {
                if (this._accelerID) {
                    return;
                }
                this._sensitivity = sensitivity || this._sensitivity;
                var self = this;
                if (!navigator.accelerometer) {
                    console.log("请在移动设备上操作！");
                    return;
                }
                var isAccelerWatch = true;
                var last_x = 0;
                var last_y = 0;
                var last_z = 0

                function onAccelSuccess(acceleration) {
                    var x = acceleration.x.toFixed(1) * -1;
                    var y = acceleration.y.toFixed(1) * 1;
                    var z = acceleration.z.toFixed(1) * 1;

                    if (isShake && isAccelerWatch) {
                        var falg = Math.abs(x - last_x) > self._sensitivity || Math.abs(y - last_y) > self._sensitivity || Math.abs(z - last_z) > self._sensitivity;
                        if (falg) {
                            if (typeof isVibrator == 'boolean' && isVibrator) {
                                interval = interval || 300;
                                if (navigator.vibrate) {
                                    navigator.vibrate(interval);
                                } else if (navigator.notification && navigator.notification.vibrate) {
                                    navigator.notification.vibrate(interval);
                                }
                            }
                            //if(self._timeout && self._timeout.$$state.status == 0) {
                            //    $timeout.cancel(self._timeout);
                            //}
                            isAccelerWatch = false;
                            self._timeout = $timeout(function () {
                                isAccelerWatch = true;
                            }, 1000);
                            callback && callback();
                        }
                    }

                    last_x = x;
                    last_y = y;
                    last_z = z;
                };

                function onAccelError() {
                    console.log("onAccelError");
                };

                this._accelerID = navigator.accelerometer.watchAcceleration(onAccelSuccess, onAccelError, {frequency: 200});
            },

            /**
             * 关闭摇一摇功能
             */
            close: function () {
                if (this._accelerID) {
                    navigator.accelerometer.clearWatch(this._accelerID);
                    this._accelerID = null;
                }
            }
        };
        return $hyAccelerService;
    }]);

})();

/**
 * @ngdoc factory
 * @name $appConfig
 * @module haiyiMobile
 * @description   混合应用的基本配置属性
 * @returns
 * @usage
 * @author YangMing
 * @date 2016-03-15
 * @version V1.0
 *
 *
 * @attributes
 * appId  应用唯一标识
 * appUrl 应用的通讯服务地址
 * moduleName  应用的模块名
 * mainNavi    应用首页的navigator对象
 * mainUrl      应用的主界面地址
 *
 *
 * @method
 * initAppAttribute()   初始化appId和appUrl信息
 *
 *
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    module.factory('$appConfig', ['$hyUtil', function ($hyUtil) {
        var $appConfig = {
            /**
             * 应用的唯一标识
             */
            appId: null,
            /**
             * 应用连接的正式服务器地址
             */
            appUrl: null,
            /**
             * 用户创建的应用模块名
             */
            moduleName: 'app',
            /**
             * 首页面的navigator导航全局对象
             */
            mainNavi: null,
            /**
             * 应用主页面的URL地址
             */
            mainUrl: 'main.html',
            /**
             * 表示当前框架是否处于debug状态，在该状态为true下，框架将不会启动内部逻辑加载页面
             * 只为开发工具实时预览功能提供状态控制的
             */
            debug:false,
            /**
             * 应用的唯一标识
             */
            configJson: null,
            /**
             * 登录账号的用户信息
             */
            userInfo:null,

            /**
             * 初始化应用的配置属性
             * appConfig={
                 *  appUrl：         服务器地址
                 *  appId：          应用ID
                 * }
             */
            initAppAttribute: function (hymui) {
                var self = this;
                this.mainUrl = hymui._config.mainUrl;
                this.moduleName = hymui._config.moduleName;
                if (hymui._config.appUrl && hymui._config.appId) {
                    this.appUrl = hymui._config.appUrl;
                    this.appId = hymui._config.appId;
                } else {
                    $hyUtil.ajax({
                        url: 'config.json',
                        method: 'GET',
                        dataType: 'json',
                        async: false,
                        success: function (data) {
                            self.configJson = data;
                            if (data.appId) {
                                self.appId = data.appId;
                                // $hyHttp.setAppId(data.appId);
                            } else {
                                console.error("没有获取应用的AppID");
                            }
                            if (data.appUrl) {
                                self.appUrl = data.appUrl;
                                // $hyHttp.setBaseUrl(data.appUrl);
                            } else {
                                console.error("没有获取应用的服务入口地址");
                            }
                        },
                        error: function (xhr, message) {
                            console.error('get config.json error:' + message);
                        }
                    })
                }

            },
            /**
             * 保存自动登录用户信息
             */
            saveUserInfo: function (user) {
                this.userInfo = user;
                localStorage.setItem(this.appId+'_user', JSON.stringify(user));
            },

            /**
             * 获取自动登录用户信息
             */
            getUserInfo: function () {
                this.userInfo = JSON.parse(localStorage.getItem(this.appId+'_user'));
                return this.userInfo;
            },
            /**
             * 删除自动登录用户信息
             */
            removeUserInfo: function () {
                this.userInfo = null;
                localStorage.removeItem(this.appId+'_user');
            },
            /**
             * 保存登录用户的Token信息
             */
            saveToken: function (token) {
                localStorage.setItem(this.appId+'_token', JSON.stringify(token));
            },

            /**
             * 获取登录用户的Token信息
             */
            getToken: function () {
                return JSON.parse(localStorage.getItem(this.appId+'_token'));
            },
            /**
             * 移除用户的Token信息
             */
            removeToken:function(){
                localStorage.removeItem(this.appId+'_token');
            },
            /**
             * 保存登录用户的账号
             */
            saveAccount: function (account) {
                localStorage.setItem(this.appId+'_account', JSON.stringify(account));
            },

            /**
             * 获取登录用户的账号
             */
            getAccount: function () {
                return JSON.parse(localStorage.getItem(this.appId+'_account'));
            },
            /**
             * 移除用户登录账号信息
             */
            removeAccount:function(){
                localStorage.removeItem(this.appId+'_account');
            }
        };
        return $appConfig;
    }]);
})();
/**
 * @ngdoc factory
 * @name $cacheService
 * @module haiyiMobile
 * @description   缓存服务，用于管理缓存，提供获取、保存、清除缓存的方法，并可以根据缓存策略定期清理缓存文件
 * @returns
 * @usage
 * @author LinZhiYong
 * @date 2016-03-25
 * @version V1.0
 *
 */

(function () {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('$cacheService', function () {
        var $cacheService = {

            /** 缓存库表结构对象 */
            _FileInfo: null,
            /** 缓存大小 */
            _cacheSize: 100 * 1024 * 1024,
            /** 缓存有效期,单位/天 */
            _validateDays: 10,
            /** 缓存路径,默认存在data/data/package/cache下面 */
            cachePath: null,
            /** 数据库名 */
            _cacheDBName: 'hy_cache',

            /**
             * 初始化
             * @param cacheArgs {object} 缓存参数
             *
             * cacheArgs = {
             *   cacheSize        {int}       缓存大小, 单位/字节
             *   validateDays     {int}       缓存有效期
             *   cachePath        {Object}    缓存路径, 对象参数 {android: "", ios: ""}
             *   cacheDBName      {String}    数据库名称
             *   cacheStrategy    {function}  缓存策略
             * }
             */
            init: function (cacheArgs) {
                cacheArgs = cacheArgs || {};
                this._cacheSize = cacheArgs.cacheSize || this._cacheSize;
                this._validateDays = cacheArgs.validateDays || this._validateDays;
                this._initCachePath(cacheArgs.cachePath);
                this._cacheDBName = cacheArgs.cacheDBName || this._cacheDBName;
                this._cacheStrategy = cacheArgs.cacheStrategy instanceof Function ? cacheArgs.cacheStrategy : this._cacheStrategy;
                //this._initDataBase();
            },

            /**
             * 根据device类型选择缓存路径
             * @param cachePath  {Object} 缓存路径对象
             * @private
             *
             * cachePath = {
             *     android: "",    {String}  Android平台缓存路径
             *     ios: "",        {String}  iOS平台缓存路径
             * }
             */
            _initCachePath: function (cachePath) {
                this.cachePath = window.FileTransfer ? cordova.file.cacheDirectory : null;
                cachePath = cachePath || {};
                if (window.device) {
                    switch (device.platform) {
                        case "Android":
                            this.cachePath = cachePath.android || this.cachePath;
                            break;
                        case "iOS":
                            this.cachePath = cachePath.ios || this.cachePath;
                            break;
                    }
                }
            },

            /**
             * 初始化数据库
             * @private
             */
            _initDataBase: function () {
                // if (window.sqlitePlugin) {
                //     persistence.store.cordovasql.config(persistence, this._cacheDBName, '1.0.0', 'a sqlite database', 10 * 1024 * 1024, 0, null);
                // } else {
                //     persistence.store.websql.config(persistence, this._cacheDBName, "a file cache webSql database", 10 * 1024 * 1024);
                // }
                // 定义缓存索引表
                this._FileInfo = persistence.define('cache_file_info', {
                    name: "TEXT",           // 文件名
                    path: "TEXT",           // 保存路径
                    url: "TEXT",            // 文件请求地址
                    type: "TEXT",           // 文件类型
                    size: "INT",            // 文件大小
                    createtime: "INT",      // 保存时间
                    lasttime: "INT",        // 最近访问时间
                    visitnum: "INT",        // 访问次数
                    validate: "INT",        // 是否有效，0表示有效，1表示无效
                });
                // 同步库表到数据库
                persistence.transaction(function (tx) {
                    persistence.schemaSync(tx, function () {
                        console.log("$cacheService: schemaSync database success.");
                    });
                });
            },

            /**
             * 保存文件信息
             * @param {Onject} fileInfo 文件对象信息
             *
             * fileInfo = {
             *     name："img.pmg",             // {String} 可选，文件名称
             *     size: 123234 ,               // {int}    必填，文件大小（单位/b）
             *     url: "http://...",           // {String} 必填，文件请求地址
             *     path: "cache/img/haha.png",  // {String} 必填，文件路径
             *     type: "png"                  // {String} 可选，文件类型
             * }
             */
            setFileInfo: function (fileInfo) {
                if (!fileInfo || !fileInfo.url || !fileInfo.size || !fileInfo.path) {
                    return;
                }
                var _fileInfo = new this._FileInfo();
                _fileInfo.createtime = new Date().getTime();
                _fileInfo.lasttime = new Date().getTime();
                _fileInfo.visitnum = 1;
                _fileInfo.validate = 0;
                _fileInfo.name = fileInfo.name;
                _fileInfo.size = fileInfo.size;
                _fileInfo.url = fileInfo.url;
                _fileInfo.path = fileInfo.path;
                _fileInfo.type = fileInfo.type;
                persistence.add(_fileInfo);
                persistence.flush();

                //每次保存文件信息都执行缓存策略
                this.clearCache(null);
            },

            /**
             * 根据fileURL获取缓存文件
             * @param fileURL   {String}    文件请求地址
             * @param callback  {function}  回调函数 callback(fileInfo)
             *
             * fileInfo = {
             *     name: "TEXT",           // 文件名
             *     path: "TEXT",           // 保存路径
             *     url: "TEXT",            // 文件请求地址
             *     type: "TEXT",           // 文件类型
             *     size: "INT",            // 文件大小
             *     createtime: "INT",      // 保存时间
             *     lasttime: "INT",        // 最近访问时间
             *     visitnum: "INT",        // 访问次数
             *     validate: "INT",        // 是否有效
             * }
             */
            getFileInfo: function (fileURL, callback) {
                var self = this;
                this._getFileInfo(fileURL, function (fileInfo) {
                    if (callback instanceof Function) {
                        if (fileInfo) { // 文件存在，修改访问次数和最后访问时间
                            self._updateFileInfo(fileInfo);
                        }
                        callback(fileInfo);
                    }
                });
            },

            /**
             * 更新文件信息，修改访问次数、最后访问时间
             * @param fileInfo
             */
            _updateFileInfo: function (fileInfo) {
                fileInfo.lasttime = new Date().getTime();
                fileInfo.visitnum += 1;
                persistence.flush();
            },

            /**
             * 获取所有缓存文件信息,同时返回当前已缓存文件大小
             * @param validate    {int}   0表示有效缓存，1表示无效缓存
             * @param callback(fileInfos, currentSize)
             * @private
             */
            _getAllFileInfo: function (validate, callback) {
                this._FileInfo.all().filter('validate', '=', validate).list(function (fileInfos) {
                    if (callback instanceof Function) {
                        var currentSize = 0;
                        fileInfos.forEach(function (fileInfo) {
                            currentSize += fileInfo.size;
                        });
                        callback(fileInfos, currentSize);
                    }
                });
            },

            /**
             * 获取当前缓存文件大小
             * @param callback
             * @private
             */
            _getCacheFileSize: function (callback) {
                this._getAllFileInfo(0, function (fileInfos, currentSize) {
                    if (callback instanceof Function) {
                        callback(currentSize);
                    }
                });
            },

            /**
             * 根据fileURL从库表中查询file缓存信息
             * @param fileURL   {String}    文件请求地址
             * @param callback  {function}  回调函数
             * @private
             */
            _getFileInfo: function (fileURL, callback) {
                this._FileInfo.all().filter('url', '=', fileURL).filter('validate', '=', 0).list(function (fileInfos) {
                    if (callback instanceof Function) {
                        var fileInfo = fileInfos && fileInfos.length > 0 ? fileInfos[0] : null;
                        callback(fileInfo);
                    }
                });
            },

            /**
             * 根据文件请求地址删除文件
             * @param url
             */
            deleteFile: function (url) {
                if (!url) {
                    return;
                }
                var self = this;
                this._getFileInfo(url, function (fileInfo) {
                    if (fileInfo) {
                        self._deleteFile(fileInfo);
                    }
                });
            },

            /**
             * 根据文件请求地址删除缓存文件
             * @param fileInfo  {Object}    文件缓存对象
             * @param callback  {function}  回调函数 callback(code) 0表示成功，1表示失败
             */
            _deleteFile: function (fileInfo, callback) {
                if (!fileInfo) {
                    if (callback instanceof Function) {
                        callback(0);
                    }
                    return;
                }
                // 调用插件，删除文件
                var code = 1; // 0表示成功，1表示失败
                if (window.HYFileTransfer && fileInfo.path) { // 存在文件传输插件,并且缓存路径不为空
                    var fileTransfer = new HYFileTransfer();
                    fileTransfer.deleteFile(fileInfo.path, function (msg) {
                        console.log(msg);
                        // 删除数据库记录
                        persistence.remove(fileInfo);
                        persistence.flush(function () {
                            code = 0;
                        });
                    }, function (error) {
                        console.log(error);
                        code = 1;
                        fileInfo.validate = 1;
                        persistence.flush();
                    });
                } else {
                    fileInfo.validate = 1;
                    persistence.flush();
                }
                if (callback instanceof Function) {
                    callback(code);
                }
            },

            /**
             * 清理掉删除失败的文件信息
             * @private
             */
            _clearNeedDeleteFile: function () {
                var self = this;
                this._getAllFileInfo(1, function (fileInfos) {
                    fileInfos.forEach(function (fileInfo) {
                        self._deleteFile(fileInfo);
                    });
                });
            },

            /**
             * 删除所有缓存文件
             * @param callback  {function}  回调函数  callback(code) 0表示成功，1,2表示失败
             * @private
             */
            _deleteAllFile: function (callback) {
                // 调用插件，删除文件
                if (window.HYFileTransfer && this.cachePath) { // 存在文件传输插件,并且缓存路径不为空
                    var fileTransfer = new HYFileTransfer();
                    fileTransfer.deleteDir(this.cachePath, function (msg) {
                        console.log(msg);
                        if (callback instanceof Function) {
                            callback(0);
                        }
                    }, function (error) {
                        console.log(error);
                        if (callback instanceof Function) {
                            callback(1);
                        }
                    });
                } else {
                    if (callback instanceof Function) {
                        callback(2);
                    }
                }
            },

            /**
             * 执行缓存策略，清理缓存，同时删除文件
             * @param strategyParams {Object}  可选参数，默认缓存策略配置参数
             *
             * strategyParams = {
             *    needClearSize: null, // 需要清理的空间大小（单位 b）
             *    noUseDays: null,     // 最长未使用时间（单位/天）
             *    maxPercent: null     // 超出容量百分比（%，INT）
             * }
             *
             */
            clearCache: function (strategyParams) {
                this._clearNeedDeleteFile();
                var self = this;
                this._getAllFileInfo(0, function (fileInfos, currentSize) {
                    var result = self._cacheStrategy(fileInfos, currentSize, strategyParams) || {};
                    result.needClearFileList.forEach(function (fileInfo) {
                        self._deleteFile(fileInfo);
                    });
                });
            },

            /**
             * 缓存策略,根据策略过滤出需要删除的缓存集合
             * @description 检查 缓存文件容量超出、有效期超出，则根据使用次数、有效期依次删除文件
             * @param fileInfos      {Array}   所有缓存文件信息集合
             * @param currentSize    {int}     当前已缓存文件容量
             * @param params         {Object}  缓存策略参数
             * @returns              {Object}  返回对象，包括：需要清理的文件集合、可清理的空间大小
             * @private
             */
            _cacheStrategy: function (fileInfos, currentSize, params) {
                var self = this;
                var result = {};
                result.needClearFileList = []; // 需要清理的文件集合
                result.needClearSize = 0; // 需要清理的空间大小
                fileInfos = fileInfos || [];
                // 临时存放清理后的缓存文件集合
                var temFileInfos = [];
                temFileInfos = temFileInfos.concat(fileInfos);
                // 如果缓存策略参数存在，执行
                if (params) {
                    // 如果最长调用时间参数存在，先根据最后调用时间策略清理
                    if (params.noUseDays) {
                        fileInfos.forEach(function (fileInfo, index) {
                            // invalid > 0,表示已经超出时间期限
                            var invalid = new Date().getTime() - fileInfo.lasttime - params.noUseDays * 3600 * 1000;
                            if (invalid > 0) {
                                result.needClearFileList.push(fileInfo);
                                result.needClearSize += fileInfo.size;
                                temFileInfos.splice(index, 1);
                            }
                        });
                    }
                    // 如果容量超出百分比参数存在，则计算出超出部分，并调用自身继续清理
                    if (params.maxPercent) {
                        // 如果percent > 0,表示已经超出规定百分比
                        currentSize -= result.needClearSize;
                        var percent = parseInt(currentSize / this._cacheSize * 100) - params.maxPercent;
                        if (percent > 0) {
                            var beyondSize = parseInt(this._cacheSize * percent / 100);
                            var _result = this._cacheStrategy(temFileInfos, currentSize, {needClearSize: beyondSize});
                            result.needClearFileList = result.needClearFileList.concat(_result.needClearFileList);
                            result.needClearSize += _result.needClearSize;
                            // 根据返回来的list调整temFileInfos
                            _result.needClearFileList.forEach(function (fileInfo) {
                                temFileInfos.forEach(function (_fileInfo, index) {
                                    if (_fileInfo === fileInfo) {
                                        temFileInfos.splice(index, 1);
                                    }
                                })
                            });
                        }
                    }
                    // 如果需要清理空间存在，则根据策略清理出指定大小空间
                    if (params.needClearSize) {
                        currentSize -= result.needClearSize;
                        // 如果参数值大于当前缓存空间，直接清空当前缓存内容
                        if (params.needClearSize > currentSize) {
                            result.needClearFileList = result.needClearFileList.concat(temFileInfos);
                            result.needClearSize += params.needClearSize;
                            return result;
                        }
                        // 如果参数值大于已经清理出的空间，则计算出超出的容量大小，根据调用时间、调用次数、创建时间排序，循环清理
                        if (params.needClearSize > result.needClearSize) {
                            this._sortArray(temFileInfos);
                            while (params.needClearSize > result.needClearSize) {
                                var fileInfo = temFileInfos.pop();
                                if (!fileInfo) {
                                    continue;
                                }
                                result.needClearFileList.push(fileInfo);
                                result.needClearSize += fileInfo.size;
                                if (temFileInfos.length === 0) {
                                    break;
                                }
                            }
                        }
                    }
                } else { // 不存在策略参数，先根据设定的缓存有效期清理，再判断当前容量和总容量，如果超出，根据调用时间、调用次数、创建时间排序，循环清理
                    // 先根据设定的缓存有效时间进行过滤
                    fileInfos.forEach(function (fileInfo, index) {
                        // invalid > 0,表示缓存已经过期
                        var invalid = new Date().getTime() - fileInfo.lasttime - self._validateDays * 3600 * 1000;
                        if (invalid > 0) {
                            result.needClearFileList.push(fileInfo);
                            result.needClearSize += fileInfo.size;
                            temFileInfos.splice(index, 1);
                        }
                    });
                    // 清理过期缓存后判断当前容量与总容量
                    if (currentSize - result.needClearSize > this._cacheSize) {
                        this._sortArray(temFileInfos);
                        while (currentSize - result.needClearSize > this._cacheSize) {
                            var fileInfo = temFileInfos.pop();
                            if (!fileInfo) {
                                continue;
                            }
                            result.needClearFileList.push(fileInfo);
                            result.needClearSize += fileInfo.size;
                            if (temFileInfos.length === 0) {
                                break;
                            }
                        }
                    }
                }
                return result;
            },

            /**
             * 排序算法，根据调用时间、调用次数、创建时间排序,将符合删除条件的放在最后面
             * @param fileInfos
             * @private
             */
            _sortArray: function (fileInfos) {
                fileInfos = fileInfos || [];
                fileInfos.sort(function (a, b) {
                    if (a.lasttime === b.lasttime) {
                        if (a.visitnum === b.visitnum) {
                            return a.createtime - b.createtime;
                        }
                        return b.visitnum - a.visitnum;
                    }
                    return b.lasttime - a.lasttime;
                });
            },

            /**
             * 清空本地所有缓存
             * @param callback  {function}  回调函数
             */
            clearCacheAll: function (callback) {
                var self = this;
                // 删除本地缓存文件
                this._deleteAllFile(function (result) {
                    switch (result) {
                        case 0:
                            // 清空数据库
                            self._FileInfo.all().destroyAll(function (result) {
                                console.log('$cacheService: clear cache done!' + result);
                            });
                            break;
                        case 1:
                            console.error("$cacheService: failed to delete all files!");
                            break;
                        case 2:
                            console.error("$cacheService: window.HYFileTransfer is not exist!");
                            break;
                    }
                    // 清空完成，通知外部调用者
                    if (callback instanceof Function) {
                        callback();
                    }
                });
            }

        };
        return $cacheService;
    });

})();
/**
 * @ngdoc factory
 * @name $hyHttp
 * @module haiyiMobile
 * @description   网络访问请求封装服务
 * @returns
 * @usage
 * @author GuoLinHao
 * @date 2016-03-10
 * @version V1.0
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', []);
    }

    var param = function (obj) {
        var query = '', name, value, fullSubName, subName, subValue, innerObj, i;

        for (name in obj) {
            value = obj[name];

            if (value instanceof Array) {
                for (i = 0; i < value.length; ++i) {
                    subValue = value[i];
                    fullSubName = name + '[' + i + ']';
                    innerObj = {};
                    innerObj[fullSubName] = subValue;
                    query += param(innerObj) + '&';
                }
            }
            else if (value instanceof Object) {
                for (subName in value) {
                    subValue = value[subName];
                    fullSubName = name + '[' + subName + ']';
                    innerObj = {};
                    innerObj[fullSubName] = subValue;
                    query += param(innerObj) + '&';
                }
            }
            else if (value !== undefined && value !== null)
                query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
        }

        return query.length ? query.substr(0, query.length - 1) : query;
    };

    /**
     * 设置$http请求默认配置，针对POST请求，需要格式化一下数据
     */
    module.config(['$httpProvider',
        function ($httpProvider) {

            $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';
            $httpProvider.defaults.transformRequest = function (data) {
                return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
            };
        }
    ]);

    module.factory('$hyHttp', ['$http', '$q', '$cacheService', '$appConfig', '$hyUtil', '$hyHttpbyToken', '$hyHttpLite',
        function ($http, $q, $cacheService, $appConfig, $hyUtil, $hyHttpbyToken, $hyHttpLite) {

            var hyHttp = {};

            hyHttp.defaultConfig = {
                responseType: 'json',
                cache: false
            };

            hyHttp.defaultErrorMessage = "網絡異常,請重試";

            /**
             * 发送请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param config (必选) config (对象)中包含具体的请求方法，如'GET'、'POST'、'JSONP'等
             * @returns {*}
             */
            hyHttp.http = function (serviceName, config) {
                return $hyHttpLite.http(serviceName,config);
            };

            /**
             * 发送get请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            hyHttp.get = function (serviceName, config) {
                return $hyHttpLite.get(serviceName, config);
            };

            /**
             * 发送需要登陆的get请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            hyHttp.getByToken = function (serviceName, config) {
                return $hyHttpbyToken.getByToken(serviceName, config);
            };

            /**
             * 发送POST请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param data (可选) 请求的数据 （对象或字符串）
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            hyHttp.post = function (serviceName, config, data) {
                return $hyHttpLite.post(serviceName, config, data);
            };

            /**
             * 发送需要带Token的POST请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param data (可选) 请求的数据 （对象或字符串）
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            hyHttp.postByToken = function (serviceName, config, data) {
                return $hyHttpbyToken.postByToken(serviceName, config, data);
            };


            /**
             * 设置是否压缩
             * @param isCompress
             */
            hyHttp.setCompress = function (isCompress) {
                $hyHttpLite.setCompress(isCompress);
            };

            /**
             * 返回是否设置了压缩
             * @returns {boolean}
             */
            hyHttp.isCompress = function () {
                return $hyHttpLite.isCompress();
            };

            /**
             * 设置是否加密
             * @param isEncrypt
             */
            hyHttp.setEncrypt = function (isEncrypt) {
                $hyHttpLite.setEncrypt(isEncrypt);
            };

            /**
             * 返回是否设置了加密
             * @returns {boolean}
             */
            hyHttp.getEncrypt = function () {
                return $hyHttpLite.getEncrypt();
            };

            /**
             * 设置连接超时时间
             * @param timeout
             */
            hyHttp.setTimeout = function (timeout) {
               $hyHttpLite.setTimeout(timeout);
            };

            /**
             * 返回连接超时时间
             * @returns {number}
             */
            hyHttp.getTimeout = function () {
                return $hyHttpLite.getTimeout();
            };

            /**
             * 返回网络请求服务已设置的头部信息
             * @returns {$httpProvider.defaults.headers|{common, post, put, patch}}
             */
            hyHttp.getHeaders = function () {
                return ($http.defaults.headers);
            };

            /**
             * 增加自定义头部信息
             * @param key 头部信息的key
             * @param value 头部信息的value
             */
            hyHttp.addHeader = function (key, value) {
               $hyHttpLite.addHeader(key,value);
            };

            /**
             * 重置$hyHttp服务，清空已设置的头部信息，恢复默认值
             */
            hyHttp.reset = function () {
                $hyHttpLite.reset();
            };

            /**
             * 上传文件服务
             * @param serviceName 服务名 (必选)
             * @param formData 附带参数
             * @param success 成功回调 function
             * @param error 失败回调 function
             * @param progress 上传进度 function
             */
            hyHttp.upload = function (serviceName, formData) {
                var deferred = $q.defer();

                var url = encodeURI($appConfig.appUrl);
                var xhr = new window.XMLHttpRequest();
                if (xhr == null) {
                    throw new Error('您的浏览器不支持AJAX上传，请选择其他方式!');
                }
                xhr.onload = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            deferred.resolve(xhr);
                        }
                    }
                };

                xhr.onerror = function () {
                    deferred.reject(xhr);
                };

                xhr.upload.onprogress = function (event) {
                    if (event.lengthComputable) {
                        deferred.notify(event);
                    }
                };

                xhr.open('POST', url, true);
                xhr.setRequestHeader("hy_serviceName", serviceName);
                xhr.setRequestHeader("hy_appId", _appId);
                xhr.send(formData);

                var promise = deferred.promise;
                promise.success = function (fn) {
                    promise.then(function (response) {
                        fn(response);
                    });
                    return promise;
                };
                promise.error = function (fn) {
                    promise.then(null, function (response) {
                        fn(response);
                    });
                    return promise;
                };
                promise.progress = function (fn) {
                    promise.then(null, null, function (response) {
                        fn(response);
                    });
                    return promise;
                };

                return promise;
            };

            /**
             * 文件下载服务
             * @param method 方法(必选) GET、POST
             * @param serviceName 服务名(必选)
             * @param formData 附带参数
             * @param success 成功回调 function
             * @param error   失败回调 function
             * @param progress 上传进度 function
             */
            hyHttp.downLoad = function (method, serviceName, formData) {
                var deferred = $q.defer();
                var url = encodeURI($appConfig.appUrl);
                var xhr = new XMLHttpRequest();
                if (xhr == null) {
                    throw new Error('您的浏览器不支持AJAX下载，请选择其他方式!');
                }
                xhr.responseType = 'blob';
                xhr.onload = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status === 200) {
                            deferred.resolve(xhr);
                        }
                    }
                };

                xhr.onerror = function () {
                    deferred.reject(xhr);
                };

                xhr.onprogress = function (event) {
                    if (event.lengthComputable) {
                        deferred.notify(event);
                    }
                };

                xhr.open(method, url, true);
                xhr.setRequestHeader("hy_serviceName", serviceName);
                xhr.setRequestHeader("hy_appId", _appId);
                xhr.send(formData);

                var promise = deferred.promise;
                    promise.success = function (fn) {
                        promise.then(function (response) {
                            fn(response);
                        });
                        return promise;
                    };

                    promise.error = function (fn) {
                        promise.then(null, function (response) {
                            fn(response);
                        });
                        return promise;
                    };

                    promise.progress = function (fn) {
                        promise.then(null, null, function (response) {
                            fn(response);
                        });
                        return promise;
                    };

                return promise;
            };

            /**
             * 文件缓存方法，默认缓存文件
             * @param url           {String}  必选参数，文件请求地址
             * @param params        {Object}  可选参数，下载缓存参数
             * @return promise
             *
             * params = {
         *     reload: false,   {Boolean}  是否重新加载，默认false
         *     cache: true,     {Boolean}  是否缓存，默认true
         *     headers: {},     {Object}   headers请求头部
         * }
             */
            hyHttp.getFile = function (url, params) {
                url = encodeURI(url);
                params = params || {};
                var deferred = $q.defer();
                var promise = deferred.promise;
                var fileURL = $cacheService.cachePath ? $cacheService.cachePath : cordova.file.cacheDirectory;

                if (!url) {
                    deferred.reject("$hyHttp: file url is null.");
                } else if (!window.FileTransfer || !window.HYFileTransfer) {
                    deferred.reject("$hyHttp: Please run on mobile devices.");
                } else {
                    var reload = params.reload === true ? true : false;
                    var cache = params.cache === false ? false : true;
                    var fileTransfer = new HYFileTransfer();
                    // 重新下载文件
                    if (reload) {
                        $cacheService.deleteFile(url);
                        var options = {};
                        options.headers = params.headers;

                        fileTransfer.onprogress = function (event) {
                            if (event.lengthComputable) {
                                deferred.notify(event);
                            }
                        };

                        //下载文件
                        fileTransfer.download(url, fileURL, null, function (entry) {
                            if (cache) {
                                var fileInfo = {};
                                fileInfo.url = url;
                                fileInfo.name = entry.name;
                                fileInfo.path = entry.nativeURL;
                                fileInfo.size = entry.fileLength;
                                fileInfo.type = entry.mimeType;
                                $cacheService.setFileInfo(fileInfo);
                            }
                            deferred.resolve(entry.nativeURL);
                        }, function (error) {
                            deferred.reject(error);
                        }, true, options);
                    } else {
                        // 从缓存中读取文件，如果文件不存在，下载文件
                        $cacheService.getFileInfo(url, function (fileInfo) {
                            if (fileInfo) {
                                fileTransfer.fileExists(fileInfo.path, function (msg) {
                                    if (msg) {
                                        deferred.resolve(fileInfo.path);
                                    } else {
                                        // 文件不存在，下载文件
                                        getFile();
                                    }
                                }, function (error) {
                                    alert("error:" + error);
                                    deferred.reject(error);
                                });
                            } else {
                                // 文件不存在缓存中，调用自身下载文件
                                getFile();
                            }
                        });
                    }

                    // 文件不存在缓存中，调用自身下载文件
                    var getFile = function () {
                        var _params = angular.extend({}, params);
                        _params.reload = true;
                        hyHttp.getFile(url, _params).success(function (response) {
                            deferred.resolve(response);
                        }).error(function (response) {
                            deferred.reject(response);
                        }).progress(function (event) {
                            deferred.notify(event);
                        });
                    }

                }

                promise.success = function (fn) {
                    promise.then(function (response) {
                        fn(response);
                    });
                    return promise;
                };

                promise.error = function (fn) {
                    promise.then(null, function (response) {
                        fn(response);
                    });
                    return promise;
                };

                promise.progress = function (fn) {
                    promise.then(null, null, function (response) {
                        fn(response);
                    });
                    return promise;
                };

                return promise;
            };

            return hyHttp;

        }]);

    module.factory('$hyHttpLite', ['$http', '$appConfig', '$hyUtil', function ($http, $appConfig, $hyUtil) {
        var _isCompress = false;//默认的是否压缩的标识
        var _isEncrypt = false;//默认是否加密的标识
        var _headers = new Array();
        var _url = null;
        var _appId = null;//默认的应用标识appId
        var _timeout = 60000;//默认的超时时间-30秒

        var $hyHttpLite = {
            /**
             * 配置config对象，根据已知的一些参数对协议头部的参数进行修改或增加
             * @param serviceName 服务名称
             * @param config 配置对象
             * @returns {*}
             */
            checkConfig: function (serviceName, config) {
                var _config = {};
                var headers = {};

                if (config != null && config != 'undefined') {
                    _config = config
                }

                if (_config.hasOwnProperty('headers')) {
                    headers = _config.headers;
                }

                /*** 将用户的Token添加请求Head中 **/
                var token = $appConfig.getToken();
                var user = $appConfig.getUserInfo();
                var account = $appConfig.getAccount();
                if (user && token && account && !$hyUtil.isWeiXin()) {

                    var timeStr = new Date().getTime();

                    headers = headers || {};
                    headers.account = account;
                    headers.signature = $hyUtil.createLoginSignature(account, token, timeStr);
                    headers.timeStr = timeStr;
                }
                /**  将手机的型号及操作系统版本数据放到Head中 **/
                headers.mobile_model = "";
                headers.mobile_version = "";
                if(!(typeof(device) == "undefined") && device){
                    headers.mobile_model = device.model;
                    headers.mobile_version = device.version;
                }

                headers.hy_serviceName = serviceName;
                headers.hy_appId = _appId?_appId:$appConfig.appId;
                if (_isCompress) {
                    headers.hy_isCompress = _isCompress;
                }
                if (_isEncrypt) {
                    headers.hy_isEncrypt = _isEncrypt;
                }
                for (var i = 0; i < _headers.length; i++) {
                    headers[_headers[i]._key] = _headers[i]._value;
                }
                _config.headers = headers;

                if (!_config.hasOwnProperty('timeout')) {
                    _config.timeout = _timeout;
                }


                _config.url = $appConfig.appUrl + serviceName;
                return _config;
            },
            /**
             * 发送请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param config (必选) config (对象)中包含具体的请求方法，如'GET'、'POST'、'JSONP'等
             * @returns {*}
             */

            http : function (serviceName, config) {
                var _config = this.checkConfig(serviceName, config);
                _config.url=encode(_config.url) ;
                if (_config && angular.isObject(_config.params)) {
                    for (var key in _config.params) {
                        _config.params[key] = encode(_config.params[key]);
                    }
                }
                return $http(_config);
            },
            /**
             * 发送get请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            get: function (serviceName, config) {
                var _config = this.checkConfig(serviceName, config);
                var url =encode(_config.url) ;
                if (_config && angular.isObject(_config.params)) {
                    for (var key in _config.params) {
                        _config.params[key] = encode(_config.params[key]);
                    }
                }
                return $http.get(url, _config);
            },


            /**
             * 发送POST请求
             * @param serviceName (必选) 服务名称 (字符串)
             * @param data (可选) 请求的数据 （对象或字符串）
             * @param config (可选) 配置选项（对象）
             * @returns {HttpPromise}
             */
            post: function (serviceName, config, data) {
                var _config = this.checkConfig(serviceName, config);
                var url =encode(_config.url) ;
                if (_config && angular.isObject(_config.params)) {
                    for (var key in _config.params) {
                        _config.params[key] = encode(_config.params[key]);
                    }
                }
                // if (data && angular.isObject(data)) {
                //     for (var key in data) {
                //         if (data[key] != undefined && data[key] != null) {
                //             data[key] = this._encodeData(data[key]);
                //         }
                //     }
                // }

                return $http.post(url, data, config);
            },

            _encodeData:function(data){
                if(!data) return data;
                if(angular.isArray(data)){
                    for(var i=0;i<data.length;i++){
                        data[i] = this._encodeData(data[i]);
                    }
                    return data;
                }
                if(angular.isObject(data)){
                    for(var key in data){
                        data[key] = this._encodeData(data[key]);
                    }
                    return data;
                }
                return encodeURIComponent(data);
            },

            /**
             * 设置是否压缩
             * @param isCompress
             */
            setCompress: function (isCompress) {
                _isCompress = isCompress;
            },

            /**
             * 返回是否设置了压缩
             * @returns {boolean}
             */
            isCompress: function () {
                return _isCompress;
            },

            /**
             * 设置是否加密
             * @param isEncrypt
             */
            setEncrypt: function (isEncrypt) {
                _isEncrypt = isEncrypt;
            },

            /**
             * 返回是否设置了加密
             * @returns {boolean}
             */
            getEncrypt: function () {
                return _isEncrypt;
            },

            /**
             * 设置连接超时时间
             * @param timeout
             */
            setTimeout: function (timeout) {
                _timeout = timeout;
            },

            /**
             * 返回连接超时时间
             * @returns {number}
             */
            getTimeout: function () {
                return _timeout;
            },

            /**
             * 增加自定义头部信息
             * @param key 头部信息的key
             * @param value 头部信息的value
             */
            addHeader: function (key, value) {
                var header = {};
                header._key = key;
                header._value = value;
                _headers.push(header);
            },

            /**
             * 重置$hyHttp服务，清空已设置的头部信息，恢复默认值
             */
            reset: function () {
                _headers = [];
                _isCompress = false;
                _isEncrypt = false;
            }

        };
        return $hyHttpLite;
    }]);

    module.factory('$hyHttpbyToken', ['$hyHttpLite', '$loginService', '$q', function ($hyHttp, $loginService, $q) {
        var $hyHttpbyToken = {
            getByToken: function (serviceName, config) {
                var defered = $q.defer();
                var successFn, errorFn;
                var _config = angular.copy(config);//防止中文属性被编码
                $hyHttpLite.get(serviceName, config).success(function (data) {
                    var code = data.code;
                    if (code == -101) {//未登录
                        $loginService.removetUserInfo();
                        $loginService.show({
                            callback: function () {
                                $hyHttp.get(serviceName, _config).success(function (data) {
                                    successFn(data);
                                }).error(function (data) {
                                    errorFn(data);
                                })
                            }
                        });
                    }
                    defered.resolve(data);

                }).error(function (data) {
                    defered.reject(data);
                });

                var promise = defered.promise;
                promise.success = function (fn) {
                    successFn = fn;
                    promise.then(function (response) {
                        fn(response);
                    });
                    return promise;
                };
                promise.error = function (fn) {
                    errorFn = fn;
                    promise.then(null, function (response) {
                        fn(response);
                    });
                    return promise;
                };
                return promise;
            },

            postByToken: function (serviceName, config, data) {
                var successFn, errorFn;
                var defered = $q.defer();
                var promise = defered.promise;
                var _param = angular.copy(data);//防止中文属性被编码
                var _config = angular.copy(config);//防止中文属性被编码
                $hyHttpLite.post(serviceName, config, data).success(function (data) {
                    var code = data.code;
                    if (code == -101) {//未登录
                        $loginService.removetUserInfo();
                        $loginService.show({
                            callback: function () {
                                $hyHttp.post(serviceName, _config, _param).success(function (data) {
                                    successFn(data);
                                }).error(function (data) {
                                    errorFn(data);
                                });
                            }
                        });
                        return;
                    }
                    defered.resolve(data);

                }).error(function (data) {
                    defered.reject(data);
                });

                promise.success = function (fn) {
                    successFn = fn;
                    promise.then(function (response) {
                        fn(response);
                    });
                    return promise;
                };
                promise.error = function (fn) {
                    errorFn = fn;
                    promise.then(null, function (response) {
                        fn(response);
                    });
                    return promise;
                };
                return promise;
            }

        };
        return $hyHttpbyToken;
    }]);

    function encode(url) {
        return encodeURI(url);
    }
})();

/**
 * Created by YangMing on 2016/3/9.
 * 创建一个用于hyMui框架的基础服务
 */


/**
 * @ngdoc factory
 * @name $hymui
 * @module haiyiMobile
 * @description   hyMui框架的基础服务
 * @returns
 * @usage
 * @author YangMing
 * @date 2016-03-09
 * @version V1.0
 *
 *
 * @attributes
 * _launcherNaviConfig  应用启动组件配置信息
 * _loginConfig 登录组件配置信息
 *
 *
 * @method
 * launcherNavi()   设置应用启动导航功能
 * launcherNaviShow()   主动显示启动导航界面
 * launcherNaviClose()  关闭启动导航界面
 * isFirstLauncher()    判断应用是否第一次启动
 * setFirstLauncherState()  设置应用启动状态： 1代表已运行，0代表从未运行
 * initLogin()          初始化登录服务
 * run()               服务启动入口*
 *
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    var moduleName = 'hyMobile';

    module.factory('$hymui', ['$hyUtil', '$loginService', '$appConfig','$cacheService', function ($hyUtil, $loginService, $appConfig,$cacheService) {
        var $hymui = createHymuiService();
        return $hymui;
        function createHymuiService() {

            var init_images = new Array();//默认的动态导航图片数组
            for (var i = 0; i < 3; i++) {
                var image = {};
                image.src = 'img/launcherNavi/launcher_' + (i + 1) + '.jpg';
                init_images.push(image);
            }
            return {
                /**
                 * 应用启动导航配置属性
                 * {
                 * isShow: true,    应用启动时显示导航页面
                 * images: images,  应用导航页面中展现的图片列表
                 * imageSize: 3     应用导航页面中显示的图片数量
                 * displayUrl: 'launcherNavi.html', 应用导航要显示页面的地址
                 * buttonText: '进入应用',  导航最后一页显示的按钮文本
                 * targetUrl: 'main.html',  导航后显示的目标页面URL
                 * closeButton: true,   每一个导航页是否有关闭按钮
                 * isPushNavi: false,     是否是主动显示导航界面
                 * }
                 */
                _launcherNaviConfig: {
                    isShow: false,    //应用启动时显示导航页面
                    images: init_images,  //应用导航页面中展现的图片列表
                    displayUrl: 'launcherNavi.html', //应用导航显示页面的地址
                    buttonText: '进入应用',  //导航最后一页显示的按钮文本
                    closeButton: true,   //每一个导航页是否有关闭按钮
                    isPushNavi: false,
                },
                /**
                 * 登录组件的配置属性
                 * {
                 * loginService: 'loginService',    应用登录调用的服务名
                 * loginMode: 2,  登录模式：1 用户名、密码、手机号、设备UUID登录，2 用户名、密码 登录，3 手机号、密码 登录，4 设备UUID、密码 登录
                 * loginImplFn: undefined ,   登录的具体实现函数
                 * launcherLogin: true,  默认应用启动显示登录界面，false则不进行登录验证
                 * loginPage:{          //登录页面的具体属性配置
                 *          loginPage: 'login.html', // 登录页面地址
                 *          showBackBtn: false, // 是否显示回退按钮
                 *          autoLogin: false,  // 是否自动登录
                 *          userNameText: '用户名', // 用户名提示
                 *          passWordText: '密码', // 密码提示
                 *          validateCodeText: '验证码', // 验证码提示
                 *          failLoginCount: 0,  // 登录失败次数，弹出登录验证码 （0表示登录必须显示验证码）
                 *          validateCodeImg: null, // 验证码图片，变量接受 字符串、函数 （null表示不显示验证码）
                 *          loginbgImg: 'img/login/login_bg.png', // 登录背景图片
                 *          loginIcon: 'img/login/login_logo.png' // 登录图标
                 *    }
                 * }
                 */
                _loginConfig: {},

                /**
                 * 设置应用启动动态导航的配置属性
                 * @param params
                 * {
                 * isShow: true,    应用启动时显示导航页面
                 * images: images,  应用导航页面中展现的图片列表
                 * imageSize: 3     应用导航页面中显示的图片数量
                 * displayUrl: 'launcherNavi.html', 应用导航显示页面的地址
                 * buttonText: '进入应用',  导航最后一页显示的按钮文本
                 * targetUrl: 'main.html',  导航后显示的目标页面URL
                 * closeButton: true,   每一个导航页是否有关闭按钮
                 * }
                 *
                 */
                launcherNavi: function (params) {
                    params = params || {};
                    //处理动态导航图片数据
                    var images = new Array();//默认的动态导航图片数组
                    var imageSize = 3;
                    if (params['imageSize']) {
                        imageSize = params['imageSize'];
                    }
                    if (isNaN(imageSize)) {
                        console.error('你传递的imageSize参数不是数字类型');
                        return;
                    }
                    for (var i = 0; i < imageSize; i++) {
                        var image = {};
                        image.src = 'img/launcherNavi/launcher_' + (i + 1) + '.jpg';
                        images.push(image);
                    }

                    var launcerhNaviConfig = {
                        isShow: true,    //应用启动时显示导航页面
                        images: images,  //应用导航页面中展现的图片列表
                        displayUrl: 'launcherNavi.html', //应用导航显示页面的地址
                        buttonText: '进入应用',  //导航最后一页显示的按钮文本
                        closeButton: true,   //每一个导航页是否有关闭按钮
                        isPushNavi: false,
                    };

                    //处理传递的配置参数属性

                    for (var def in launcerhNaviConfig) {
                        if (typeof params[def] === 'undefined') {
                            params[def] = launcerhNaviConfig[def];
                        }
                    }
                    this._launcherNaviConfig = params;


                },
                /**
                 * 显示动态导航组件功能
                 * @param isPush  是否是主动加载动态导航标识
                 */
                launcherNaviShow: function (isPush) {
                    //如果是主动加载导航页面则采用push方法而不是reset方法
                    if (isPush) {
                        this._launcherNaviConfig.isPushNavi = true;
                        $appConfig.mainNavi.pushPage(this._launcherNaviConfig.displayUrl, {animation: "fade"});//跳转到导航页面
                    } else {
                        $appConfig.mainNavi.resetToPage(this._launcherNaviConfig.displayUrl, {animation: "fade"});//跳转到导航页面
                        this.setFirstLauncherState(1);
                    }
                },
                /**
                 * 关闭动态导航组件功能
                 */
                launcherNaviClose: function () {
                    //如果是主动加载的动态到导航，则点击导航界面的按钮时直接popPage移除导航页面
                    if (this._launcherNaviConfig.isPushNavi) {
                        this._launcherNaviConfig.isPushNavi = false;
                        $appConfig.mainNavi.popPage();
                    } else {
                        if (this._loginConfig.launcherLogin) {  //判断应用是否需要进行登录验证
                            //调用登录验证组件服务功能
                            $loginService.login();
                        } else if (this._launcherNaviConfig.targetUrl) {
                            $appConfig.mainNavi.resetToPage(this._launcherNaviConfig.targetUrl, {animation: "fade"});//跳转到目标页面
                        } else {
                            $appConfig.mainNavi.resetToPage($appConfig.mainUrl, {animation: "fade"});//跳转到默认主页面
                        }
                    }
                },
                /**
                 * 判断当前应用是否是第一次运行
                 * @returns {boolean}
                 */
                isFirstLauncher: function () {
                    var state = localStorage.getItem('hyMui_' + $appConfig.moduleName + '_isFirstLauncher');
                    if (state == 1) {
                        return false;
                    } else {
                        return true;
                    }
                },
                /**
                 * 设置当前应用是否第一次运行的状态
                 * @param state  1代表已运行，0代表从未运行
                 */
                setFirstLauncherState: function (state) {
                    localStorage.setItem('hyMui_' + $appConfig.moduleName + '_isFirstLauncher', state);
                },
                /**
                 * 初始化登录功能，调用此方法则自动启动登录验证服务及功能
                 */
                initLogin: function (params) {
                    params = params || {};
                    //定义登录组件默认的配置参数属性
                    var loginDefaults = {
                        loginService: 'loginService',    //登录组件默认调用的后台登录服务名
                        loginMode: 2,        //默认登录方式为2，普通用户名密码登录
                        loginImplFn: undefined,   //默认采用框架自带的登录处理方式
                        launcherLogin: true,    //默认应用启动显示登录界面，false则不进行登录验证
                        loginPage: {},       //采用登录服务默认的登录页面配置信息
                    };
                    //处理传递的配置参数属性
                    for (var def in loginDefaults) {
                        if (typeof params[def] === 'undefined') {
                            params[def] = loginDefaults[def];
                        }
                    }
                    this._loginConfig = params;
                    //调用登录服务组件的初始化登录信息
                    if (this._loginConfig.targetUrl) {
                        //指定特殊的目标地址
                        $loginService.initLogin(params.loginService, params.loginPage, params.targetUrl, params.loginMode, params.loginImplFn);
                    } else {
                        //目标地址为默认的主界面地址
                        $loginService.initLogin(params.loginService, params.loginPage, $appConfig.mainUrl, params.loginMode, params.loginImplFn);
                    }
                },
                /**
                 * 是否登录
                 */
                isLogin: function () {
                    $loginService.isLogin();
                },

                showLogin: function (targetUrl) {
                    $loginService.show(targetUrl);
                },
                login: function (targetUrl) {
                    $loginService.login(targetUrl);
                },
                loginOff: function () {
                    $loginService.logout();
                },

                /**
                 * 启动服务中的对象功能
                 */
                run: function (debug) {
                    $cacheService.init();
                    if(typeof(emdp_debug) == "undefined"){
                        if (this._launcherNaviConfig.isShow) {
                            if (this.isFirstLauncher()) {
                                this.launcherNaviShow(false);
                            } else {
                                this.launcherNaviClose();//该方法内部对是否显示登录也进行了判断
                            }
                        } else if (this._loginConfig.launcherLogin) {
                            $loginService.login();
                        }
                        else {
                            $appConfig.mainNavi.resetToPage($appConfig.mainUrl, {animation: "fade"});//跳转到默认主页面
                        }
                    };
                    if(!!navigator.splashscreen){
                        navigator.splashscreen.hide();
                    }
                }

            };
        }
    }]);


})();
/**
 * Created by Administrator on 2016/5/13.
 */
/**
 * @ngdoc factory
 * @name $hyJPushService
 * @module haiyiMobile
 * @description 将jPush推送cordova插件封装为一个angularjs服务对象。
 * @returns
 * @usage
 * @author
 * @date 2016-05-13
 * @version V1.0
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', []);
    };

    module.factory('$hyJPushService',['$q',function ($q) {
        var registrationId = null;
        // 定义设置标签与别名promise对象
        var tagsWithAliasDeferred = $q.defer();
        tagsWithAliasDeferred.promise.success = function(fn) {
            tagsWithAliasDeferred.promise.then(function(data) {
                fn(data);
            });
            return tagsWithAliasDeferred.promise;
        };
        tagsWithAliasDeferred.promise.error = function(fn) {
            tagsWithAliasDeferred.promise.then(null, function(data) {
                fn(data);
            });
            return tagsWithAliasDeferred.promise;
        };
        document.addEventListener('jpush.setTagsWithAlias', function(event) {
            if (event.resultCode != 0) {
                tagsWithAliasDeferred.reject(event);
            }
            else {
                tagsWithAliasDeferred.resolve(event);
            }
        }, false);

        document.addEventListener('jpush.openNotification', function(notification) {
            // 定义设置接收打开通知的promise对象。
            var openNotificationDeferred = $q.defer();
            openNotificationDeferred.promise.then(function(notification) {
                if (hyJPushService.openNotification
                    && typeof(hyJPushService.openNotification) == 'function') {
                    hyJPushService.openNotification(notification);
                }
            });
            openNotificationDeferred.resolve(notification);
        }, false);

        document.addEventListener('jpush.receiveNotification', function(notification) {
            // 定义设置接收通知的promise对象
            var receiveNotificationDeferred = $q.defer();
            receiveNotificationDeferred.promise.then(function(notification) {
                if (hyJPushService.receiveNotification
                    && typeof(hyJPushService.receiveNotification) == 'function') {
                    hyJPushService.receiveNotification(notification);
                }
            });

            receiveNotificationDeferred.resolve(notification);
        }, false);

        document.addEventListener('jpush.receiveMessage', function(message) {
            // 定义设置接收消息的promise对象
            var receiveMessageDeferred = $q.defer();
            receiveMessageDeferred.promise.then(function(message) {
                if (hyJPushService.receiveMessage
                    && typeof(hyJPushService.receiveMessage) == 'function') {
                    hyJPushService.receiveMessage(message);
                }
            });
            receiveMessageDeferred.resolve(message);
        }, false);

        var hyJPushService = {};
        hyJPushService.openNotification = null; //openNotificationDeferred.promise;
        hyJPushService.receiveNotification = null; // receiveNotificationDeferred.promise;
        hyJPushService.receiveMessage = null; //receiveMessageDeferred.promise;

        hyJPushService.init = function() {
            window.plugins.jPushPlugin.init();
        };
        /**
        * 集成了 JPush SDK 的应用程序在第一次成功注册到 JPush 服务器时，JPush 服务器会给客户端返回一个唯一的该设备的标识 - RegistrationID
        */
        hyJPushService.getRegistrationId = function(reload) {
            var deferred = $q.defer();

            var promise = deferred.promise;
            promise.success = function(fn) {
                promise.then(function(data) {
                    fn(data);
                });
                return promise;
            };
            promise.error = function(fn) {
                promise.then(null, function(data) {
                    fn(data);
                });
                return promise;
            };

            if (reload) {
                registrationId = null;
            }

            if (registrationId && registrationId.length != 0) {
                deferred.resolve(registrationId);
                return ;
            }
            window.plugins.jPushPlugin.getRegistrationID(function(data) {
                if (data == undefined || data == null || data.length == 0) {
                    deferred.reject(data);
                }
                else {
                    registrationId = data;
                    deferred.resolve(data);
                }
            });
            return promise;
        };
        /**
        * 设置标签与别名，并且返回接收服务器响应的promise。
        */
        hyJPushService.setTagsWithAlias = function(tags, alias) {
            window.plugins.jPushPlugin.setTagsWithAlias(tags, alias);
            return tagsWithAliasDeferred.promise;
        };
        /**
         * 停止推送服务。
         */
        hyJPushService.stopPush = function() {
            window.plugins.jPushPlugin.stopPush();
        };
        /**
         * 恢复推送服务。
         */
        hyJPushService.resumePush = function() {
            window.plugins.jPushPlugin.resumePush();
        };
        /**
         * 判断推送服务是否停止。
         */
        hyJPushService.isPushStopped = function() {
            var deferred = $q.defer();

            var promise = deferred.promise;
            promise.success = function(fn) {
                promise.then(function(data) {
                    fn(data);
                });
                return promise;
            };
            promise.error = function(fn) {
                promise.then(null, function(data) {
                    fn(data);
                });
                return promise;
            };

            window.plugins.jPushPlugin.isPushStopped(function(data) {
                deferred.resolve(data);
            });
        };
        /**
         * 设置应用的角标值，只适用于iOS
         * @param badge
         */
        hyJPushService.setApplicationIconBadgeNumber = function(badge) {
            window.plugins.jPushPlugin.prototype.setApplicationIconBadgeNumber(badge)
        };
        /**
         * 获取应用解标值，只适用于iOS
         * @returns {*}
         */
        hyJPushService.getApplicationIconBadgeNumber = function () {
            var deferred = $q.defer();
            var promise = deferred.promise;
            promise.success = function(fn) {
                promise.then(function(data) {
                    fn(data);
                });

                return promise;
            };

            window.plugins.jPushPlugin.prototype.getApplicationIconBadgeNumber(function(data) {
                promise.resolve(data);
            });
            return promise;
        };

        return hyJPushService;
    }]);

})();
/**
 * Created by YangMing on 2017/1/11.
 * 创建一个用于hyMui框架的布局指令
 */




(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    var $hyUtil, $interpolate, $log;

    var SUFFIXES = /(-gt)?-(sm|md|lg|print)/g;
    var WHITESPACE = /\s+/g;

    var FLEX_OPTIONS = ['grow', 'initial', 'auto', 'none', 'noshrink', 'nogrow' ];
    var LAYOUT_OPTIONS = ['row', 'column'];
    var ALIGNMENT_MAIN_AXIS= [ "", "start", "center", "end", "stretch", "space-around", "space-between" ];
    var ALIGNMENT_CROSS_AXIS= [ "", "start", "center", "end", "stretch" ];

    var config = {
        /**
         * true表示启动属性转换样式指令
         * 开发者可以编写`<body hy-layout-css />` 进行快速使用
         * false表示将禁用布局指令和禁止布局的注入
         */
        enabled: true,

        /**
         * media的相关后缀列表
         *
         *   [
         *    { suffix: "sm", mediaQuery: "screen and (max-width: 599px)" },
         *    { suffix: "md", mediaQuery: "screen and (min-width: 600px) and (max-width: 959px)" }
         *   ]
         */
        breakpoints: []
    };
    /**
     * 处理当前webview是否支持flexbox，主要处理wrap换行的功能
     */
    var noFlexBox = false;
    if(!!window.navigator.userAgent.match(/android/i)){
        var index = window.navigator.userAgent.match(/android/i).index+8;
        var version = window.navigator.userAgent.substr(index,3).split(".");
        if(version[0]<4){
            noFlexBox = true;
        }else if(version[0]==4&&version[1]<4){
            noFlexBox = true;
        }
    }

    registerLayoutAPI( module);

    /**
     *   registerLayoutAPI()
     *
     *   使用hyLayout布局解决方案，处理属性选择和CSS样式的引用
     *
     *  ```html
     *  <div layout="column"> My Content </div>
     *  ```
     *
     *  ```css
     *  [layout] {
   *    box-sizing: border-box;
   *    display:flex;
   *  }
     *  [layout=column] {
   *    flex-direction : column
   *  }
     *  ```
     *
     *  根据属性进行样式选择可能会对部分浏览器的性能有一定影响，例如IE
     *
     *  该模块允许采用同样的属性赋值，转成成CLASS样式的注入。
     *
     * ```html
     *   <div layout="column" class="layout layout-column"> My Content </div>
     *```
     *
     *  ```css
     *  .layout {
   *    box-sizing: border-box;
   *    display:flex;
   *  }
     *  .layout-column {
   *    flex-direction : column
   *  }
     *  ```
     */
    function registerLayoutAPI(module){
        var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
        var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;

        // NOTE: these are also defined in constants::MEDIA_PRIORITY and constants::MEDIA
        var BREAKPOINTS     = [ "", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl", "print" ];
        var API_WITH_VALUES = [ "layout", "flex", "flex-order", "flex-offset", "layout-align" ];
        var API_NO_VALUES   = [ "show", "hide", "layout-padding", "layout-margin" ];


        // 注册布局API的指令
        angular.forEach(BREAKPOINTS, function(mqb) {

            // 构建带属性值的指令
            angular.forEach( API_WITH_VALUES, function(name){
                var fullName = mqb ? name + "-" + mqb : name;
                module.directive( directiveNormalize(fullName), attributeWithObserve(fullName));
            });

            // 构建不带属性值的指令
            angular.forEach( API_NO_VALUES, function(name){
                var fullName = mqb ? name + "-" + mqb : name;
                module.directive( directiveNormalize(fullName), attributeWithoutValue(fullName));
            });

        });

        // 布局的特殊服务
        module

            .provider('$$hyLayout'     , function() {
                // 内部使用的布局服务
                return {
                    $get : angular.noop,
                    validateAttributeValue : validateAttributeValue,
                    validateAttributeUsage : validateAttributeUsage,
                    /**
                     * 设置布局API是否有效
                     * 当disabled时，禁止所有布局的注入
                     */
                    disableLayouts  : function(isDisabled) {
                        config.enabled =  (isDisabled !== true);
                    }
                };
            })

            .directive('hyLayoutCss'        , disableLayoutDirective )
            .directive('ngCloak'            , buildCloakInterceptor('ng-cloak'))

            .directive('layoutWrap'   , layoutWrapWithoutValue('layout-wrap'))
            .directive('layoutNowrap' , attributeWithoutValue('layout-nowrap'))
            .directive('layoutNoWrap' , attributeWithoutValue('layout-no-wrap'))
            .directive('layoutFill'   , attributeWithoutValue('layout-fill'))

            // 配置布局API的参数
            .config( detectDisabledLayouts );

        /**
         * 将蛇形字符转换成驼峰
         * @param name Name to normalize
         */
        function directiveNormalize(name) {
            return name
                .replace(PREFIX_REGEXP, '')
                .replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
                    return offset ? letter.toUpperCase() : letter;
                });
        }

    }


    /**
     * 如果HTML页面上标签上有[hy-layouts-disabled] 属性，则取消布局API的生成
     *
     * Note: 这个属性必须放在HTML或BODY标签上
     */
    /**
     * @ngInject
     */
    function detectDisabledLayouts() {
        var isDisabled = !!document.querySelector('[hy-layouts-disabled]');
        config.enabled = !isDisabled;
    }

    /**
     * 特殊指令，该指令将禁止所有的布局属性转换成CLASS；该指令的意思是采用LINK引用CSS文件的方式实现Layout
     *
     * <link rel="stylesheet" href="hymui.min.css">
     * <link rel="stylesheet" href="hymui.layout.css">
     *
     * <body hy-layout-css>
     *  ...
     * </body>
     *
     * Note: 使用hy-layout-css指令需要开发者自己通过link标签引用layout样式文件
     *
     *       `hymui.layout.css`
     *
     * 另一种选择是使用LayoutProvider的配置来禁用布局属性
     *
     */
    function disableLayoutDirective() {

        config.enabled = false;

        return {
            restrict : 'A',
            priority : '900'
        };
    }

    /**
     * 在布局转换过程中隐藏，以免看到页面元素的闪烁
     */
    function buildCloakInterceptor(className) {
        return [ '$timeout', function($timeout){
            return {
                restrict : 'A',
                priority : -10,   // run after normal ng-cloak
                compile  : function( element ) {
                    if (!config.enabled) return angular.noop;

                    // Re-add the cloak
                    element.addClass(className);

                    return function( scope, element ) {

                        $timeout( function(){
                            element.removeClass(className);
                        }, 10, false);
                    };
                }
            };
        }];
    }


    // *********************************************************************************
    //
    //  创建注册布局属性指令,简单的进行CLASS样式的注入
    //
    // *********************************************************************************

    /**
     *
     * 创建一个指令注册函数，对其中的动态属性值进行监听。
     * @param {string} className 属性名; eg `layout-gt-md` with value ="row"
     */
    function attributeWithObserve(className) {

        return ['$hyUtil', '$interpolate', "$log", function(_$hyUtil_, _$interpolate_, _$log_) {
            $hyUtil = _$hyUtil_;
            $interpolate = _$interpolate_;
            $log = _$log_;

            return {
                restrict: 'A',
                compile: function(element, attr) {
                    var linkFn;
                    if (config.enabled) {

                        validateAttributeUsage(className, attr, element, $log);

                        validateAttributeValue( className,
                            getNormalizedAttrValue(className, attr, ""),
                            buildUpdateFn(element, className, attr)
                        );

                        linkFn = translateWithValueToCssClass;
                    }
                    return linkFn || angular.noop;
                }
            };
        }];

        /**
         * 添加CLASS样式，并移除属性
         */
        function translateWithValueToCssClass(scope, element, attrs) {
            var updateFn = updateClassWithValue(element, className, attrs);
            var unwatch = attrs.$observe(attrs.$normalize(className), updateFn);

            updateFn(getNormalizedAttrValue(className, attrs, ""));
            scope.$on("$destroy", function() { unwatch(); });
        }
    }

    /**
     * 构建不需要属性值的指令，同时会屏蔽填写的属性值
     */
    function attributeWithoutValue(className) {
        return ['$hyUtil', '$interpolate', "$log", function(_$hyUtil_, _$interpolate_, _$log_) {
            $hyUtil = _$hyUtil_;
            $interpolate = _$interpolate_;
            $log = _$log_;

            return {
                restrict: 'A',
                compile: function(element, attr) {
                    var linkFn;
                    if (config.enabled) {

                        validateAttributeValue( className,
                            getNormalizedAttrValue(className, attr, ""),
                            buildUpdateFn(element, className, attr)
                        );

                        translateToCssClass(null, element);

                        //用postLink来计算ng-transclude后的变换。
                        linkFn = translateToCssClass;
                    }

                    return linkFn || angular.noop;
                }
            };
        }];


        function translateToCssClass(scope, element) {
            element.addClass("hy-"+className);


        }
    }

    /**
     * 特殊处理layoutWrap的功能
     */
    function layoutWrapWithoutValue(className) {
        return ['$hyUtil', '$interpolate', "$log", function(_$hyUtil_, _$interpolate_, _$log_) {
            $hyUtil = _$hyUtil_;
            $interpolate = _$interpolate_;
            $log = _$log_;

            return {
                restrict: 'A',
                compile: function(element, attr) {
                    var linkFn;
                    if (config.enabled) {

                        validateAttributeValue( className,
                            getNormalizedAttrValue(className, attr, ""),
                            buildUpdateFn(element, className, attr)
                        );

                        translateToCssClass(null, element);

                        //用postLink来计算ng-transclude后的变换。
                        linkFn = translateToCssClass;
                    }

                    return linkFn || angular.noop;
                }
            };
        }];


        function translateToCssClass(scope, element) {
            if(noFlexBox){
                element.addClass("hy-noflex-"+className);
            }else{
                element.addClass("hy-"+className);
            }



        }
    }



    /**
     * 在链接阶段之后，不要删除不推荐使用的布局属性选择器。
     * 不要观察属性，因此将继续支持对布局选择器插入的数据绑定。
     * $observe() className和通过新class更新（删除最后一个）
     *
     * 例如 `layout =“{{layoutDemo.direction}}”`会更新...
     *
     * 注意：该值必须与CSS中指定的样式之一匹配。
     *
     * 例如`flex-gt-md =“{{size}}`其中`scope.size == 47`将不工作，因为只有0,5,10,15 ... 100,33,34,66,67 被定义。
     *
     */
    function updateClassWithValue(element, className) {
        var lastClass;

        return function updateClassFn(newValue) {
            var value = validateAttributeValue(className, newValue || "");
            if ( angular.isDefined(value) ) {
                if (lastClass) element.removeClass(lastClass);
                lastClass = !value ? "hy-"+className : "hy-"+className + "-" + value.replace(WHITESPACE, "-");
                element.addClass(lastClass);
            }
        };
    }


    /**
     * 集中处理关于FlexBox的问题，尤其是在IE下
     */
    function validateAttributeUsage(className, attr, element, $log){
        var message, usage, url;
        var nodeName = element[0].nodeName.toLowerCase();

        switch(className.replace(SUFFIXES,"")) {
            case "flex":
                if ((nodeName == "hy-button") || (nodeName == "fieldset")){
                    usage = "<" + nodeName + " " + className + "></" + nodeName + ">";
                    url = "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers";
                    message = "Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.";
                    // $log.warn( $hyUtil.supplant(message, [usage, url]) );
                }
        }

    }


    /**
     * 设置布局指令的属性值，并进行验证或通过默认的fallback值进行替换
     */
    function validateAttributeValue(className, value, updateFn) {
        var origValue = value;

        if (!needsInterpolation(value)) {
            switch (className.replace(SUFFIXES,"")) {
                case 'layout'        :
                    if ( !findIn(value, LAYOUT_OPTIONS) ) {
                        value = LAYOUT_OPTIONS[0];    // 'row';
                    }
                    break;

                case 'flex'          :
                    if (!findIn(value, FLEX_OPTIONS)) {
                        if (isNaN(value)) {
                            value = '';
                        }
                    }
                    break;

                case 'flex-offset' :
                case 'flex-order'    :
                    if (!value || isNaN(+value)) {
                        value = '0';
                    }
                    break;

                case 'layout-align'  :
                    // var axis = extractAlignAxis(value);
                    // value = $hyUtil.supplant("{main}-{cross}",axis);
                    break;

                case 'layout-padding' :
                case 'layout-margin'  :
                case 'layout-fill'    :
                case 'layout-wrap'    :
                case 'layout-nowrap'  :
                case 'layout-nowrap' :
                    value = '';
                    break;
            }

            if (value != origValue) {
                (updateFn || angular.noop)(value);
            }
        }

        return value;
    }

    /**
     * 通过fallback值替换当前属性值
     */
    function buildUpdateFn(element, className, attrs) {
        return function updateAttrValue(fallback) {
            if (!needsInterpolation(fallback)) {
                attrs[attrs.$normalize(className)] = fallback;
            }
        };
    }

    /**
     * 判断值是否有`{{`符号
     * e.g.  flex-gt-md="{{triggerPoint}}"
     */
    function needsInterpolation(value) {
        return (value || "").indexOf($interpolate.startSymbol()) > -1;
    }

    function getNormalizedAttrValue(className, attrs, defaultVal) {
        var normalizedAttr = attrs.$normalize(className);
        return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;
    }

    function findIn(item, list, replaceWith) {
        item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;

        var found = false;
        if (item) {
            list.forEach(function(it) {
                it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                found = found || (it === item);
            });
        }
        return found;
    }

    function extractAlignAxis(attrValue) {
        var axis = {
            main : "start",
            cross: "stretch"
        }, values;

        attrValue = (attrValue || "");

        if ( attrValue.indexOf("-") === 0 || attrValue.indexOf(" ") === 0) {
            // 缺少主轴值
            attrValue = "none" + attrValue;
        }

        values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-");
        if ( values.length && (values[0] === "space") ) {
            // 对于"space-around" 或 "space-between"的主轴值
            values = [ values[0]+"-"+values[1],values[2] ];
        }

        if ( values.length > 0 ) axis.main  = values[0] || axis.main;
        if ( values.length > 1 ) axis.cross = values[1] || axis.cross;

        if ( ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0 )   axis.main = "start";
        if ( ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0 ) axis.cross = "stretch";

        return axis;
    }


})();
/**
 * 自动登录服务
 * @author linzhiyong
 * @time 2016年3月12日09:13:29
 */


(function () {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('$loginService', ['$hyHttpLite', '$appConfig', '$hyUtil', '$rootScope',
        function ($hyHttpLite, $appConfig, $hyUtil, $rootScope) {

            var $loginService = {

                /** 定义登录方式 */
                LOGIN_WAY_ENUM: {
                    ALL: 1,           // 用户名、密码、手机号、设备UUID
                    NORMAL: 2,        // 用户名、密码
                    PHONE_NUMBER: 3,  // 手机号、密码
                    DEVICE_UUID: 4    // 设备UUID、密码
                },
                /** 登录服务地址 */
                _loginServiceName: "login",
                /** 默认目标界面 */
                _defaulttargetPage: 'main.html',
                /** 指定目标页面 */
                _targetPage: undefined,
                /** 登录界面 */
                loginPage: {
                    loginPage: 'login.html', // 登录页面
                    animation: 'slide',
                    showBackBtn: false, // 是否显示回退按钮
                    autoLogin: false,  // 是否自动登录
                    userNameText: '用户名', // 用户名提示
                    passWordText: '密码', // 密码提示
                    validateCodeText: '验证码', // 验证码提示
                    failLoginCount: 0,  // 登录失败次数，弹出登录验证码 （0表示登录必须显示验证码）
                    validateCodeImg: null, // 验证码图片，变量接受 字符串、函数 （null表示不显示验证码）
                    loginbgImg: 'img/login/login_bg.png', // 登录背景图片
                    loginIcon: 'img/login/login_logo.png' // 登录图标
                },
                /** 登录方式 */
                loginWay: null,
                /** 标志是否已经初始化登录服务 */
                showLogin: false,
                /** 是否登录标志 */
                _isLogin: false,
                /** 登录成功返回的用户数据 */
                _userInfo: null,
                /** 自动登录失败code */
                autoLoginFailCode: null,

                _target: undefined,

                /**
                 * config
                 */
                _initParam: function (loginPage) {
                    loginPage = loginPage || {};
                    for (var def in this.loginPage) {
                        if (typeof loginPage[def] === 'undefined') {
                            loginPage[def] = this.loginPage[def];
                        }
                    }
                    this.loginPage = loginPage;
                },

                /**
                 * 初始化登录服务
                 * @param loginServiceName  {String}    登录服务名称
                 * @param loginPage         {Object}    登录页面参数：loginPage = {}
                 * @param targetPage        {String}    目标页面
                 * @param loginWay          {Int}       登录方式，LOGIN_WAY_ENUM：1,2,3,4
                 * @param loginImplFn       {Function}  登录业务回调方法，默认实现普通登录，可自定义
                 */
                initLogin: function (loginServiceName, loginPage, targetPage, loginWay, loginImplFn) {
                    this._loginServiceName = loginServiceName;
                    this._initParam(loginPage);
                    this._defaulttargetPage = targetPage || this._defaulttargetPage;
                    this.loginWay = loginWay || this.loginWay;
                    this._loginImplFn = loginImplFn || this._loginImplFn;
                    this.showLogin = true;
                },

                /**
                 * 判断自动登录方法,如果是自动登录，直接从缓存中获取上次用户登录数据，调用author()登录，否则弹出登录界面
                 */
                login: function (target) {
                    this._target = target;
                    if (this.getAutoFlag()) {
                        //var user = this.getUserInfo();
                        //var self = this;
                        //this.author(user, this.getAutoFlag(),
                        //    function () {
                        //        self._isLogin = true;
                        //        self.hide();
                        //        self.autoLoginFailCode = null;
                        //    }, function (code) {
                        //        self._isLogin = false;
                        //        self._saveAutoFlag(true);
                        //        self.removetUserInfo();
                        //        self.autoLoginFailCode = code;
                        //        self.show(target);
                        //    });
                        this._isLogin = true;
                        this.hide();
                    } else {
                        this.show(target);
                    }
                },

                /**
                 * 登录方法
                 * @param args       {Object}    登录参数：args = {}
                 * @param autoLogin  {BOOL}      自动登录标志
                 * @param success    {Function}  成功回调
                 * @param error      {Function}  失败回调
                 */
                author: function (args, autoLogin, success, error, config) {
                    this._loginImplFn(this._loginServiceName, autoLogin, args, success, error, config);
                },

                /**
                 * 登录业务，默认实现普通登录，可自定义登录业务
                 * @param loginServiceName   {String}    登录服务名称
                 * @param autoLogin          {BOOL}      自动登录标志
                 * @param args               {Object}    登录参数：args = {}
                 * @param success            {Function}  成功回调
                 * @param error              {Function}  失败回调
                 * @param config             {Object}    请求的配置信息包括头部
                 * @private
                 */
                _loginImplFn: function (loginServiceName, autoLogin, args, success, error, config) {
                    var self = this;
                    if (!loginServiceName) {
                        errorFn(-2, error); // 服务名称为空，返回code值为-2
                        return;
                    }
                    config = config || {responseType: 'json', cache: false};
                    $hyHttpLite.post(loginServiceName, config, args).success(function (data, status, headers, config) {
                        // 登录成功，返回code值为0，如果是自动登录，保存用户信息
                        if (data.code === 0 && data.content) {
                            self._userInfo = data.content;
                            self._isLogin = true;
                            if (autoLogin) {
                                self._saveAutoFlag(true);
                            }
                            self.saveUserInfo(self._userInfo);
                            //保存密码的token
                            self.saveToken(self.passwordSignature);
                            if (success instanceof Function) {
                                success(data, self._target); // 通知回调
                            } else {
                                console.log('$loginService: login success');
                            }
                            self.autoLoginFailCode = null;
                        } else if (data.code === -102) {
                            //登录验证成功，但是账号未注册，需要跳转到注册页面
                            if (success instanceof Function) {
                                success(data, self._target); // 通知回调
                            } else {
                                console.log('$loginService: login success');
                            }
                        } else {
                            //if (!data.msg) {
                            //    errorFn(2, error,data); // 登录服务被拒绝，返回code值为2
                            //} else {
                            errorFn(data.code, error, data); // 用户名密码不正确，返回code值为1
                            //}
                        }

                    }).error(function (data, status, headers, config) {
                        errorFn(-1, error, data); // 服务连接失败，返回code值为-1
                    });

                    // 登录失败，如果是自动登录，修改自动登录状态
                    function errorFn(code, error, data) {
                        self._isLogin = false;
                        if (error instanceof Function) {
                            error(code, data); // 通知回调
                        } else {
                            console.error('$loginService: login error,code = ' + code);
                        }
                    }

                },

                /**
                 * 退出登录
                 */
                logout: function () {
                    // 移除缓存中用户登录数据
                    this.removeUserInfo();
                    // 清除自动登录标识
                    this._saveAutoFlag(false);
                    this.removeToken();
                    this.removeAccount();
                },

                /**
                 * 是否已经登录
                 */
                isLogin: function () {
                    return this._isLogin;
                },

                /**
                 * 显示登录界面
                 */
                show: function (target) {
                    if (this.showLogin) {
                        if (target !== undefined) {
                            this._target = target;
                            this._target['showMode'] = this._target['showMode'] || 'push';
                            this._target['hideMode'] = this._target['hideMode'] || 'push';
                            this._target['options'] = this._target['options'] || {};
                            this._target['cancelIfRunning'] =  !!this._target['cancelIfRunning'];
                            if ($appConfig.mainNavi) {
                                if (this._target.showMode == 'push') {
                                    $appConfig.mainNavi.pushPage(this.loginPage.loginPage, {
                                        animation: this.loginPage.animation,
                                        cancelIfRunning: this._target['cancelIfRunning']
                                    });
                                } else if (this._target.showMode == 'replace') {
                                    $appConfig.mainNavi.replacePage(this.loginPage.loginPage, {
                                        animation: this.loginPage.animation,
                                        cancelIfRunning: this._target['cancelIfRunning']
                                    });
                                } else {
                                    console.error('the target mode is  invalid');
                                }
                            } else {
                                console.error('$loginUIService:mainNavi is null, please use init() to initialize this service');
                            }
                        } else {
                            this._target = undefined;
                            if ($appConfig.mainNavi) {
                                $appConfig.mainNavi.replacePage(this.loginPage.loginPage, {
                                    animation: 'fade',
                                    cancelIfRunning: true
                                });
                            } else {
                                console.error('$loginUIService:mainNavi is null, please use init() to initialize this service');
                            }
                        }
                    } else {
                        console.error("没有进行登录服务初始化操作，不能调用登录组件");
                    }

                },

                /**
                 * 关闭登录界面，并跳转到指定界面
                 */
                hide: function () {
                    if ($appConfig.mainNavi) {
                        if (this._target === undefined) {
                            $appConfig.mainNavi.replacePage(this._defaulttargetPage, {animation: "fade"});
                        } else {
                            if ($appConfig.mainNavi.getCurrentPage().name == this.loginPage.loginPage && this._target.hideMode == 'push') {
                                $appConfig.mainNavi.popPage();
                            }
                            if ($appConfig.mainNavi.getCurrentPage().name == this.loginPage.loginPage && this._target.hideMode == 'replace' && this._target.url == undefined) {
                                $appConfig.mainNavi.popPage();
                            }
                            if (this._target.url) {
                                if (this._target.hideMode == 'push') {
                                    $appConfig.mainNavi.pushPage(this._target.url, this._target.options);
                                } else if (this._target.hideMode == 'replace') {
                                    $appConfig.mainNavi.replacePage(this._target.url, this._target.options);
                                } else {
                                    console.error('the target mode is  invalid');
                                }
                            }
                            if (this._target.tabbar) {
                                this._target.tabitem.setActive();
                                this._target.tabbar.loadPage(this._target.tabitem.page);
                                console.log(this._target);
                            }
                            if (this._target.callback instanceof Function) {
                                this._target.callback();
                            }
                        }

                    } else {
                        console.error('$loginUIService:mainNavi is null, please use init() to initialize this service');
                    }
                },

                /**
                 * 获取登录成功后返回的用户数据
                 */
                getLoginUserInfo: function () {
                    return this._userInfo;
                },

                /**
                 * 保存是否自动登录
                 * @private
                 */
                _saveAutoFlag: function (autoLogin) {
                    if (typeof autoLogin === 'boolean') {
                        localStorage.setItem($appConfig.appId + '_autoFlag', autoLogin);
                    } else {
                        localStorage.setItem($appConfig.appId + '_autoFlag', false);
                    }
                },

                /**
                 * 返回是否自动登录
                 * @returns {boolean}
                 */
                getAutoFlag: function () {
                    return JSON.parse(localStorage.getItem($appConfig.appId + '_autoFlag'));
                },

                /**
                 * 保存自动登录用户信息
                 */
                saveUserInfo: function (user) {
                    $appConfig.saveUserInfo(user);
                    $rootScope.$broadcast("REFRASH_USERINFO", user);
                },

                /**
                 * 获取自动登录用户信息
                 */
                getUserInfo: function () {
                    return $appConfig.getUserInfo();
                },
                /**
                 * 保存自动登录用户信息
                 */
                saveToken: function (token) {
                    $appConfig.saveToken(token);
                },

                /**
                 * 获取自动登录用户信息
                 */
                getToken: function () {
                    return $appConfig.getToken();
                },
                /**
                 * 保存登录用户账号
                 */
                saveAccount: function (account) {
                    $appConfig.saveAccount(account);
                },

                /**
                 * 获取登录用户账号
                 */
                getAccount: function () {
                    return $appConfig.getAccount();
                },

                /**
                 * 删除自动登录用户信息
                 */
                removeUserInfo: function () {
                    $appConfig.removeUserInfo();
                },
                /**
                 * 删除自动登录用户信息
                 */
                removeToken: function () {
                    $appConfig.removeToken();
                },
                /**
                 * 删除自动登录用户信息
                 */
                removeAccount: function () {
                    $appConfig.removeAccount();
                },

                /**
                 * 保存登录成功的用户到登录历史
                 */
                saveUserToLoginHistory: function (userName) {
                    if (!userName) {
                        return;
                    }
                    var loginHistory = this.getLoginHistory() || [];
                    var flag = false; // 标志是否存在相同用户名
                    if (loginHistory.length > 0) {
                        for (var i = 0; i < loginHistory.length; i++) {
                            if (loginHistory[i] === userName) {
                                return;
                            } else {
                                flag = true;
                            }
                        }
                    } else {
                        loginHistory.push(userName);
                    }
                    if (flag) {
                        loginHistory.push(userName);
                    }
                    localStorage.setItem('loginHistory', JSON.stringify(loginHistory));
                },

                /**
                 * 获取登录用户录历史列表
                 */
                getLoginHistory: function () {
                    return JSON.parse(localStorage.getItem('loginHistory'));
                },

                /**
                 * 删除单个用户登录历史
                 */
                removeUserFromLoginHistory: function (userName) {
                    var loginHistory = this.getLoginHistory() || [];
                    for (var i = 0; i < loginHistory.length; i++) {
                        if (loginHistory[i] === userName) {
                            loginHistory.splice(i, 1);
                            localStorage.setItem('loginHistory', JSON.stringify(loginHistory));
                            return;
                        }
                    }
                },

                /**
                 * 清空用户录历史列表
                 */
                cleanLoginHistory: function () {
                    localStorage.removeItem('loginHistory');
                },
                /**
                 * 登陆签名
                 * @param username 用户名
                 * @param key 秘钥
                 * @param timeStr 时间戳
                 * @returns {*|string}
                 */
                getLoginSignature: function (username, password, timeStr) {
                    return $hyUtil.createLoginSignature(username, password, timeStr);
                },
                /**
                 * 生成登陆的参数对象
                 * @param account   账号
                 * @param password  密码
                 * @param type      登录类型
                 */
                createLoginArgs: function (account, password, type) {
                    type = type || 0;
                    var timeStr = new Date().getTime();
                    var signature = this.getLoginSignature(account, password, timeStr);
                    this.passwordSignature = this.createPasswordSignature(password, timeStr);
                    this.saveAccount(account);
                    return {
                        account: account,
                        timeStr: timeStr,
                        signature: signature,
                        loginType: type
                    };
                },
                /**
                 * 获取每次请求验证的token参数对象
                 */
                getLoginArgs: function (type) {
                    type = type || 0;
                    var timeStr = new Date().getTime();
                    var account = this.getAccount();
                    var token = this.getToken();
                    var signature = this.getLoginSignature(account, token, timeStr);
                    return {
                        account: account,
                        timeStr: timeStr,
                        signature: signature,
                        loginType: type
                    };
                },
                /**
                 * 生成密码秘钥
                 * @param password
                 * @param timeStr
                 * @returns {*}
                 */
                createPasswordSignature: function (password, timeStr) {
                    var key = $hyUtil.getMD5Encrypt(password);
                    var array = [key, timeStr];
                    array.sort();
                    var arrayStr = array[0] + array[1];
                    return $hyUtil.getMD5Encrypt(arrayStr);
                }

            };

            return $loginService;
        }]);

})();
/**
 * Created by YangMing on 2017/1/11.
 * 创建一个用于hyMui框架的波纹服务
 */




(function () {
    'use strict';
    InkRippleCtrl.$inject = ["$scope", "$element", "rippleOptions", "$window", "$timeout", "$hyUtil", "$hyColorUtil"];
    HyButtonInkRipple.$inject = ["$hyInkRipple"];
    HyCheckboxInkRipple.$inject = ["$hyInkRipple"];
    InkRippleDirective.$inject = ["$hyButtonInkRipple", "$hyCheckboxInkRipple"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    var DURATION = 450;

    module.provider('$hyInkRipple', InkRippleProvider)
        .factory('$hyButtonInkRipple', HyButtonInkRipple)
        .factory('$hyCheckboxInkRipple', HyCheckboxInkRipple)
        .directive('hyInkRipple', InkRippleDirective);

    function InkRippleDirective($hyButtonInkRipple, $hyCheckboxInkRipple) {
        return {
            controller: angular.noop,
            link: function (scope, element, attr) {
                if(element[0].nodeName != 'HY-LIST-ITEM') {
                    attr.hasOwnProperty('hyInkRippleCheckbox')
                        ? $hyCheckboxInkRipple.attach(scope, element)
                        : $hyButtonInkRipple.attach(scope, element);
                }
            }
        };
    }

    function HyCheckboxInkRipple($hyInkRipple) {
        return {
            attach: attach
        };

        function attach(scope, element, options) {
            return $hyInkRipple.attach(scope, element, angular.extend({
                center: true,
                dimBackground: false,
                fitRipple: true
            }, options));
        }
    }

    function HyButtonInkRipple($hyInkRipple) {
        return {
            attach: function attachRipple(scope, element, options) {
                options = angular.extend(optionsForElement(element), options);

                return $hyInkRipple.attach(scope, element, options);
            }
        };

        function optionsForElement(element) {
            if (element.hasClass('hy-icon-button')) {
                return {
                    isMenuItem: element.hasClass('hy-menu-item'),
                    fitRipple: true,
                    center: true,
                    dimBackground: true,
                };
            } else {
                return {
                    isMenuItem: element.hasClass('hy-menu-item'),
                    dimBackground: true
                }
            }
        }
    }

    function InkRippleProvider() {
        var isDisabledGlobally = false;

        return {
            disableInkRipple: disableInkRipple,
            $get: ["$injector", function ($injector) {
                return {attach: attach};

                /**
                 * @ngdoc method
                 * @name $hyInkRipple#attach
                 *
                 * @description
                 * 根据提供的scope，element和options进行波纹控制器的绑定
                 *
                 * @param {object=} scope 当前content的scope作用域
                 * @param {object=} element 需要应用波纹效果的element元素
                 * @param {object=} options (可选的) 配置参数，覆盖波纹的默认配置效果
                 * * `center` -  波纹是否从元素的中间位置开始 默认是false，icon-button默认是true
                 * * `dimBackground` - 波纹背景是否根据波纹颜色变暗 默认是true
                 * * `colorElement` - 指定波纹的颜色，默认是css的`color`属性值
                 * * `fitRipple` - 波纹是否填满整个元素
                 */
                function attach(scope, element, options) {
                    // if (isDisabledGlobally || !element.controller('hyInkRipple')) return angular.noop;
                    if (isDisabledGlobally) return angular.noop;
                    return $injector.instantiate(InkRippleCtrl, {
                        $scope: scope,
                        $element: element,
                        rippleOptions: options
                    });
                }
            }]
        };

        /**
         * @ngdoc method
         * @name $hyInkRipple#disableInkRipple
         *
         * @description
         * 配置方法，当调用时设置全局波纹无效
         */
        function disableInkRipple() {
            isDisabledGlobally = true;
        }
    }

    /**
     * 为了应用波纹效果，提供给波纹服务的控制器
     * @ngInject
     */
    function InkRippleCtrl($scope, $element, rippleOptions, $window, $timeout, $hyUtil, $hyColorUtil) {
        this.$window = $window;
        this.$timeout = $timeout;
        this.$hyUtil = $hyUtil;
        this.$hyColorUtil = $hyColorUtil;
        this.$scope = $scope;
        this.$element = $element;
        this.options = rippleOptions;
        this.mousedown = false;
        this.ripples = [];
        this.timeout = null; // 存储最近的波纹超时引用
        this.lastRipple = null;

        $hyUtil.valueOnUse(this, 'container', this.createContainer);

        this.$element.addClass('hy-ink-ripple');

        this.bindEvents();
    }


    /**
     * 当用户从元素上移开（通过mouseup或mouseleave事件）时，可以删除或解锁任何剩余的波纹，
     */
    function autoCleanup(self, cleanupFn) {

        if (self.mousedown || self.lastRipple) {
            self.mousedown = false;
            self.$hyUtil.nextTick(angular.bind(self, cleanupFn), false);
        }

    }


    /**
     * 返回波纹的颜色（基于CSS或hex编码）
     * @returns {string}
     */
    InkRippleCtrl.prototype.color = function (value) {
        var self = this;

        // 如果value有值，则将其应用于背景和波纹的颜色
        if (angular.isDefined(value)) {
            self._color = self._parseColor(value);
        }

        return self._color || self._parseColor(self.inkRipple()) || self._parseColor(getElementColor());

        /**
         * 查找元素的颜色并返回其文本以用作默认波纹的颜色
         * @returns {string}
         */
        function getElementColor() {
            var items = self.options && self.options.colorElement ? self.options.colorElement : [];
            var elem = items.length ? items[0] : self.$element[0];

            return elem ? self.$window.getComputedStyle(elem).color : 'rgb(0,0,0)';
        }
    };

    /**
     * 根据当前inkRipple值或元素的颜色样式更新波纹的颜色
     */
    InkRippleCtrl.prototype.calculateColor = function () {
        return this.color();
    };


    /**
     * 转换color为RGBA格式
     * @param color {string}
     * @param [multiplier] {int}
     * @returns {string}
     */

    InkRippleCtrl.prototype._parseColor = function parseColor(color, multiplier) {
        multiplier = multiplier || 1;
        var colorUtil = this.$hyColorUtil;

        if (!color) return;
        if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, (0.1 * multiplier).toString() + ')');
        if (color.indexOf('rgb') === 0) return colorUtil.rgbToRgba(color);
        if (color.indexOf('#') === 0) return colorUtil.hexToRgba(color);

    };

    /**
     * 将事件绑定到根元素
     */
    InkRippleCtrl.prototype.bindEvents = function () {
        this.$element.on('mousedown touchstart', angular.bind(this, this.handleMousedown));
        this.$element.on('mouseup touchend', angular.bind(this, this.handleMouseup));
        this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));
        this.$element.on('touchmove', angular.bind(this, this.handleTouchmove));
        // this.$element.on(this.$hyUtil.getTouchEvent().start, angular.bind(this, this.handleMousedown));
        // this.$element.on(this.$hyUtil.getTouchEvent().end, angular.bind(this, this.handleMouseup));
        // this.$element.on(this.$hyUtil.getTouchEvent().move, angular.bind(this, this.handleTouchmove));
    };

    /**
     * 在根元素的每个mousedown和touchstart事件上创建一个新的波纹
     * @param event {MouseEvent}
     */
    InkRippleCtrl.prototype.handleMousedown = function (event) {
        if (this.mousedown) {
            // this.handleMouseup();
            return;
        }

        // 当jQuery加载时，我们必须得到原始事件
        if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;
        this.mousedown = true;
        if (this.options.center) {
            this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientHeight') / 2);
        } else {

            // 如果目标是波纹元素的子层，我们需要计算相对坐标
            if (event.srcElement !== this.$element[0]) {
                var layerRect = this.$element[0].getBoundingClientRect();
                var layerX = event.clientX - layerRect.left;
                var layerY = event.clientY - layerRect.top;

                this.createRipple(layerX, layerY);
            } else {
                this.createRipple(event.offsetX, event.offsetY);
            }
        }
    };

    /**
     * 当用户将元素（通过mouseup，touchend或mouseleave事件）移开时，可以删除或解锁任何剩余的波纹，
     */
    InkRippleCtrl.prototype.handleMouseup = function () {
        autoCleanup(this, this.clearRipples);
    };

    /**
     * 当用户将元素（通过touchmove）移开时，可以删除或解锁任何剩余的波纹
     */
    InkRippleCtrl.prototype.handleTouchmove = function () {
        autoCleanup(this, this.deleteRipples);
    };

    /**
     * 循环所有波纹，并尝试删除它们。
     */
    InkRippleCtrl.prototype.deleteRipples = function () {
        for (var i = 0; i < this.ripples.length; i++) {
            this.ripples[i].remove();
        }
    };

    /**
     * 循环通过所有的波纹对象，并试图移除它们。 根据`fadeInComplete`中的逻辑，一些删除将被推迟。
     */
    InkRippleCtrl.prototype.clearRipples = function () {
        for (var i = 0; i < this.ripples.length; i++) {
            this.fadeInComplete(this.ripples[i]);
        }
    };

    /**
     * 创建一个波纹容器元素
     * @returns {*}
     */
    InkRippleCtrl.prototype.createContainer = function () {
        var container = angular.element('<div class="hy-ripple-container"></div>');
        this.$element.append(container);
        return container;
    };

    InkRippleCtrl.prototype.clearTimeout = function () {
        if (this.timeout) {
            this.$timeout.cancel(this.timeout);
            this.timeout = null;
        }
    };

    InkRippleCtrl.prototype.isRippleAllowed = function () {
        var element = this.$element[0];
        do {
            if (!element.tagName || element.tagName === 'BODY') break;

            if (element && angular.isFunction(element.hasAttribute)) {
                if (element.hasAttribute('disabled')) return false;
                if (this.inkRipple() === 'false' || this.inkRipple() === '0') return false;
            }

        } while (element = element.parentNode);
        return true;
    };

    /**
     * `hy-ink-ripple`属性可以是静态或内插的颜色值或布尔值（用于禁用波纹）
     */
    InkRippleCtrl.prototype.inkRipple = function () {
        return this.$element.attr('hy-ink-ripple');
    };

    /**
     * 创建一个新的波纹，并将其添加到容器中。 通过`this.ripples`可以获取波纹对象。
     * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.
     * @param left
     * @param top
     */
    InkRippleCtrl.prototype.createRipple = function (left, top) {
        if (!this.isRippleAllowed()) return;

        var ctrl = this;
        var colorUtil = ctrl.$hyColorUtil;
        var ripple = angular.element('<div class="hy-ripple"></div>');
        var width = this.$element.prop('clientWidth');
        var height = this.$element.prop('clientHeight');
        var x = Math.max(Math.abs(width - left), left) * 2;
        var y = Math.max(Math.abs(height - top), top) * 2;
        var size = getSize(this.options.fitRipple, x, y);
        var color = this.calculateColor();

        ripple.css({
            left: left + 'px',
            top: top + 'px',
            background: 'black',
            width: size + 'px',
            height: size + 'px',
            backgroundColor: colorUtil.rgbaToRgb(color),
            borderColor: colorUtil.rgbaToRgb(color)
        });
        this.lastRipple = ripple;

        // 我们只需要一次只运行一个
        this.clearTimeout();
        this.timeout = this.$timeout(function () {
            ctrl.clearTimeout();
            if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);
        }, DURATION * 0.35, false);

        if (this.options.dimBackground) this.container.css({backgroundColor: color});
        this.container.append(ripple);
        this.ripples.push(ripple);
        ripple.addClass('hy-ripple-placed');

        this.$hyUtil.nextTick(function () {

            ripple.addClass('hy-ripple-scaled hy-ripple-active');
            ctrl.$timeout(function () {
                ctrl.clearRipples();
            }, DURATION, false);

        }, false);

        function getSize(fit, x, y) {
            return fit
                ? Math.max(x, y)
                : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        }
    };


    /**
     * 波纹进入完成后，启动淡出动画或者将元素的鼠标移除, either kicks off the fade-out animation or queues the element for removal on mouseup
     * @param ripple
     */
    InkRippleCtrl.prototype.fadeInComplete = function (ripple) {
        if (this.lastRipple === ripple) {
            if (!this.timeout && !this.mousedown) {
                this.removeRipple(ripple);
            }
        } else {
            this.removeRipple(ripple);
        }
    };

    /**
     * 启动动画移除波纹
     * @param ripple {Element}
     */
    InkRippleCtrl.prototype.removeRipple = function (ripple) {
        var ctrl = this;
        var index = this.ripples.indexOf(ripple);
        if (index < 0) return;
        this.ripples.splice(this.ripples.indexOf(ripple), 1);
        ripple.removeClass('hy-ripple-active');
        ripple.addClass('hy-ripple-remove');
        if (this.ripples.length === 0) this.container.css({backgroundColor: ''});
        // 为了允许动画完成 使用2秒超时的等待
        // 实际上不需要关心动画需要多长时间
        this.$timeout(function () {
            ctrl.fadeOutComplete(ripple);
        }, DURATION, false);
    };

    /**
     * 从DOM中删除提供的纹波
     * @param ripple
     */
    InkRippleCtrl.prototype.fadeOutComplete = function (ripple) {
        ripple.remove();
        this.lastRipple = null;
    };

    /**
     * 创建一个空的指令，这用于跟踪其子元素可能具有基于它们功能的标志指令。
     *
     * Example: `hy-ink` 将可能被所有的指令使用。
     */
    function attrNoDirective() {
        return {controller: angular.noop};
    }


})();
/**
 * Created by Administrator on 2016/2/23.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('hyAccordion', ['$onsen','AccordionView', function ($onsen,AccordionView) {
        return {
            restrict: 'E',
            template: getTemplate,
            transclude:true,
            scope: {
                title: '=hyaTitle', //折叠标题
                isOpen: '@hyaOpen', //是否开启，默认是false，折叠状态
                closeIcon: '@hyaCloseIcon',
                openIcon: '@hyaOpenIcon',
                iconLeft:'@hyaIconLeft',
            },
            compile: function (element, attr) {

                return function (scope, element, attrs) {
                    var accordion = new AccordionView(scope, element, attrs);
                    $onsen.declareVarAttribute(attrs,accordion);

                    element.data('hy-accordion', accordion);

                    scope.$on('destory', function () {
                        accordion._events = undefined;
                        $onsen.removeModifierMethods(accordion);
                        element.data('hy-accordion', undefined);
                        element = null;
                    });
                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attrs) {



            return '<div class="accordion-item"><div class="accordion-item-toggle accordion-line" ng-click="accordionClick()" >' +
                '<ons-icon icon="{{iconsName}}" class="accordion-icons"></ons-icon><span class="{{spanClass}}">{{title}}</span></div>' +
                '<div class="accordion-item-content" ng-transclude>' +
                '</div>';

        }
    }]);

    module.factory('AccordionView', ['$onsen', '$q', function ($onsen, $q){
        var AccordionView = Class.extend({
            init:function(scope,element,attrs){
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._pageContent = this._findPageContent();
                if(this._scope.isOpen){
                    if(this._scope.isOpen==='true'){
                        this._scope.accordionState = true;
                    }else{
                        this._scope.accordionState = false;
                    }
                }else{
                    this._scope.accordionState = false;
                }

                this._scope.spanClass = "";

                this._closeIconName = this._scope.closeIcon?this._scope.closeIcon:"fa-angle-right";
                this._openIconName = this._scope.openIcon?this._scope.openIcon:"fa-angle-down";

                this._scope.iconsName =this._closeIconName;

                this._content = angular.element(this._element[0].querySelector('.accordion-item-content'));
                this._toggle = angular.element(this._element[0].querySelector('.accordion-item-toggle'));
                this._icon = angular.element(this._element[0].querySelector('.accordion-icons'));
                this._content[0].setAttribute('style','height:0');

                if(this._scope.iconLeft && this._scope.iconLeft==='true'){
                    this._icon.addClass('accordion-left-icons');
                    this._scope.spanClass = 'accordion-span';
                }

                this._scope.accordionClick = angular.bind(this,this.accordionClick);
                this.accordionClick();

            },
            accordionClick:function(e){
                var self = this;
                if(this._scope.accordionState){
                    this._scope.accordionState = false;
                    this._toggle.removeClass('accordion-line');
                    this._content.addClass('accordion-line');
                    var height = this._content[0].scrollHeight + 2;
                    this._scope.iconsName = this._openIconName;
                    animit(this._content[0])
                        .queue({
                            height:height+'px'
                        },{
                            duration: 0.3
                        })
                        .play(function(){
                            var top = self._content[0].offsetTop + self._content[0].scrollHeight+10 - self._pageContent.clientHeight;
                            if(self._pageContent.scrollTop < top ){
                                self._pageContent.scrollTop = top;
                            }
                        });

                }else{
                    this._scope.accordionState = true;
                    animit(this._content[0])
                        .queue({
                            height:0
                        },{
                            duration: 0.3
                        })
                        .play(function(){
                            self._toggle.addClass('accordion-line');
                        });
                    this._content.removeClass('accordion-line');
                    this._scope.iconsName =this._closeIconName;

                }
            },
            _findPageContent: function() {
                var e = this._element[0];

                while(e.parentNode) {
                    e = e.parentNode;

                    if (e.className) {
                        if (e.className.split(/\s+/).indexOf('page__content') >= 0) {
                            break;
                        }
                    }
                }

                return e;
            },
        });
        MicroEvent.mixin(AccordionView);
        return AccordionView;
    }]);
})();

/*
 * author:chenchuanyin
 * hyGroups:分组按钮的集合
 * hyaClick:单击button的回调处理函数
 */

/**
 * @modify mageeYang
 * @description
 *   处理弹出时的滚动兼容性问题
 *   在低版本手机上会出现可一直向上滚动的效果，底部显示空内容
 */
(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.factory('ActionSheet',['$onsen','$q',function($onsen,$q){
		var ActionSheet = Class.extend({
			init:function(scope,element,attrs){
				this._scope = scope;
				this._element = element;
				this._attrs = attrs;
				this._visible = true;

				//angular.element(page).append(this._element);  //为了实现mask层遮蔽整个页面，把操作表加到ons-page下
				this._scope.$on('$destroy', this._destroy.bind(this));
				this._scope._onClick = angular.bind(this, this._click);

			},
			/**
			 * 指令内部的菜单点击处理方法
			 */

			_click:function(button){
				if(this._scope.hyaClick){
					this._scope.hyaClick({data:button});
				}
				this.hide();
			},
			_findPage: function() {
				var e = this._element[0];
				while(e.parentNode) {
					e = e.parentNode;
					if (e.className) {
						if (e.className.split(/\s+/).indexOf('page') >= 0) {
							break;
						}
					}
				}
				return e;
			},
			/**
			 * 显示操作表方法
			 */
			show:function(){

				var self = this;
				//创建菜单弹层
				this._model = angular.element('<div class="hy-actions-modal">');
				//创建屏蔽层
				this._model_mask = angular.element('<div class="hy-actions-modal-overlay">');

				var actionGroup = angular.element('<div class = "hy-actions-modal-group" ng-repeat="group in hyaGroups">\
						 	<div class = "hy-actions-modal-button" ng-repeat="button in group" style="color: {{button.color}}" ng-click="_onClick(button)">{{button.text}}</div>');
				this._createModel(actionGroup).then(function (d) {
					self._inserModel = d.model;
					self._inserModelMask = d.model_mask;

					animit(self._inserModel[0])
						.queue({
							transform: 'translate3d(0,100%,0)'
						})
						.queue({
							transform: 'translate3d(0,0,0)'
						}, {
						duration: 0.5,
						timing: 'cubic-bezier(.1, .7, .1, 1)'
						})
					 	.play(function(){

						}.bind(self));
					//d.model.addClass('hy-modal-in');
					self._inserModelMask .addClass('hy-modal-overlay-visible');


				});
			},
			/**
			 * 隐藏操作表方法
			 */
			hide:function(){
				animit(this._inserModel[0])
					.queue({
						transform: 'translate3d(0,100%,0)'
					},{
						duration: 0.5,
						timing: 'cubic-bezier(.1, .7, .1, 1)'
					})
					.play(function(){
						this._inserModel.remove();
                        this._inserModelMask.remove();
					}.bind(this));


			},
			_destroy: function() {
				this.emit('destroy');
				this._element.remove();
				this._scope = this._attrs = this._element = this._modal = null;
			},
			_createModel:function(page){
				if (!page) {
					throw new Error('创建操作表页面不存在');
				}
				var onspage = this._findPage();
				angular.element(onspage).append(angular.element(this._model));
				angular.element(onspage).append(angular.element(this._model_mask));
				this._model_mask[0].addEventListener('click',angular.bind(this, this.hide));
				this._model.append(page);
				//调用指令自身的scope作用域编译_model元素
				ons.$compile(this._model)(this._scope);
				var deferred = $q.defer();
				deferred.resolve({
					model:this._model,
					model_mask:this._model_mask,
				});
				return deferred.promise;
			},
		});
		MicroEvent.mixin(ActionSheet);
		return ActionSheet;
	}]);
	module.directive('hyActionSheet',['$onsen','ActionSheet',function($onsen,ActionSheet){
		return {
			restrict:'E',
			scope:{
				hyaGroups:'=',
				hyaClick:'&',
			},
			compile:function(element,attrs){
				//element.css({display:'block','z-index':'20001',overflow:'hidden',height:'100%',position:'absolute',top:'0',width:'100%'});
				return{
					pre:function(scope,element,attrs){
						var modal = new ActionSheet(scope,element,attrs);
						$onsen.declareVarAttribute(attrs,modal);
						$onsen.registerEventHandlers(modal,'destroy');
						element.data('hy-action-sheet',modal);
						scope.$on('$destroy',function(){
							modal._events = undefined;
							$onsen.removeModifierMethods(modal);
							element.data('hy-action-sheet', undefined);
							element = null;
						});

						element.bind('click', function (e) {
							e.stopPropagation(); //停止冒泡
							return false;
						});
					},
					post:function(scope,element,attrs){
						$onsen.fireComponentEvent(element[0], 'init');
					},
				}
			}
		};
	}]);
})();



/**
 * Created by MageeYang on 2016/7/12.
 * Modify by MageeYang on 2017/01/12
 */


(function () {
    'use strict';
    HyActiveFactory.$inject = ["$hyUtil"];
    HyActiveDirectory.$inject = ["$hyActive"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('$hyActive', HyActiveFactory)
        .directive('hyActive',HyActiveDirectory);



    function HyActiveFactory($hyUtil) {
        return {
            attach: function (element, options) {

                options = options || 'active-state';
                element.on($hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                element.on($hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));

                function handleTouchStart(e) {
                    element.addClass(options);
                }
                function handleTouchEnd(e) {
                    element.removeClass(options);
                }
            }
        };
    }


    /**
     * hy-active
     * @author mageeYang
     * @ngdoc directive
     * @name hy-active
     * @description
     *   [ch]解决div触摸点击的active状态变化[/ch]
     * @example
     * <div hy-active></div>
     */

    function HyActiveDirectory($hyActive) {
        return {
            link: function (scope, element, attr) {
                var className = attr['hyActive']||'active';
                $hyActive.attach(element,className);
            }
        };
    }
})();
(function(){
    'use strict';
    /**
     * @ngdoc module
     * @name AMap
     * @description 高德地图组件
     */

    HyAmapDirective.$inject = ["$onsen", "hyAmapView"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyAmap', HyAmapDirective)
        .factory('hyAmapView',HyAmapFactory)
        .provider("$hyAmap", HyAmapProvider);

    /**
     * @ngdoc directive
     * @name hyProgressCircular
     * @module haiyiMobile
     * @restrict E
     *
     * @description
     * 圆形进度框指令用于用户在查看内容或与内容进行交互时看到的视觉变化量，
     * 使您的应用在内容展示前提供友好的交互体验。
     *
     * 每个用户操作只应该由一个活动进度条表示，
     * 例如：一个刷新操作不应同时显示刷新栏和加载圈。
     *
     * 对于可以确定已完成操作百分比的操作，请使用determinate进度框。
     * 它能让用户快速了解操作需要多长时间。
     *
     * 对于特殊操作，当用户被要求等待一段时间，而需要多长时间是不定的，只有等待后台程序结束后才完成，则使用indeterminate进度框。
     *
     * @param {string} hy-mode 选择这4种模式的其中之一: determinate, indeterminate, buffer 或 query.
     *
     * Note: 如果 `hy-mode` 的值被设置能 undefined 或者没有指定4个有效值中之一，则`indeterminate`默认被自动指定为进度条的模式。
     * Note: 如果没有配置，则`hy-mode="indeterminate"` 会自动作为属性被注入。如果`value=""` 也被指定，则`hy-mode="determinate"`会被注入并替换原来的
     *
     * @param {number=} value 在determinate和buffer模式下，此数字表示进度框的百分比。 默认值：0
     *
     * @param {number=} hy-diameter 指定圆形进度框的直径。 该值是像素大小值（例如“100”）。如果此属性不存在，则默认值为“50px”。
     * @param {boolean=} ng-disabled 确定是否禁用进度条元素。
     *
     * @usage
     * <hljs lang="html">
     * <hy-progress-circular hy-mode="determinate" value="..."></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="determinate" ng-value="..."></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="determinate" value="..." hy-diameter="100"></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="indeterminate"></hy-progress-circular>
     * </hljs>
     */

    /* @ngInject */
    function HyAmapDirective($onsen,hyAmapView) {


        return {
            restrict: 'E',
            scope: {
                options:'='
            },
            template: '<div id="amap_container"></div>',
            replace:true,
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {


                        var hyAmap = new hyAmapView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, hyAmap);

                        element.data('hy-amap', hyAmap);

                        scope.$on('destory', function () {
                            hyAmap._events = undefined;
                            $onsen.removeModifierMethods(hyAmap);
                            element.data('hy-amap', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
    }

    function HyAmapFactory(){
        var HyAmapView = Class.extend({
            _mapOptions:{
                resizeEnable: true,
                zoom:12,
                center: [116.397428, 39.90923],
                mapStyle:'normal'
            },
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._mapOptions = angular.extend(this._mapOptions, this._scope.options || {});

                this.Amap = new AMap.Map('amap_container', angular.extend({},this._mapOptions));
            }


        });
        MicroEvent.mixin(HyAmapView);
        return HyAmapView;
    }

    /**
     * @ngdoc service
     * @name $hyProgressCircular
     * @module haiyiMobile
     *
     * @description
     * 允许用户为`progressCircular`指令指定默认选项。
     *
     * @property {number} progressSize 进度园的直径（以像素为单位）。
     * @property {number} strokeWidth 圆的边框宽度，以圆的大小的百分比表示。
     * @property {number} duration 圆形动画的时长（以毫秒为单位）.
     * @property {function} easeFn 默认缓动动画功能。
     * @property {object} easingPresets 收集预定义的缓动函数。
     *
     * @property {number} durationIndeterminate 不确定动画的持续时间。
     * @property {number} startIndeterminate 不确定动画开始点。
     * @property {number} endIndeterminate 不确定动画结束点。
     * @property {function} easeFnIndeterminate 在不确定值之间进行动画处理时使用的缓动函数。
     *
     * @property {(function(object): object)} configure用于修改默认选项。
     *
     * @usage
     * <hljs lang="js">
     *   myAppModule.config(function($hyProgressCircularProvider) {
 *
 *     // 修改园型进度条的选型
 *     $hyProgressCircularProvider.configure({
 *       progressSize: 100,
 *       strokeWidth: 20,
 *       duration: 800
 *     });
 * });
     * </hljs>
     *
     */


    function HyAmapProvider() {
        var amapConfig = {
            key:"d44ee59a3cd9611b2069bb8b8d3ec9a0",
            version:"1.3",
            url:"https://webapi.amap.com/maps",
            plugin:[]
        };
        var _init = true;

        return {
            configure: function(options) {
                amapConfig = angular.extend(amapConfig, options || {});
                return amapConfig;
            },
            $get: function() {
                return {
                    init:function(){
                        if(_init){
                            _init =false;
                            var amapUrl = amapConfig.url+"?v="+amapConfig.version+"&key="+amapConfig.key;
                            if(amapConfig.plugin.length>0){
                                var pluginUrl = "&plugin＝";
                                for(var pluginName in amapConfig.plugin){
                                    pluginUrl = pluginUrl + pluginName+","
                                }
                                pluginUrl = pluginUrl.substr(0,pluginUrl.length-1);
                                amapUrl = scriptUrl + pluginUrl;
                            }
                            var oScript = document.createElement('script');
                            oScript.type = 'text/javascript';
                            oScript.async = true;
                            oScript.src = amapUrl;
                            document.body.appendChild(oScript);
                        }
                    }
                };
            }
        };
    }
})();


/*
* chenchuanyin
* hyaUserContainerClass：对整个组件添加样式的接口
* hyaUserInputClass：对输入框添加样式的接口
* hyaShowIcon：是否显示列表图标
* hyaItems:下拉列表数据
* hyaCallBack：操作列表的回调
* */
(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.directive('hyAutoComplete',['$onsen',function($onsen){
		return{
			restrict:'E',
			scope:{
				hyaUserContainerClass:'@',
				hyaUserInputClass:'@',
				hyaShowIcon:'@',
				hyaItems:'=',
				hyaCallBack:'&',
				hyaPlaceholder:'@',
			},
			template:'<div>\
						  <div>\
						  	<input ng-model="searchUser" ng-focus = "showList()" style="padding-left: 8px" placeholder="{{hyaPlaceholder}}" />\
						  </div>\
						  <ul class = "list hyList"  style="position: absolute; max-height: 200px;">\
							<li class="list__item" ng-repeat="item in hyaItems | filter: searchUser" ng-click="contentShow(item)">{{item}}\
								<i class="ion-close" style="float: right;" ng-click="callBack(item,$event)" ng-if = "showIcon()"></i>\
							</li>\
						  </ul>\
			          </div>',
			link:function(scope,element,attrs){
				scope.ulheight = true;
				scope.contentShow = function(item){
					scope.hideList();
					var input  = angular.element(element.find("input")[0]);
					input.val(item);
				}
				scope.showList = function(){
					var input  = angular.element(element.find("input"))[0];
					//获取屏幕高度
				  	var bodyHeight=angular.element(document.body)[0].offsetHeight;
					//input居上边距的高度
					var inputTopHeight=angular.element(element.find("input"))[0].getBoundingClientRect().top;
					//input居下边距的高度
					//var inputBottomHeight=angular.element(element.find("input"))[0].getBoundingClientRect().bottom;
					//var toolbarHeight=angular.element(document.body).navigator.ons
					console.log(scope.hyaItems);
					var ul = angular.element(element.find("ul"));
					console.log(scope.$on);
					ul.css("display", "block");
					scope.$watch('$viewContentLoaded', function(){
						var uiHeight= ul[0].offsetHeight;
						console.log(uiHeight);
						if(bodyHeight/2<=inputTopHeight){//需要在input上面显示
							ul.css('top',-uiHeight+"px");
							/*if((inputTopHeight-44)>=uiHeight){//上面剩余的高度大于ul的高度
								ul.css('top',-uiHeight+"px");
							}else{
								//ul.css('top',(44-inputTopHeight+10)+"px");
								//ul.css('height',(inputTopHeight-44-10)+"px");
							}*/


						}else{//需要在input下面显示
							ul.css('top',input.offsetHeight+"px");
							/*if((bodyHeight-input.offsetHeight-inputTopHeight)<=uiHeight){
							 ul.css('height',(bodyHeight-input.offsetHeight-inputTopHeight-15)+"px");
							 }*/

						}
					});

				}
				scope.hideList = function(){
					var ul = angular.element(element.find("ul")[0]);
					ul.css("display", "none");
				}
				scope.callBack = function(item,$event){
					$event.stopPropagation(); //停止冒泡
					scope.hyaCallBack({item:item});
				}
				element.bind('click', function (e) {
					e.stopPropagation(); //停止冒泡
					return false;
				});
				angular.element(document.body).bind('click', function () {
					scope.hideList();
				});
				scope.showIcon = function(){
					var show = attrs.hyaShowIcon;
					if(show == "true"){
						return true;
					}else{
						return false;
					}
				}
			/*	scope.findPage = function() {
					var e = this._element[0];
					while(e.parentNode) {
						e = e.parentNode;
						if (e.className) {
							if (e.className.split(/\s+/).indexOf('page') >= 0) {
								break;
							}
						}
					}
					return e;
				}*/
				var containerStyle = attrs.hyaUserContainerClass;
				var div = angular.element(element.find("div")[0]);
				div.addClass(containerStyle);
				var inputStyle  = attrs.hyaUserInputClass;
				var input = angular.element(element.find("input")[0]);
				input.addClass(inputStyle);
			}
		}
	}]);
}());
/**
 * Created by ym on 2017/3/15.
 */


(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .directive('hyAutoTextarea', HyAutoTextareaDirective);


    /**
     * hyAutoTextarea
     * @author mageeYang
     * @ngdoc directive
     * @name hyAutoTextarea
     * @description
     *   [ch]实现自适应高度的textarea标签[/ch]
     * @example
     * <textarea hy-auto-textarea></textarea>
     */

    function HyAutoTextareaDirective() {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                var maxHeight = 100;
                var addEvent = function (type, callback) {
                        element.bind(type, callback);
                    },
                    getStyle = element[0].currentStyle ? function (name) {
                            var val = element[0].currentStyle[name];

                            if (name === 'height' && val.search(/px/i) !== 1) {
                                var rect = element[0].getBoundingClientRect();
                                return rect.bottom - rect.top -
                                    parseFloat(getStyle('paddingTop')) -
                                    parseFloat(getStyle('paddingBottom')) + 'px';
                            }
                            return val;
                        } : function (name) {
                            return getComputedStyle(element[0], null)[name];
                        },
                    minHeight = parseFloat(getStyle('height'));


                element[0].style.resize = 'none';

                var change = function () {
                    var scrollTop, height,
                        padding = 0,
                        style = element[0].style;

                    if (element[0]._length === element[0].value.length) return;
                    element[0]._length = element[0].value.length;

                    padding = parseInt(getStyle('paddingTop')) + parseInt(getStyle('paddingBottom'));

                    scrollTop = document.body.scrollTop || document.documentElement.scrollTop;

                    element[0].style.height = minHeight + 'px';
                    if (element[0].scrollHeight > minHeight) {
                        if (maxHeight && element[0].scrollHeight > maxHeight) {
                            height = maxHeight - padding;
                            style.overflowY = 'auto';
                        } else {
                            height = element[0].scrollHeight - padding;
                            style.overflowY = 'hidden';
                        }
                        ;
                        style.height = height  + 'px';
                        scrollTop += parseInt(style.height) - element[0].currHeight;
                        document.body.scrollTop = scrollTop;
                        document.documentElement.scrollTop = scrollTop;
                        element[0].currHeight = parseInt(style.height);
                    }
                };

                addEvent('propertychange', change);
                addEvent('input', change);
                addEvent('focus', change);
                change();
            }
        };
    }
})();
/**
 * Created by ym on 2017/1/16.
 */
(function(){
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('hyBackButton', ["$onsen", "$compile", "GenericView", "ComponentCleaner", function($onsen, $compile, GenericView, ComponentCleaner) {
        function getTemplate(){
            //var template = '<span class="toolbar-button--quiet {{modifierTemplater(\'toolbar-button--*\')}}" '+
            //' ng-click="$root.ons.findParentComponentUntil(\'hy-navi\', $event).popPage({cancelIfRunning: true})" '+
            //' ng-show="showBackButton" style="height: 44px; line-height: 0; padding: 0 10px 0 0; position: relative;"> '+
            //    ' <i class="ion-ios-arrow-back ons-back-button__icon" style="vertical-align: top; background-color: transparent; ' +
            //    'height: 44px; line-height: 44px; font-size: 36px; margin-left: 8px; margin-right: 2px; width: 16px; ' +
            //    'display: inline-block; padding-top: 1px;"></i> '+
            //    ' <span style="vertical-align: top; display: inline-block; line-height: 44px; height: 44px;" class="back-button__label"></span> </span>';
            var template = '<div class="hy-layout-row hy-layout-align-center-center" ng-show="showBackButton" ' +
                'ng-click="$root.ons.findParentComponentUntil(\'hy-navi\', $event).popPage({cancelIfRunning: true})" ' +
                'style="width:44px;height:44px">'+
                            //'<ons-icon icon="ion-ios-arrow-back" size="32px"></ons-icon>'+
                            '<img ng-src="img/cem/db/back.png" style="height:17px;width:17px"/>'+
                        '</div>';
            return template;
        }

        return {
            restrict: 'E',
            replace: false,
            template:getTemplate,

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: true,
            scope: true,

            link: {
                pre: function(scope, element, attrs, controller, transclude) {
                    var backButton = new GenericView(scope, element, attrs);
                    $onsen.declareVarAttribute(attrs, backButton);

                    element.data('hy-back-button', backButton);

                    scope.$on('$destroy', function() {
                        backButton._events = undefined;
                        $onsen.removeModifierMethods(backButton);
                        element.data('hy-back-button', undefined);
                        element = null;
                    });

                    scope.modifierTemplater = $onsen.generateModifierTemplater(attrs);

                    var navigator = ons.findParentComponentUntil('hy-navi', element);
                    scope.$watch(function() { return navigator.pages.length; }, function(nbrOfPages) {
                        scope.showBackButton = nbrOfPages > 1;
                    });

                    //$onsen.addModifierMethods(backButton, 'toolbar-button--*', element.children());
                    //
                    //transclude(scope, function(clonedElement) {
                    //    if (clonedElement[0]) {
                    //        element[0].querySelector('.back-button__label').appendChild(clonedElement[0]);
                    //    }
                    //});

                    ComponentCleaner.onDestroy(scope, function() {
                        ComponentCleaner.destroyScope(scope);
                        ComponentCleaner.destroyAttributes(attrs);
                        element = null;
                        scope = null;
                        attrs = null;
                    });
                },
                post: function(scope, element) {
                    $onsen.fireComponentEvent(element[0], 'init');
                }
            }
        };
    }]);
})();

/**
 * @ngdoc element+attribute
 * @name hyBadge 徽章
 * @module haiyiMobile
 * @author linzhiyong
 * @time 2016-1-25 16:14:50
 * @description 可以显示文字、图片，设置徽章、文字、图片样式，设置徽章显示隐藏，点击事件
 * hyaIcon        文字图片路径
 * hyaIconStyle   文字图片样式
 * hyaImgSrc      图片路径,同时存在，图片路径优先级高于文字图片
 * hyaImgStyle    图片样式
 * hyaText        文本内容
 * hyaTextStyle   文本样式
 * hyaHide        隐藏/显示，默认显示 hide == 'false'
 * hyaBgStyle     徽章样式、位置 绑定class属性。
 * 			     位置属性:left right top bottom topleft topright bottomleft bottomright
 * hyaClick  点击回调事件
 * @usage <hy-badge></hy-badge> or <div hy-badge></div>
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
    	module = angular.module('haiyiMobile', ['onsen']);
    }
    module.factory('BadgeView', ['$onsen', function($onsen) {
	    var BadgeView = Class.extend({

	        /**
	         * @param {Object} scope
	         * @param {jqLite} element
	         * @param {Object} attrs
	         */
	        init: function(scope, element, attrs) {
	          this._scope = scope;
	          this._element = element;
	          this._attrs = attrs;
	          this._visible = true;
	          this._badge = angular.element(element[0].querySelector('.hy-badge'));
	          this._scope.$on('$destroy', this._destroy.bind(this));
	        },
	        /**
	         * Show badge.
	         */
	        show: function() {
	        	this._element.css('display', 'block');
	        	this._element.css('opacity', 1);
	        	this._visible = true;
	        },

	        /**
	         * Hide badge.
	         */
	        hide: function() {
	            this._element.css('display', 'none');
	            this._visible = false;
	        },

	        /**
	         * True if badge is visible.
	         *
	         * @return {Boolean}
	         */
	        isShown: function() {
	          return this._visible;
	        },

	        /**
	         * Destroy badge.
	         */
	        destroy: function() {
	          if (this._parentScope) {
	            this._parentScope.$destroy();
	            this._parentScope = null;
	          } else {
	            this._scope.$destroy();
	          }
	        },

	        _destroy: function() {
	          this.emit('destroy');

	          this._scope = this._attrs = this._element = this._badge = null;
	        },
	    });
	    MicroEvent.mixin(BadgeView);

	    return BadgeView;
	}]);

    module.directive('hyBadge', ['$onsen', 'BadgeView', function($onsen, BadgeView) {
			return {
				restrict: 'EA',
				scope: {
					hyaIcon: '@',
					hyaIconStyle: '@',
					hyaImgSrc: '@',
					hyaImgStyle: '@',
					hyaText: '@',
					hyaTextStyle: '@',
					hyaHide: '@',
					hyaBgStyle: '@class',
					hyaClick: '&'
				},
				template: '<div ng-click="hyaClick()">' +
						'<img ng-if="hyaImgSrc" ng-src="{{hyaImgSrc}}" class="{{hyaImgStyle}}" />' +
						'<ons-icon ng-if="hyaIconRel" icon="{{hyaIconRel}}" ng-class="{{hyaIconStyle}}"></ons-icon>' +
						'<span class="{{hyaTextStyle}}" ng-if="hyaText">{{hyaText}}</span></div>',
				replace: false,
				link: {
			          pre: function(scope, element, attrs) {
			        	  var badge = new BadgeView(scope, element, attrs);
			        	  //绑定var声明的对象到js和AngularJS的全局作用域中
			        	  $onsen.declareVarAttribute(attrs, badge);
			        	  $onsen.registerEventHandlers(badge, 'destroy');
			        	  element.data('hy-badge', badge);
			              scope.$on('$destroy', function() {
			            	  badge._events = undefined;
			                  $onsen.removeModifierMethods(badge);
			                  element.data('hy-badge', undefined);
			                  element = null;
			              });
			              //模板中如果已经添加class=""属性，然后js中使用addClass等方法无效
			              var div =  angular.element(element.find('div')[0]);
			              div.addClass('hy-badge').addClass('no-content').addClass(scope.hyaBgStyle);
			              if (scope.hyaText !== undefined || scope.hyaImgSrc !== undefined || scope.hyaIcon !== undefined) {
			            	  div.removeClass('no-content');
			              }
			              //检查如果img路径和icon文字路径同时存在，img优先级高于文字路径
			              if (scope.hyaImgSrc) {
							scope.hyaIconRel = undefined;
			              } else {
			            	  if (scope.hyaIcon && !scope.hyaText) {
			            		  div.css('padding','0 3px');
			            	  }
			            	  scope.hyaIconRel = scope.hyaIcon;
			              }
			              //监听hide值变化，动态显示隐藏徽章
			              scope.$watch('hyaHide', function(nv, ov) {
			            	  checkDisplay();
			              });
			              /**
			               * 设置徽章显示隐藏
			               */
			              function checkDisplay() {
			            	  if (scope.hyaHide === "" || scope.hyaHide === "true") {
			            		  badge.hide();
			            	  } else if (scope.hyaHide === "false") {
			            		  badge.show();
			            	  }
			              }
			          },
			          post: function(scope, element) {
			            $onsen.fireComponentEvent(element[0], 'init');
			          }
				}
			};
	}]);
})();
/**
 * Created by ym on 2017/1/11.
 */

(function(){
    'use strict';


    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyButton', HyButtonDirective)
        .directive('hyButtons',HyButtonsDirective);

    function HyButtonDirective() {
        return {
            restrict: 'EA',
            replace: true,
            transclude: true,
            template: '<a class="hy-button" ng-transclude></a>',
            link: postLink
        };
        function postLink(scope, element, attr) {
            // $hyTheming(element);
            // $hyAria.expectWithoutText(element, 'aria-label');

            // 对于超链接元素，需要手动设置tabindex用于tab时禁用该元素
            if (angular.isDefined(attr.ngDisabled)) {
                scope.$watch(attr.ngDisabled, function (isDisabled) {
                    element.attr('tabindex', isDisabled ? -1 : 0);
                });
            }
        }
    }

    function HyButtonsDirective(){
        return {
            restrict: 'E',
            replace: true,
            transclude: true,
            template: '<p class="hy-buttons-row" ng-transclude></p>',
            link: postLink
        };
        function postLink(scope, element, attr) {
        }
    }
})();

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    /**
     * 定义日历控件的服务视图
     */
    module.factory('CalendarView', ['$onsen', '$q', '$hyUtil', '$hyDateUtil', '$hyDateLocale', function ($onsen, $q, $hyUtil, $hyDateUtil, $hyDateLocale) {

        var TODAY_CLASS = 'hy-calendar-day-today';   //日期当天的CSS样式

        var SELECTED_DATE_CLASS = 'hy-calendar-day-selected'; //选中日期的CSS样式

        var PREV_CLASS = 'hy-calendar-month-prev';

        var CURRENT_CLASS = 'hy-calendar-month-current';

        var NEXT_CLASS = 'hy-calendar-month-next';

        var CalendarView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyDateLocale = $hyDateLocale;
                this._$hyUtil = $hyUtil;
                this._$hyDateUtil = $hyDateUtil;

                /** @final {Date} 表示今天的日期*/
                this.today = this._$hyDateUtil.createDateAtMidnight();

                /** @final {Date}  */
                this._scope.displayYear = null;  //显示的年

                this._scope.displayMonth = null;    //显示的月


                this.selectedDate = null;

                this.displayDate = null;

                this.calendarMonthsHeader = angular.element(this._element[0].querySelector('.hy-calendar-week-days'));

                this.calendarMonthsWrapper = angular.element(this._element[0].querySelector('.hy-calendar-months-wrapper'));

                if (this._scope.noToolbar === "true") {
                    this._scope.hasToolbar = false;
                    angular.element(this._element[0].querySelector('.hy-datepicker-calendar-pane')).addClass('no-toolbar');
                } else {
                    this._scope.hasToolbar = true;
                }

                if (this._scope.noClick === "true") {
                    this._scope.hasColClick = false;
                } else {
                    this._scope.hasColClick = true;
                }

                //处理是不是内联显示
                if (this._scope.displayType !== 'true') {
                    angular.element(this._element[0].querySelector('.hy-datepicker-calendar-pane')).addClass('hy-datepicker-calendar-pane-inline');
                }

                /** @final {Number} 滑动步进数  */
                this.translateNum = 0;
                var self = this;
                //监听日期值变化
                this._scope.$watch('dateValue', function () {
                    self._initDateValue();
                    self._initMonthDate();
                });
                this._scope.$watch('dateList', function () {
                    self._initMonthDate();
                    // self._initMonthDate();
                });
                //生成日历的周抬头信息
                this._buildWeekHeader();

                //在scope中绑定按钮事件
                this._scope.prevMonth = angular.bind(this, this._moveMonth);
                this._scope.nextMonth = angular.bind(this, this._moveMonth);
                this._scope.prevYear = angular.bind(this, this._moveYear);
                this._scope.nextYear = angular.bind(this, this._moveYear);
                //添加手势触摸和鼠标滑动事件
                this._addEventListener();
            },
            /**
             * 初始化日期数据
             * @private
             */
            _initDateValue: function () {
                if (this._scope.dateValue === undefined || this._scope.dateValue === null) {
                    this.selectedDate = this.today;
                    this.displayDate = this.today;
                    if (this._isValidMinDate(this.today, false)) {
                        if (this._isValidMaxDate(this.today, false)) {
                            this.selectedDate = this.today;
                            this.displayDate = this.today;
                        } else {
                            this.selectedDate = this._scope.maxDate;
                            this.displayDate = this._scope.maxDate;
                        }
                    } else {
                        this.selectedDate = this._scope.minDate;
                        this.displayDate = this._scope.minDate;
                    }
                } else {
                    //判断传入的日期是否在min和max区间范围
                    if (this._isValidMinDate(this._scope.dateValue, false)) {
                        if (this._isValidMaxDate(this._scope.dateValue, false)) {
                            this.selectedDate = this._scope.dateValue;
                            this.displayDate = this._scope.dateValue;
                        } else {
                            this.selectedDate = this._scope.maxDate;
                            this.displayDate = this._scope.maxDate;
                        }
                    } else {
                        this.selectedDate = this._scope.minDate;
                        this.displayDate = this._scope.minDate;
                    }

                }
                this._setHeadValue();

            },
            /**
             * 初始化日历月份数据
             * @private
             */
            _initMonthDate: function () {
                this.calendarMonthsWrapper.empty();
                //初始化生成上一月，当前月，下一个月的div数据
                this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), "prev"));
                this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this.displayDate, "current"));
                this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInNextMonth(this.displayDate), "next"));
            },
            /**
             * 设置日历的抬头年月显示值
             * @private
             */
            _setHeadValue: function () {
                this._scope.displayYear = this.displayDate.getFullYear();
                this._scope.displayMonth = (this.displayDate.getMonth() + 1) + "月";
            },
            /**
             * 根据type状态进行日期的比较，
             * @param date 要比较的日期
             * @param type true则比较最小日期的当月第一天，false则直接最小日期
             * @returns {boolean}
             * @private
             */
            _isValidMinDate: function (date, type) {
                if (this._scope.minDate) {
                    var mindate = this._scope.minDate;
                    if (type) {
                        mindate = this._$hyDateUtil.getFirstDateOfMonth(this._scope.minDate);
                    }
                    if (date.getTime() >= mindate.getTime()) {
                        return true;
                    } else {
                        return false;
                    }
                }
                return true;
            },
            /**
             * 根据type状态进行日期的比较，
             * @param date 要比较的日期
             * @param type true则比较最大日期的当月最后一天，false则直接最大日期
             * @returns {boolean}
             * @private
             */
            _isValidMaxDate: function (date, type) {
                if (this._scope.maxDate) {
                    var maxdate = this._scope.maxDate;
                    if (type) {
                        maxdate = this._$hyDateUtil.getLastDateOfMonth(this._scope.maxDate);
                    }
                    if (date.getTime() <= maxdate.getTime()) {
                        return true;
                    } else {
                        return false;
                    }
                }
                return true;
            },
            /**
             * 生成日历的周抬头信息
             * @private
             */
            _buildWeekHeader: function () {
                var weekDaysTemplateStr = '<div class="hy-calendar-week-day">日</div>' +
                    '<div class="hy-calendar-week-day">一</div> <div class="hy-calendar-week-day">二</div> ' +
                    '<div class="hy-calendar-week-day">三</div>' +
                    '<div class="hy-calendar-week-day">四</div> <div class="hy-calendar-week-day">五</div> ' +
                    '<div class="hy-calendar-week-day">六</div>';
                this.calendarMonthsHeader.append(angular.element(weekDaysTemplateStr));

            },
            /**
             * 获取日期所在周的位置
             * @param date
             * @returns {number}
             * @private
             */
            _getLocaleDay: function (date) {
                return (date.getDay() + (7 - this._$hyDateLocale.firstDayOfWeek)) % 7
            },
            /**
             * 生成某一个月的日历界面
             * @param date 要生成的日历日期
             * @param type 生成日历的类型（current 当前，prev 上一月，next 下一月）
             * @returns {Element}
             * @private
             */
            _buildCalendarForMonth: function (date, type) {
                //获取传入日期的当月第一天
                var firstDayOfMonth = this._$hyDateUtil.getFirstDateOfMonth(date);

                var firstDayOfTheWeek = this._getLocaleDay(firstDayOfMonth);
                //获取当月的总天数
                var numberOfDaysInMonth = this._$hyDateUtil.getNumberOfDaysInMonth(date);
                //获取下一个月的第一天
                var firstDayOfNextMonth = this._$hyDateUtil.getDateInNextMonth(date);
                var monthBody = angular.element('<div>');

                monthBody.addClass("hy-calendar-month");
                var currentMonthNum = 0;
                var nextMonthNum = 0;
                var rowList = [];
                if (this._isValidMinDate(date, true) && this._isValidMaxDate(date, true)) {
                    var nextFlag = false;
                    for (var r = 0; r < 6; r++) {
                        var row = angular.element('<div>');
                        row.addClass('hy-calendar-row');
                        if(nextFlag){
                            break;
                        }
                        //特殊处理第一个周的日历数据
                        if (r === 0) {
                            //填充上一个月的日期到当前周内
                            if (firstDayOfTheWeek === 0) {
                                for (var p = 0; p < 7; p++) {
                                    var prevDate = this._$hyDateUtil.incrementDays(firstDayOfMonth, 0 - (7 - p ));
                                    var cell = this._buildDateCell(prevDate, "hy-calendar-day-prev");
                                    row.append(cell);
                                }
                            } else {
                                for (var p = 0; p < firstDayOfTheWeek; p++) {
                                    var prevDate = this._$hyDateUtil.incrementDays(firstDayOfMonth, 0 - (firstDayOfTheWeek - p));
                                    var cell = this._buildDateCell(prevDate, "hy-calendar-day-prev");
                                    row.append(cell);
                                }

                                for (var c = 0; c < (7 - firstDayOfTheWeek); c++) {
                                    var currentDate = this._$hyDateUtil.incrementDays(firstDayOfMonth, currentMonthNum);
                                    currentMonthNum++;
                                    var cell = this._buildDateCell(currentDate, "");
                                    ;
                                    row.append(cell);
                                }
                            }
                        } else {
                            for (var c = 0; c < 7; c++) {
                                if (currentMonthNum < numberOfDaysInMonth) {
                                    var currentDate = this._$hyDateUtil.incrementDays(firstDayOfMonth, currentMonthNum);
                                    currentMonthNum++;
                                    var cell = this._buildDateCell(currentDate, "");
                                    row.append(cell);
                                } else {
                                    var nextDate = this._$hyDateUtil.incrementDays(firstDayOfNextMonth, nextMonthNum);
                                    nextMonthNum++;
                                    var cell = this._buildDateCell(nextDate, "hy-calendar-day-next");
                                    row.append(cell);
                                    nextFlag = true;

                                }
                            }
                        }
                        rowList.push(row);

                    }
                }
                var height = 100/rowList.length + '%';
                for(var q=0;q<rowList.length;q++){
                    rowList[q].css('height',height);
                    monthBody.append(rowList[q]);
                }
                if (type === 'current') {
                    monthBody.css('transform', 'translateX(' + (this.translateNum * 100) + '%)');
                    monthBody.css('webkitTransform', 'translateX(' + (this.translateNum * 100) + '%)');
                    monthBody.addClass(CURRENT_CLASS);
                } else if (type === 'prev') {
                    monthBody.css('transform', 'translateX(' + ((this.translateNum - 1) * 100) + '%)');
                    monthBody.css('webkitTransform', 'translateX(' + ((this.translateNum - 1) * 100) + '%)');
                    monthBody.addClass(PREV_CLASS);
                } else if (type === 'next') {
                    monthBody.css('transform', 'translateX(' + ((this.translateNum + 1) * 100) + '%)');
                    monthBody.css('webkitTransform', 'translateX(' + ((this.translateNum + 1) * 100) + '%)');
                    monthBody.addClass(NEXT_CLASS);
                }

                return monthBody;
            },
            /**
             * 生成当月某一天的单元格数据
             * @param opt_date 具体的日期
             * @param type 表示日期的类型的CLASS名称( hy-calendar-day-next hy-calendar-day-prev 当月的上一个月或下一个月的CLASS)
             * @returns {*}
             * @private
             */
            _buildDateCell: function (opt_date, type) {
                var cell = angular.element('<div>');
                cell.addClass('hy-calendar-day');
                if (!this._isValidMinDate(opt_date, false) || !this._isValidMaxDate(opt_date, false)) {
                    return cell;
                }
                if (type.length !== 0 && type !== 'null') {
                    cell.addClass(type);
                }
                if (opt_date) {
                    cell.attr('data-timestamp', opt_date.getTime());

                    if (this._$hyDateUtil.isSameDay(opt_date, this.today)) {
                        cell.addClass(TODAY_CLASS);
                    }

                    if (this._$hyDateUtil.isValidDate(this.selectedDate) &&
                        this._$hyDateUtil.isSameDay(opt_date, this.selectedDate)) {
                        //如果是显示每天的样式，那么久不给选中的日期加背景
                        if (this._scope.hasColClick) {
                            cell.removeClass(TODAY_CLASS).addClass(SELECTED_DATE_CLASS);
                        }
                    }
                    var cellText = this._$hyDateLocale.dates[opt_date.getDate()];

                    var selectionIndicator = angular.element('<div class="day-text">');
                    selectionIndicator.text(cellText);
                    cell.append(selectionIndicator);
                    if (this._scope.hasColClick) {
                        cell[0].addEventListener('click', angular.bind(this, this._dateCellClickHander));
                    }
                }

                this._setCellDayStyle(cell, opt_date);
                return cell;
            },
            /**
             * 处理天的单元格点击事件
             * @param e
             * @private
             */
            _dateCellClickHander: function (e) {

                var cell = angular.element(e.target).parent();
                var self = this;
                if (cell.attr('data-timestamp')) {
                    this._scope.$apply(function () {
                        var timestamp = Number(cell.attr('data-timestamp'));
                        var date = self._$hyDateUtil.createDateAtMidnight(timestamp);
                        //self.emit('hy-calendar-select',{date:date});
                        if (self._isValidMinDate(date, false) && self._isValidMaxDate(date, false)) {
                            self._scope.dateValue = date;
                            if (self._scope.dateChange) {
                                self._scope.dateChange({date: date});
                            }
                        }
                        //self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));
                    });
                }
            },
            /**
             * 移动月份
             * @param type （1是上一个月，2是下一个月）
             * @private
             */
            _moveMonth: function (type) {
                if (type === 1) {
                    if (this._isValidMinDate(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), true)) {
                        this.translateNum--;
                        this.displayDate = this._$hyDateUtil.getDateInPreviousMonth(this.displayDate);
                    } else {
                        return;
                    }
                } else if (type === 2) {
                    if (this._isValidMaxDate(this._$hyDateUtil.getDateInNextMonth(this.displayDate), true)) {
                        this.translateNum++;
                        this.displayDate = this._$hyDateUtil.getDateInNextMonth(this.displayDate);
                    } else {
                        return;
                    }
                }
                //如果配置了改变每一天背景的状态数组，就去触发监听
                if (this._scope.monthChange) {
                    this._scope.monthChange({date: this.displayDate});
                }

                this.calendarMonthsWrapper.css('transform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this._updateMonth(type);
                this._setHeadValue();

            },
            /**
             * 移动月份后更新div的月份标识数据并添加新的月份
             * @param type
             * @private
             */
            _updateMonth: function (type) {
                var next = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + NEXT_CLASS));
                var prev = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + PREV_CLASS));
                var current = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + CURRENT_CLASS));
                if (type === 1) {
                    if (next) {
                        next.remove();
                    }
                    current.removeClass(CURRENT_CLASS).addClass(NEXT_CLASS);
                    prev.removeClass(PREV_CLASS).addClass(CURRENT_CLASS);
                    this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), 'prev'));
                } else if (type === 2) {
                    if (prev) {
                        prev.remove();
                    }
                    current.removeClass(CURRENT_CLASS).addClass(PREV_CLASS);
                    next.removeClass(NEXT_CLASS).addClass(CURRENT_CLASS);
                    this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInNextMonth(this.displayDate), 'next'));
                }
                //如果配置了改变每一天背景的状态数组，就去触发监听
            },
            _moveYear: function (type) {
                if (type === 1) {
                    if (this._isValidMinDate(this._$hyDateUtil.getDateInPreviousYear(this.displayDate), true)) {
                        this.displayDate = this._$hyDateUtil.getDateInPreviousYear(this.displayDate);
                        var prev = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + PREV_CLASS));
                        prev.remove();
                        this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this.displayDate, "prev"));
                        this.translateNum--;
                    } else {
                        return;
                    }
                } else if (type === 2) {
                    if (this._isValidMaxDate(this._$hyDateUtil.getDateInNextYear(this.displayDate), true)) {
                        this.displayDate = this._$hyDateUtil.getDateInNextYear(this.displayDate);
                        var next = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + NEXT_CLASS));
                        next.remove();
                        this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this.displayDate, "next"));
                        this.translateNum++;
                    } else {
                        return;
                    }
                }

                //如果配置了改变每一天背景的状态数组，就去触发监听
                if (this._scope.monthChange) {
                    this._scope.monthChange({date: this.displayDate});
                }
                this.calendarMonthsWrapper.css('transform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this._updateYear(type);
                this._setHeadValue();

            },
            /**
             * 移动年份后更新div的月份标识数据并添加新的月份
             * @param type
             * @private
             */
            _updateYear: function (type) {
                var next = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + NEXT_CLASS));
                var prev = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + PREV_CLASS));
                var current = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + CURRENT_CLASS));
                if (type === 1) {
                    current.remove();
                    next.remove();
                    prev.removeClass(PREV_CLASS).addClass(CURRENT_CLASS);
                } else if (type === 2) {
                    prev.remove();
                    current.remove();
                    next.removeClass(NEXT_CLASS).addClass(CURRENT_CLASS);
                }
                this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), "prev"));
                this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this._$hyDateUtil.getDateInNextMonth(this.displayDate), "next"));
            },
            /**
             * 添加鼠标滑动或手势触摸事件
             * @private
             */
            _addEventListener: function () {
                var self = this;
                var allowItemClick = true;
                var isTouched, isMoved, touchStartX, touchStartY, touchCurrentX, touchCurrentY, touchStartTime, touchEndTime, startTranslate, currentTranslate, wrapperWidth, wrapperHeight, percentage, touchesDiff, isScrolling;
                this.calendarMonthsWrapper.on(this._$hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                this.calendarMonthsWrapper.on(this._$hyUtil.gettouchEvent().move, angular.bind(this, handleTouchMove));
                this.calendarMonthsWrapper.on(this._$hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));
                function handleTouchStart(e) {
                    isTouched = true;
                    touchStartX = touchCurrentY = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
                    touchStartY = touchCurrentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
                    touchStartTime = (new Date()).getTime();
                    percentage = 0;
                    allowItemClick = true;
                    isScrolling = undefined;
                    startTranslate = currentTranslate = this.translateNum;

                };
                function handleTouchMove(e) {
                    if (!isTouched) return;

                    touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
                    touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
                    if (typeof isScrolling === 'undefined') {
                        isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));
                    }
                    if (isScrolling) {
                        isTouched = false;
                        return;
                    }
                    e.preventDefault();

                    allowItemClick = false;

                    if (!isMoved) {
                        // 第一次移动
                        isMoved = true;
                        wrapperWidth = this.calendarMonthsWrapper[0].offsetWidth;
                        wrapperHeight = this.calendarMonthsWrapper[0].offsetHeight;
                        this.calendarMonthsWrapper.css('transition', "0ms");
                        this.calendarMonthsWrapper.css('webkitTransition', "0ms");

                    }
                    e.preventDefault();
                    touchesDiff = touchCurrentX - touchStartX;
                    percentage = touchesDiff / wrapperWidth;

                    currentTranslate = this.translateNum * -100 + percentage * 100;
                    // 进行界面移动
                    this.calendarMonthsWrapper.css('transform', 'translateX(' + currentTranslate + '%)');
                    this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + currentTranslate + '%)');

                };

                function handleTouchEnd(e) {

                    if (!isTouched || !isMoved) {
                        isTouched = isMoved = false;
                        return;
                    }
                    isTouched = isMoved = false;
                    this.calendarMonthsWrapper.css('transition', "300ms");
                    this.calendarMonthsWrapper.css('webkitTransition', "300ms");
                    touchEndTime = new Date().getTime();
                    if (touchEndTime - touchStartTime < 300) {
                        if (Math.abs(touchesDiff) < 10) {
                            this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                            this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                        }
                        else if (touchesDiff >= 10) {
                            if (this._isValidMinDate(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), true)) {
                                this._scope.$apply(this._moveMonth(1));
                            } else {
                                this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                            }
                        }
                        else {
                            if (this._isValidMaxDate(this._$hyDateUtil.getDateInNextMonth(this.displayDate), true)) {
                                this._scope.$apply(this._moveMonth(2));
                            } else {
                                this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                            }
                        }
                    }
                    else {
                        if (percentage <= -0.5) {
                            if (this._isValidMaxDate(this._$hyDateUtil.getDateInNextMonth(this.displayDate), true)) {
                                this._scope.$apply(this._moveMonth(2));
                            } else {
                                this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                            }
                        }
                        else if (percentage >= 0.5) {
                            if (this._isValidMinDate(this._$hyDateUtil.getDateInPreviousMonth(this.displayDate), true)) {
                                this._scope.$apply(this._moveMonth(1));
                            } else {
                                this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                            }
                        }
                        else {
                            this.calendarMonthsWrapper.css('transform', 'translateX(' + (this.translateNum * -100) + '%)');
                            this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (this.translateNum * -100) + '%)');
                        }
                    }

                    // Allow click
                    setTimeout(function () {
                        allowItemClick = true;
                    }, 100);
                }
            },
            _setCellDayStyle: function (cell, opt_date) {
                var cY = opt_date.getFullYear();
                var cM = (opt_date.getMonth() + 1) < 10 ? '0' + (opt_date.getMonth() + 1) : (opt_date.getMonth() + 1);
                var cD = (opt_date.getDate()) < 10 ? '0' + (opt_date.getDate()) : (opt_date.getDate());
                var cd = cY + '-' + cM + '-' + cD;
                if (!this._scope.dateList) {
                    return;
                }

                var cellBody = angular.element('<div class="default-atten">●</div>');


                this._scope.dateList = eval(this._scope.dateList);
                if (!angular.isArray(this._scope.dateList)) {
                    return;
                }
                for (var i = 0; i < this._scope.dateList.length; i++) {

                    if (!this._scope.dateList[i].date) {
                        continue;
                    }
                    if (this._scope.dateList[i].date.length < 10) {
                        continue;
                    }
                    if (this._scope.dateList[i].date.substr(0, 10) == cd) {
                        var dateTag = this._scope.dateList[i];
                        var content, className;
                        // cellBody.addClass('hy_calendar_day_back_'+this._scope.dateList[i].type);
                        if (dateTag.topTag) {
                            content = dateTag.topTag.content ? dateTag.topTag.content : '●';
                            className = dateTag.topTag.className ? dateTag.topTag.className : '';
                            var topTagEle = angular.element('<div class="hy-calendar-day-top-tag">' + content + '</div>');
                            topTagEle.addClass('hy-calendar-day-top-tag-' + className);
                            cell.append(topTagEle);
                        }
                        if (dateTag.bottomTag) {
                            content = dateTag.bottomTag.content ? dateTag.bottomTag.content : '';
                            className = dateTag.bottomTag.className ? dateTag.bottomTag.className : '';
                            var bottomTagEle = angular.element('<div class="hy-calendar-day-bottom-tag">' + content + '</div>');
                            bottomTagEle.addClass('hy-calendar-day-bottom-tag-' + className);
                            cell.append(bottomTagEle);
                        }
                        if (dateTag.rightTag) {
                            content = dateTag.rightTag.content ? dateTag.rightTag.content : '';
                            className = dateTag.rightTag.className ? dateTag.rightTag.className : '';
                            var rightTagEle = angular.element('<div class="hy-calendar-day-right-tag">' + content + '</div>');
                            rightTagEle.addClass('hy-calendar-day-right-tag-' + className);
                            cell.append(rightTagEle);
                        }
                        if (dateTag.maskLayer) {
                            className = dateTag.maskLayer ? dateTag.maskLayer : '';
                            var maskLayerEle = angular.element('<div class="hy-calendar-day-mask"></div>');
                            maskLayerEle.addClass('hy-calendar-day-mask-' + className);
                            cell.append(maskLayerEle);
                        }
                    }
                }
            },
            /**
             * 获取当前显示的月份日期
             */
            getDisplayDate: function () {
                return this.displayDate;
            },
            moveToDate: function (toDate) {
                var type = 1
                if (toDate.getTime() < this.displayDate.getTime()) {
                    type = 1;
                    if (this._isValidMinDate(toDate, true)) {
                        this.displayDate = toDate;
                        var prev = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + PREV_CLASS));
                        prev.remove();
                        this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this.displayDate, "prev"));
                        this.translateNum--;
                    } else {
                        return;
                    }
                } else {
                    type = 2;
                    if (this._isValidMaxDate(toDate, true)) {
                        this.displayDate = toDate;
                        var next = angular.element(this.calendarMonthsWrapper[0].querySelector('.' + NEXT_CLASS));
                        next.remove();
                        this.calendarMonthsWrapper.append(this._buildCalendarForMonth(this.displayDate, "next"));
                        this.translateNum++;
                    } else {
                        return;
                    }
                }

                //如果配置了改变每一天背景的状态数组，就去触发监听
                if (this._scope.monthChange) {
                    this._scope.monthChange({date: this.displayDate});
                }
                this.calendarMonthsWrapper.css('transform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this.calendarMonthsWrapper.css('webkitTransform', 'translateX(' + (0 - this.translateNum) * 100 + '%)');
                this._updateYear(type);
                this._setHeadValue();

            },
        });
        MicroEvent.mixin(CalendarView);
        return CalendarView;
    }]);
    /**
     * 定义了日历控件的指令
     *
     *
     */
    module.directive('hyCalendar', ['$onsen', 'CalendarView', function ($onsen, CalendarView) {
        return {
            restrict: 'E',
            template: getTemplate,
            scope: {
                minDate: '=hyaMinDate',     //最小日期
                maxDate: '=hyaMaxDate',     //最大日期
                dateValue: '=hyaDateValue', //传递的日期值
                dateChange: '&hyaDateChange',    //日期值变化的回调函数
                displayType: '@hyaInline',   //日历控件内联显示
                noToolbar: '@hyaNoToolbar',
                noClick: '@hyaNoClick',      //取消日历的点击事件
                monthChange: '&hyaMonthChange',//切换月份 年份回调函数
                dateList: '=hyaDateList' //标识每天的状态，传递方式是一个对象数组，数据构成{[{'date'':'2012-09-01','type':'class1'},{{'date'':'2012-09-02','type':'class2'}]},格式必须为yyyy-MM-dd
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {
                        var calendar = new CalendarView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, calendar);

                        element.data('hy-calendar', calendar);

                        scope.$on('destory', function () {
                            calendar._events = undefined;
                            $onsen.removeModifierMethods(calendar);
                            element.data('hy-calendar', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element) {
                        //日历控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 获取模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            var template = '<div class="hy-datepicker-calendar-pane">' +
                '<div class="hy-calendar-toolbar" ng-if="hasToolbar"><div class="hy-calendar-toolbar-innner">' +
                '<div class="hy-calendar-year-picker">' +
                '<div class="hy-calendar-move-button"><ons-button class="button button--quiet hy-calendar-move-button-color"  ng-click="prevYear(1)"><ons-icon icon="fa-angle-left" size="40px"></ons-icon></ons-button></div>' +
                '<div class="hy-calendar-move-span"><span >{{displayYear}}</span></div>' +
                '<div class="hy-calendar-move-button"><ons-button class="button button--quiet hy-calendar-move-button-color" ng-click="nextYear(2)"><ons-icon icon="fa-angle-right" size="40px"></ons-icon></ons-button></div></div>' +
                '<div class="hy-calendar-month-picker">' +
                '<div class="hy-calendar-move-button"><ons-button class="button button--quiet hy-calendar-move-button-color"  ng-click="prevMonth(1)"><ons-icon icon="fa-angle-left" size="40px"></ons-icon></ons-button></div>' +
                '<div class="hy-calendar-move-span"><span>{{displayMonth}}</span></div>' +
                '<div class="hy-calendar-move-button"><ons-button class="button button--quiet hy-calendar-move-button-color"  ng-click="nextMonth(2)"><ons-icon icon="fa-angle-right" size="40px"></ons-icon></ons-button></div></div>' +

                '</div></div>' +
                '<div class="hy-calendar-inner"><div class="hy-calendar-week-days"></div>' +
                '<div class="hy-calendar-months"><div class="hy-calendar-months-wrapper"></div></div></div></div>';
            return template;
        }
    }]);


})();
/**
 * Created by MageeYang on 2016/5/25.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * @ngdoc element
     * @name hyCarousel 3D突出显示的木马控件
     * @module haiyiMobile
     * @description 通过3D突显的方式展示列表中的内容
     * @usage
     */
    module.directive('hyCarousel', ['$onsen', 'HyCarouselView', function ($onsen, HyCarouselView) {
        return {
            restrict: 'E',
            replace: false,
            scope: false,
            transclude: false,

            compile: function (element, attrs) {

                return function (scope, element, attrs) {
                    var hycarousel = new HyCarouselView(scope, element, attrs);

                    element.data('hy-carousel', hycarousel);

                    $onsen.registerEventHandlers(hycarousel, 'postchange refresh overscroll destroy');
                    $onsen.declareVarAttribute(attrs, hycarousel);

                    scope.$on('$destroy', function () {
                        hycarousel._events = undefined;
                        element.data('hy-carousel', undefined);
                        element = null;
                    });

                    if (element[0].hasAttribute('auto-refresh')) {
                        // Refresh carousel when items are added or removed.
                        scope.$watch(
                            function () {
                                return element[0].childNodes.length;
                            },
                            function () {
                                setImmediate(function () {
                                    hycarousel.refresh();
                                });
                            }
                        );
                    }

                    setImmediate(function () {
                        hycarousel.refresh();
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            },

        };
    }]);


    module.factory('HyCarouselView', ['$onsen', '$hyUtil', function ($onsen, $hyUtil) {


        /**
         * @class HyCarouselView
         */
        var HyCarouselView = Class.extend({

            /**
             * @member jqLite Object
             */
            _element: undefined,

            /**
             * @member {Object}
             */
            _scope: undefined,

            /**
             * @member {DoorLock}
             */
            _doorLock: undefined,

            /**
             * @member {Number}
             */
            _scroll: undefined,

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                //上一个突显的数据索引
                this._lastActiveIndex = 0;  //默认是第一个数据
                //当前突显的数据索引
                this._activeIndex = 0;  //默认是第一个数据

                //绑定触摸方法
                this._bindedTouchStart = this._handleTouchStart.bind(this);
                this._bindedTouchMove = this._handleTouchMove.bind(this);
                this._bindedTouchEnd = this._handleTouchEnd.bind(this);

                //绑定重新布局Item元素的方法
                this._bindedLayoutCarouselItems = this._resizeLayoutCarouselItem.bind(this);

                //获取元素的大小
                this._getElementSize();

                //处理监听
                this._prepareEventListeners();
                //获取初始化的index数值
                this._setupInitialIndex();
                //进行页面元素的布局
                this._layoutCarouselItems();
                //给页面元素绑定单击事件
                this._bindOtherItemClick();

                this._scope.$on('$destroy', this._destroy.bind(this));

            },
            /**
             * 获取主元素的长度和宽度
             * 默认返回该元素的宽度
             * @private
             */
            _getElementSize: function () {

                this._currentElementWidthSize = this._element[0].getBoundingClientRect().width;
                this._currentElementHeightSize = this._element[0].getBoundingClientRect().height;
                return this._currentElementWidthSize;
            },
            /**
             * 对内部的Item元素进行布局处理
             * @private
             */
            _layoutCarouselItems: function () {
                var children = this._getCarouselItemElements();

                var sizeAttr = this._getCarouselItemSizeAttr();
                var sizeInfo = this._decomposeSizeString(sizeAttr);

                this._sizeNumber = sizeInfo.number;

                for (var i = 0; i < children.length; i++) {
                    var ele = angular.element(children[i]);

                    if (i == this._activeIndex) {
                        ele.css({
                            position: 'absolute',
                            transform: 'scale(1)',
                            '-webkit-transform':'scale(1)',
                            transition: '300ms',
                            '-webkit-transition':'300ms',
                            width: sizeAttr,

                            height: (this._currentElementHeightSize - 30) + 'px',
                            top: '15px',
                            visibility: 'visible',
                            left: (this._currentElementWidthSize - sizeInfo.number) / 2 + sizeInfo.unit,
                            'z-index': 500,
                        });
                        ele.addClass('hy-carousel-active');
                    } else if (i > this._activeIndex) {
                        ele.css({
                            position: 'absolute',
                            transform: 'scale(0.8)',
                            '-webkit-transform':'scale(0.8)',
                            transition: '300ms',
                            '-webkit-transition':'300ms',
                            width: sizeAttr,
                            height: (this._currentElementHeightSize - 30) + 'px',
                            top: '15px',
                            visibility: 'visible',
                            left: ( (this._currentElementWidthSize - sizeInfo.number) + ((i - this._activeIndex - 1) * (sizeInfo.number))) + sizeInfo.unit,
                            'z-index': 200,
                        });
                        ele.removeClass('hy-carousel-active');
                    } else {
                        ele.css({
                            position: 'absolute',
                            transform: 'scale(0.8)',
                            '-webkit-transform':'scale(0.8)',
                            transition: '300ms',
                            '-webkit-transition':'300ms',
                            width: sizeAttr,
                            height: (this._currentElementHeightSize - 30) + 'px',
                            top: '15px',
                            visibility: 'visible',
                            left: ( 0 + ((i - this._activeIndex + 1) * (sizeInfo.number))) + sizeInfo.unit,
                            'z-index': 200,
                        });
                        ele.removeClass('hy-carousel-active');
                    }

                }
            },
            /**
             * 获取当前突显的元素index值
             * @returns {*}
             */
            getActiveIndex: function () {
                return this._activeIndex;
            },

            /**
             * 重新对item进行布局
             * @private
             */
            _resizeLayoutCarouselItem: function () {
                this._getElementSize();
                this.refresh();
            },

            /**
             * 绑定子元素的单击事件
             * @private
             */
            _bindOtherItemClick: function () {
                var children = this._getCarouselItemElements();
                var self = this;
                for (var i = 0; i < children.length; i++) {
                    var ele = angular.element(children[i]);
                    ele.data('_index', i);
                    ele.on('click', function () {
                        var index = angular.element(this).data('_index');
                        self._activeIndex = index;
                        self._layoutCarouselItems();
                        self._tryFirePostChangeEvent();
                    });
                }
            },
            /**
             * 触摸开始方式
             * @param event
             * @private
             */
            _handleTouchStart: function (event) {

                this.isTouched = true;
                this.touchStartX = this.touchCurrentX = event.type === 'touchstart' ? event.targetTouches[0].pageX : event.pageX;
                this.touchStartY = this.touchCurrentY = event.type === 'touchstart' ? event.targetTouches[0].pageY : event.pageY;
                this.touchStartTime = (new Date()).getTime();
                this.percentage = 0;
                this.allowItemClick = true;
                this.isScrolling = undefined;
            },
            /**
             * 触摸移动方法
             * @param event
             * @private
             */
            _handleTouchMove: function (event) {

                if (!this.isTouched) return;

                this.touchCurrentX = event.type === 'touchmove' ? event.targetTouches[0].pageX : event.pageX;
                this.touchCurrentY = event.type === 'touchmove' ? event.targetTouches[0].pageY : event.pageY;
                if (typeof this.isScrolling === 'undefined') {
                    this.isScrolling = !!(this.isScrolling || Math.abs(this.touchCurrentY - this.touchStartY) > Math.abs(this.touchCurrentX - this.touchStartX));
                }
                if (this.isScrolling) {
                    this.isTouched = false;
                    return;
                }
                event.preventDefault();

                this.allowItemClick = false;

                if (!this.isMoved) {
                    // 第一次移动
                    this.isMoved = true;
                }
                event.preventDefault();
                this.touchesDiff = this.touchCurrentX - this.touchStartX;
                this.percentage = this.touchesDiff / this._sizeNumber;


            },
            /**
             * 触摸结束方式
             * @param event
             * @private
             */
            _handleTouchEnd: function (event) {
                if (!this.isTouched || !this.isMoved) {
                    this.isTouched = this.isMoved = false;
                    return;
                }
                this.isTouched = this.isMoved = false;
                this.touchEndTime = new Date().getTime();
                if (this.touchEndTime - this.touchStartTime < 300) {
                    if (Math.abs(this.touchesDiff) < 10) {

                    }
                    else if (this.touchesDiff >= 10) {
                        this.setActiveCarouselItemIndex(this.getActiveIndex() - 1);
                    }
                    else {
                        this.setActiveCarouselItemIndex(this.getActiveIndex() + 1);
                    }
                }
                else {
                    if (this.percentage <= -0.5) {
                        this.setActiveCarouselItemIndex(this.getActiveIndex() + 1);
                    }
                    else if (this.percentage >= 0.5) {
                        this.setActiveCarouselItemIndex(this.getActiveIndex() - 1);
                    }
                    else {

                    }
                }
                this._layoutCarouselItems();
                this._tryFirePostChangeEvent();
                // Allow click
                setTimeout(function () {
                    this.allowItemClick = true;
                }, 100);
            },


            /**
             * @return {Number}
             */
            _getCarouselItemSize: function () {
                var sizeAttr = this._getCarouselItemSizeAttr();
                var sizeInfo = this._decomposeSizeString(sizeAttr);
                var elementSize = this._getElementSize();

                if (sizeInfo.unit === '%') {
                    return Math.round(sizeInfo.number / 100 * elementSize);
                } else if (sizeInfo.unit === 'px') {
                    return sizeInfo.number;
                } else {
                    throw new Error('Invalid state');
                }
            },

            /**
             * @return {Number}
             */
            _getInitialIndex: function () {
                var index = parseInt(this._element.attr('initial-index'), 10);

                if (typeof index === 'number' && !isNaN(index)) {
                    return Math.max(Math.min(index, this._getCarouselItemCount() - 1), 0);
                } else {
                    return 0;
                }
            },

            /**
             * @return {String}
             */
            _getCarouselItemSizeAttr: function () {
                var attrName = 'item-width';
                var itemSizeAttr = ('' + this._element.attr(attrName)).trim();

                return itemSizeAttr.match(/^\d+(px|%)$/) ? itemSizeAttr : '100%';
            },

            /**
             * @return {Object}
             */
            _decomposeSizeString: function (size) {
                var matches = size.match(/^(\d+)(px|%)/);

                return {
                    number: parseInt(matches[1], 10),
                    unit: matches[2],
                };
            },

            _setupInitialIndex: function () {
                this._lastActiveIndex = this._getInitialIndex();
                this._activeIndex = this._getInitialIndex();
            },

            /**
             * @param {Number} index
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            setActiveCarouselItemIndex: function (index) {

                index = Math.max(0, Math.min(index, this._getCarouselItemCount() - 1));
                this._activeIndex = index;
                this._layoutCarouselItems();
                this._tryFirePostChangeEvent();
            },


            /**
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            next: function () {
                this.setActiveCarouselItemIndex(this.getActiveIndex() + 1);
            },

            /**
             * @param {Object} [options]
             * @param {Function} [options.callback]
             * @param {String} [options.animation]
             */
            prev: function () {
                this.setActiveCarouselItemIndex(this.getActiveIndex() - 1);
            },


            /**
             * @param {Boolean} disabled
             */
            setDisabled: function (disabled) {
                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                } else {
                    this._element[0].removeAttribute('disabled');
                }
            },

            /**
             * @return {Boolean}
             */
            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },


            /**
             * @param {Object} trait
             */
            _mixin: function (trait) {
                Object.keys(trait).forEach(function (key) {
                    this[key] = trait[key];
                }.bind(this));
            },


            /**
             * @return {Boolean}
             */


            _prepareEventListeners: function () {
                this._element.on($hyUtil.gettouchEvent().start, this._bindedTouchStart);
                this._element.on($hyUtil.gettouchEvent().move, this._bindedTouchMove);
                this._element.on($hyUtil.gettouchEvent().end, this._bindedTouchEnd);

                angular.element(window).on('resize', this._bindedLayoutCarouselItems);
            },

            _tryFirePostChangeEvent: function () {
                var currentIndex = this.getActiveIndex();

                if (this._lastActiveIndex !== currentIndex) {
                    var lastActiveIndex = this._lastActiveIndex;
                    this._lastActiveIndex = currentIndex;

                    this.emit('postchange', {
                        carousel: this,
                        activeIndex: currentIndex,
                        lastActiveIndex: lastActiveIndex
                    });
                }
            },



            /**
             * @return {Array}
             */
            _getCarouselItemElements: function () {
                var nodeList = this._element[0].children,
                    rv = [];
                for (var i = nodeList.length; i--;) {
                    rv.unshift(nodeList[i]);
                }

                rv = rv.filter(function (item) {
                    return item.nodeName.toLowerCase() === 'ons-carousel-item';
                });

                return rv;
            },


            /**
             * @return {Number}
             */
            _getCarouselItemCount: function () {
                return this._getCarouselItemElements().length;
            },

            /**
             * Refresh hycarousel item layout.
             */
            refresh: function () {
                // Bug fix
                if (this._getCarouselItemSize() === 0) {
                    return;
                }
                this._layoutCarouselItems();
                this._bindOtherItemClick();
                this.emit('refresh', {
                    carousel: this
                });
            },

            /**
             */
            first: function () {
                this.setActiveCarouselItemIndex(0);
            },

            /**
             */
            last: function () {
                this.setActiveCarouselItemIndex(
                    Math.max(this._getCarouselItemCount() - 1, 0)
                );
            },



            _destroy: function () {
                this.emit('destroy');

                angular.element(window).off('resize', this._bindedLayoutCarouselItems);

                this._element = this._scope = this._attrs = null;
            }
        });

        MicroEvent.mixin(HyCarouselView);

        return HyCarouselView;
    }]);
})();
/**
 * hy-chart - v1.0.0 - 2016-04-25
 * @author liukeyu
 * @ngdoc service
 * @name HyChartView
 * @description
 *   [ch]图表服务.[/ch]
 * @example
 */

(function(){
	'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * theme services
     * posible themes: infographic macarons shine dark blue green red gray default
     */
    module.factory('HyChartTheme',["$http", function ($http) {
        return {
            get: function (name) {
                //return themes[name] ? themes[name] : {};
            }
        };
    }]);

    /**
     * util services
     */
    module.factory('HyChartUtil', function () {

        function isPieChart(type) {//donut 环
            return ['pie', 'donut'].indexOf(type) > -1;
        }

        function isMapChart(type) {
            return ['map'].indexOf(type) > -1;
        }

        function isAxisChart(type) {
            return ['line', 'bar', 'boxplot'].indexOf(type) > -1;
        }

        function isPolarChart(type) {
            return ['line', 'bar', 'area'].indexOf(type) > -1;
        }

        function isRadarChart(type) {
            return ['radar'].indexOf(type) > -1;
        }

        function isGridChart(type) {
            return ['line','bar','scatter','boxplot'].indexOf(type) > -1;
        }

        /**
         * 获取标题
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getTitle(data, config, type) {
            if (angular.isObject(config.title)) {
                return config.title;
            }
            //isPieChart(type) ? null:
            return {
                text: config.title,
                subtext: config.subtitle || '',
                left: 'center'
            };
        }

        /**
         * get legends from data series 图例组件
         */
        function getLegend(data, config, type) {
            var legend = { data: []};
            if (isPieChart(type)) {
                angular.forEach(data, function (item) {
                    if(!angular.isArray(item.data)) return true;
                    angular.forEach(item.data, function (d) {
                        legend.data.push(d.name);
                    });
                });
                legend.orient = 'verticle';
                legend.x = 'right';
                legend.y = 'center';

            } else {
                angular.forEach(data, function (d) {
                    legend.data.push(d.name);
                });
                legend.orient = 'horizontal';
            }

            return angular.extend(legend, config.legend || {});
        }

        /**
         * 直角坐标系内绘图网格
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getGrid(data, config, type) {
            if (angular.isObject(config.grid)) {
                return config.grid;
            }
            return isGridChart(type) ? null: {
                show:config.grid?true:false
            };
        }

        /**
         * get x axis ticks from the 1st serie
         */
        function getXAxisTicks(data, config, type) {
            if(!isAxisChart(type)) return null;
            if (config.xAxis) {
                return config.xAxis;
            }
            var ticks = [];
            angular.forEach(data, function (item,index) {
                if(!angular.isArray(item.data)) return true;
                var x = {
                    type: 'category',
                    boundaryGap: type === 'bar',
                    data: []
                };
                x.gridIndex = index;
                angular.forEach(item.data, function (d) {
                    x.data.push(d.x);
                });
                ticks.push(x);
            });
            var axis = ticks.length<=0?{}:ticks;
            if(axis.length == 1){
                axis = axis[0];
            }
            return axis;
        }

        /**
         * get x axis ticks from the 1st serie
         */
        function getYAxisTicks(data, config, type) {
            if(!isAxisChart(type)) return null;

            if (config.yAxis) {
                return config.yAxis;
            }
            var axis = [];
            angular.forEach(data, function (item,index) {
                if(!angular.isArray(item.data)) return true;
                var y = {
                    gridIndex:index,
                    //type: 'value',
                    //position: 'right',
                    //scale: false,
                    //axisLine: {
                    //    show: false
                    //},
                    axisLabel: {
                        formatter: function (v) {
                            return HyChartUtil.formatKMBT(v);
                        }
                    }};
                axis.push(y);
            });
            axis = axis.length<=0?{}:axis;
            if(axis.length == 1){
                axis = axis[0];
            }
            return axis;
        }

        /**
         * get x axis ticks from the 1st serie
         */
        function getAxisTicks(data, config, type) {
            var ticks = [];
            if (data[0]) {
                angular.forEach(data[0].datapoints, function (datapoint) {
                    ticks.push(datapoint.x);
                });
            }

            return {
                type: 'category',
                boundaryGap: type === 'bar',
                data: ticks,
            };
        }

        /**
         * 极坐标系
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getPolarTicks(data, config, type) {
            if (config.polar) {
                return config.polar;
            }
            return null;
        }

        /**
         * 极坐标系的半径轴
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getRadiusAxis(data, config, type) {
            if (config.polar && config.radiusAxis) {
                return config.radiusAxis;
            }
            return null;
        }

        /**
         * 极坐标系的角度轴。
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getAngleAxis(data, config, type) {
            if (config.polar && config.angleAxis) {
                return config.angleAxis;
            }
            return null;
        }

        /**
         * 雷达图坐标系
         * @param data
         * @param config
         * @param type
         * @returns {*}
         */
        function getRadar(data, config, type) {
            if (!isRadarChart(type)) return null;
            if (config.radar) {
                return config.radar;
            }
            return null;
        }
        /**
         * get series config
         *
         * @param {Array} data serie data
         * @param {Object} config options
         * @param {String} chart type
         */
        function getSeries(data, config, type) {
            var series = [];
            angular.forEach(data, function (serie) {
                // datapoints for line, area, bar chart
                var datapoints = [];
                angular.forEach(serie.datapoints, function (datapoint) {
                    datapoints.push(datapoint.y);
                });

                var conf = {
                    type: type || 'line',
                    name: serie.name,
                    data: datapoints
                };

                // area chart is actually line chart with special itemStyle
                if (type === 'area') {
                    conf.type = 'line';
                    conf.itemStyle = {
                        normal: { areaStyle: { type: 'default'}}
                    };
                }

                // gauge chart need many special config
                if (type === 'gauge') {
                    conf = angular.extend(conf, {
                        splitNumber: 10,       // 分割段数，默认为5
                        axisLine: {            // 坐标轴线
                            lineStyle: {       // 属性lineStyle控制线条样式
                                color: [[0.2, '#228b22'], [0.8, '#48b'], [1, '#ff4500']],
                                width: 8
                            }
                        },
                        axisTick: {            // 坐标轴小标记
                            splitNumber: 10,   // 每份split细分多少段
                            length :12,        // 属性length控制线长
                            lineStyle: {       // 属性lineStyle控制线条样式
                                color: 'auto'
                            }
                        },
                        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
                            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                                color: 'auto'
                            }
                        },
                        splitLine: {           // 分隔线
                            show: true,        // 默认显示，属性show控制显示与否
                            length :30,         // 属性length控制线长
                            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                                color: 'auto'
                            }
                        },
                        pointer: {
                            width: 5
                        },
                        title: {
                            show: true,
                            offsetCenter: [0, '-40%'],       // x, y，单位px
                            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                                fontWeight: 'bolder'
                            }
                        },
                        detail: {
                            formatter: '{value}%',
                            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                                color: 'auto',
                                fontWeight: 'bolder'
                            }
                        },
                    }, config.gauge || {});
                }

                // datapoints for pie chart and gauges are different
                if (!isAxisChart(type)) {
                    conf.data = [];
                    angular.forEach(serie.datapoints, function (datapoint) {
                        conf.data.push({value: datapoint.y, name: datapoint.x });
                    });
                }

                if (isPieChart(type)) {
                    // donut charts are actually pie charts
                    conf.type = 'pie';

                    // pie chart need special radius, center config
                    conf.center = config.center || ['40%', '50%'];
                    conf.radius = config.radius || '60%';

                    // donut chart require special itemStyle
                    if (type === 'donut') {
                        conf.radius = config.radius || ['50%', '70%'];
                        conf = angular.extend(conf, {
                            itemStyle: {
                                normal: {
                                    label: {
                                        show: false
                                    },
                                    labelLine: {
                                        show: false
                                    }
                                },
                                emphasis: {
                                    label: {
                                        show: true,
                                        position: 'center',
                                        textStyle: {
                                            fontSize: '50',
                                            fontWeight: 'bold'
                                        }
                                    }
                                }
                            }
                        }, config.donut || {});
                    } else if (type === 'pie') {
                        conf = angular.extend(conf, {
                            itemStyle: {
                                normal : {
                                    label : {
                                        position : 'inner',
                                        formatter : function (item) {
                                            return (+item.percent).toFixed() + '%';
                                        }
                                    },
                                    labelLine : {
                                        show : false
                                    }
                                },
                                emphasis : {
                                    label : {
                                        show : true,
                                        formatter : '{b}\n{d}%'
                                    }
                                }
                            }
                        }, config.pie || {});
                    }
                }

                if (isMapChart(type)) {
                    conf.type = 'map';
                    conf = angular.extend(conf, {}, config.map || {});
                }

                // if stack set to true
                if (config.stack) {
                    conf.stack = 'total';
                }

                if (type === 'radar') {
                    conf.data = serie.data;
                }

                series.push(conf);
            });

            return series;
        }

        /**
         * get tooltip config
         */
        function getTooltip(data, config, type) {
            var tooltip = {};

            switch (type) {
                case 'line':
                    tooltip.trigger = 'axis';
                    break;
                case 'pie':
                //case 'donut':
                case 'bar':
                case 'map':
                case 'gauge':
                    tooltip.trigger = 'item';
                    break;
            }

            if (type === 'pie') {
                tooltip.formatter = '{a} <br/>{b}: {c} ({d}%)';
            }

            if (type === 'map') {
                tooltip.formatter = '{b}';
            }

            return angular.extend(tooltip, angular.isObject(config.tooltip) ? config.tooltip : {});
        }

        function formatKMBT(y, formatter) {
            if (!formatter) {
                formatter = function (v) { return Math.round(v * 100) / 100; };
            }
            y = Math.abs(y);
            if (y >= 1000000000000)   { return formatter(y / 1000000000000) + 'T'; }
            else if (y >= 1000000000) { return formatter(y / 1000000000) + 'B'; }
            else if (y >= 1000000)    { return formatter(y / 1000000) + 'M'; }
            else if (y >= 1000)       { return formatter(y / 1000) + 'K'; }
            else if (y < 1 && y > 0)  { return formatter(y); }
            else if (y === 0)         { return ''; }
            else                      { return formatter(y); }
        }

        return {
            isPieChart: isPieChart,
            isAxisChart: isAxisChart,
            getAxisTicks: getAxisTicks,
            getSeries: getSeries,
            getLegend: getLegend,
            getTooltip: getTooltip,
            getTitle: getTitle,
            formatKMBT: formatKMBT
        };

    });

    /**
     * 图表生成服务
     */
    module.factory('HyChartView', ['$onsen', '$http','$timeout','HyChartUtil','HyChartTheme', function($onsen,$http,$timeout,HyChartUtil,HyChartTheme) {

		var HyChartView = Class.extend({

			/**
			 * @param {Object} scope
			 * @param {jqLite} element
			 * @param {Object} attrs
			 */
			init: function(scope, element, attrs,type) {
				this._element = element;
				this._scope = scope;
				this._attrs = attrs;
                this._echarts = window.echarts;
                this._type = type || 'line';
                this._timer = null;

                this.chart = null;

                if(!this._echarts){
                    throw new Error('没有找到Echarts对象.');
                }

                // update when charts config changes
                this._configWatch = this._scope.$watch(function(){
                    return { config:this._scope.config,
                            data:this._scope.data};
                }.bind(this), function (value) {
                    if (value){
                        this.build();
                    }
                }.bind(this), true);

                //this._resizeWatch = this._scope.$watch(function(){
                //    return {
                //        w:this._element[0].clientWidth,
                //        h:this._element[0].clientHeight
                //    };
                //}.bind(this), function (value) {
                //    if (value){
                //        console.log(155);
                //        this._chartResize();
                //    }
                //}.bind(this), true);

                this._onResize = this._chartResize.bind(this);
                this._catchSize = null;
                this._timer = null;
                var resizeTimer = function(){
                    var w = this._element[0].clientWidth;
                    var h = this._element[0].clientHeight;

                    if(w && h && this._catchSize
                        && (this._catchSize.w != w || this._catchSize.h != h)){
                        this._chartResize();
                    }
                    this._catchSize = {w:w,h:h};
                    //if(this._timer) $timeout.cancel(this._timer);
                    //console.log(154);
                    //$timeout(function(){
                    //    console.log(155);
                    //    resizeTimer();
                    //},300);
                }.bind(this);
                this._chartInterval = setInterval(resizeTimer,300);
                angular.element(window).on('resize', this._onResize);
                this._scope.$on('$destroy', this._destroy.bind(this));
			},

            _chartResize:function(){
                if(!this.chart) return;
                this.chart.resize();
            },

            _setElementSize : function(config) {
                //var element = this._element;
                //
                //var width = config.width || this._attrs.width;
                //var height = config.height || this._attrs.height;
                //if (width)
                //    element[0].style.width = width;
                //if (height)
                //    element[0].style.height = height;
            },

            _getOption:function(data, config, type){
                if(type=='chart'){
                    var options = data;

                    return options;
                }
                // merge default config
                config = angular.extend({
                    showXAxis: true,
                    showYAxis: true,
                    showLegend: true
                }, config);

                var xAxis = angular.extend({
                    //position: 'top',
                    //axisLine: { show: false }
                }, angular.isObject(config.xAxis) ? config.xAxis : {});

                var yAxis = angular.extend({
                    //type: 'value',
                    //position: 'right',
                    //scale: false,
                    //axisLine: {
                    //    show: false
                    //},
                    axisLabel: {
                        formatter: function (v) {
                            return HyChartUtil.formatKMBT(v);
                        }
                    }
                }, angular.isObject(config.yAxis) ? config.yAxis : {});

                // basic config
                var options = {
                    title: HyChartUtil.getTitle(data, config, type),
                    tooltip: HyChartUtil.getTooltip(data, config, type),
                    legend: HyChartUtil.getLegend(data, config, type),
                    toolbox: angular.extend({ show: false }, angular.isObject(config.toolbox) ? config.toolbox : {}),
                    xAxis: [ angular.extend(xAxis, HyChartUtil.getAxisTicks(data, config, type)) ],
                    yAxis: [ yAxis ],
                    series: HyChartUtil.getSeries(data, config, type)
                };

                if (!config.showXAxis) {
                    angular.forEach(options.xAxis, function (axis) {
                        axis.axisLine = { show: false };
                        axis.axisLabel = { show: false };
                        axis.axisTick = { show: false };
                    });
                }

                if (!config.showYAxis) {
                    angular.forEach(options.yAxis, function (axis) {
                        axis.axisLine = { show: false };
                        axis.axisLabel = { show: false };
                        axis.axisTick = { show: false };
                    });
                }

                if (!config.showLegend || type === 'gauge' || type === 'map') {
                    delete options.legend;
                }

                if (!HyChartUtil.isAxisChart(type)) {
                    delete options.xAxis;
                    delete options.yAxis;
                }

                if (config.dataZoom) {
                    options.dataZoom = angular.extend({
                        show : true,
                        realtime : true
                    }, config.dataZoom);
                }

                if (config.dataRange) {
                    options.dataRange = angular.extend({}, config.dataRange);
                }

                if (config.polar) {
                    options.polar = config.polar;
                }
                return options;
            },

            _setOption:function(type){
                type = type || this._type;
                var scope = this._scope;
                if(type=='chart') scope.config = scope.config || {};
                if (!scope.data || !scope.config) {
                    return;
                }
                var isAjaxInProgress = false;
                var textStyle = { color: 'red', fontSize: 36, fontWeight: 900, fontFamily: 'Microsoft Yahei, Arial' };
                var options;

                this._setElementSize(scope.config);

                if (!this.chart) {
                    //var theme = HyChartTheme.get(scope.config.theme || 'macarons');
                    this.chart = this._echarts.init(this._element[0]);
                }

                if (scope.config.events) {
                    if (!angular.isArray(scope.config.events)) {
                        scope.config.events = [scope.config.events];
                    }
                    scope.config.events.forEach(function (event) {
                        this.chart.off(event.type);
                        this.chart.on(event.type, function (param) {
                            event.fn.call(this,param);
                        },this);
                    }.bind(this));
                }

                // string type for data param is assumed to ajax datarequests
                if (angular.isString(scope.data)) {
                    if (isAjaxInProgress) return;
                    isAjaxInProgress = true;

                    // show loading
                    this.chart.showLoading({ text: scope.config.loading || '加载中...', textStyle: textStyle });

                    // fire data request
                    $http.get(scope.data).success(function (response) {
                        isAjaxInProgress = false;
                        this.chart.hideLoading();
                        if (response) {
                            options = this._getOption(response, scope.config, type);
                            if (scope.config.forceClear) {
                                this.chart.clear();
                            }
                            if (options.series.length) {
                                if(!options.series[0].data) options.series[0].data = [];
                                this.chart.setOption(options);
                                this.chart.resize();
                            } else {
                                this.chart.showLoading({ text: scope.config.errorMsg || '没有数据', textStyle: textStyle });
                            }
                        } else {
                            this.chart.showLoading({ text: scope.config.emptyMsg || '数据加载失败', textStyle: textStyle });
                        }

                    }.bind(this)).error(function (response) {
                        isAjaxInProgress = false;
                        this.chart.showLoading({ text: scope.config.emptyMsg || '数据加载失败', textStyle: textStyle });
                    });

                    return;
                }
                // if data is avaliable, render immediately
                options =  this._getOption(scope.data, scope.config, type);
                if (scope.config.forceClear) {
                    this.chart.clear();
                }
                if (options.series.length) {
                    if(!options.series[0].data) options.series[0].data = [];
                    this.chart.setOption(options);
                    this.chart.resize();
                } else {
                    this.chart.showLoading({ text: scope.config.errorMsg || '没有数据', textStyle: textStyle });
                }
            },
            _isMapChart:function(){
                var series = this._scope.data.series;
                var chartFlag = (this._type=='chart' && angular.isArray(series) && series.length>0 && series[0].type=='map');
                if(chartFlag && this._scope.config.mapName !=series[0].map){
                    this._scope.data.series[0].map = this._scope.data.series[0].mapType = this._scope.config.mapName;
                }
                var geo = this._scope.data.geo;
                var geoFlag =  (this._type=='chart' && geo && geo.map);
                if(geoFlag && this._scope.config.mapName !=geo.map){
                    this._scope.data.geo.map = this._scope.config.mapName;
                }
                chartFlag = chartFlag || geoFlag;
                return this._type == 'map' || chartFlag;
            },
            _refresh:function(){
                if (this._timer) $timeout.cancel(this._timer);

                var scope = this._scope;
                if(this._isMapChart() && scope.config.isJson){
                    $http.get(scope.config.jsonPath).success(function (data) {
                        this._echarts.registerMap(scope.config.mapName, data);
                        this._setOption();
                        //this._status = 0;
                    }.bind(this)).error(function (e) {
                        //this._status = 0;
                        throw new Error('不存在地图数据.');
                    });
                    return;
                }
                this._setOption();
                //this._status = 0;
            },
            refresh:function(){
                //if (this._status!=0) return;
                if (this._timer) $timeout.cancel(this._timer);
                setImmediate(this._refresh.bind(this));
            },
            build:function(){
                //if (this._status!=0) return;
                if (this._timer) $timeout.cancel(this._timer);
                //Concurrent.Thread.create(function(view){
                //    view._refresh();
                //},this);
                this._timer = $timeout(this._refresh.bind(this),300);
                //setImmediate();
            },
			_destroy: function() {
				this.emit('destroy');
                this._configWatch();

                if(this._chartInterval) clearInterval(this._chartInterval);
                angular.element(window).off('resize', this._onResize);
                //this._resizeWatch();
				this._element = this._scope = this._attrs = null;
                if (this._timer) $timeout.cancel(this._timer);
			}
		});

		MicroEvent.mixin(HyChartView);
		return HyChartView;
	}]);
})();

/**
 * hy-*-chart - v1.0.0 - 2016-04-25
 * @author liukeyu
 * @ngdoc directive
 * @name hy-*-chart
 * @description
 *   [ch]图表指令.[/ch]
 * @example
 * <hy-line-chart >
 * </hy-line-chart>
 */
(function() {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    /**
     * line 折线图
     * 折线图是用折线将各个数据点标志连接起来的图表，用于展现数据的变化趋势。可用于直角坐标系和极坐标系上。
     * bar 柱状图
     * 柱状图通过柱形的高度来表现数据的大小，用于有至少一个类目轴的直角坐标系上。
     * pie 饼图
     * 饼图主要用于表现不同类目的数据在总和中的占比。每个的弧度表示数据数量的比例。
     * scatter 散点（气泡）图
     * 直角坐标系上的散点图可以用来展现数据的 x，y 之间的关系，如果数据项有多个维度，其它维度的值可以通过不同大小的 symbol 展现成气泡图，也可以用颜色来表现。这些可以配合 visualMap 组件完成。
     * effectScatter
     * 带有涟漪特效动画的散点（气泡）图。利用动画特效可以将某些想要突出的数据进行视觉突出。
     * radar 雷达图
     * 雷达图主要用于表现多变量的数据，例如球员的各个属性分析。依赖 radar 组件。
     * treemap
     * Treemap 是一种常见的表达『层级数据』『树状数据』的可视化形式。它主要用面积的方式，便于突出展现出『树』的各层级中重要的节点。
     * boxplot
     * Boxplot 中文可以称为『箱形图』、『盒须图』、『盒式图』、『盒状图』、『箱线图』。
     * candlestick 即我们常说的 K线图。
     * 在 ECharts3 中，同时支持 'candlestick' 和 'k'这两种 'series.type'（'k' 会被自动转为 'candlestick'）。
     * heatmap 热力图
     * 热力图主要通过颜色去表现数值的大小，必须要配合 visualMap 组件使用。
     * map
     * 地图。
     * parallel
     * 平行坐标系的系列。
     * lines 线图
     * 用于带有起点和终点信息的线数据的绘制，主要用于地图上的航线，路线的可视化。
     * graph 关系图
     * 用于展现节点以及节点之间的关系数据。
     * sankey 桑基图
     * 是一种特殊的流图, 它主要用来表示原材料、能量等如何从初始形式经过中间过程的加工、转化到达最终形式。
     * funnel 漏斗图
     * @type {Array}
     * gauge 仪表盘
     */
    var CHART_TYPES = ('line bar pie radar map area gauge  scatter effectScatter treemap boxplot candlestick k heatmap parallel lines graph sankey funnel').split(/ +/);
    /**
     * charts directive.
     */

    angular.forEach(CHART_TYPES, function(type){
        (function(type){
            var chartType = type.charAt(0).toUpperCase() + type.slice(1);
            module.directive('hy'+chartType+ 'Chart', ['$onsen','HyChartView', function ($onsen,HyChartView) {
                return {
                    restrict: 'EA',
                    scope: {
                        config: '= ',
                        data: '=hyaData'
                    },
                    link: {
                        pre: function (scope, element) {
                            element.addClass('hyc-chart');
                        },
                        post: function (scope, element, attrs) {
                            var hyChartView = new HyChartView(scope, element, attrs,type);
                            //绑定var声明的对象到js和AngularJS的全局作用域中
                            $onsen.declareVarAttribute(attrs, hyChartView);
                            $onsen.registerEventHandlers(hyChartView, 'destroy');
                            element.data('hy-'+type+'-chart', hyChartView);
                            scope.$on('$destroy', function () {
                                $onsen.removeModifierMethods(hyChartView);
                                element.data('hy-'+type+'-chart', undefined);
                                element = null;
                            });

                            $onsen.fireComponentEvent(element[0], 'init');
                        }
                    }
                };
            }]);
        })(type);
    });

    module.directive('hyChart', ['$onsen','HyChartView', function ($onsen,HyChartView) {
        return {
            restrict: 'EA',
            scope: {
                config: '=hyaConfig',
                data: '=hyaData'
            },
            link: {
                pre: function (scope, element) {
                    element.addClass('hyc-chart');
                },
                post: function (scope,element, attrs) {
                    var type = 'chart';
                    var hyChartView = new HyChartView(scope, element, attrs,type);
                    //绑定var声明的对象到js和AngularJS的全局作用域中
                    $onsen.declareVarAttribute(attrs, hyChartView);
                    $onsen.registerEventHandlers(hyChartView, 'destroy');
                    element.data('hy-chart', hyChartView);
                    scope.$on('$destroy', function () {
                        $onsen.removeModifierMethods(hyChartView);
                        element.data('hy-chart', undefined);
                        element = null;
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                }
            }
        };
    }]);
})();
/**
 * Created by ym on 2017/1/11.
 */

(function(){
    'use strict';

    HyCheckboxDirective.$inject = ["inputDirective", "$hyUtil"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyCheckbox', HyCheckboxDirective);

    function HyCheckboxDirective(inputDirective, $hyUtil) {
        inputDirective = inputDirective[0];

        function getTemplate(element, attrs) {
            var hasInkString = '<div class="hy-container" hy-ink-ripple hy-ink-ripple-checkbox>' +
                '<div class="hy-icon"></div>' +
                '</div>' +
                '<div ng-transclude class="hy-label"></div>';
            var noInkString = '<div class="hy-container" >' +
                '<div class="hy-icon"></div>' +
                '</div>' +
                '<div ng-transclude class="hy-label"></div>';

            return attrs.hasOwnProperty('hyInkRippleCheckbox')
                ? hasInkString
                : noInkString;

        }

        return {
            restrict: 'E',
            transclude: true,
            require: '?ngModel',
            priority: 210, // 提高编译级别
            template: getTemplate,
            compile: compile
        };

        // **********************************************************
        // Private Methods
        // **********************************************************

        function compile(tElement, tAttrs) {
            tAttrs.$set('tabindex', tAttrs.tabindex || '0');
            tAttrs.$set('type', 'checkbox');
            tAttrs.$set('role', tAttrs.type);

            return {
                pre: function (scope, element) {
                    // 在preLink没监听一个点击处理程序，以便在禁用复选框时立即停止传播（特别是对于ng-click）。
                    element.on('click', function (e) {
                        if (this.hasAttribute('disabled')) {
                            e.stopImmediatePropagation();
                        }
                    });
                },
                post: postLink
            };

            function postLink(scope, element, attr, ngModelCtrl) {
                var isIndeterminate;
                ngModelCtrl = ngModelCtrl || $hyUtil.fakeNgModel();
                // $hyTheming(element);

                if ($hyUtil.parseAttributeBoolean(attr.hyIndeterminate)) {
                    setIndeterminateState();
                    scope.$watch(attr.hyIndeterminate, setIndeterminateState);
                }

                if (attr.ngChecked) {
                    scope.$watch(scope.$eval.bind(scope, attr.ngChecked), function (value) {
                        ngModelCtrl.$setViewValue(value);
                        ngModelCtrl.$render();
                    });
                }

                $$watchExpr('ngDisabled', 'tabindex', {
                    true: '-1',
                    false: attr.tabindex
                });

                // $hyAria.expectWithText(element, 'aria-label');

                inputDirective.link.pre(scope, {
                    on: angular.noop,
                    0: {}
                }, attr, [ngModelCtrl]);

                scope.mouseActive = false;
                element.on('click', listener)
                    .on('keypress', keypressHandler);
                // .on('mousedown', function() {
                //   scope.mouseActive = true;
                //   $timeout(function() {
                //     scope.mouseActive = false;
                //   }, 100);
                // })
                // .on('focus', function() {
                //   if (scope.mouseActive === false) {
                //     element.addClass('hy-focused');
                //   }
                // })
                // .on('blur', function() {
                //   element.removeClass('hy-focused');
                // });

                ngModelCtrl.$render = render;

                function $$watchExpr(expr, htmlAttr, valueOpts) {
                    if (attr[expr]) {
                        scope.$watch(attr[expr], function (val) {
                            if (valueOpts[val]) {
                                element.attr(htmlAttr, valueOpts[val]);
                            }
                        });
                    }
                }

                function keypressHandler(ev) {
                    var keyCode = ev.which || ev.keyCode;
                    // if (keyCode === $hyConstant.KEY_CODE.SPACE || keyCode === $hyConstant.KEY_CODE.ENTER) {
                    //     ev.preventDefault();
                    //     element.addClass('hy-focused');
                    //     listener(ev);
                    // }
                }

                function listener(ev) {
                    if (element[0].hasAttribute('disabled') || scope.skipToggle) {
                        return;
                    }

                    scope.$apply(function () {
                        // 切换复选框的状态值
                        var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;

                        ngModelCtrl.$setViewValue(viewValue, ev && ev.type);
                        ngModelCtrl.$render();
                    });
                }

                function render() {
                    // 将$viewValue转换为布尔值，因为它可能未定义
                    element.toggleClass('hy-checked', !!ngModelCtrl.$viewValue && !isIndeterminate);
                }

                function setIndeterminateState(newValue) {
                    isIndeterminate = newValue !== false;
                    if (isIndeterminate) {
                        element.attr('aria-checked', 'mixed');
                    }
                    element.toggleClass('hy-indeterminate', isIndeterminate);
                }
            }
        }
    }
})();

/**
 * Created by ym on 2017/3/15.
 */


(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .directive('contenteditable',HyContentEditAbleDirective);


    /**
     * contenteditable
     * @author mageeYang
     * @ngdoc directive
     * @name contenteditable
     * @description
     *   [ch]解决contenteditable的数据双向绑定问题[/ch]
     * @example
     * <div contenteditable='true'></div>
     */

    function HyContentEditAbleDirective() {
        return {
            require: '?ngModel',
            link: function(scope, element, attrs, ctrl) {
                if (!ctrl) { return; }
                // view -> model
                element.bind('input', function() {
                    var rerender = false;
                    var html = element.html();

                    if (attrs.noLineBreaks) {
                        html = html.replace(/<div>/g, '').replace(/<br>/g, '').replace(/<\/div>/g, '');
                        rerender = true;
                    }
                    scope.$apply(function() {
                        ctrl.$setViewValue(html);
                        if(rerender) {
                            ctrl.$render();
                        }
                    });
                });
                element.bind('blur',function(){
                    console.log("移除焦点");
                    element.flur();
                });
                // model -> view
                ctrl.$render = function() {
                    element.html(ctrl.$viewValue);
                };

                ctrl.$render();
            }
        };
    }
})();
/**
 * Created by xietao on 2016/9/28.
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('hyCountDown', ['$onsen','CountDownView', function ($onsen,CountDownView) {
        return {
            restrict: 'E',
            template: getTemplate,
            transclude:false,
            scope: {
                hyaTime:'=',
                hyaDateFormat:'@',

            },
            compile: function(element, attr){
                return  {
                    pre: function (scope, element, attrs) {
                        var countDownView = new CountDownView(scope, element, attrs);
                        $onsen.declareVarAttribute(countDownView);

                        element.data('hy-count-down', countDownView);

                        scope.$on('destory', function () {
                            countDownView._events = undefined;
                            $onsen.removeModifierMethods(countDownView);
                            element.data('hy-count-down', undefined);
                            element = null;
                        });
                    },
                    post: function (scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        function getTemplate() {

            return '<div class="layout-row layout-align-around-center">'+
                '<span ng-if=ifDay>'+
                '<span style="background: black;color: white">{{day}}</span>'+
                '<span>天</span>'+
                '</span>'+
                '<span ng-if=ifHour>'+
                '<span style="background: black;color: white">{{hour}}</span>'+
                '<span>时</span>'+
                '</span>'+
                '<span ng-if=ifMinute>'+
                '<span style="background: black;color: white">{{minute}}</span>'+
                '<span>分</span>'+
                '</span>'+
                '<span ng-if=ifSecond>'+
                '<span style="background: black;color: white">{{second}}</span>'+
                '<span>秒</span>'+
                '</span>'+
                '</div>';
        }
    }]);
    module.factory('CountDownView', ['$onsen','$interval', function ($onsen,$interval){
        var CountDownView = Class.extend({
            init:function(scope,element,attrs){
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._scope.day="00";
                this._scope.hour="00";
                this._scope.minute="00";
                this._scope.second="00";
                this._scope.ifDay=false;
                this._scope.ifHour=false;
                this._scope.ifMinute=false;
                this._scope.ifSecond=false;
                this.jude='true';
                this._scope.$on('$destroy', this._destroy.bind(this));
                this._scope.$watch('hyaTime', function() {
                    $interval.cancel(this.aaa);
                    this._hyaTime=scope.hyaTime;
                    this._resetTime = this._surplusTime();
                    this._downTime();
                    this.times = angular.bind(this,this._subtractTime);
                    console.log(scope.hyaTime);
                }.bind(this));

            },
            _judgeSpan:function(){//根据传过来的日期格式进行显示\
                if(this._scope.hyaDateFormat){//不等于空
                var ss=this._scope.hyaDateFormat.split(":");
                    for(var i=0;i<ss.length;i++){
                    if(ss[i]=="dd"){
                        this._scope.ifDay= true;
                    }else if(ss[i]=="hh"){
                        this._scope.ifHour= true;
                    }else if(ss[i]=="mm"){
                        this._scope.ifMinute= true;
                    }else if(ss[i]=="ss"){
                        this._scope.ifSecond= true;
                    }
                    }
                }else{
                    this._scope.ifDay=true;
                    this._scope.ifHour=true;
                    this._scope.ifMinute=true;
                    this._scope.ifSecond=true;
                    if(this._scope.day=="00"){
                        this._scope.ifDay= false;
                    }
                    if(this._scope.hour=="00"){
                        this._scope.ifHour= false;
                    }
                    if(this._scope.minute=="00"){
                        this._scope.ifMinute= false;
                    }
                }
            },
            _surplusTime:function(){
                var endTime=new Date(this._hyaTime).getTime();
                var nowTime=new Date().getTime();
                return endTime-nowTime;
            },
            _subtractTime:function(){
                var seconds = this._resetTime/1000;
                if(this.jude=="true"){
                    this._judgeSpan();
                    this.jude="false";
                }
                if(seconds<=0){
                    $interval.cancel(this.aaa);
                    return;
                }
                this._resetTime -= 1000;
                var minutes = Math.floor(seconds/60);
                var hours = Math.floor(minutes/60);
                var days = Math.floor(hours/24);
                this._scope.day=this._addZero(days);
                this._scope.hour=this._addZero(hours % 24);
                this._scope.minute=this._addZero(minutes % 60);
                this._scope.second= this._addZero(Math.floor(seconds%60));



            },

            _downTime:function(){//倒计时器
                var _self = this;
                _self.aaa = $interval(function () {
                    console.log("222");
                    _self.times();
                },1000);

            },
            _addZero:function(number){
             if(number<10){

              return '0'+number;
             }
                return number;
            },
            _destroy: function () {
                this.emit('destroy');
                $interval.cancel(this.aaa);
            }

        });
        MicroEvent.mixin(CountDownView);
        return CountDownView;
    }]);
})();
/**
 * Created by ym on 2017/3/15.
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyDashBoard', ['$onsen', 'DashBoardView', function ($onsen, DashBoardView) {
        return {
            restrict: 'E',
            template: '<div style="width:100%;height:100%"></div>',
            replace: true,
            scope: {
                value: "=hyaValue",
                maxValue: '=hyaMaxValue',
            },
            compile: function (element, attrs) {
                return {
                    pre: function (scope, element, attrs) {
                        var dashBoard = new DashBoardView(scope, element, attrs);
                        $onsen.declareVarAttribute(dashBoard);

                        element.data('hy-dash-board', dashBoard);

                        scope.$on('destory', function () {
                            dashBoard._events = undefined;
                            $onsen.removeModifierMethods(dashBoard);
                            element.data('hy-dash-board', undefined);
                            element = null;
                        });
                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
    }]);

    module.factory('DashBoardView', ['$onsen', function ($onsen) {

        var TICK_WIDTH = 16,
            TICK_LONG_STROKE_STYLE = "rgba(255,255,255,0.9)",
            TICK_SHORT_STROKE_STYLE = "rgba(255,255,200,0.9)";

        var START_PI = 0.9 * Math.PI,
            END_PI = 2.1 * Math.PI,
            RADIUS_REDUCE = 16,
            LINE_WIDTH = 16;

        var ANGLE_MAX = Math.PI * 2.11,
            ANGLE_DELTA = Math.PI * 1.2 / 30,
            ANNOTATION_TEXT_SIZE = 18;
        var TEST_COLOR=[
            'rgb(109,239,194)',
            'rgb(109,239,194)',
            'rgb(110,238,92)',
            'rgb(149,239,87)',
            'rgb(228,237,90)',
            'rgb(219,56,116)',
            'rgb(255,31,100)'
        ];
        var DashBoardView = Class.extend({
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this.initCompent = angular.bind(this, this._initCompent);
                this.canvas = document.createElement('canvas');
                this._element[0].appendChild(this.canvas);

                this._scope.maxValue = this._scope.maxValue || 600;
                this.step = this._scope.maxValue / 6;
                this._scope.value = this._scope.value || 0;
                this.percent = this._scope.value / this._scope.maxValue;
                setTimeout(this.initCompent, 20);
            },
            _initCompent: function () {
                this._scope._width = this._element[0].clientWidth < this._element[0].clientHeight ? this._element[0].clientWidth : this._element[0].clientHeight;
                this.width = this._element[0].clientWidth;
                this.height = this._element[0].clientHeight;
                this.canvas.width = this.width * 2;
                this.canvas.height = this.height * 2;
                this.canvas.style.width = (this.width) + 'px';
                this.canvas.style.height = (this.height) + 'px';
                this.canvas.style.postion = 'absolute';

                var _radius = parseInt((this._scope._width  - 1) * 2 / 3);
                if(this.width < this.height){
                    _radius = parseInt((this.width - 1) / 2);
                }else if(this.width > this.height){
                    if((_radius * 2)>this.width){
                        _radius = parseInt((this.width - 1) / 2);
                    }
                }

                this.circle = {
                    radius:_radius * 2,
                    x:parseInt(this.canvas.width / 2),
                    y:parseInt(_radius*2*1.1)
                };
                console.log(this.circle);

                this.ctx = this.canvas.getContext('2d');

                this.linerPosition = {
                    startX:this.circle.x - this.circle.radius,
                    startY:0,
                    endX:this.canvas.width - this.circle.x + this.circle.radius,
                    endY:0
                };

                this.linerGradient = this.ctx.createLinearGradient(this.linerPosition.startX, this.linerPosition.startY,
                    this.linerPosition.endX, this.linerPosition.endY);
                this.linerGradient.addColorStop(0, 'rgb(109,239,194)');
                this.linerGradient.addColorStop(0.8, 'rgb(221,248,92)');
                this.linerGradient.addColorStop(1, 'rgb(235,60,0)');
                this._drawDashBoard();
            },
            _drawDashBoard:function(){
                this._drawTopArc();
                this._drawMiddleArc();

                this._drawPercentArc();
                this._drawPercentFillArc();
                this._drawTicks();
                this._drawAnnotations();
            },
            /**
             * 画外弧线
             * @private
             */
            _drawTopArc: function () {
                this.ctx.beginPath();
                this.ctx.arc(this.circle.x, this.circle.y, this.circle.radius, START_PI, END_PI, false);
                this.ctx.strokeStyle = this.linerGradient;
                this.ctx.lineWidth = 2;
                this.ctx.stroke();
                this.ctx.closePath();
            },
            /**
             * 画内弧线
             * @private
             */
            _drawMiddleArc: function () {
                this.ctx.beginPath();
                this.ctx.arc(this.circle.x, this.circle.y, this.circle.radius-RADIUS_REDUCE, START_PI, END_PI, false);
                this.ctx.strokeStyle = 'rgba(255,255,255, 0.3)';

                this.ctx.lineWidth = LINE_WIDTH;
                this.ctx.stroke();
                this.ctx.closePath();
            },
            /**
             * 画刻度
             * @private
             */
            _drawTicks: function() {
                var radius = this.circle.radius-RADIUS_REDUCE - (LINE_WIDTH / 2);

                //利用度数做循环
                //cnt用于计算数目
                var self = this;
                for (var angle = START_PI, cnt = 0; angle < ANGLE_MAX; angle = angle + ANGLE_DELTA, cnt++) {
                    drawTick(angle, radius, cnt);
                }

                //利用半径与半径与x轴夹角绘制单个刻度
                function drawTick(angle, radius, cnt) {
                    var tickWidth;
                    self.ctx.save();

                    if (cnt % 5 === 0) {
                        tickWidth = TICK_WIDTH;
                        self.ctx.lineWidth = 4;
                        self.ctx.strokeStyle = TICK_LONG_STROKE_STYLE;
                    } else {
                        tickWidth = TICK_WIDTH / 2;
                        self.ctx.lineWidth = 2;
                        self.ctx.strokeStyle = TICK_SHORT_STROKE_STYLE;
                    }

                    self.ctx.beginPath();
                    self.ctx.moveTo(
                        self.circle.x + Math.cos(angle) * (radius),
                        self.circle.y + Math.sin(angle) * (radius)

                    );
                    self.ctx.lineTo(
                        self.circle.x + Math.cos(angle) * (radius + tickWidth),
                        self.circle.y + Math.sin(angle) * (radius + tickWidth)
                    );
                    self.ctx.stroke();

                    self.ctx.restore();
                }
            },
            /**
             * 画百分比进度弧线
             * @private
             */
            _drawPercentArc:function(){
                this.ctx.beginPath();
                this.ctx.arc(this.circle.x, this.circle.y, this.circle.radius-RADIUS_REDUCE, START_PI, START_PI +  (1.2 * this.percent) * Math.PI, false);
                this.ctx.strokeStyle = this.linerGradient;

                this.ctx.lineWidth = LINE_WIDTH;
                this.ctx.stroke();
                this.ctx.closePath();

            },
            /**
             * 画百分比圆点
             * @private
             */
            _drawPercentFillArc:function(){
                this.ctx.beginPath();
                var _circle = {
                    x:this.circle.x + Math.cos(START_PI +  (1.2 * this.percent) * Math.PI) * this.circle.radius,
                    y:this.circle.y + Math.sin(START_PI +  (1.2 * this.percent) * Math.PI) * this.circle.radius,
                    radius:6
                };
                console.log(_circle);
                this.ctx.arc(_circle.x, _circle.y, _circle.radius, 0, 2 * Math.PI, false);
                this.ctx.fillStyle=this.linerGradient;
                this.ctx.lineWidth = 1;
                this.ctx.strokeStyle = 'rgba(255,255,255,0)';
                this.ctx.fill();//画实心圆
                this.ctx.stroke();
                this.ctx.closePath();

            },
            /**
             * 画刻度值
             * @private
             */
            _drawAnnotations:function(){
                var radius = this.circle.radius -RADIUS_REDUCE;
                this.ctx.save();
                this.ctx.textAlign = "center";
                this.ctx.textBaseline = "middle";
                this.ctx.font = ANNOTATION_TEXT_SIZE + "px Helvetial";
                for(var angle=START_PI,_value = 0; angle<ANGLE_MAX; angle= angle+Math.PI *1.2/6,_value ++ ){
                    this.ctx.save();
                    this.ctx.beginPath();
                    this.ctx.fillStyle = TEST_COLOR[_value];
                    this.ctx.textAlign = "center";
                    // this.ctx.fillText(
                    //     _value * this.step,
                    //     this.circle.x+Math.cos(angle)*(radius-TICK_WIDTH*2),
                    //     this.circle.y+Math.sin(angle)*(radius-TICK_WIDTH*2)
                    // );
                    this.ctx.translate(this.circle.x+Math.cos(angle)*(radius-TICK_WIDTH*2), this.circle.y+Math.sin(angle)*(radius-TICK_WIDTH*2));
                    this.ctx.rotate((250+(_value*36.6))*Math.PI/180);
                    this.ctx.fillText(
                        _value * this.step,
                        0,
                        0
                    );
                    this.ctx.stroke();
                    this.ctx.closePath();
                    this.ctx.restore();
                }
                this.ctx.restore();
            }

        });
        MicroEvent.mixin(DashBoardView);
        return DashBoardView;
    }]);
})();
/**
 * Created by MageeYang on 2016/1/14.
 */


(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    /**
     * @ngdoc element+attribute
     * @name hyDatePicker 日期控件
     * @module haiyiMobile
     * @description 用于用户进行日期的年月日选择的日期控件，并提供进行时分选择的时间界面
     * hyaMinDate        最小时间
     * hyaMaxDate   最大时间
     * hyaPlaceholder      输入提示
     * hyaFormat    格式化日期的字符串
     * hyaDateValue        日期传输的变量
     * hyaTimer   是否显示时分选择界面
     * hyaHasbutton        是否显示图标按钮
     * hyaDateType         传递的日期格式类型 String、Long、Date
     * @usage <hy-datepicker  hya-date-value="cuDate"></hy-datepicker>
     */

    module.factory('DatePickerView', ['$onsen', '$q', '$hyDateLocale', function ($onsen, $q, $hyDateLocale) {
        var DatePickerView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyDateLocale = $hyDateLocale;
                this._dialog = null;
                this._dialogCompent = null;
                this._type = 'calendar';  //当前日期和时间的模式类型

                //处理自定义class和style
                //var pickerDiv = angular.element(this._element[0].querySelector('.hy-date-picker-div'));
                //if (!this._isAttribute(attrs)) {
                //    if (attrs['class']) {
                //        var customClass = attrs['class'].split(' ');
                //        for (var i = 0; i < customClass.length; i++) {
                //            pickerDiv.addClass(customClass[i]);
                //        }
                //    }
                //    if (attrs['style']) {
                //        pickerDiv[0].setAttribute('style', attrs['style']);
                //    }
                //}


                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.valueChange = angular.bind(this, this.dateValueChanged);
                this._scope.typeSelect = angular.bind(this, this.typeSelect);


                var self = this;
                //根据日期格式类型进行日期转换
                this._scope.$watch('dateModel', function (value) {
                    if (self._scope.dateModel !== undefined && self._scope.dateModel !== null && self._scope.dateModel !== '') {
                        if (self._scope.dateType === 'String') {
                            value = value.replace(/\-/g,"\/");
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType === 'Long') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType === 'Date') {
                            self._scope.dateValue = value;
                        }
                    }else if(self._scope.dateModel===''){
                        self._scope.formatValue = '';
                    }
                });
                //监听日期值变化处理
                this._scope.$watch('dateValue', function (value) {
                    self._initAttributeValue();
                    self._dateValueFormat(value);
                    if (value !== undefined && value !== null && value !== '') {
                        if (self._scope.dateType === 'String') {
                            self._scope.dateModel = self._$hyDateLocale.formatDate(value, self._scope.dateFormat);
                        } else if (self._scope.dateType === 'Long') {
                            self._scope.dateModel = value.getTime();
                        } else if (self._scope.dateType === 'Date') {
                            self._scope.dateModel = value;
                        }
                    }


                });
                this._scope.$watch('iconName', function () {
                    if (self._scope.iconName === 'undefined' || self._scope.iconName === undefined || self._scope.iconName === null || self._scope.iconName === '') {
                        self._scope.iconName = 'fa-icon-time';   //fa-calendar
                    }
                });


            },
            /**
             * 判断该指令是否是属性
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _isAttribute: function (attrs) {
                return angular.isDefined(attrs.hyDatepicker);
            },
            /**
             * 初始化指令的属性信息
             * @private
             */
            _initAttributeValue: function () {
                if (this._scope.dateFormat === undefined) {
                    if (this._scope.isTimer === 'true') {
                        this._scope.dateFormat = "YYYY-MM-DD hh:mm";
                    } else {
                        this._scope.dateFormat = "YYYY-MM-DD";
                    }
                }
                if (this._scope.placeholder === undefined) {
                    this._scope.placeholder = "請選擇日期";
                }

            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            _dateValueFormat: function (date) {
                var dateTemp = null;
                if (date !== undefined && date !== null && date !== '') {
                    this._scope.formatValue = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                    dateTemp = date;
                } else {
                    dateTemp = new Date();
                }
                if (this._scope.isTimer === 'true') {
                    if (this._type === 'calendar') {
                        this._scope.displayIcon = 'fa-clock-o';
                        this._scope.displayText = '  ' + this._$hyDateLocale.getTimerFromDate(dateTemp);
                    } else {
                        this._scope.displayIcon = 'fa-icon-time';// fa-calendar
                        this._scope.displayText = '  ' + this._$hyDateLocale.formatDate(dateTemp, 'YYYY-MM-DD');
                    }
                }
            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            dateValueChanged: function (date) {
                this._scope.dateValue = date;
                this._dateValueFormat(this._scope.dateValue);
                if (this._scope.isTimer === 'true') {
                    this.typeSelect();
                } else {
                    this._dialogCompent.hide();
                }
                if(this._scope.dateChange) {
                    this._scope.dateChange({newValue: this._scope.formatValue});
                }

            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 376;   //弹窗的默认高度
                var header_text = "請選擇日期";  //弹窗的抬头文本
                if (this._scope.isTimer === 'true') {
                    header_text = "請選擇日期和時間";
                }
                //添加抬头显示元素
                var header = angular.element('<div class="hy-datetime-picker-header"><div class="hy-datetime-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);
                //判断是否显示时分控件显示，如果是则添加时分控件和底层工具栏，并把默认高度增加48px
                if (this._scope.isTimer === 'true') {
                    height = height + 48;
                    ;
                    var timer = angular.element('<hy-timer hya-inline="false" hya-date-change="valueChange(date);" ' +
                        'hya-date-value="dateValue" ></hy-timer>');
                    var toolbar = angular.element('<div class="hy-datetime-picker-toolbar"><div class="hy-datetime-picker-toolbar-innner">' +
                        '<div class="hy-date-type-select" ng-click="typeSelect()"><ons-icon icon="{{displayIcon}}" class="ons-icon"   ></ons-icon>' +
                        '&nbsp;&nbsp;{{displayText}}</div></div></div>');//<div><button class="button button--cta" ng-click="done()">确定</button></div>
                    this._dialog.append(timer);
                    this._dialog.append(toolbar);
                }

                this._dialog.append(page);
                //调用指令自身的scope作用域编译dialog元素
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 300px', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行弹窗显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    var self = this;
                    //创建一个ons的dialog对象
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    //创建一个默认的日历元素对象
                    var calendar = angular.element('<hy-calendar hya-inline="true" hya-date-change="valueChange(date);" ' +
                        'hya-date-value="dateValue" hya-min-date="minDate" hya-max-date="maxDate"></hy-calendar>');
                    this._createDialog(calendar).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        //特殊添加当点击弹窗外围隐藏窗口后将dialog从document中移除
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });

                    });
                }
            },
            /**
             * 日期和时间模式切换
             * @param e
             */
            typeSelect: function (e) {
                var calendar = angular.element(this._dialog[0].querySelector('.hy-datepicker-calendar-pane'));
                var timer = angular.element(this._dialog[0].querySelector('.hy-timer-pane'));
                if (this._type === 'calendar') {
                    this._type = 'timer';

                    this._scope.displayIcon = 'fa-icon-time';// fa-calendar
                    this._scope.displayText = '   ' + this._$hyDateLocale.formatDate(this._scope.dateValue, 'YYYY-MM-DD');
                    setTimeout(function(){
                        calendar.addClass('hidden');
                        timer.removeClass('hidden');
                    },20);

                } else {
                    this._type = 'calendar';

                    this._scope.displayIcon = 'fa-clock-o';
                    this._scope.displayText = '  ' + this._$hyDateLocale.getTimerFromDate(this._scope.dateValue);
                    setTimeout(function(){
                        timer.addClass('hidden');
                        calendar.removeClass('hidden');
                    },20);
                }
            },

        });
        MicroEvent.mixin(DatePickerView);
        return DatePickerView;
    }]);


    module.factory('DatePickerView2', ['$onsen', '$q', '$hyDateLocale', function ($onsen, $q, $hyDateLocale) {
        var DatePickerView2 = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyDateLocale = $hyDateLocale;
                this._dialog = null;
                this._dialogCompent = null;
                this._type = 'calendar';  //当前日期和时间的模式类型
                this._scope.yearList = [];
                this._monthList = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                this._scope.monthList = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                this._scope.dayList = [];


                this._createListData();

                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.yearValueChange = angular.bind(this, this._yearValueChange);
                this._scope.monthValueChange = angular.bind(this, this._monthValueChange);
                this._scope.dayValueChange = angular.bind(this, this._dayValueChange);
                this._scope.okButton = angular.bind(this, this._okButton);
                this._scope.clearButton = angular.bind(this, this._clearButton);


                var self = this;
                //根据日期格式类型进行日期转换
                this._scope.$watch('dateModel', function (value) {
                    if (self._scope.dateModel !== undefined && self._scope.dateModel !== null && self._scope.dateModel !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateValue = value;
                        }
                    }else if(self._scope.dateModel===''){
                        self._scope.formatValue = '';
                    }
                });
                //监听日期值变化处理
                this._scope.$watch('dateValue', function (value) {
                    self._initAttributeValue();
                    self._valueChange();
                    self._dateValueFormat(value);
                    if (value !== undefined && value !== null && value !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateModel = self._$hyDateLocale.formatDate(value, self._scope.dateFormat);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateModel = value.getTime();
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateModel = value;
                        }
                    }


                });

                this._scope.$watch('iconName', function () {
                    if (self._scope.iconName === 'undefined' || self._scope.iconName === undefined || self._scope.iconName === null || self._scope.iconName === '') {
                        self._scope.iconName = 'fa-icon-time';   // fa-calendar
                    }
                });


            },
            /**
             * 判断该指令是否是属性
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _isAttribute: function (attrs) {
                return angular.isDefined(attrs.hyDatepicker2);
            },
            _createMonthList: function (minMonth, maxMonth) {
                var v_monthList = [];
                for (var k = minMonth; k < maxMonth; k++) {
                    v_monthList.push(k > 8 ? (k + 1)+"" : "0" + (k + 1));
                }
                this._scope.monthList = v_monthList;
            },
            /**
             * 生成年月的数组
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _createListData: function () {
                this._scope.minYear = this._scope.minDate ? this._scope.minDate.getFullYear() : 1900;
                this._scope.maxYear = this._scope.maxDate ? this._scope.maxDate.getFullYear() : new Date().getFullYear() + 20;

                this._minMonth = this._scope.minDate ? this._scope.minDate.getMonth() : 0;
                this._maxMonth = this._scope.maxDate ? this._scope.maxDate.getMonth() : 11;

                this._minDay = this._scope.minDate ? this._scope.minDate.getDate() : 1;
                this._maxDay = this._scope.maxDate ? this._scope.maxDate.getDate() : 31;

                var n_date = new Date();
                var num = 0;
                //生成当前默认日期

                if (n_date.getTime() < new Date(this._scope.minYear, this._minMonth, this._minDay).getTime()) {   //如果当前日期小于最小日期
                    this._scope.selectYearValue = this._scope.minYear;
                    this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1)+"" : "0" + ( this._minMonth + 1);
                    this._scope.selectDayValue = this._minDay > 9 ? this._minDay+"" : "0" + this._minDay;
                    this._createMonthList(this._minMonth,12);
                    this._createDayList(this._minDay, this._maxDay);
                }else if(n_date.getTime() > new Date(this._scope.maxYear, this._maxMonth, this._maxDay).getTime()){ //如果当前日期大于最大日期
                    this._scope.selectYearValue = this._scope.maxYear;
                    this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1)+"" : "0" + ( this._maxMonth + 1);
                    this._scope.selectDayValue = this._maxDay > 9 ? this._maxDay+"" : "0" + this._maxDay;
                    this._createMonthList(0, this._maxMonth+1);
                    this._createDayList(1, this._maxDay);
                }else{
                    this._scope.selectYearValue = n_date.getFullYear();
                    this._scope.selectMonthValue = n_date.getMonth()>8?(n_date.getMonth()+1)+"":"0"+( n_date.getMonth()+1);
                    this._scope.selectDayValue = n_date.getDate() >9 ?n_date.getDate()+"":"0"+n_date.getDate();
                    num = new Date(this._scope.selectYearValue, this._scope.selectMonthValue, 0).getDate();
                    if(this._scope.minYear==this._scope.maxYear){
                        this._createMonthList(this._minMonth,this._maxMonth+1);
                        if(this._minMonth == this._maxMonth){
                            this._createDayList(this._minDay,this._maxDay);
                        }else if(n_date.getMonth() == this._minMonth){
                            this._createDayList(this._minDay,num);
                        }else if(n_date.getMonth() == this._maxMonth){
                            this._createDayList(1,this._maxDay);
                        }else{
                            this._createDayList(1,num);
                        }
                    }else if(n_date.getFullYear()==this._scope.minYear){
                        this._createMonthList(this._minMonth,12);
                        if(n_date.getMonth() == this._minMonth){
                            this._createDayList(this._minDay,num);
                        }else{
                            this._createDayList(1,num);
                        }

                    }else if(n_date.getFullYear()==this._scope.maxYear){
                        this._createMonthList(0,this._maxMonth);
                        if(n_date.getMonth() == this._maxMonth){
                            this._createDayList(1,this._maxDay);
                        }else{
                            this._createDayList(1,num);
                        }
                    }else{
                        this._createMonthList(0,12);
                        this._createDayList(1,num);
                    }
                }




                for (var i = this._scope.minYear; i <= this._scope.maxYear; i++) {
                    this._scope.yearList.push(i);
                }
            },
            /**
             * 年的数值发生变化的处理过程
             * @private
             */
            _yearValueChange: function (date) {
                this._scope.selectYearValue = date;
                this._valueChange();

            },
            /**
             * 月度的数值发生变化的处理过程
             * @private
             */
            _monthValueChange: function (date) {
                this._scope.selectMonthValue = date;
                this._valueChange();
            },
            /**
             * 月度的数值发生变化的处理过程
             * @private
             */
            _dayValueChange: function (date) {
                this._scope.selectDayValue = date+"";
            },
            _createDayList: function (minDay, maxDay) {
                this._scope.dayList.length = 0;
                for (var i = minDay; i <= maxDay; i++) {
                    if (i <= 9) {
                        this._scope.dayList.push("0" + i);
                    } else {
                        this._scope.dayList.push(i + "");
                    }
                }
                var num = new Date(this._scope.selectYearValue, this._scope.selectMonthValue, 0).getDate();
                if (this._scope.selectDayValue.substr(0, 1) != 0) {
                    var day = parseInt(this._scope.selectDayValue);
                    if (day > num) {
                        this._scope.selectDayValue = num+"";
                    }
                }

            },
            /**
             * 年度或月度数值发生变化时重新处理天数数组
             * @private
             */
            _valueChange: function () {

                var month = this._scope.selectMonthValue.substr(0, 1) == 0 ? this._scope.selectMonthValue.substr(1, 1) : this._scope.selectMonthValue;
                var isInterval = 0; // 0表示正常，1表示是最小年，2表示是最大年，3表示是最大最小年
                var num = new Date(this._scope.selectYearValue, month, 0).getDate();

                if (this._scope.selectYearValue == this._scope.minYear && this._scope.selectYearValue != this._scope.maxYear) {
                    this._createMonthList(this._minMonth,12);
                    if (month <= this._minMonth + 1) {
                        this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1)+"" : "0" + (this._minMonth + 1);
                        month = this._minMonth + 1;
                        num = new Date(this._scope.selectYearValue, month, 0).getDate();
                        this._scope.selectDayValue = this._minDay>9?this._minDay+"":"0"+this._minDay;
                        this._createDayList(this._minDay, num);

                    }else{
                        this._createDayList(1, num);
                    }
                    isInterval = 1;
                }

                if (this._scope.selectYearValue == this._scope.maxYear && this._scope.selectYearValue != this._scope.minYear) {

                    this._createMonthList(0,this._maxMonth+1);
                    if (month >= this._maxMonth + 1) {
                        this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1)+"" : "0" + (this._maxMonth + 1);
                        month = this._maxMonth + 1;
                        this._scope.selectDayValue = "01";
                        this._createDayList(1, this._maxDay);
                    }else{
                        this._createDayList(1, num);
                    }
                    isInterval = 2;
                }

                if (this._scope.selectYearValue == this._scope.maxYear && this._scope.selectYearValue == this._scope.minYear) {
                    this._createMonthList(this._minMonth,this._maxMonth+1);
                    if (this._maxMonth == this._minMonth) {
                        this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1)+"" : "0" + (this._maxMonth + 1);
                        month = this._maxMonth + 1;
                        this._scope.selectDayValue = this._minDay>9?this._minDay+"":"0"+this._minDay;
                        this._createDayList(this._minDay, this._maxDay);


                    } else {
                        if (month >= this._maxMonth + 1) {
                            this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1)+"" : "0" + (this._maxMonth + 1);
                            month = this._maxMonth + 1;
                            this._scope.selectDayValue = "01";
                            this._createDayList(1, this._maxDay);

                        } else if (month <= this._minMonth + 1) {
                            this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1)+"" : "0" + (this._minMonth + 1);
                            month = this._minMonth + 1;
                            num = new Date(this._scope.selectYearValue, month, 0).getDate();
                            this._scope.selectDayValue = this._minDay>9?this._minDay+"":"0"+this._minDay;
                            this._createDayList(this._minDay, num);

                        }else{
                            this._createDayList(1, num);
                        }
                    }
                    isInterval = 3;
                }

                if (isInterval == 0) {
                    this._createMonthList(0,12);
                    if (num !== this._scope.dayList.length) {
                        this._scope.dayList.length = 0;
                        for (var i = 1; i <= num; i++) {
                            if (i <= 9) {
                                this._scope.dayList.push("0" + i);
                            } else {
                                this._scope.dayList.push(i + "");
                            }
                        }
                        if (this._scope.selectDayValue.substr(0, 1) != 0) {
                            var day = parseInt(this._scope.selectDayValue);
                            if (day > num) {
                                this._scope.selectDayValue = num+"";
                            }
                        }
                    }
                }

            },
            /**
             * 初始化指令的属性信息
             * @private
             */
            _initAttributeValue: function () {
                if (this._scope.dateFormat === undefined) {
                    if (this._scope.isTimer === 'true') {
                        this._scope.dateFormat = "YYYY-MM-DD hh:mm";
                    } else {
                        this._scope.dateFormat = "YYYY-MM-DD";
                    }
                }
                if (this._scope.placeholder === undefined) {
                    this._scope.placeholder = "請選擇日期";
                }

            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            _dateValueFormat: function (date) {
                var dateTemp = null;
                if (date !== undefined && date !== null && date !== '') {
                    this._scope.formatValue = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                    dateTemp = date;
                } else {
                    dateTemp = new Date();
                }
                this._scope.selectYearValue = dateTemp.getFullYear() + '';
                this._scope.selectMonthValue = dateTemp.getMonth() < 9 ? '0' + (dateTemp.getMonth() + 1) : (dateTemp.getMonth() + 1) + '';
                this._scope.selectDayValue =dateTemp.getDate()>9?dateTemp.getDate()+"":"0"+dateTemp.getDate();


            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 346;   //弹窗的默认高度
                var header_text = "請選擇日期";  //弹窗的抬头文本

                //添加抬头显示元素
                var header = angular.element('<div class="hy-datetime-picker-header"><div class="hy-datetime-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);
                var toolbar = angular.element('<div class="hy-datepicker-select-toolbar">' +
                    '<div class="hy-datepicker-select-toolbar-innner hy-layout-row hy-layout-align-space-between-center">' +
                    '<hy-button  class="hy-datepicker-toolbar-button right-border"  ng-click="clearButton()">重&nbsp;&nbsp;置</hy-button><hy-button class="hy-datepicker-toolbar-button " style="color:#ffc72c;" ng-click="okButton()">確&nbsp;&nbsp;定</hy-button>' +
                    '</div></div>');
                this._dialog.append(toolbar);


                this._dialog.append(page);
                //调用指令自身的scope作用域编译dialog元素
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 330px;border-radius:5px;', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行弹窗显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    var self = this;
                    if (self._scope.dateModel !== undefined && self._scope.dateModel !== null && self._scope.dateModel !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(self._scope.dateModel);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(self._scope.dateModel);
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateValue = self._scope.dateModel;
                        }
                    }
                    self._valueChange();
                    self._dateValueFormat(self._scope.dateValue);
                    //创建一个ons的dialog对象
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    //创建一个默认的日历元素对象
                    var calendar = null;
                    if(!this._scope.noSelectDay){
                        calendar = angular.element('<div class="hy-datepicker-select-pane hy-layout-row hy-layout-align-space-around">' +
                            '<div style="width:33.33%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="yearList" hya-value="selectYearValue" select-value="yearValueChange(data)" ></hy-scroller></div>' +
                            '<div style="width:33.33%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="monthList" hya-value="selectMonthValue" select-value="monthValueChange(data)" ></hy-scroller></div>' +
                            '<div style="width:33.33%;height:100%;" ng-hide="noSelectDay"><hy-scroller active-class="{{activeClass}}" hya-data="dayList" hya-value="selectDayValue" select-value="dayValueChange(data)" ></hy-scroller></div>' +
                            '</div>');
                    }else{
                        calendar = angular.element('<div class="hy-datepicker-select-pane hy-layout-row hy-layout-align-space-around">' +
                            '<div style="width:50%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="yearList" hya-value="selectYearValue" select-value="yearValueChange(data)" ></hy-scroller></div>' +
                            '<div style="width:50%;height:100%;"><hy-scroller active-class="{{activeClass}}" hya-data="monthList" hya-value="selectMonthValue" select-value="monthValueChange(data)" ></hy-scroller></div>' +
                            '</div>');
                    }


                    this._createDialog(calendar).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        //特殊添加当点击弹窗外围隐藏窗口后将dialog从document中移除
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });

                    });
                }
            },
            /**
             * 确定的处理函数
             * @param e
             */
            _okButton: function (e) {
                var flag = false;
                var date = new Date(this._scope.selectYearValue + "/" + this._scope.selectMonthValue + "/" + this._scope.selectDayValue);
                if(this._scope.dateValue == undefined){
                    this._scope.dateValue = date;
                    flag = true;
                }
                var year_temp = this._scope.dateValue.getFullYear()+'';
                var month_temp = this._scope.dateValue.getMonth() < 9 ? '0' + (this._scope.dateValue.getMonth() + 1) : (this._scope.dateValue.getMonth() + 1) + '';
                var day_temp = this._scope.dateValue.getDate()>9?this._scope.dateValue.getDate()+'':'0'+this._scope.dateValue.getDate();
                var newDate = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                var oldDate = this._$hyDateLocale.formatDate(this._scope.dateValue, this._scope.dateFormat);
                this._scope.dateValue = date;
                this._dateValueFormat(this._scope.dateValue);
                if(flag){
                    if(this._scope.dateChange) {
                        this._scope.dateChange({newValue: newDate,oldValue:null});
                    }
                }else{
                    if(!(this._scope.selectYearValue == year_temp &&  this._scope.selectMonthValue == month_temp && this._scope.selectDayValue == day_temp)){
                        if(this._scope.dateChange) {
                            this._scope.dateChange({newValue: newDate,oldValue:oldDate});
                        }

                    }

                }
                // if (this._scope.isTimer === 'true') {
                //     // this.typeSelect();
                // } else {
                    this._dialogCompent.hide();
                // }
            },
            /**
             * 清除的处理函数
             * @param e
             */
            _clearButton: function () {
                this._scope.formatValue = "";
                this._scope.dateValue = undefined;
                this._scope.dateModel = undefined;
                this._dialogCompent.hide();
            },

        });
        MicroEvent.mixin(DatePickerView2);
        return DatePickerView2;
    }]);

    /**
     * 定义了日期选择控件的指令
     */
    module.directive('hyDatepicker', ['$onsen', 'DatePickerView', '$compile', function ($onsen, DatePickerView, $compile) {
        return {
            restrict: 'EA',
            template: getTemplate,
            //replace: true,
            transclude: true,
            scope: {
                minDate: '=hyaMinDate',   //最小时间
                maxDate: '=hyaMaxDate',   //最大时间
                placeholder: '@hyaPlaceholder', //输入提示
                dateFormat: '@hyaFormat',  //格式化日期的字符串
                dateModel: '=hyaDateValue', //日期传输的变量
                isTimer: '@hyaTimer',    //是否显示时分选择界面
                isbutton: '@hyaHasbutton',  //是否显示图标按钮
                inputClass: '@hyaInputClass',    //input元素的样式
                iconName: '@hyaIconName',    //图片样式名称
                dateType: '@hyaDateType',    //传递过来的日期类型，值为String,Date,Long,默认是Long
                dateChange:'&hyaDateChange',    //日期值变化的回调函数
                activeClass: '@hyaActiveClass',    //激活样式
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {
                        if (scope.isbutton === 'undefined' || scope.isbutton === undefined || scope.isbutton === null || scope.isbutton === 'true') {
                            scope.hasButton = true;   //表示是否显示图标按钮，默认是true
                            scope.nobuttonstyle = '';
                        } else {
                            scope.hasButton = false;
                            scope.nobuttonstyle = 'nobutton';
                        }

                        if (scope.dateType === 'undefined' || scope.dateType === undefined || scope.dateType === null || scope.dateType === '') {
                            scope.dateType = 'Long';
                        }

                        if (scope.dateType !== 'Long' && scope.dateType !== 'String' && scope.dateType !== 'Date') {
                            console.warn('datePicker标签的hya-date-type属性值不是选项值，请填写下列值中的任一个:Long,String,Date;默认设置成Long');
                            scope.dateType = 'Long';
                        }

                        var datepicker = new DatePickerView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, datepicker);

                        element.data('hy-datepicker', datepicker);

                        scope.$on('destory', function () {
                            datepicker._events = undefined;
                            $onsen.removeModifierMethods(datepicker);
                            element.data('hy-datepicker', undefined);
                            element = null;
                        });
                        if (isAttribute(attrs)) {   //如果是元素的属性，则添加点击事件
                            element.on('click', function (e) {
                                datepicker.onShow(e);
                            })
                        }

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 判断当前指令是作为元素存在还是属性存在
         * @param attr
         * @returns {boolean|*}
         */
        function isAttribute(attr) {
            return angular.isDefined(attr.hyDatepicker);
        }

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            if (isAttribute(attr)) {
                if (element[0].nodeName === 'HY-DATEPICKER') {
                    console.warn('日期控件指令不能作为自身的属性');
                    return false;
                }

                return "<div ng-transclude></div>";
            } else {

                return '<div layout="row">' +
                    '<input ng-model="formatValue" ng-click="onshow($event)" placeholder="{{placeholder}}" ' +
                    'class="text-input hy-date-picker-input {{nobuttonstyle}} {{inputClass}} "  readonly id="my-input">' +
                    '<hy-button ng-if="hasButton"  class="hy-datepicker-button hy-fill" ng-click="onshow($event)"> ' +
                    '<hy-icon hy-font-icon="{{iconName}}" style="line-height: 1.1;"></hy-icon>' +
                    '</hy-button></div>';


            }
        }
    }]);

    /**
     * 定义了日期选择控件的指令
     */
    module.directive('hyDatepicker2', ['$onsen', 'DatePickerView2', '$compile', function ($onsen, DatePickerView2, $compile) {
        return {
            restrict: 'EA',
            template: getTemplate,
            //replace: true,
            transclude: true,
            scope: {
                minDate: '=hyaMinDate',   //最小时间
                maxDate: '=hyaMaxDate',   //最大时间
                placeholder: '@hyaPlaceholder', //输入提示
                dateFormat: '@hyaFormat',  //格式化日期的字符串
                dateModel: '=hyaDateValue', //日期传输的变量
                isbutton: '@hyaHasbutton',  //是否显示图标按钮
                inputClass: '@hyaInputClass',    //input元素的样式
                iconName: '@hyaIconName',    //图片样式名称
                dateType: '@hyaDateType',    //传递过来的日期类型，值为String,Date,Long,默认是Long
                dateChange:'&hyaDateChange',    //日期值变化的回调函数
                noDay:'@hyaNoDay',  //该组件是否显示天的选择
                activeClass: '@hyaActiveClass',    //激活样式
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {
                        if (scope.isbutton === 'undefined' || scope.isbutton === undefined || scope.isbutton === null || scope.isbutton === 'true') {
                            scope.hasButton = true;   //表示是否显示图标按钮，默认是true
                            scope.nobuttonstyle = '';
                        } else {
                            scope.hasButton = false;
                            scope.nobuttonstyle = 'nobutton';
                        }

                        if (scope.noDay === 'undefined' || scope.noDay === undefined || scope.noDay === null) {
                            scope.noSelectDay = false;   //表示是否有天的选择，默认是false
                        } else if (scope.noDay === 'true' || scope.noDay == '1') {
                            scope.noSelectDay = true;

                        }

                        if (scope.dateType === 'undefined' || scope.dateType === undefined || scope.dateType === null || scope.dateType === '') {
                            scope.dateType = 'Long';
                        }

                        if (scope.dateType != 'Long' && scope.dateType != 'String' && scope.dateType != 'Date') {
                            console.warn('datePicker2标签的hya-date-type属性值不是选项值，请填写下列值中的任一个:Long,String,Date;默认设置成Long');
                            scope.dateType = 'Long';
                        }

                        var datepicker = new DatePickerView2(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, datepicker);

                        element.data('hy-datepicker2', datepicker);

                        scope.$on('destory', function () {
                            datepicker._events = undefined;
                            $onsen.removeModifierMethods(datepicker);
                            element.data('hy-datepicker2', undefined);
                            element = null;
                        });
                        if (isAttribute(attrs)) {   //如果是元素的属性，则添加点击事件
                            element.on('click', function (e) {
                                datepicker.onShow(e);
                            })
                        }

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 判断当前指令是作为元素存在还是属性存在
         * @param attr
         * @returns {boolean|*}
         */
        function isAttribute(attr) {
            return angular.isDefined(attr.hyDatepicker);
        }

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            if (isAttribute(attr)) {
                if (element[0].nodeName === 'HY-DATEPICKER2') {
                    console.warn('日期控件指令不能作为自身的属性');
                    return false;
                }

                return "<div ng-transclude></div>";
            } else {

                return '<div layout="row">' +
                    '<input ng-model="formatValue" ng-click="onshow($event)" placeholder="{{placeholder}}" ' +
                    'class="text-input hy-date-picker-input {{nobuttonstyle}} {{inputClass}} "  readonly id="my-input">' +
                    '<hy-button ng-if="hasButton"  class="hy-datepicker-button hy-fill" ng-click="onshow($event)"> ' +
                    '<hy-icon hy-font-icon="{{iconName}}" style="line-height: 1.1"></hy-icon>' +
                    '</hy-button></div>';


            }
        }
    }]);


    /**
     * @ngdoc element
     * @name hyTimePicker 时间控件
     * @module haiyiMobile
     * @description 用于用户进行时分选择的时间控件
     * hyaPlaceholder      输入提示
     * hyaTimeValue        日期传输的变量
     * hyaHasbutton        是否显示图标按钮
     * @usage <hy-timepicker hya-time-value="cuDate"></hy-timepicker>
     */

    /**
     * 定义了时间选择控件的指令
     */
    module.directive('hyTimepicker', ['$onsen', 'TimePickerView', function ($onsen, TimePickerView) {
        return {
            restrict: 'E',
            template: getTemplate,
            scope: {
                placeholder: '@hyaPlaceholder', //输入提示
                timeModel: '=hyaTimeValue', //时间日期的传递值
                isbutton: '@hyaHasbutton',  //是否显示图标按钮
                inputClass: '@hyaInputClass',    //input元素的样式
                iconName: '@hyaIconName',    //图片样式名称
                dateType: '@hyaDateType',    //传递过来的日期类型，值为String,Date,Long,默认是Long
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {
                        if (scope.isbutton === 'undefined' || scope.isbutton === undefined ||
                            scope.isbutton === null || scope.isbutton === 'true') {
                            scope.hasButton = true;   //表示是否显示图标按钮，默认是true
                            scope.nobuttonstyle = '';
                        } else {
                            scope.hasButton = false;
                            scope.nobuttonstyle = 'nobutton';
                        }

                        if (scope.dateType === 'undefined' || scope.dateType === undefined || scope.dateType === null || scope.dateType === '') {
                            scope.dateType = 'Long';
                        }

                        if (scope.dateType != 'Long' && scope.dateType != 'String' && scope.dateType != 'Date') {
                            console.warn('timePicker标签的hya-date-type属性值不是选项值，请填写下列值中的任一个:Long,String,Date;默认设置成Long');
                            scope.dateType = 'Long';
                        }

                        var timepicker = new TimePickerView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, timepicker);

                        element.data('hy-timepicker', timepicker);

                        scope.$on('destory', function () {
                            timepicker._events = undefined;
                            $onsen.removeModifierMethods(timepicker);
                            element.data('hy-timepicker', undefined);
                            element = null;
                        });
                        if (isAttribute(attrs)) {
                            element.on('click', function (e) {
                                timepicker.onShow(e);
                            })
                        }

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 判断当前指令是作为元素存在还是属性存在
         * @param attr
         * @returns {boolean|*}
         */
        function isAttribute(attr) {
            return angular.isDefined(attr.hyTimepicker);
        }

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            if (isAttribute(attr)) {
                if (element[0].nodeName === 'HY-TIMEPICKER') {
                    console.warn('时间控件指令不能作为自身的属性');
                    return false;
                }
                return element.html();
            } else {
                return '<div layout="row"><input ng-model="formatValue" ng-click="onshow($event)" ' +
                    'placeholder="{{placeholder}}" class="text-input hy-date-picker-input {{nobuttonstyle}} {{inputClass}}" readonly  id="my-input">' +
                    '<hy-button ng-if="hasButton"  class="hy-timepicker-button hy-fill" ng-click="onshow($event)" > ' +
                    '<hy-icon style="line-height: 1.1" hy-font-icon="{{iconName}}" ></hy-icon></hy-button></div>';
            }
        }
    }]);

    /**
     * 定义时间选择控件的服务视图
     */
    module.factory('TimePickerView', ['$onsen', '$q', '$hyDateLocale', function ($onsen, $q, $hyDateLocale) {
        var TimePickerView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyDateLocale = $hyDateLocale;
                this._dialog = null;
                this._dialogCompent = null;

                //处理自定义class和style
                var pickerDiv = angular.element(this._element[0].querySelector('.hy-date-picker-div'));
                if (!this._isAttribute(attrs)) {
                    if (attrs['class']) {
                        var customClass = attrs['class'].split(' ');
                        for (var i = 0; i < customClass.length; i++) {
                            pickerDiv.addClass(customClass[i]);
                        }
                    }
                    if (attrs['style']) {
                        pickerDiv[0].setAttribute('style', attrs['style']);
                    }
                }

                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.valueChange = angular.bind(this, this.dateValueChanged);

                var self = this;

                this._scope.$watch('timeModel', function (value) {
                    if (self._scope.timeModel !== undefined && self._scope.timeModel !== null && self._scope.timeModel !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.timeValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.timeValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.timeValue = value;
                        }

                    }
                });
                //监听日期值是否变化

                this._scope.$watch('timeValue', function (value) {
                    self._initAttributeValue();
                    self._dateValueFormat(value);
                    if (value !== undefined && value !== null && value !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.timeModel = self._$hyDateLocale.formatDate(value, 'YYYY-MM-DD hh:mm:ss');
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.timeModel = value.getTime();
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.timeModel = value;
                        }
                    }
                });
                this._scope.$watch('iconName', function () {
                    if (self._scope.iconName === 'undefined' || self._scope.iconName === undefined || self._scope.iconName === null || self._scope.iconName === '') {
                        self._scope.iconName = 'fa-clock-o';   //
                    }
                });


            },
            /**
             * 判断该指令是否是属性
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _isAttribute: function (attrs) {
                return angular.isDefined(attrs.hyTimepicker);
            },
            /**
             * 初始化指令的属性信息
             * @private
             */
            _initAttributeValue: function () {
                if (this._scope.placeholder === undefined) {
                    this._scope.placeholder = "请选择时间";
                }

            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            _dateValueFormat: function (date) {
                if (date !== undefined && date !== null) {
                    this._scope.formatValue = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':' + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes());
                }
            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            dateValueChanged: function (date) {
                this._scope.timeValue = date;
                this._dateValueFormat(this._scope.timeValue);
                this._dialogCompent.hide();
            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 376;
                var header_text = "请选择时间";
                var header = angular.element('<div class="hy-datetime-picker-header"><div class="hy-datetime-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);
                this._dialog.append(page);
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 300px', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行窗口显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    //创建一个dialog对象
                    var self = this;
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    var timer = angular.element('<hy-timer hya-inline="false" hya-date-change="valueChange(date);" ' +
                        'hya-date-value="timeValue" ></hy-timer>');
                    this._createDialog(timer).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });
                    });
                }
            }

        });
        MicroEvent.mixin(TimePickerView);
        return TimePickerView;
    }]);

})();

/**
 * Created by MageeYang on 2017/12/26.
 */


(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    module.factory('DatePickerView3', ['$onsen', '$q', '$hyDateLocale', function ($onsen, $q, $hyDateLocale) {
        var DatePickerView3 = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyDateLocale = $hyDateLocale;
                this._dialog = null;
                this._dialogCompent = null;
                this._type = 'calendar';  //当前日期和时间的模式类型
                this._scope.yearList = [];
                this._monthList = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                this._hourList = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                    '21', '22', '23'];
                this._minuteList = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                    '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',
                    '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',
                    '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',
                    '51', '52', '53', '54', '55', '56', '57', '58', '59'];
                this._scope.monthList = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
                this._scope.hourList = ['00','01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                    '21', '22', '23'];
                this._scope.minuteList = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                    '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                    '21', '22', '23', '24', '25', '26', '27', '28', '29', '30',
                    '31', '32', '33', '34', '35', '36', '37', '38', '39', '40',
                    '41', '42', '43', '44', '45', '46', '47', '48', '49', '50',
                    '51', '52', '53', '54', '55', '56', '57', '58', '59'];
                this._scope.dayList = [];


                this._createListData();

                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.yearValueChange = angular.bind(this, this._yearValueChange);
                this._scope.monthValueChange = angular.bind(this, this._monthValueChange);
                this._scope.dayValueChange = angular.bind(this, this._dayValueChange);
                this._scope.hourValueChange = angular.bind(this, this._hourValueChange);
                this._scope.minuteValueChange = angular.bind(this, this._minuteValueChange);
                this._scope.okButton = angular.bind(this, this._okButton);
                this._scope.clearButton = angular.bind(this, this._clearButton);


                var self = this;
                //根据日期格式类型进行日期转换
                this._scope.$watch('dateModel', function (value) {
                    if (self._scope.dateModel !== undefined && self._scope.dateModel !== null && self._scope.dateModel !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(value);
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateValue = value;
                        }
                    }
                });
                //监听日期值变化处理
                this._scope.$watch('dateValue', function (value) {
                    self._initAttributeValue();
                    self._valueChange();
                    self._dateValueFormat(value);
                    if (value !== undefined && value !== null && value !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateModel = self._$hyDateLocale.formatDate(value, self._scope.dateFormat);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateModel = value.getTime();
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateModel = value;
                        }
                    }


                });

                this._scope.$watch('iconName', function () {
                    if (self._scope.iconName === 'undefined' || self._scope.iconName === undefined || self._scope.iconName === null || self._scope.iconName === '') {
                        self._scope.iconName = 'fa-icon-time';   // fa-calendar
                    }
                });


            },
            /**
             * 判断该指令是否是属性
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _isAttribute: function (attrs) {
                return angular.isDefined(attrs.hyDatepicker3);
            },
            _createMonthList: function (minMonth, maxMonth) {
                var v_monthList = [];
                for (var k = minMonth; k < maxMonth; k++) {
                    v_monthList.push(k > 8 ? (k + 1) + "" : "0" + (k + 1));
                }
                this._scope.monthList = v_monthList;
            },
            /**
             * 生成年月的数组
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _createListData: function () {
                this._scope.minYear = this._scope.minDate ? this._scope.minDate.getFullYear() : 1900;
                this._scope.maxYear = this._scope.maxDate ? this._scope.maxDate.getFullYear() : new Date().getFullYear() + 20;

                this._minMonth = this._scope.minDate ? this._scope.minDate.getMonth() : 0;
                this._maxMonth = this._scope.maxDate ? this._scope.maxDate.getMonth() : 11;

                this._minDay = this._scope.minDate ? this._scope.minDate.getDate() : 1;
                this._maxDay = this._scope.maxDate ? this._scope.maxDate.getDate() : 31;

                var n_date = new Date();
                var num = 0;
                //生成当前默认日期
                this._scope.selectHourValue = n_date.getHours() > 9 ? n_date.getHours() + "" : "0" + n_date.getHours();
                this._scope.selectMinuteValue = n_date.getMinutes() > 9 ? n_date.getMinutes() + "" : "0" + n_date.getMinutes();
                if (n_date.getTime() < new Date(this._scope.minYear, this._minMonth, this._minDay).getTime()) {   //如果当前日期小于最小日期
                    this._scope.selectYearValue = this._scope.minYear;
                    this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1) + "" : "0" + ( this._minMonth + 1);
                    this._scope.selectDayValue = this._minDay > 9 ? this._minDay + "" : "0" + this._minDay;
                    this._createMonthList(this._minMonth, 12);
                    this._createDayList(this._minDay, this._maxDay);
                } else if (n_date.getTime() > new Date(this._scope.maxYear, this._maxMonth, this._maxDay).getTime()) { //如果当前日期大于最大日期
                    this._scope.selectYearValue = this._scope.maxYear;
                    this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1) + "" : "0" + ( this._maxMonth + 1);
                    this._scope.selectDayValue = this._maxDay > 9 ? this._maxDay + "" : "0" + this._maxDay;
                    this._createMonthList(0, this._maxMonth + 1);
                    this._createDayList(1, this._maxDay);
                } else {
                    this._scope.selectYearValue = n_date.getFullYear();
                    this._scope.selectMonthValue = n_date.getMonth() > 8 ? (n_date.getMonth() + 1) + "" : "0" + ( n_date.getMonth() + 1);
                    this._scope.selectDayValue = n_date.getDate() > 9 ? n_date.getDate() + "" : "0" + n_date.getDate();
                    num = new Date(this._scope.selectYearValue, this._scope.selectMonthValue, 0).getDate();
                    if (this._scope.minYear == this._scope.maxYear) {
                        this._createMonthList(this._minMonth, this._maxMonth + 1);
                        if (this._minMonth == this._maxMonth) {
                            this._createDayList(this._minDay, this._maxDay);
                        } else if (n_date.getMonth() == this._minMonth) {
                            this._createDayList(this._minDay, num);
                        } else if (n_date.getMonth() == this._maxMonth) {
                            this._createDayList(1, this._maxDay);
                        } else {
                            this._createDayList(1, num);
                        }
                    } else if (n_date.getFullYear() == this._scope.minYear) {
                        this._createMonthList(this._minMonth, 12);
                        if (n_date.getMonth() == this._minMonth) {
                            this._createDayList(this._minDay, num);
                        } else {
                            this._createDayList(1, num);
                        }

                    } else if (n_date.getFullYear() == this._scope.maxYear) {
                        this._createMonthList(0, this._maxMonth);
                        if (n_date.getMonth() == this._maxMonth) {
                            this._createDayList(1, this._maxDay);
                        } else {
                            this._createDayList(1, num);
                        }
                    } else {
                        this._createMonthList(0, 12);
                        this._createDayList(1, num);
                    }
                }


                for (var i = this._scope.minYear; i <= this._scope.maxYear; i++) {
                    this._scope.yearList.push(i);
                }
            },
            /**
             * 年的数值发生变化的处理过程
             * @private
             */
            _yearValueChange: function (date) {
                this._scope.selectYearValue = date;
                this._valueChange();
            },
            /**
             * 月度的数值发生变化的处理过程
             * @private
             */
            _monthValueChange: function (date) {
                this._scope.selectMonthValue = date;
                this._valueChange();
            },
            /**
             * 天数的数值发生变化的处理过程
             * @private
             */
            _dayValueChange: function (date) {
                this._scope.selectDayValue = date + "";
            },
            _hourValueChange: function (date) {
                this._scope.selectHourValue = date + "";
            },
            _minuteValueChange: function (date) {
                this._scope.selectMinuteValue = date + "";
            },
            _createDayList: function (minDay, maxDay) {
                this._scope.dayList.length = 0;
                for (var i = minDay; i <= maxDay; i++) {
                    if (i <= 9) {
                        this._scope.dayList.push("0" + i);
                    } else {
                        this._scope.dayList.push(i + "");
                    }
                }
                var num = new Date(this._scope.selectYearValue, this._scope.selectMonthValue, 0).getDate();
                if (this._scope.selectDayValue.substr(0, 1) != 0) {
                    var day = parseInt(this._scope.selectDayValue);
                    if (day > num) {
                        this._scope.selectDayValue = num + "";
                    }
                }

            },
            /**
             * 年度或月度数值发生变化时重新处理天数数组
             * @private
             */
            _valueChange: function () {

                var month = this._scope.selectMonthValue.substr(0, 1) == 0 ? this._scope.selectMonthValue.substr(1, 1) : this._scope.selectMonthValue;
                var isInterval = 0; // 0表示正常，1表示是最小年，2表示是最大年，3表示是最大最小年
                var num = new Date(this._scope.selectYearValue, month, 0).getDate();

                if (this._scope.selectYearValue == this._scope.minYear && this._scope.selectYearValue != this._scope.maxYear) {
                    this._createMonthList(this._minMonth, 12);
                    if (month <= this._minMonth + 1) {
                        this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1) + "" : "0" + (this._minMonth + 1);
                        month = this._minMonth + 1;
                        num = new Date(this._scope.selectYearValue, month, 0).getDate();
                        this._scope.selectDayValue = this._minDay > 9 ? this._minDay + "" : "0" + this._minDay;
                        this._createDayList(this._minDay, num);

                    } else {
                        this._createDayList(1, num);
                    }
                    isInterval = 1;
                }

                if (this._scope.selectYearValue == this._scope.maxYear && this._scope.selectYearValue != this._scope.minYear) {

                    this._createMonthList(0, this._maxMonth + 1);
                    if (month >= this._maxMonth + 1) {
                        this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1) + "" : "0" + (this._maxMonth + 1);
                        month = this._maxMonth + 1;
                        this._scope.selectDayValue = "01";
                        this._createDayList(1, this._maxDay);
                    } else {
                        this._createDayList(1, num);
                    }
                    isInterval = 2;
                }

                if (this._scope.selectYearValue == this._scope.maxYear && this._scope.selectYearValue == this._scope.minYear) {
                    this._createMonthList(this._minMonth, this._maxMonth + 1);
                    if (this._maxMonth == this._minMonth) {
                        this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1) + "" : "0" + (this._maxMonth + 1);
                        month = this._maxMonth + 1;
                        this._scope.selectDayValue = this._minDay > 9 ? this._minDay + "" : "0" + this._minDay;
                        this._createDayList(this._minDay, this._maxDay);


                    } else {
                        if (month >= this._maxMonth + 1) {
                            this._scope.selectMonthValue = this._maxMonth > 8 ? (this._maxMonth + 1) + "" : "0" + (this._maxMonth + 1);
                            month = this._maxMonth + 1;
                            this._scope.selectDayValue = "01";
                            this._createDayList(1, this._maxDay);

                        } else if (month <= this._minMonth + 1) {
                            this._scope.selectMonthValue = this._minMonth > 8 ? (this._minMonth + 1) + "" : "0" + (this._minMonth + 1);
                            month = this._minMonth + 1;
                            num = new Date(this._scope.selectYearValue, month, 0).getDate();
                            this._scope.selectDayValue = this._minDay > 9 ? this._minDay + "" : "0" + this._minDay;
                            this._createDayList(this._minDay, num);

                        } else {
                            this._createDayList(1, num);
                        }
                    }
                    isInterval = 3;
                }

                if (isInterval == 0) {
                    this._createMonthList(0, 12);
                    if (num !== this._scope.dayList.length) {
                        this._scope.dayList.length = 0;
                        for (var i = 1; i <= num; i++) {
                            if (i <= 9) {
                                this._scope.dayList.push("0" + i);
                            } else {
                                this._scope.dayList.push(i + "");
                            }
                        }
                        if (this._scope.selectDayValue.substr(0, 1) != 0) {
                            var day = parseInt(this._scope.selectDayValue);
                            if (day > num) {
                                this._scope.selectDayValue = num + "";
                            }
                        }
                    }
                }

            },
            /**
             * 初始化指令的属性信息
             * @private
             */
            _initAttributeValue: function () {
                if (this._scope.dateFormat === undefined) {
                    this._scope.dateFormat = "YYYY-MM-DD hh:mm:ss";
                }
                if (this._scope.placeholder === undefined) {
                    this._scope.placeholder = "請選擇日期";
                }

            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            _dateValueFormat: function (date) {
                var dateTemp = null;
                if (date !== undefined && date !== null && date !== '') {
                    this._scope.formatValue = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                    dateTemp = date;
                } else {
                    dateTemp = new Date();
                }
                this._scope.selectYearValue = dateTemp.getFullYear() + '';
                this._scope.selectMonthValue = dateTemp.getMonth() < 9 ? '0' + (dateTemp.getMonth() + 1) : (dateTemp.getMonth() + 1) + '';
                this._scope.selectDayValue = dateTemp.getDate() > 9 ? dateTemp.getDate() + "" : "0" + dateTemp.getDate();
                this._scope.selectHourValue = dateTemp.getHours() > 9 ? dateTemp.getHours() + "" : "0" + dateTemp.getHours();
                this._scope.selectMinuteValue = dateTemp.getMinutes() > 9 ? dateTemp.getMinutes() + "" : "0" + dateTemp.getMinutes();
            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 346;   //弹窗的默认高度
                var header_text = "請選擇日期時間";  //弹窗的抬头文本

                //添加抬头显示元素
                var header = angular.element('<div class="hy-datetime-picker-header"><div class="hy-datetime-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);
                var toolbar = angular.element('<div class="hy-datepicker-select-toolbar">' +
                    '<div class="hy-datepicker-select-toolbar-innner hy-layout-row hy-layout-align-space-between-center" >' +
                    '<hy-button  class="hy-datepicker-toolbar-button right-border"  ng-click="clearButton()">重&nbsp;&nbsp;置</hy-button><hy-button class="hy-datepicker-toolbar-button " style="color:#ffc72c;" ng-click="okButton()">確&nbsp;&nbsp;定</hy-button>' +
                    '</div></div>');
                this._dialog.append(toolbar);


                this._dialog.append(page);
                //调用指令自身的scope作用域编译dialog元素
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 330px;border-radius:5px;', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行弹窗显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    var self = this;
                    if (self._scope.dateModel !== undefined && self._scope.dateModel !== null && self._scope.dateModel !== '') {
                        if (self._scope.dateType == 'String') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(self._scope.dateModel);
                        } else if (self._scope.dateType == 'Long') {
                            self._scope.dateValue = self._$hyDateLocale.parseDate(self._scope.dateModel);
                        } else if (self._scope.dateType == 'Date') {
                            self._scope.dateValue = self._scope.dateModel;
                        }
                    }
                    self._valueChange();
                    self._dateValueFormat(self._scope.dateValue);
                    //创建一个ons的dialog对象
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    //创建一个默认的日历元素对象
                    var calendar = angular.element('<div class="hy-datepicker-select-pane hy-layout-row hy-layout-align-space-around">' +
                        '<div style="width:20%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="yearList" hya-value="selectYearValue" select-value="yearValueChange(data)" ></hy-scroller></div>' +
                        '<div style="width:20%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="monthList" hya-value="selectMonthValue" select-value="monthValueChange(data)" ></hy-scroller></div>' +
                        '<div style="width:20%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="dayList" hya-value="selectDayValue" select-value="dayValueChange(data)" ></hy-scroller></div>' +
                        '<div style="width:20%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="hourList" hya-value="selectHourValue" select-value="hourValueChange(data)" ></hy-scroller></div>' +
                        '<div style="width:20%;height:100%;" ><hy-scroller active-class="{{activeClass}}" hya-data="minuteList" hya-value="selectMinuteValue" select-value="minuteValueChange(data)" ></hy-scroller></div>' +
                        '</div>');


                    this._createDialog(calendar).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        //特殊添加当点击弹窗外围隐藏窗口后将dialog从document中移除
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });

                    });
                }
            },
            /**
             * 确定的处理函数
             * @param e
             */
            _okButton: function (e) {
                var flag = false;
                var date = new Date(this._scope.selectYearValue + "/" + this._scope.selectMonthValue + "/" + this._scope.selectDayValue + " " + this._scope.selectHourValue +
                    ":" + this._scope.selectMinuteValue + ":00");
                if (this._scope.dateValue == undefined) {
                    this._scope.dateValue = date;
                    flag = true;
                }
                var year_temp = this._scope.dateValue.getFullYear() + '';
                var month_temp = this._scope.dateValue.getMonth() < 9 ? '0' + (this._scope.dateValue.getMonth() + 1) : (this._scope.dateValue.getMonth() + 1) + '';
                var day_temp = this._scope.dateValue.getDate() > 9 ? this._scope.dateValue.getDate() + '' : '0' + this._scope.dateValue.getDate();
                var hour_temp = this._scope.dateValue.getHours() > 9 ? this._scope.dateValue.getHours() + '' : '0' + this._scope.dateValue.getHours();
                var minute_temp = this._scope.dateValue.getMinutes() > 9 ? this._scope.dateValue.getMinutes() + '' : '0' + this._scope.dateValue.getMinutes();
                var newDate = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                var oldDate = this._$hyDateLocale.formatDate(this._scope.dateValue, this._scope.dateFormat);
                this._scope.dateValue = date;
                this._dateValueFormat(this._scope.dateValue);
                if (flag) {
                    if (this._scope.dateChange) {
                        this._scope.dateChange({newValue: newDate, oldValue: null});
                    }
                } else {
                    if (!(this._scope.selectYearValue == year_temp && this._scope.selectMonthValue == month_temp && this._scope.selectDayValue == day_temp
                        && this._scope.selectHourValue == hour_temp && this._scope.selectMinuteValue == minute_temp)) {
                        if (this._scope.dateChange) {
                            this._scope.dateChange({newValue: newDate, oldValue: oldDate});
                        }
                    }
                }
                this._dialogCompent.hide();

            },
            /**
             * 清除的处理函数
             * @param e
             */
            _clearButton: function () {
                this._scope.formatValue = "";
                this._scope.dateValue = undefined;
                this._scope.dateModel = undefined;
                this._dialogCompent.hide();
            },
            clearTimeButton: function () {
                this._scope.formatValue = "";
                this._scope.dateValue = undefined;
                this._scope.dateModel = undefined;
            },

        });
        MicroEvent.mixin(DatePickerView3);
        return DatePickerView3;
    }]);

    /**
     * 定义了日期选择控件的指令
     */
    module.directive('hyDatepicker3', ['$onsen', 'DatePickerView3', '$compile', function ($onsen, DatePickerView3, $compile) {
        return {
            restrict: 'EA',
            template: getTemplate,
            //replace: true,
            transclude: true,
            scope: {
                minDate: '=hyaMinDate',   //最小时间
                maxDate: '=hyaMaxDate',   //最大时间
                placeholder: '@hyaPlaceholder', //输入提示
                dateFormat: '@hyaFormat',  //格式化日期的字符串
                dateModel: '=hyaDateValue', //日期传输的变量
                isbutton: '@hyaHasbutton',  //是否显示图标按钮
                inputClass: '@hyaInputClass',    //input元素的样式
                iconName: '@hyaIconName',    //图片样式名称
                dateType: '@hyaDateType',    //传递过来的日期类型，值为String,Date,Long,默认是Long
                dateChange: '&hyaDateChange',    //日期值变化的回调函数
                activeClass: '@hyaActiveClass',    //激活样式
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {
                        if (scope.isbutton === 'undefined' || scope.isbutton === undefined || scope.isbutton === null || scope.isbutton === 'true') {
                            scope.hasButton = true;   //表示是否显示图标按钮，默认是true
                            scope.nobuttonstyle = '';
                        } else {
                            scope.hasButton = false;
                            scope.nobuttonstyle = 'nobutton';
                        }

                        if (scope.dateType === 'undefined' || scope.dateType === undefined || scope.dateType === null || scope.dateType === '') {
                            scope.dateType = 'Long';
                        }

                        if (scope.dateType != 'Long' && scope.dateType != 'String' && scope.dateType != 'Date') {
                            console.warn('datePicker3标签的hya-date-type属性值不是选项值，请填写下列值中的任一个:Long,String,Date;默认设置成Long');
                            scope.dateType = 'Long';
                        }

                        var datepicker = new DatePickerView3(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, datepicker);

                        element.data('hy-datepicker3', datepicker);

                        scope.$on('destory', function () {
                            datepicker._events = undefined;
                            $onsen.removeModifierMethods(datepicker);
                            element.data('hy-datepicker3', undefined);
                            element = null;
                        });
                        if (isAttribute(attrs)) {   //如果是元素的属性，则添加点击事件
                            element.on('click', function (e) {
                                datepicker.onShow(e);
                            })
                        }

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 判断当前指令是作为元素存在还是属性存在
         * @param attr
         * @returns {boolean|*}
         */
        function isAttribute(attr) {
            return angular.isDefined(attr.hyDatepicker);
        }

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            if (isAttribute(attr)) {
                if (element[0].nodeName === 'HY-DATEPICKER3') {
                    console.warn('日期控件指令不能作为自身的属性');
                    return false;
                }

                return "<div ng-transclude></div>";
            } else {

                return '<div layout="row">' +
                    '<input ng-model="formatValue" ng-click="onshow($event)" placeholder="{{placeholder}}" ' +
                    'class="text-input hy-date-picker-input {{nobuttonstyle}} {{inputClass}} "  readonly id="my-input">' +
                    '<hy-button ng-if="hasButton"  class="hy-datepicker-button hy-fill" ng-click="onshow($event)"> ' +
                    '<hy-icon hy-font-icon="{{iconName}}" style="line-height: 1.1"></hy-icon>' +
                    '</hy-button></div>';


            }
        }
    }]);
})();

/**
 * Created by ym on 2017/1/11.
 */

(function(){
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyDivider', HyDividerDirective);

    function HyDividerDirective() {
        return {
            restrict: 'E',
            link: function(scope,element,attrs){

            }
        };
    }
})();
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * 用于展示一个中间带内容的分割线
     */

    module.directive('hyDividerLabel',[function(){
        return {
            restrict:'E',
            template:"<p class='hy-divider-label' ng-transclude></p>",
            replace:true,
            transclude:true,
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {

                    },
                    post: function (scope, element) {

                    }
                }
            }
        }
    }])


})();
/**
 * 下拉列表框弹框模板。
 */
(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/hy_drop_list_dialog.tpl',
            '<ons-dialog cancelable class="drop-dialog">\
                <ons-list> \
                    <ons-list-header class="drop-dialog-header">{{title}}</ons-list-header> \
                    <ons-list-item class="hy-drop-item" ng-click="itemSelected(null, 0);" ng-class="{active:selectedIndex<0}" ng-if="!hideNullVal">\
                    <span>------</span>\
                    </ons-list-item>\
                    <ons-list-item class="hy-drop-item" ng-repeat="item in items" ng-click="itemSelected(item, $index+1);" ng-class="{active:$index==selectedIndex}">\
                         <span>{{showOptionTitle(item)}}</span>\
                    </ons-list-item> \
                </ons-list>\
            </ons-dialog>' +
            '');
    }]);
})();

/**
 * 下拉列表框指令
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
    // 1: value expression (valueFn)
    // 2: label expression (displayFn)
    // 3: group by expression (groupByFn)
    // 4: disable when expression (disableWhenFn)
    // 5: array item variable name
    // 6: object item key variable name
    // 7: object item value variable name
    // 8: collection expression
    // 9: track by expression

    module.factory('HyDropListService', ["$onsen", function ($onsen) {
        var HyDropListService = Class.extend({
            selectedIndex: -1,
            selectedItem: null,
            init: function (scope, element, attrs, ctrl) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;
                this._ctrl = ctrl;
                this._scope.icon = this._scope.icon || 'fa-icon-updown';
                this._scope.title = this._attrs.title || '请选择';
                this._scope.placeholder = this._attrs.placeholder || '';
                this._scope.hideArrow = this._attrs.hyaHideArrow && this._attrs.hyaHideArrow.length > 0 && this._attrs.hyaHideArrow !== 'false';
                this._scope.hideNullVal = this._attrs.hyaHideNullVal && this._attrs.hyaHideNullVal.length > 0 && this._attrs.hyaHideNullVal !== 'false';
                this._scope.selectedIndex = -1;
                if (!this._scope.items) {
                    this._scope.items = [];
                }
                this._scope.$on('$destroy', this._destroy.bind(this));
                this._scope.itemSelected = this._itemSelected.bind(this);
                this._scope.showOptionTitle = this._showOptionTitle.bind(this);
                this._scope.selectChange = this.showDialog.bind(this);
                if (this._attrs.hasOwnProperty('disabled') && this._attrs['disabled']) {
                    this.setDisabled(true);
                }
                //this.initVal();
                //this._downElement = this._element.children();
            },
            initVal: function () {
                if (typeof this._ctrl === 'undefined' || !this._ctrl) {
                    this._itemSelected(null, 0, true);
                    return;
                }
                /**
                 * 当Model改变值得时候赋值。
                 */
                this._ctrl.$render = function () {
                    var code = this._ctrl.$viewValue;
                    var item = this._getItemByCode(code);
                    var index = this._scope.items.indexOf(item);
                    if (index < 0) {
                        item = null;
                    }
                    //this._ctrl.$viewValue = item;
                    this._itemSelected(item, index + 1, true);
                }.bind(this);
                //this._ctrl.$render();
            },
            _getItemByCode: function (code) {
                if (!code) return null;
                var key = this._attrs.hyaValueKey;
                if (!key) return code;
                if (angular.isObject(code)) {
                    code = code[key];
                }
                var item = null;
                var len = this._scope.items.length;
                for (var i = len - 1; i >= 0; i--) {
                    var data = this._scope.items[i];

                    if ((angular.isObject(data) && data[key] == code) || data == code) {
                        item = data;
                        break;
                    }
                }
                return item;
            },
            _getCodeByItem: function (item) {
                if (!item) return "";
                var code = item;
                var key = this._attrs.hyaValueKey;
                if (item && key && angular.isObject(item)) {
                    code = item[key];
                }
                return code;
            },
            itemsChange: function () {
                if (typeof this._ctrl === 'undefined' || !this._ctrl) {
                    this._itemSelected(null, 0);
                    return;
                }
                var code = this._ctrl.$viewValue;
                var item = this._getItemByCode(code);
                var index = this._scope.items.indexOf(item);
                if (index < 0) {
                    item = null;
                }
                //this._ctrl.$viewValue = item;
                this._itemSelected(item, index + 1);
            },
            _createDialog: function () {
                if (this._scope.dialog) {
                    this._setDialog(this._scope.dialog);
                    return;
                }
                var page = $onsen.DIRECTIVE_TEMPLATE_URL + '/hy_drop_list_dialog.tpl';
                ons.createDialog(page, {parentScope: this._scope}).then(function (dialog) {
                    this._setDialog(dialog);
                }.bind(this));
            },
            _itemSelected: function (item, index, isInit) {
                this._element[0].querySelector('.droplist-title').innerText = this._scope.showOptionTitle(item);
                //this._element.append(this._downElement);
                if (!isInit && this.selectedIndex === index) return;
                var code = this._getCodeByItem(item);
                this.selectedItem = item;
                this.selectedIndex = index;
                this._scope.selectedIndex = index - 1;

                this.closeDialog();
                if (this._ctrl && !isInit) {
                    this._ctrl.$setViewValue(code);
                }
                this._scope.selectedFn({$value: code, $item: this.selectedItem, $index: this.selectedIndex,$attrs:this._attrs});
            },
            _setDialog: function (dialog) {
                this._scope.dialog = dialog;
                this._scope.dialog._element.addClass('drop-list-dialog');

                this._scope.dialog.show();
            },
            _showOptionTitle: function (item) {
                if (!item) return this._scope.placeholder;
                if (angular.isObject(item)) {
                    var key = this._attrs.hyaTitleKey || 'title';
                    return item[key];
                }
                return item;
            },
            closeDialog: function () {
                if (!this._scope.dialog) return;
                this._scope.dialog.hide();
            },
            showDialog: function () {
                if (this.disabled)
                    return;
                if (!this._scope.dialog) {
                    this._createDialog();
                } else {
                    this._setDialog(this._scope.dialog);
                }
            },

            destroy: function () {
                this._scope.$destroy();
            },
            _destroy: function () {
                this._scope = undefined;
                this._element = undefined;
                this._attrs = undefined;
            },
            setDisabled: function (disabled) {
                this.disabled = disabled;
            },
        });

        MicroEvent.mixin(HyDropListService);
        return HyDropListService;
    }]);

    module.directive('hyDropList', ['HyDropListService', '$onsen', function (HyDropListService, $onsen) {
        return {
            restrict: 'E',
            require: '?ngModel',
            scope: {
                items: '=',
                selectedFn: '&hyaSelected',
                icon: '@icon'
            },
            replace: true,
            /*template: '<div class="droplist-box" ng-click="selectChange();">' +
            '<span class="droplist-title" ng-class="{\'no-select-option\':selectedIndex<0}">{{placeholder}}</span>' +
            '<img src="img/cem/common/select_down.png" style="width:7px;height:7px;margin: 16px 7px 0 0;" fixed-width="false" class="droplist-arrow" />' +
            '</div>',*/
            template: '<div class="droplist-box" ng-click="selectChange();">' +
            '<span class="droplist-title" ng-class="{\'no-select-option\':selectedIndex<0}">{{placeholder}}</span>' +
            '<ons-icon ng-if="!hideArrow" icon="{{icon}}" size="20px" fixed-width="false" class="droplist-arrow"></ons-icon>' +
            '</div>',
            compile: function (element, attrs) {
                return function (scope, element, attrs, ngModel) {
                    var hyDropList = new HyDropListService(scope, element, attrs, ngModel);
                    $onsen.declareVarAttribute(attrs, hyDropList);
                    hyDropList.initVal();
                    scope.$watch('items', function (v) {
                        hyDropList.itemsChange();
                    });
                };
            }
        };
    }]);

}());


/**
 * Created by ym on 2017/3/30.
 */
/**
 * Created by MageeYang on 2016/1/14.
 */


(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    /**
     * @ngdoc element+attribute
     * @name hyDropPicker 日期控件
     * @module haiyiMobile
     * @description 用于用户级联下拉选择
     * hyaMinDate        最小时间
     * hyaMaxDate   最大时间
     * hyaPlaceholder      输入提示
     * hyaFormat    格式化日期的字符串
     * hyaDateValue        日期传输的变量
     * hyaTimer   是否显示时分选择界面
     * hyaHasbutton        是否显示图标按钮
     * hyaDateType         传递的日期格式类型 String、Long、Date
     * @usage <hy-datepicker  hya-date-value="cuDate"></hy-datepicker>
     */


    module.factory('DropPickerView', ['$onsen', '$q', function ($onsen, $q) {
        var DropPickerView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._dialog = null;
                this._dialogCompent = null;


                this._scope.displayValue = "";
                this._scope.placeholder = this._scope.placeholder || "请选择";
                this._scope.separator = this._scope.separator || "";

                if (this._scope.dataList) {
                    if (this._scope.dataList.length > 4) {
                        this.itemLength = 3;
                    } else {
                        this.itemLength = this._scope.dataList.length;
                    }
                }
                this._createListData();

                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.valueChange0 = angular.bind(this, this._valueChange0);
                this._scope.valueChange1 = angular.bind(this, this._valueChange1);
                this._scope.valueChange2 = angular.bind(this, this._valueChange2);
                this._scope.valueChange3 = angular.bind(this, this._valueChange3);
                this._scope.dayValueChange = angular.bind(this, this._dayValueChange);
                this._scope.okButton = angular.bind(this, this._okButton);
                this._scope.clearButton = angular.bind(this, this._clearButton);


                var self = this;
                //根据传递的数值数据处理
                this._scope.$watch('dataModel', function (value) {
                    if (value&&value.length>0) {
                        for (var i = 0; i < value.length; i++) {
                            if (i == 0) {
                                // for(var k=0;k<self._scope.dataList[i].length;k++){
                                //     if (self._scope.dataList[i][k].value == value[i]) {
                                //         self._scope['dataList' + i] = self._scope.dataList[i] ? self._scope.dataList[i] : [];
                                //     }
                                // }
                                self._scope['dataList' + i] = self._scope.dataList[i] ? self._scope.dataList[i] : [];
                                self._scope['dataValue' + i] = value[i];

                            } else {
                                self._scope['dataList' + i] = self._scope.dataList[i][self._scope['dataValue' + (i - 1)]] ? self._scope.dataList[i][self._scope['dataValue' + (i - 1)]] : [];
                                self._scope['dataValue' + i] = value[i];

                            }

                            for (var j = 0; j < self._scope['dataList' + i].length; j++) {
                                if (self._scope['dataList' + i][j].value == value[i]) {
                                    self._scope['dataObject' + i] = self._scope['dataList' + i][j];
                                    self._scope['dataDisplay' + i] = self._scope['dataList' + i][j].text;
                                }
                            }

                        }
                        self._modifyDisplayValue();
                    }
                });

            },
            /**
             * 生成列表的数组
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _createListData: function () {
                if (this._scope.dataList) {
                    for (var i = 0; i < this.itemLength; i++) {
                        if (i == 0) {
                            this._scope['dataList' + i] = this._scope.dataList[i] ? this._scope.dataList[i] : [];
                            this._scope['dataObject' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0] : undefined;
                            this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";

                        } else {
                            this._scope['dataList' + i] = this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] ? this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] : [];
                            this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";
                            this._scope['dataObject' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0] : undefined;

                        }
                        if (this._scope['dataList' + i][0] && this._scope['dataList' + i][0].value != '_0') {
                            this._scope['dataDisplay' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].text : "";
                        } else {
                            this._scope['dataDisplay' + i] = "";
                        }
                    }
                }
            },

            _modifyDisplayValue: function () {
                this._scope.displayValue = "";
                if (this._scope.dataList) {
                    for (var i = 0; i < this.itemLength; i++) {
                        if (this._scope['dataDisplay' + i] != "") {
                            if (this._scope.displayValue == "") {
                                this._scope.displayValue = this._scope['dataDisplay' + i];
                            } else {
                                this._scope.displayValue = this._scope.displayValue + this._scope.separator + this._scope['dataDisplay' + i];
                            }

                        }
                    }
                }
            },
            _modifyValue: function () {
                this._scope.dataModel = [];
                if (this._scope.dataList) {
                    for (var i = 0; i < this.itemLength; i++) {
                        this._scope.dataModel.push(this._scope['dataValue' + i]);
                    }
                }
                var dataObjectList  = [];
                for (var j = 0; j < this.itemLength; j++) {
                    dataObjectList.push(this._scope['dataObject' + j]);
                }
                if (this._scope.dataChange) {
                    this._scope.dataChange({data: dataObjectList});
                }
            },
            _valueChange0: function (data) {
                this._valueChange(data, 0);
            },
            _valueChange1: function (data) {
                this._valueChange(data, 1);
            },
            _valueChange2: function (data) {
                this._valueChange(data, 2);
            },
            _valueChange3: function (data) {
                this._valueChange(data, 3);
            },

            /**
             * 年的数值发生变化的处理过程
             * @private
             */
            _valueChange: function (date, type) {
                this._scope['dataObject' + type]= date;
                this._scope['dataValue' + type] = date.value;
                this._scope['dataDisplay' + type] = date.text;
                for (var i = type + 1; i < this.itemLength; i++) {
                    if (i == type + 1) {
                        this._scope['dataList' + i] = this._scope.dataList[i][date.value] ? this._scope.dataList[i][date.value] : [];
                        this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";

                    } else {
                        this._scope['dataList' + i] = this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] ? this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] : [];
                        this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";
                    }
                    if (this._scope['dataList' + i][0] && this._scope['dataList' + i][0].value != '_0') {
                        this._scope['dataDisplay' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].text : "";
                    } else {
                        this._scope['dataDisplay' + i] = "";
                    }

                }
            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 346;   //弹窗的默认高度
                var header_text = "请选择";  //弹窗的抬头文本

                //添加抬头显示元素
                var header = angular.element('<div class="hy-drop-picker-header"><div class="hy-drop-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);

                var toolbar = angular.element('<div class="hy-droppicker-select-toolbar">' +
                    '<div class="hy-droppicker-select-toolbar-innner hy-layout-row hy-layout-align-space-between-center">' +
                    '<hy-button  class="hy-droppicker-toolbar-button right-border"  ng-click="clearButton()">重&nbsp;&nbsp;置</hy-button><hy-button class="hy-droppicker-toolbar-button " ng-click="okButton()">确&nbsp;&nbsp;定</hy-button>' +
                    '</div></div>');
                this._dialog.append(toolbar);

                this._dialog.append(page);
                //调用指令自身的scope作用域编译dialog元素
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 300px;border-radius:5px;', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行弹窗显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    var self = this;
                    //创建一个ons的dialog对象
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    //创建一个默认的日历元素对象
                    var dropPicker = null;
                    var divString = '<div class="hy-droppicker-select-pane hy-layout-row hy-layout-align-space-around">';
                    var width = 100 / this.itemLength;
                    for (var i = 0; i < this.itemLength; i++) {
                        divString += '<div style="width:' + width + '%;height:100%;perspective: 1200px;" ><hy-scroller hya-data="dataList' + i + '" hya-value="dataValue' + i + '" select-value="valueChange' + i + '(data)" ></hy-scroller></div>'
                    }
                    divString += '</div>';
                    dropPicker = angular.element(divString);

                    this._createDialog(dropPicker).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        //特殊添加当点击弹窗外围隐藏窗口后将dialog从document中移除
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });

                    });
                }
            },
            /**
             * 确定的处理函数
             * @param e
             */
            _okButton: function (e) {


                this._modifyDisplayValue();
                this._modifyValue();
                this._dialogCompent.hide();
            },
            /**
             * 清除的处理函数
             * @param e
             */
            _clearButton: function (e) {
                this._scope.displayValue = "";
                this._scope.dateModel = undefined;
                this._dialogCompent.hide();
            }

        });
        MicroEvent.mixin(DropPickerView);
        return DropPickerView;
    }]);


    /**
     * 定义了日期选择控件的指令
     */
    module.directive('hyDropPicker', ['$onsen', 'DropPickerView', '$compile', function ($onsen, DropPickerView, $compile) {
        return {
            restrict: 'E',
            template: getTemplate,
            //replace: true,
            transclude: true,
            scope: {
                placeholder: '@hyaPlaceholder', //输入提示
                dataModel: '=hyaDataValue', //下拉传输的变量数组
                inputClass: '@hyaInputClass',    //input元素的样式
                dataList: '=hyaDataList',    //传递过来的级联下拉数组
                dataChange: '&hyaDataChange',    //值变化的回调函数
                separator: "@",//分隔符
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {


                        var dropPicker = new DropPickerView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, dropPicker);

                        element.data('hy-drop-picker', dropPicker);

                        scope.$on('destory', function () {
                            dropPicker._events = undefined;
                            $onsen.removeModifierMethods(dropPicker);
                            element.data('hy-drop-picker', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            return '<div layout="row" class="hy-layout-align-start-center" ng-click="onshow($event)" >' +
                '<input ng-model="displayValue" placeholder="{{placeholder}}" ' +
                'class="text-input hy-drop-picker-input {{nobuttonstyle}} {{inputClass}} "  readonly >' +
                '<ons-icon icon="angle-down" size="16px" style="flex:none;margin:5px;" fixed-width="true"></ons-icon>' +
                '</div>';
        }
    }]);


    module.factory('DropPicker2View', ['$onsen', '$q', function ($onsen, $q) {
        var DropPickerView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._dialog = null;
                this._dialogCompent = null;


                this._createListData();
                this._scope.displayValue = "";
                this._scope.placeholder = this._scope.placeholder || "请选择";

                //绑定作用域的方法
                this._scope.onshow = angular.bind(this, this.onShow);
                this._scope.valueChange0 = angular.bind(this, this._valueChange0);
                this._scope.valueChange1 = angular.bind(this, this._valueChange1);
                this._scope.valueChange2 = angular.bind(this, this._valueChange2);
                this._scope.valueChange3 = angular.bind(this, this._valueChange3);
                this._scope.monthValueChange = angular.bind(this, this._monthValueChange);
                this._scope.dayValueChange = angular.bind(this, this._dayValueChange);
                this._scope.okButton = angular.bind(this, this._okButton);
                this._scope.clearButton = angular.bind(this, this._clearButton);


                var self = this;
                //根据传递的数值数据处理
                this._scope.$watch('dataModel', function (value) {
                    if (value) {
                        for (var i = 0; i < value.length; i++) {
                            if (i == 0) {
                                // for(var k=0;k<self._scope.dataList[i].length;k++){
                                //     if (self._scope.dataList[i][k].value == value[i]) {
                                //         self._scope['dataList' + i] = self._scope.dataList[i] ? self._scope.dataList[i] : [];
                                //     }
                                // }
                                self._scope['dataList' + i] = self._scope.dataList[i] ? self._scope.dataList[i] : [];
                                self._scope['dataValue' + i] = value[i];

                            } else {
                                self._scope['dataList' + i] = self._scope.dataList[i][self._scope['dataValue' + (i - 1)]] ? self._scope.dataList[i][self._scope['dataValue' + (i - 1)]] : [];
                                self._scope['dataValue' + i] = value[i];

                            }

                            for (var j = 0; j < self._scope['dataList' + i].length; j++) {
                                if (self._scope['dataList' + i][j].value == value[i]) {
                                    self._scope['dataDisplay' + i] = self._scope['dataList' + i][j].display;
                                }
                            }

                        }
                        self._modifyDisplayValue();
                        self._scope.$evalAsync();
                        // self._modifyValue();
                    }
                });


            },
            /**
             * 生成列表的数组
             * @param attrs
             * @returns {boolean|*}
             * @private
             */
            _createListData: function () {
                if (this._scope.dataList) {
                    for (var i = 0; i < this._scope.dataList.length; i++) {
                        if (i == 0) {
                            this._scope['dataList' + i] = this._scope.dataList[i] ? this._scope.dataList[i] : [];
                            this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";

                        } else {
                            this._scope['dataList' + i] = this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] ? this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] : [];
                            this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";

                        }
                        if (this._scope['dataList' + i][0] && this._scope['dataList' + i][0].value != '_0') {
                            this._scope['dataDisplay' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].display : "";
                        } else {
                            this._scope['dataDisplay' + i] = "";
                        }
                    }

                    this._modifyDisplayValue();
                }
            },

            _modifyDisplayValue: function () {
                this._scope.displayValue = "";
                if (this._scope.dataList) {
                    for (var i = 0; i < this._scope.dataList.length; i++) {
                        if (this._scope['dataDisplay' + i] != "") {
                            if (this._scope.displayValue == "") {
                                this._scope.displayValue = this._scope['dataDisplay' + i];
                            } else {
                                this._scope.displayValue = this._scope.displayValue + "," + this._scope['dataDisplay' + i];
                            }

                        }
                    }
                }
            },
            _modifyValue: function () {
                this._scope.dataModel = [];
                if (this._scope.dataList) {
                    for (var i = 0; i < this._scope.dataList.length; i++) {
                        this._scope.dataModel.push(this._scope['dataValue' + i]);
                    }
                }
                if (this._scope.dataChange) {
                    this._scope.dataChange({data: this._scope.dataModel});
                }
            },
            _valueChange0: function (data) {
                this._valueChange(data, 0);
            },
            _valueChange1: function (data) {
                this._valueChange(data, 1);
            },
            _valueChange2: function (data) {
                this._valueChange(data, 2);
            },
            _valueChange3: function (data) {
                this._valueChange(data, 3);
            },

            /**
             * 年的数值发生变化的处理过程
             * @private
             */
            _valueChange: function (date, type) {
                this._scope['dataValue' + type] = date.value;
                this._scope['dataDisplay' + type] = date.display;
                for (var i = type + 1; i < this._scope.dataList.length; i++) {
                    if (i == type + 1) {
                        this._scope['dataList' + i] = this._scope.dataList[i][date.value] ? this._scope.dataList[i][date.value] : [];
                        this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";

                    } else {
                        this._scope['dataList' + i] = this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] ? this._scope.dataList[i][this._scope['dataValue' + (i - 1)]] : [];
                        this._scope['dataValue' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].value : "";
                    }
                    if (this._scope['dataList' + i][0] && this._scope['dataList' + i][0].value != '_0') {
                        this._scope['dataDisplay' + i] = this._scope['dataList' + i][0] ? this._scope['dataList' + i][0].display : "";
                    } else {
                        this._scope['dataDisplay' + i] = "";
                    }

                }
                this._modifyDisplayValue();
                this._modifyValue();
                this._scope.$evalAsync();


            },
            /**
             * 月度的数值发生变化的处理过程
             * @private
             */
            _monthValueChange: function (date) {
                this._scope.selectMonthValue = date;
                this._valueChange();
            },
            /**
             * 月度的数值发生变化的处理过程
             * @private
             */
            _dayValueChange: function (date) {
                this._scope.selectDayValue = date + "";
            },
            _createDayList: function (minDay, maxDay) {
                this._scope.dayList.length = 0;
                for (var i = minDay; i <= maxDay; i++) {
                    if (i <= 9) {
                        this._scope.dayList.push("0" + i);
                    } else {
                        this._scope.dayList.push(i + "");
                    }
                }
                var num = new Date(this._scope.selectYearValue, this._scope.selectMonthValue, 0).getDate();
                if (this._scope.selectDayValue.substr(0, 1) != 0) {
                    var day = parseInt(this._scope.selectDayValue);
                    if (day > num) {
                        this._scope.selectDayValue = num + "";
                    }
                }

            },

            /**
             * 初始化指令的属性信息
             * @private
             */
            _initAttributeValue: function () {
                if (this._scope.dateFormat === undefined) {
                    if (this._scope.isTimer === 'true') {
                        this._scope.dateFormat = "YYYY-MM-DD hh:mm";
                    } else {
                        this._scope.dateFormat = "YYYY-MM-DD";
                    }
                }
                if (this._scope.placeholder === undefined) {
                    this._scope.placeholder = "請選擇日期";
                }

            },
            /**
             * 日期显示方式格式化
             * @param date
             * @private
             */
            _dateValueFormat: function (date) {
                var dateTemp = null;
                if (date !== undefined && date !== null && date !== '') {
                    this._scope.formatValue = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                    dateTemp = date;
                } else {
                    dateTemp = new Date();
                }
                this._scope.selectYearValue = dateTemp.getFullYear() + '';
                this._scope.selectMonthValue = dateTemp.getMonth() < 9 ? '0' + (dateTemp.getMonth() + 1) : (dateTemp.getMonth() + 1) + '';
                this._scope.selectDayValue = dateTemp.getDate() > 9 ? dateTemp.getDate() + "" : "0" + dateTemp.getDate();


            },
            /**
             * 创建一个dialog的页面并填充内容
             * @param page
             * @param options
             * @returns {*}
             * @private
             */
            _createDialog: function (page) {
                if (!page) {
                    throw new Error('创建对话页面不存在');
                }
                angular.element(document.body).append(angular.element(this._dialog));
                var height = 246;   //弹窗的默认高度
                var header_text = "请选择";  //弹窗的抬头文本

                //添加抬头显示元素
                var header = angular.element('<div class="hy-drop-picker-header"><div class="hy-drop-picker-header-inner">' +
                    header_text + '</div></div>');
                this._dialog.append(header);

                this._dialog.append(page);
                //调用指令自身的scope作用域编译dialog元素
                ons.$compile(this._dialog)(this._scope);
                var deferred = $q.defer();
                this._dialog.on('ons-dialog:init', function (e) {
                    var child = e.component._element[0].querySelector('.dialog');
                    var childStyle = child.getAttribute('style'),
                        newStyle = (function (a, b) {
                            var c =
                                (a.substr(-1) === ';' ? a : a + ';') +
                                (b.substr(-1) === ';' ? b : b + ';');
                            return c;
                        })('height: ' + height + 'px; width: 300px;border-radius:5px;', childStyle);
                    child.setAttribute('style', newStyle);
                    deferred.resolve(e.component);
                });

                return deferred.promise;
            },
            /**
             * 执行弹窗显示功能
             * @param e
             */
            onShow: function (e) {
                if (this._attrs['disabled'] === undefined) {
                    var self = this;
                    //创建一个ons的dialog对象
                    this._dialog = angular.element('<ons-dialog  cancelable>');
                    //创建一个默认的日历元素对象
                    var dropPicker = null;
                    var divString = '<div class="hy-droppicker-select-pane hy-layout-row hy-layout-align-space-around">';
                    for (var i = 0; i < this._scope.dataList.length; i++) {
                        var width = 100 / this._scope.dataList.length;
                        divString += '<div style="width:' + width + '%;height:100%;perspective: 1200px;" ><hy-scroller-deg hya-data="dataList' + i + '" hya-value="dataValue' + i + '" select-value="valueChange' + i + '(data)" ></hy-scroller-deg></div>'
                    }
                    divString += '</div>';
                    dropPicker = angular.element(divString);

                    this._createDialog(dropPicker).then(function (d) {
                        self._dialogCompent = d;
                        d.show(e);
                        //特殊添加当点击弹窗外围隐藏窗口后将dialog从document中移除
                        d.on('posthide', function () {
                            self._dialog.remove();
                        });

                    });
                }
            },
            /**
             * 确定的处理函数
             * @param e
             */
            _okButton: function (e) {
                var flag = false;
                var date = new Date(this._scope.selectYearValue + "/" + this._scope.selectMonthValue + "/" + this._scope.selectDayValue);
                if (this._scope.dateValue == undefined) {
                    this._scope.dateValue = date;
                    flag = true;
                }
                var year_temp = this._scope.dateValue.getFullYear() + '';
                var month_temp = this._scope.dateValue.getMonth() < 9 ? '0' + (this._scope.dateValue.getMonth() + 1) : (this._scope.dateValue.getMonth() + 1) + '';
                var day_temp = this._scope.dateValue.getDate() > 9 ? this._scope.dateValue.getDate() + '' : '0' + this._scope.dateValue.getDate();
                var newDate = this._$hyDateLocale.formatDate(date, this._scope.dateFormat);
                var oldDate = this._$hyDateLocale.formatDate(this._scope.dateValue, this._scope.dateFormat);
                this._scope.dateValue = date;
                this._dateValueFormat(this._scope.dateValue);
                if (flag) {
                    if (this._scope.dateChange) {
                        this._scope.dateChange({newValue: newDate, oldValue: null});
                    }
                } else {
                    if (!(this._scope.selectYearValue == year_temp && this._scope.selectMonthValue == month_temp && this._scope.selectDayValue == day_temp)) {
                        if (this._scope.dateChange) {
                            this._scope.dateChange({newValue: newDate, oldValue: oldDate});
                        }

                    }

                }
                // if (this._scope.isTimer === 'true') {
                //     // this.typeSelect();
                // } else {
                this._dialogCompent.hide();
                // }
            },
            /**
             * 清除的处理函数
             * @param e
             */
            _clearButton: function (e) {
                this._scope.formatValue = "";
                this._scope.dateModel = undefined;
                this._dialogCompent.hide();
            }

        });
        MicroEvent.mixin(DropPickerView);
        return DropPickerView;
    }]);


    /**
     * 定义了日期选择控件的指令
     */
    module.directive('hyDropPicker2', ['$onsen', 'DropPicker2View', '$compile', function ($onsen, DropPicker2View, $compile) {
        return {
            restrict: 'E',
            template: getTemplate,
            //replace: true,
            transclude: true,
            scope: {
                placeholder: '@hyaPlaceholder', //输入提示
                dataModel: '=hyaDataValue', //下拉传输的变量数组
                inputClass: '@hyaInputClass',    //input元素的样式
                dataList: '=hyaDataList',    //传递过来的级联下拉数组
                dataChange: '&hyaDataChange',    //值变化的回调函数
            },
            compile: function (element, attr) {

                return {
                    pre: function (scope, element, attrs) {


                        var dropPicker = new DropPickerView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, dropPicker);

                        element.data('hy-drop-picker', dropPicker);

                        scope.$on('destory', function () {
                            dropPicker._events = undefined;
                            $onsen.removeModifierMethods(dropPicker);
                            element.data('hy-drop-picker', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element) {
                        //日期控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            return '<div layout="row" class="hy-layout-align-start-center">' +
                '<input ng-model="displayValue" ng-click="onshow($event)" placeholder="{{placeholder}}" ' +
                'class="text-input hy-drop-picker-input {{nobuttonstyle}} {{inputClass}} "  readonly >' +
                '<ons-icon icon="angle-down" size="16px" style="flex:none;margin:5px;" fixed-width="true"></ons-icon>' +
                '</div>';
        }
    }]);

})();

/**
 * Created by ym on 2017/1/12.
 */


(function(){
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyEcharts',HyEchartsDirective);

    function HyEchartsDirective(){
        return {
            restrict:'EA',
            template:"<div style='width:100%;height:100%'></div>",
            replace:true,
            scope:{
                option:'=hyaOption',
                config:'=hyaConfig'
            },
            link: function(scope,element,attrs,ctrl){
                function refreshChart(){
                    var theme = (scope.config && scope.config.theme)
                        ? scope.config.theme : 'default';
                    var chart = echarts.init(element[0],theme);
                    if(scope.config && scope.config.dataLoaded === false){
                        chart.showLoading();
                    }

                    if(scope.config && scope.config.dataLoaded){
                        chart.setOption(scope.option);
                        chart.resize();
                        chart.hideLoading();
                    }

                    if(scope.config && scope.config.event){
                        if(angular.isArray(scope.config.event)){
                            angular.forEach(scope.config.event,function(value,key){
                                for(var e in value){
                                    chart.on(e,value[e]);
                                }
                            });
                        }
                    }
                }
                if(typeof(echarts) != "undefined"){
                    scope.$watch(
                        function () { return scope.config; },
                        function (value) {if (value) {refreshChart();}},
                        true
                    );

                    //图表原生option
                    scope.$watch(
                        function () { return scope.option; },
                        function (value) {if (value) {refreshChart();}},
                        true
                    );
                }else{
                    console.log("没有找到Echart库，该组件无效");
                }


            }
        }
    }
})();

/**
 * 文件选择Input组件
 * Created by GuoLinHao on 2016.03.21 .
 */
(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', []);
    }

    module.directive('hyFileInput',function(){
        return {
            restrict:'EA',
            scope:{
                hyaFileTypes:'=',//文件类型
                hyaMaxSize:'=',//文件大小
                hyaFileSelect:'&'//文件选择后的监听事件
            },

            link:function(scope,element,attrs){

                element.bind('change',function(event){
                   var files = [];
                   var errorItems = [];
                   var types = scope.hyaFileTypes;
                   var fileList = event.target.files;//已选择的文件数组

                   if(fileList != null){
                       for (var i = 0; i < fileList.length; i++){

                           if((types && types.length > 0)){
                               var fName = fileList[i].name;
                               var expansion = fName.substring(fName.lastIndexOf('.'),fName.length).toLowerCase();

                               if(types.indexOf(expansion) > -1){
                                   if(scope.hyaMaxSize && (scope.hyaMaxSize < fileList[i].size)){
                                       errorItems.push({"file":fName,"errorMsg":"文件不能大于"+scope.hyaMaxSize});
                                   }else {
                                       files.push(fileList[i]);
                                   }

                               }else {
                                   errorItems.push({"file":fName,"errorMsg":"文件格式只能是"+types.join(',')});
                               }
                           }else {
                               files.push(fileList[i]);
                           }
                       }
                   }
                    if(scope.hyaFileSelect){
                        scope.hyaFileSelect({$files : files,$error:errorItems});
                    }
                });

                //销毁
                scope.$on('$destroy', function() {
                    scope = element = attrs = null;
                });
            }
        }
    });


})();
/**
 * Created by ym on 2017/3/15.
 */


(function () {
    'use strict';
    HyFocusMeDirective.$inject = ["$timeout"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .directive('focusMe',HyFocusMeDirective);


    /**
     * focusMe
     * @author mageeYang
     * @ngdoc directive
     * @name focusMe
     * @description
     *   [ch]处理让input框自动获得焦点[/ch]
     * @example
     *  <input ng-show="addName" type="text" ng-model="name" focus-me="{{addName}}" />
     */

    function HyFocusMeDirective($timeout) {
        return {
            scope: { trigger: '@focusMe' },
            link: function(scope, element) {
                scope.$watch('trigger', function(value) {
                    if(value === "true") {
                        $timeout(function() {
                            element[0].focus();
                        });
                    }
                });
            }
        };
    }
})();
/**
 * Created by ym on 2017/4/20.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .directive('hyFocusScroll',HyFocusScrollDirective);


    /**
     * hyFocusScroll
     * @author mageeYang
     * @ngdoc directive
     * @name focusMe
     * @description
     *   [ch]处理input输入框自动滚动出软键盘区域[/ch]
     * @example
     *
     */

    var _hyFocusFlag = false;
    var _hyFocusOffsetY = 0;

    function HyFocusScrollDirective($onsen,$hyUtil) {
        function findParent(element, className) {
            var e = element[0];
            while (e.parentNode) {
                e = e.parentNode;
                if (e.className) {
                    if (e.className.split(/\s+/).indexOf(className) >= 0) {
                        break;
                    }
                }
            }
            return angular.element(e);
        }

        function setTranslateY(element, offsetY) {
            element.css('transform', 'translateY(' + offsetY + 'px)');
            element.css('webkitTransform', 'translateY(' + offsetY + 'px)');
        }

        return {
            restrict: 'A',
            compile: function (element, attrs) {
                return {
                    pre: function (scope, element, attrs) {
                        if (!$hyUtil.isWebView()) return;
                        // var _pageContent = findParent(element,'page__content');
                        var _scrollContent = findParent(element, 'hy-focus-scroll-content');

                        var onShow = function(){
                            _hyFocusFlag = true;
                            var top = element[0].getBoundingClientRect().top;
                            var clientHeight = document.body.clientHeight;
                            _hyFocusOffsetY = (clientHeight / 2) - 60 - top + _hyFocusOffsetY;
                            if (_hyFocusOffsetY >= 0) {
                                _hyFocusOffsetY = 0;
                            }
                            setTranslateY(_scrollContent, _hyFocusOffsetY);
                            setTimeout(function () {
                                _hyFocusFlag = false;
                            }, 100);
                        }

                        var onHide = function(){
                            setTimeout(function(){
                                if (!_hyFocusFlag) {
                                    _hyFocusOffsetY = 0;
                                    setTranslateY(_scrollContent, 0);
                                    element[0].blur();
                                }
                            },20);
                        }

                        element.on('focus', onShow);
                        ons.softwareKeyboard.on('hide', onHide);

                        $onsen.cleaner.onDestroy(scope, function () {
                            ons.softwareKeyboard.off('hide', onHide);
                            $onsen.clearComponent({
                                element: element,
                                scope: scope,
                                attrs: attrs
                            });
                            element = scope = attrs = null;
                        });
                    },
                    post: function (scope, element) {
                    }
                }
            }
        }
    }
})();
/**
 * Created by HY-LIUKEYU on 2016/5/27.
 */

/* HyFormView - v1.0.0 - 2016/5/27
 * @author liukeyu
 * @ngdoc service
 * @name HyFormView
 * @description
 *   [ch]表单验证服务.[/en]
 */

(function() {
    'use strict;';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('HyFormAnimator', function() {

        var HyFormAnimator = Class.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            show: function(done) {
                throw new Error('This method must be implemented.');
            },
            hide: function(done) {
                throw new Error('This method must be implemented.');
            }
        });

        return HyFormAnimator;
    });

    module.factory('HyFormView', ['$onsen', '$compile'
        , function($onsen, $compile) {
        var HyFormView = Class.extend({
            FORM_VALIDATE_ERROR_MESSAGE:{
                required:'不能为空!',
                maxlength:'最大长度为{0}!',
                minlength:'最小长度为{0}!',
                pattern:'验证错误!'
            },

            init: function(scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                //this._validateErrorMsg = attrs.hyFormValidate && this._scope[attrs.hyFormValidate];
                this._name = attrs.name;
                this._createErrorTooltip();
                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _createErrorTooltip:function(){
                var form = this._element[0];
                var elements = form.elements;

                for (var len=elements.length,i=0;i<len;i++){
                    var ele = angular.element(elements[i]);
                    if(ele.attr('ng-model')){
                        this._setErrorTooltip(ele);
                    }
                }
            },

            _setErrorTooltip:function(ele){
                var formName = this._name;
                var name = ele.attr('name');
                if(!name) return;
                var required = ele.attr('required');
                var errorRequired = required && this._getErrorMessage(name,'required');
                var maxLen = parseInt(ele.attr('ng-maxlength')||0);
                var errorMaxLength = maxLen && this._getErrorMessage(name,'maxlength',maxLen);
                var minLen = parseInt(ele.attr('ng-minlength')||0);
                var errorMinLength = minLen && this._getErrorMessage(name,'minlength',minLen);
                var pattern = ele.attr('ng-pattern');
                var errorPattern = pattern && this._getErrorMessage(name,'pattern');
                if(!required && !maxLen && !minLen && !pattern) return;
                //'+formName+'.$dirty&&
                var html = '<div class="error-tooltip" ' +
                    'ng-if="'+formName+'.'+name+'.$invalid">' +
                    //'<div class="tooltip-arrow"></div>'+
                    '<div class="tooltip-inner">' +
                    '<span ng-if="'+formName+'.'+name+'.$error.required">'+
                        errorRequired+
                    '</span>' +
                    '<span ng-if="'+formName+'.'+name+'.$error.maxlength">'+
                        errorMaxLength+
                    '</span>' +
                    '<span ng-if="'+formName+'.'+name+'.$error.minlength">'+
                    errorMinLength+
                    '</span>' +
                    '<span ng-if="'+formName+'.'+name+'.$error.pattern">'+
                        errorPattern+
                    '</span>' +
                    '</div>'+
                    '</div>';



                var tooltip = angular.element(html);
                var top = ele[0].offsetTop + ele[0].offsetHeight - 31;
                //var left = ele[0].offsetLeft + 10;
                var right = 5;
                //if(top<0){
                //    top = ele[0].offsetTop + ele[0].offsetHeight+5;
                //    tooltip.addClass('bottom');
                //}else{
                //    tooltip.addClass('top');
                //}
                tooltip.css({top:top+'px',right:right+'px'});
                //var bottom = 5;
                //var right = 5;
                //tooltip.css({bottom:bottom+'px',right:right+'px'});
                ele.after(tooltip);
                $compile(tooltip)(this._scope);
            },

            _getErrorMessage:function(name,type){
                var arg = Array.prototype.slice.call(arguments,2);
                arg = arg || [];
                arg.unshift(this.FORM_VALIDATE_ERROR_MESSAGE[type]);

                var defaultMsg = this._errorFormat.apply(this,arg);
                return (name && this._attrs.hyFormValidate)?
                    ('{{'+this._attrs.hyFormValidate+'.'+name+'.'+type+'||\''+defaultMsg+'\'}}')
                    :defaultMsg;
            },

            check:function(){
                this._element.addClass('hyc-form-checked');
                return this._scope[this._name].$valid;
            },
            getErrors:function(name){
                if(name && this._scope[this._name][name]){
                    return this._scope[this._name][name].$error;
                }
                return this._scope[this._name].$error;
            },
            _errorFormat:function(message){
                if(!message) return message;

                for(var len =arguments.length ,i=1; i<len; i++){
                    message=message.replace(new RegExp('\\{'+(i-1)+'\\}','g'), arguments[i]);
                }
                return message;
            },

            _destroy: function() {
                this._element = this._scope = this._attrs = null;
            }
        });
        MicroEvent.mixin(HyFormView);

        // Preset transition animators.
        HyFormView._animatorDict = {
            'default': null,
            'none': null
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        HyFormView.registerAnimator = function(name, animator) {
            if (!(animator instanceof HyFormAnimator)) {
                throw new Error('"animator" param must be an instance of HyFormAnimator');
            }

            this._animatorDict[name] = animator;
        };
        HyFormView.getFormName = function(){
            return 'form-'+new Date().getTime();
        };

        return HyFormView;
    }]);

})();

/* hy-form-validate - v1.0.0 - 2016-05-27
 * @author liukeyu
 * @ngdoc directive
 * @name hy-form-validate
 * @description
 *   [ch]表单验证指令.[/ch]
 * @example
 * <from hy-form-validate="json" name="form">
 *   <input name="inputName" require />
 * </from>
 */

(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyFormValidate', ['$onsen', '$compile', 'HyFormView', function($onsen, $compile, HyFormView) {
        return {
            restrict: 'A',
            scope: false,
            compile: function (element, attrs) {
                if (element[0].tagName !=='FORM') {
                    throw new Error('"hy-form-validate" only use in "form" ');
                }
                element.addClass('hyc-form-validate');
                var name = attrs.name || HyFormView.getFormName;
                element.attr('name',name);
                return function (scope, element, attrs) {
                    var hyFormView = new HyFormView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, hyFormView);
                };
            }
        };
    }]);
})();

/**
 * Created by ym on 2017/1/11.
 */

(function (angular) {
    'use strict';

    hyIconService.$inject = ["config", "$templateRequest", "$q", "$log", "$hyUtil", "$sce"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    /**
     * @ngdoc module
     * @name haiyiMobile
     * @description
     * Icon 图标指令
     */

    module.provider('$hyIcon', HyIconProvider)
        .directive('hyIcon', ['$hyIcon', '$sce', hyIconDirective]);


    var config = {
        defaultViewBoxSize: 24,
        defaultFontSet: 'fa',
        fontSets: [
            {alias: 'fa', fontSet: 'fa'},
            {alias: 'ion', fontSet: 'ion'}
        ]
    };

    function HyIconProvider() {
    }

    HyIconProvider.prototype = {
        icon: function (id, url, viewBoxSize) {
            if (id.indexOf(':') == -1) id = '$default:' + id;
            config[id] = new ConfigurationItem(url, viewBoxSize);
            return this;
        },

        iconSet: function (id, url, viewBoxSize) {
            config[id] = new ConfigurationItem(url, viewBoxSize);
            return this;
        },

        defaultIconSet: function (url, viewBoxSize) {
            var setName = '$default';

            if (!config[setName]) {
                config[setName] = new ConfigurationItem(url, viewBoxSize);
            }

            config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;

            return this;
        },

        defaultViewBoxSize: function (viewBoxSize) {
            config.defaultViewBoxSize = viewBoxSize;
            return this;
        },

        /**
         * 为font-icon字体图标库样式注册一个别名
         */
        fontSet: function fontSet(alias, className) {
            config.fontSets.push({
                alias: alias,
                fontSet: className || alias
            });
            return this;
        },

        /**
         * 指定默认的字体图标库名称
         */
        defaultFontSet: function defaultFontSet(className) {
            config.defaultFontSet = !className ? '' : className;
            return this;
        },

        defaultIconSize: function defaultIconSize(iconSize) {
            config.defaultIconSize = iconSize;
            return this;
        },

        $get: ['$templateRequest', '$q', '$log', '$hyUtil', '$sce', function ($templateRequest, $q, $log, $hyUtil, $sce) {
            return hyIconService(config, $templateRequest, $q, $log, $hyUtil, $sce);
        }]
    };

    /**
     *  配置存储在图标注册表中的信息；
     */
    function ConfigurationItem(url, viewBoxSize) {
        this.url = url;
        this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
    }



    /* @ngInject */
    function hyIconService(config, $templateRequest, $q, $log, $hyUtil, $sce) {
        var iconCache = {};
        var svgCache = {};
        var urlRegex = /[-\w@:%\+.~#?&//=]{2,}\.[a-z]{2,4}\b(\/[-\w@:%\+.~#?&//=]*)?/i;
        var dataUrlRegex = /^data:image\/svg\+xml[\s*;\w\-\=]*?(base64)?,(.*)$/i;

        /**
         *  定义一个图标类
         */
        function Icon(el, config) {
            if (el && el.tagName != 'svg') {
                el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el.cloneNode(true))[0];
            }

            // 如果命名空间不可用，则注入命名空间...
            if (!el.getAttribute('xmlns')) {
                el.setAttribute('xmlns', "http://www.w3.org/2000/svg");
            }

            this.element = el;
            this.config = config;
            this.prepare();
        }

        Icon.prototype = {clone: cloneSVG, prepare: prepareAndStyle};

        /**
         * `hyIcon`服务实际本质上就是一个查询函数
         */
        function getIcon(id) {
            id = id || '';

            //如果提供的“id”不是字符串，则唯一的其他有效值是URL字符串上的$sce信任包装器。
            //如果该值不受信任，则会故意引发错误，因为用户尝试使用不安全的URL，可能会对XSS攻击造成威胁。

            if (!angular.isString(id)) {
                id = $sce.getTrustedUrl(id);
            }

            // 如果已经加载并缓存，则直接使用缓存图标的克隆。
            // 否则通过url加载，或在注册表中查询然后缓存。

            if (iconCache[id]) {
                return $q.when(transformClone(iconCache[id]));
            }

            if (urlRegex.test(id) || dataUrlRegex.test(id)) {
                return loadByURL(id).then(cacheIcon(id));
            }

            if (id.indexOf(':') == -1) {
                id = '$default:' + id;
            }

            var load = config[id] ? loadByID : loadFromIconSet;
            return load(id)
                .then(cacheIcon(id));
        }

        getIcon.fontSet = findRegisteredFontSet;

        return getIcon;


        /**
         * 通过别名查找fontset样式名
         */
        function findRegisteredFontSet(alias) {
            var useDefault = angular.isUndefined(alias) || !(alias && alias.length);
            if (useDefault) return config.defaultFontSet;

            var result = alias;
            angular.forEach(config.fontSets, function (it) {
                if (it.alias == alias) result = it.fontSet || result;
            });

            return result;
        }

        /**
         * 转换元素为一个克隆元素
         */
        function transformClone(cacheElement) {
            var clone = cacheElement.clone();
            var cacheSuffix = '_cache' + $hyUtil.nextUid();

            // 我们需要为每个缓存的图标修改id属性。
            // 这是必需的，因为SVG的ids被视为正常的DOM ids，并且不应该有重复的id。
            if (clone.id) clone.id += cacheSuffix;
            angular.forEach(clone.querySelectorAll('[id]'), function (item) {
                item.id += cacheSuffix;
            });

            return clone;
        }

        /**
         * 准备缓存已加载指定`id`的图标
         */
        function cacheIcon(id) {

            return function updateCache(icon) {
                iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);

                return iconCache[id].clone();
            };
        }

        /**
         * 在注册表中查找，如果没有注册则抛出错误
         * 否则通过注册的url加载图标。
         */
        function loadByID(id) {
            var iconConfig = config[id];
            return loadByURL(iconConfig.url).then(function (icon) {
                return new Icon(icon, iconConfig);
            });
        }

        /**
         *    以XML格式加载文件，并使用querySelector（<id>）查找所需的节点...
         */
        function loadFromIconSet(id) {
            var setName = id.substring(0, id.lastIndexOf(':')) || '$default';
            var iconSetConfig = config[setName];

            return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);

            function extractFromSet(set) {
                var iconName = id.slice(id.lastIndexOf(':') + 1);
                var icon = set.querySelector('#' + iconName);
                return icon ? new Icon(icon, iconSetConfig) : announceIdNotFound(id);
            }

            function announceIdNotFound(id) {
                var msg = 'icon ' + id + ' not found';
                $log.warn(msg);

                return $q.reject(msg || id);
            }
        }

        /**
         * 通过URL加载图标（可以使用$templateCache。
         * 提取数据以便以后转换为Icon
         */
        function loadByURL(url) {
            /* 从嵌入式数据网址加载图标. */
            function loadByDataUrl(url) {
                var results = dataUrlRegex.exec(url);
                var isBase64 = /base64/i.test(url);
                var data = isBase64 ? window.atob(results[2]) : results[2];

                return $q.when(angular.element(data)[0]);
            }

            /* 使用HTTP加载图标URL地址 */
            function loadByHttpUrl(url) {
                return $q(function (resolve, reject) {
                    // 捕获与错误图标ID无关的HTTP或一般错误。
                    var announceAndReject = function (err) {
                            var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);
                            $log.warn(msg);
                            reject(err);
                        },
                        extractSvg = function (response) {
                            if (!svgCache[url]) {
                                svgCache[url] = angular.element('<div>').append(response)[0].querySelector('svg');
                            }
                            resolve(svgCache[url]);
                        };

                    $templateRequest(url, true).then(extractSvg, announceAndReject);
                });
            }

            return dataUrlRegex.test(url)
                ? loadByDataUrl(url)
                : loadByHttpUrl(url);
        }

        /**
         * 检查目标签名以查看其是否为Icon实例。
         */
        function isIcon(target) {
            return angular.isDefined(target.element) && angular.isDefined(target.config);
        }


        /**
         *  准备将加载iconCache中缓存的DOM元素。
         */
        function prepareAndStyle() {
            var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
            angular.forEach({
                'fit': '',
                'height': '100%',
                'width': '100%',
                'preserveAspectRatio': 'xMidYMid meet',
                'viewBox': this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize),
                'focusable': false
            }, function (val, attr) {
                this.element.setAttribute(attr, val);
            }, this);
        }

        /**
         * Clone the Icon DOM element.
         */
        function cloneSVG() {
            // 如果元素或其任何子元素具有样式属性，那么在style-src指令中没有“unsafe-inline”的CSP策略将导致违例。
            return this.element.cloneNode(true);
        }

    }



    function hyIconDirective($hyIcon, $sce) {

        return {
            restrict: 'E',
            link: postLink
        };


        function postLink(scope, element, attr) {
            var lastFontIcon = attr.hyFontIcon;
            var lastFontSet = $hyIcon.fontSet(attr.hyFontSet);

            prepareForFontIcon();

            attr.$observe('hyFontIcon', fontIconChanged);
            attr.$observe('hyFontSet', fontIconChanged);

            // 跟踪svg src的内容，以便我们稍后可以比较该属性是否是静态的。
            var originalSvgSrc = element[0].getAttribute(attr.$attr.hySvgSrc);

            // 如果使用字体图标，则名称自动提供给aria-label。

            var label = attr.alt || attr.hyFontIcon || attr.hySvgIcon || element.text();
            var attrName = attr.$normalize(attr.$attr.hySvgIcon || attr.$attr.hySvgSrc || '');

            if (!attr['aria-label']) {

                if (label !== '' && !parentsHaveText()) {

                    // $hyAria.expect(element, 'aria-label', label);
                    // $hyAria.expect(element, 'role', 'img');

                } else if (!element.text()) {
                    // 如果不是字体图标，则从可访问性层隐藏。

                    // $hyAria.expect(element, 'aria-hidden', 'true');
                }
            }

            if (attrName) {
                // 分别使用预先配置的SVG或URL源。
                attr.$observe(attrName, function (attrVal) {
                    element.empty();
                    if (attrVal) {
                        $hyIcon(attrVal)
                            .then(function (svg) {
                                element.empty();
                                element.append(svg);
                            });
                    }

                });
            }

            function parentsHaveText() {
                var parent = element.parent();
                if (parent.attr('aria-label') || parent.text()) {
                    return true;
                }
                else if (parent.parent().attr('aria-label') || parent.parent().text()) {
                    return true;
                }
                return false;
            }

            function prepareForFontIcon() {
                if (!attr.hySvgIcon && !attr.hySvgSrc) {
                    if (attr.hyFontIcon) {
                        element.addClass('hy-font ' + attr.hyFontIcon);
                    }

                    element.addClass(lastFontSet);
                }
            }

            function fontIconChanged() {
                if (!attr.hySvgIcon && !attr.hySvgSrc) {
                    if (attr.hyFontIcon) {
                        element.removeClass(lastFontIcon);
                        element.addClass(attr.hyFontIcon);

                        lastFontIcon = attr.hyFontIcon;
                    }

                    var fontSet = $hyIcon.fontSet(attr.hyFontSet);

                    if (lastFontSet !== fontSet) {
                        element.removeClass(lastFontSet);
                        element.addClass(fontSet);

                        lastFontSet = fontSet;
                    }
                }
            }
        }
    }

})(window.angular);


/**
 * @ngdoc directive
 * @name hyImageIndicator
 * @module haiyiMobile
 * @description   图片幻灯片组件，可实现图片的幻灯片效果
 * @returns
 * @usage <hy-image-indicator></hy-image-indicator>
 * @author GuoLinHao
 * @date 2016-03-07
 * @version V1.0
 */
(function(){
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile',[]);
    }

    var template = '<div class="haiyiImageIndicator"> \n' +
        ' <ons-carousel fullscreen swipeable overscrollable auto-scroll auto-refresh auto-scroll-ratio="0.1" var="{{carouselName}}"> \n' +
        ' <ons-carousel-item ng-repeat="image in hyaImages"> \n' +
        ' <div class="inner" ng-click="imageOnClick(image)"> \n' +
        ' <img ng-src="{{image.src}}" alt="{{image.src}}"> \n' +
        ' </div> \n' +
        ' </ons-carousel-item> \n' +
        '  <ons-carousel-cover ng-if="checkDesc()"> \n' +
        '  <div class="cover-label"> \n' +
        '  {{desc}} \n' +
        '</div> \n' +
        '</ons-carousel-cover> \n' +
        '</ons-carousel> \n' +
        '<div class="indicators {{hyaIndicatorPosition}}"> \n' +
        '<a ng-repeat="image in hyaImages" ng-class="{true: \'active\', false: \'\'}[image.isActive]"></a>\n' +
    ' </div> \n' +
    ' </div>';

    module.directive('hyImageIndicator',['$compile', '$timeout', function($compile,$timeout) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                hyaImages:'=',//双向绑定images，包含图片信息的数组
                hyaImageOnClick:'&',//图片的点击事件
                hyaAutoRecycle:'@',//是否开启自动循环
                hyaRecycleTime:'@',//循环间隔时间,单位是 毫秒
                hyaIndicatorPosition:'@'//指示器位置
            },
            link:function(scope,element,attrs){
                var time = new Date().getTime();
                var temp = "hyCarousel"+time;
                scope.carouselName = temp;
                element.append($compile(angular.element(template))(scope));
                if(!scope.hyaImages){
                    throw new Error('请设置正确的图片数据源hya-images.');
                }

                scope.desc = scope.hyaImages[0].desc;
                scope.hyaImages[0].isActive = true;
                scope.hyaImages[0].sIndex = 0;

                //初始化除第一张外的所有图片对象的isActive属性为false
                for(var i=1;i<scope.hyaImages.length;i++){
                    scope.hyaImages[i].isActive = false;
                    scope.hyaImages[i].sIndex = i;
                }

                //设置默认的指示器位置
                if(!scope.hyaIndicatorPosition){
                    scope.hyaIndicatorPosition = "bottomRight";
                }
                window[temp].on("postchange",function(event){
                    var index = event.activeIndex;
                    var length = scope.hyaImages.length;
                    scope.$apply(function(){
                        for(var i=0;i<length;i++){
                            if(i == index){
                                scope.hyaImages[i].isActive = true;
                            }else{
                                scope.hyaImages[i].isActive = false;
                            }
                        }
                        scope.desc = scope.hyaImages[index].desc;
                    });
                });

                var cycleNext = function() {
                    var activeIndex = window[temp].getActiveCarouselItemIndex();

                    if(activeIndex == (scope.hyaImages.length-1)){
                        window[temp].setActiveCarouselItemIndex(0);
                    }else{
                        window[temp].setActiveCarouselItemIndex(activeIndex+1);
                    }
                };

                var recycleImage = function() {
                    var time = 3000;//默认自动切换时间间隔为3秒
                    if(scope.hyaRecycleTime){
                        time = scope.hyaRecycleTime;
                    }

                    $timeout(function(){
                        if(scope != null && scope != undefined){
                            cycleNext();
                            recycleImage();
                        }
                    },time);
                };

                //判断是否要开启自动循环播放图片
                if(scope.hyaAutoRecycle && scope.hyaAutoRecycle == "true"){
                    recycleImage();
                }

                //图片点击事件回调
                scope.imageOnClick = function(image){
                    scope.hyaImageOnClick({image:image});
                };

                //控制是否显示图片描述片段
                scope.checkDesc = function(){
                    return scope.desc != null && scope.desc != "";
                };

                //销毁
                scope.$on('$destroy', function() {
                    scope = element = attrs = null;
                });

            }
        }
    }])

})();
/**
 * Created by HY-LIUKEYU on 2016/5/30.
 */


/**
 * 图片预览弹框模板。
 */
(function (module) {
    try {
        module = angular.module('templates-main');
    }
    catch (err) {
        module = angular.module('templates-main', []);
    }
    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/hy_image_show_dialog.tpl',
            '<ons-dialog cancelable class="hyc-image-dialog">\
                <div style="background-color: #AAAAAA;color: #FFFFFF;" class="delete-btn" ng-click="dialog.hide();">\
                    <ons-icon icon="ion-close-round" fixed-width="true" size="16px"></ons-icon>\
                </div>\
                <hy-image-scan hya-src="{{activeImage.image.src}}" var="hyImageScanDialog">\
                </hy-image-scan>\
            </ons-dialog>' +
            '');
    }]);
})();

/**
 *  HyImageListView - v1.0.0 - 2016/5/30
 * @author liukeyu
 * @ngdoc service
 * @name HyImageListView
 * @description
 *   [ch]图片预览列表服务.[/en]
 */

(function () {
    'use strict;';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('HyImageListView', ['$onsen', '$compile'
        , function ($onsen, $compile) {
            var HyImageListView = Class.extend({
                DEFAULT_COLUMN: 4,
                init: function (scope, element, attrs) {
                    this._scope = scope;
                    this._element = element;
                    this._attrs = attrs;

                    this._scope.maxNum = isNaN(parseInt(this._scope.maxNum)) ? 0 : parseInt(this._scope.maxNum);
                    this._scope.deleteImage = this.deleteImage.bind(this);
                    this._scope.addImage = this.addImage.bind(this);
                    this._scope.showImageDialog = this.showImageDialog.bind(this);

                    this._scope.activeImage = {};
                    this._createImageList();
                    this._scope.$on('$destroy', this._destroy.bind(this));
                },

                _createImageList: function () {
                    var hyImgAddHtml = this._getAddImgHtml();
                    var img = this._element.html();
                    var col = this._attrs.hyaColumn || this.DEFAULT_COLUMN;
                    col = parseInt(col) > 100 ? this.DEFAULT_COLUMN : parseInt(col);

                    var hyDisabled = {
                        add: this._attrs.hasOwnProperty('hyaAddDisabled'),
                        del: this._attrs.hasOwnProperty('hyaDelDisabled')
                    };
                    this._scope.canDel = function (item) {
                        if (!this._attrs.hasOwnProperty('hyaItemDel') || !this._scope.itemDelFn) return true;
                        return this._scope.itemDelFn({$item: item});
                    }.bind(this);
                    this._scope.hyDisabled = hyDisabled;
                    var v_width = this._attrs['width'];
                    var v_height = this._attrs['height'];
                    var width = v_width ? v_width + 'px' : (100 / col) + '%';
                    var height = v_height ? v_height + 'px' : '100%';
                    var html = '<div class="hyc-image-items">' +
                        '<div class="hyc-image-item hyc-image-add-btn" ng-show="!hyDisabled.add && (maxNum<=0||!images||images.length<maxNum)" style="width:' + width + ';height:' + height + '">' +
                        '<div class="img img-show-btn"   ng-click="addImage();">' +
                        //hyImgAddHtml +
                        '</div>' +
                        '</div>' +
                        '<div class="hyc-image-item hyc-image" ng-if="maxNum<=0||$index<maxNum" ' +
                        '   ng-repeat="item in images track by $index" style="width:' + width + ';height:' + height + '">' +
                        '<div class="delete-btn" ng-click="deleteImage($index,item);" ng-if="!hyDisabled.del&&canDel(item)">' +
                        '<img src="img/cem/cbbl/shanchu.png" style="height:20px">' +
                        '</div>' +
                        '<div class="img" ng-click="showImageDialog($index,item);">' +
                        img +
                        '</div>' +
                        '</div>' +
                        //'<div style="clear:both;"></div>' +
                        '</div>';
                    var ele = angular.element(html);

                    $compile(ele)(this._scope);
                    this._element.html('');
                    this._element.append(ele);
                    this._setAddBtnImg(ele);
                    var imgAddEle = angular.element(hyImgAddHtml);
                    $compile(imgAddEle)(this._scope.$parent);
                    setImmediate(function () {
                        angular.element(ele[0].querySelector('.hyc-image-add-btn .img-show-btn')).append(imgAddEle);
                    });

                },
                _getAddImgHtml: function () {
                    var defaultHtml = '<div class="img-btn"><img src="img/cem/ydzybl/cem_picture.png" style="height:20px"></div>';
                    var html = null;
                    var ele = angular.element(this._element[0].querySelector('hy-image-add'));
                    if (ele && 0 < ele.length) {
                        html = ele[0].outerHTML;
                        ele.remove();
                    }
                    if (!html || html.length <= 0) html = defaultHtml;
                    return html;
                },
                _setAddBtnImg: function (ele) {
                    setImmediate(function () {
                        var imgEle = ele[0].querySelectorAll('.hyc-image .img');
                        if (!imgEle || imgEle.length <= 0) return;
                        imgEle = imgEle[imgEle.length - 1];
                        angular.element(ele[0].querySelector('.hyc-image-add-btn .img-hide-btn')).html(angular.element(imgEle).html());
                    });
                },
                deleteImage: function (index, img) {
                    var done = function () {
                        this._scope.images.splice(index, 1);
                        this._scope.activeImage = {};
                        this._setAddBtnImg(this._element);
                    }.bind(this);
                    this._scope.del({$index: index, $item: img, $done: done});
                },
                _showDialog: function () {
                    if (!this._scope.dialog) {
                        this._createDialog(function (dialog) {
                            this._scope.dialog = dialog;
                            this._showDialog();
                        }.bind(this));
                        return;
                    }
                    this._scope.dialog._element.addClass('img-list-dialog');

                    this._scope.dialog.show();
                },
                _createDialog: function (callback) {
                    var page = $onsen.DIRECTIVE_TEMPLATE_URL + '/hy_image_show_dialog.tpl';
                    ons.createDialog(page, {parentScope: this._scope}).then(function (dialog) {
                        callback.call(this, dialog);
                    }.bind(this));
                },
                addImage: function () {
                    this._scope.add({
                        $callback: function (img, unshift) {
                            if (!img) return;
                            this._scope.images = this._scope.images || [];
                            if (angular.isArray(img)) {
                                if (unshift) {
                                    Array.prototype.push.apply(img, this._scope.images);
                                } else {
                                    Array.prototype.push.apply(this._scope.images, img);
                                }
                            }
                            if (unshift) {
                                this._scope.images.unshift(img);
                            } else {
                                this._scope.images.push(img);
                            }
                            this._setAddBtnImg(this._element);
                            this._scope.$evalAsync();
                        }.bind(this)
                    });
                },
                getImageList: function () {
                    return this._scope.images;
                },
                showImageDialog: function ($index, item) {
                    if ($index != this._scope.activeImage.$index) {
                        if (this._scope.dialog) {
                            this._scope.dialog._element.remove();
                            this._scope.dialog = null;
                        }
                        this._scope.activeImage = {$index: $index, image: this._getDialogImg(item)};
                    }
                    this._showDialog();
                },
                _getDialogImg: function (img) {
                    if (!img || angular.isString(img)) return {src: img};
                    var key = this._attrs.hyaSrcKey || 'src';
                    var src = angular.isObject(img) ? (img[key] || img['src']) : null;
                    return {src: src};
                },
                _destroy: function () {
                    this._element = this._scope = this._attrs = null;
                }
            });
            MicroEvent.mixin(HyImageListView);

            return HyImageListView;
        }]);

})();

/* hy-image-list - v1.0.0 - 2016-05-30
 * @author liukeyu
 * @ngdoc directive
 * @name hy-image-list
 * @description
 *   [ch]图片预览列表指令.[/ch]
 * @example
 * <hy-image-list hya-list="json">
 * </hy-image-list>
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyImageList', ['$onsen', 'HyImageListView', function ($onsen, HyImageListView) {
        return {
            restrict: 'E',
            scope: {
                images: '=hyaList',
                add: '&hyaAdd',
                del: '&hyaDelete',
                maxNum: '@hyaMax',
                itemDelFn:'&hyaItemDel'
            },
            compile: function (element, attrs) {
                element.addClass('hyc-image-list');
                return function (scope, element, attrs) {
                    var hyImageListView = new HyImageListView(scope, element, attrs);

                    $onsen.declareVarAttribute(attrs, hyImageListView);
                };
            }
        };
    }]);

    module.directive('hyImageAdd', ['$onsen', function ($onsen) {
        return {
            restrict: 'E',
            compile: function (element, attrs) {
                element.addClass('hyc-image-add');
                return function (scope, element, attrs) {
                };
            }
        };
    }]);
})();

/**
 * HyImageScanView - v1.0.0 - 2016-06-23
 * @author liukeyu
 * @ngdoc service
 * @name HyImageScanView
 * @description
 *   [ch]图片缩放服务
 */
(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.factory('HyImageScanView',function(){
        var HyImageScanView = Class.extend({
            _elementSize : {w:0,h:0},
            _initialZoom : 1,
            //拖动开始点
            _startPoint:null,
            //图片的最大放大倍数
            _maxZoom:4,
            //缩放开始时的zoom
            _pinchStartZoom:1,
            //缩放开始时点
            _pinchPointers:[],
            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function(scope, element, attrs) {
                this._element = element;
                this._attrs = attrs;

                this._scope = scope;

                this._hyaImage = {src:this._scope.hyaSrc,desc:this._scope.hyaDesc,zoom:1};
                this._scope.hyaImage = this._hyaImage;

                this._scope.top = 0;
                this._scope.left = 0;
                // setImmediate(this._initZoom.bind(this));
                //this._initZoom();
                var self = this;
                this._scope.$watch('hyaSrc',function(){
                    console.log("监听图片变化")
                    self._hyaImage = {src:self._scope.hyaSrc,desc:self._scope.hyaDesc,zoom:1};
                    setImmediate(self._initZoom.bind(self));
                });



                this._scope.onPanstart = this._onPanstart.bind(this);
                this._scope.onPanmove = this._onPanmove.bind(this);

                this._scope.onPinchstart = this._onPinchstart.bind(this);

                //缩小动作
                this._scope.onPinchin = this._onPinchin.bind(this);
                //放大动作
                this._scope.onPinchout = this._onPinchout.bind(this);
                //缩放结束
                this._scope.onPinchend = this._onPinchend.bind(this);

                //单击
                this._scope.onTap = this._onTap.bind(this);
                //双击
                this._scope.onDoubletap = this._onDoubletap.bind(this);

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            //初始化图片的zoom值，根据图片大小和屏幕尺寸计算
            _initZoom : function(){
                //if (window.innerWidth){
                //    scope.winWidth = window.innerWidth;
                //}else if ((document.body) && (document.body.clientWidth)){
                //    scope.winWidth = document.body.clientWidth;
                //}else if (document.documentElement && document.documentElement.clientWidth) {
                //    scope.winWidth = document.documentElement.clientWidth;
                //}
                //var scope = this._scope;
                var element = this._element;
                var img = new Image();
                img.src = this._hyaImage.src;

                if(img.complete){//图片已加载
                    this._initImage(img,element);
                }else{
                    img.onload = function(){
                        //图片加载完成
                        this._initImage(img,element);
                    }.bind(this);
                }
            },
            _initImage: function (img,element){
                var imgSize = {w:0,h:0};
                var eleSize = this._getElementSize(element);
                imgSize.w = img.width;
                imgSize.h = img.height;

                if(imgSize.w*imgSize.h<=0 || eleSize.w*eleSize.h<=0) return;

                var scaleWidth = eleSize.w/imgSize.w;
                var scaleHeight = eleSize.h/imgSize.h;

                var scale = scaleWidth<scaleHeight?scaleWidth:scaleHeight;

                this._initialZoom = scale<1?scale:1;
                this._hyaImage.zoom = this._initialZoom;
                this._hyaImage.baseSize = imgSize;
                this._hyaImage.size = {w:imgSize.w*scale,h:imgSize.h*scale};
                this._elementSize = eleSize;

                var top = (eleSize.h - this._hyaImage.size.h)/2;
                var left = (eleSize.w - this._hyaImage.size.w)/2;

                this._scope.top = top;
                this._scope.left = left;
                this._scope.hyaImage = this._hyaImage;
                this._scope.$evalAsync();
            },

            _getElementSize:function(element){
                var size ={w:0,h:0};
                if(this._isEmpty(element)){
                    size.w = document.body.offsetWidth;
                    size.h = document.body.offsetHeight;
                    return size;
                }
                size.w = element[0].offsetWidth;
                size.h = element[0].offsetHeight;
                if(size.w*size.h<=0){
                    return this._getElementSize(element.parent());
                }
                return size;
            },
            _isEmpty:function(element){
                for (var key in element){
                    if (element.hasOwnProperty(key)) return false;
                }
                return true;
            },
            _onPanstart : function(event){
                this._startPoint = {
                    X:event.pointers[0].clientX,
                    Y:event.pointers[0].clientY
                };

            },

            _moveImage:function(x,y){
                var scope = this._scope;

                var left = scope.left-x;
                var top = scope.top-y;
                var imgWidth = this._hyaImage.size.w;
                var imgHeight = this._hyaImage.size.h;

                var minLeft = this._elementSize.w-imgWidth;
                minLeft = minLeft>0?minLeft/2:minLeft;

                var maxLeft = minLeft>0?minLeft:0;
                if(left>=minLeft && left<=maxLeft){
                    scope.left = left;
                }

                var minTop = this._elementSize.h-imgHeight;
                minTop = minTop>0?minTop/2:minTop;

                var maxTop = minTop>0?minTop:0;
                if(top>=minTop && top<=maxTop){
                    scope.top = top;
                }
                scope.$evalAsync();
            },

            _onPanmove : function(event){
                if(this._hyaImage.zoom <= this.initialZoom || !this._startPoint){
                    return;
                }
                var panEndX = event.pointers[0].clientX;
                var panEndY = event.pointers[0].clientY;
                var x = this._startPoint.X - panEndX;//移动的X轴的距离
                var y = this._startPoint.Y - panEndY;//移动的Y轴的距离

                this._moveImage(x,y);
                this._startPoint = {
                    X:event.pointers[0].clientX,
                    Y:event.pointers[0].clientY
                };

            },

            _onPinchstart : function(event){
                var pointers = event.pointers;
                if(pointers.length <= 1){
                    return;
                }
                this._pinchStartZoom = this._hyaImage.zoom;//记录缩放前图片的zoom值
                this._pinchPointers = pointers;//记录缩放前手指之间的距离
            },

            //缩小动作
            _onPinchin : function(event){
                var pointers = event.pointers;
                if(pointers.length <= 1){
                    return;
                }
                this._pinchImage(this._pinchPointers,pointers);
                this._pinchStartZoom = this._hyaImage.zoom;//记录缩放前图片的zoom值
                this._pinchPointers = pointers;//记录缩放前手指之间的距离
            },

            _pinchImage :function(pointsStart,pointsEnd){
                var scope = this._scope;
                var distanceEnd = this._caculate(pointsEnd[0],pointsEnd[1]);
                var distanceStart = this._caculate(pointsStart[0],pointsStart[1]);
                var scale = (distanceEnd/distanceStart)*this._pinchStartZoom;//计算缩小后的图片zoom值

                var location = this._getImageLocation(pointsStart,pointsEnd,scale,this._pinchStartZoom);

                scope.top += location.top;
                scope.left += location.left;

                var baseSize = this._hyaImage.baseSize;
                this._hyaImage.zoom = scale;
                this._hyaImage.size = {w:baseSize.w*scale,h:baseSize.h*scale};
                scope.hyaImage = this._hyaImage;

                scope.$evalAsync();
            },

            _getImageLocation:function(pointsStart,pointsEnd,scale,initScale){
                var startCenter = this._getLineCenter(pointsStart[0],pointsStart[1]);
                var endCenter = this._getLineCenter(pointsEnd[0],pointsEnd[1]);

                var startImgCenter = this._getImageCenter(startCenter);
                var endImgCenter = this._getImageCenter(endCenter);

                var left = endImgCenter.X - (startImgCenter.X*scale/initScale);
                var top = endImgCenter.Y - (startImgCenter.Y*scale/initScale);

                return {top:top,left:left};
            },

            _getImageCenter : function(point){
                var scope = this._scope;
                var X = point.clientX - scope.left;
                var Y = point.clientY - scope.top;
                return {X:X,Y:Y};
            },

            //放大动作
            _onPinchout : function(event){
                var pointers = event.pointers;
                if(pointers.length <= 1){
                    return;
                }
                this._pinchImage(this._pinchPointers,pointers);
                this._pinchStartZoom = this._hyaImage.zoom;//记录缩放前图片的zoom值
                this._pinchPointers = pointers;//记录缩放前手指之间的距离
            },

            _onPinchend :function(event){
                var scope = this._scope;
                var top = scope.top;
                var left = scope.left;
                if(this._hyaImage.zoom<this._initialZoom){//

                    this._hyaImage.zoom = this._initialZoom;

                    var imgWidth = this._hyaImage.zoom*this._hyaImage.baseSize.w;
                    var imgHeight = this._hyaImage.zoom*this._hyaImage.baseSize.h;
                    this._hyaImage.size = {w:imgWidth,h:imgHeight};

                    var top = (this._elementSize.h - imgHeight)/2;
                    var left = (this._elementSize.w - imgWidth)/2;
                }else if(this._hyaImage.zoom > this._maxZoom){

                    var top = scope.top + (this._hyaImage.zoom-this._maxZoom) * this._hyaImage.baseSize.h/2;
                    var left = scope.left + (this._hyaImage.zoom-this._maxZoom) * this._hyaImage.baseSize.w/2;

                    this._hyaImage.zoom = this._maxZoom;
                }

                var imgWidth = this._hyaImage.zoom*this._hyaImage.baseSize.w;
                var imgHeight = this._hyaImage.zoom*this._hyaImage.baseSize.h;

                var minLeft = this._elementSize.w-imgWidth;
                minLeft = minLeft>0?minLeft/2:minLeft;
                var maxLeft = minLeft>0?minLeft:0;
                if(left<minLeft) left=minLeft;
                if(left>maxLeft) left=maxLeft;

                var minTop = this._elementSize.h-imgHeight;
                minTop = minTop>0?minTop/2:minTop;
                var maxTop = minTop>0?minTop:0;
                if(top<minTop) top=minTop;
                if(top>maxTop) top=maxTop;

                this._hyaImage.size = {w:imgWidth,h:imgHeight};

                scope.top = top;
                scope.left = left;
                scope.hyaImage = this._hyaImage;
                scope.$evalAsync();
            },

            //单击
            _onTap : function(event){
                //scope.tapCount = scope.tapCount + 1;
                //if(scope.tapCount == 1){
                //	$timeout(function(){
                //		if(scope.tapCount < 2){
                //			scope.hyaImageClick({image:scope.hyaImage});
                //		}
                //		scope.tapCount = 0;
                //	},300);
                //};
                var scope = this._scope;
                scope.hyaImageClick({image:scope.hyaImage,event:event});
            },
            //双击
            _onDoubletap : function(event){
                var scope = this._scope;
                scope.hyaImageDoubleClick({image:scope.hyaImage,event:event});
                if(this._hyaImage.zoom <= this._initialZoom){//双击放大至最大倍数
                    this._hyaImage.zoom = this._maxZoom;
                }else{
                    //已经放大，缩小至原大小
                    this._hyaImage.zoom = this._initialZoom;
                }

                var imgWidth = this._hyaImage.zoom*this._hyaImage.baseSize.w;
                var imgHeight = this._hyaImage.zoom*this._hyaImage.baseSize.h;
                this._hyaImage.size = {w:imgWidth,h:imgHeight};
                var top = (this._elementSize.h - imgHeight)/2;
                var left = (this._elementSize.w - imgWidth)/2;

                scope.hyaImage = this._hyaImage;
                scope.top = top;
                scope.left = left;
                scope.$evalAsync();

            },

            //计算两个手指之间的直线距离
            _caculate : function(pointer1,pointer2){
                var x1 = pointer1.clientX;
                var y1 = pointer1.clientY;
                var x2 = pointer2.clientX;
                var y2 = pointer2.clientY;

                var xx = Math.abs(x1-x2);
                var yy = Math.abs(y1-y2);

                var result = Math.sqrt(xx*xx + yy*yy);
                return result;
            },

            //计算直线的中心点
            _getLineCenter:function(pointStart,pointEnd){
                var x1 = pointStart.clientX<pointEnd.clientX?pointStart.clientX:pointEnd.clientX;
                var y1 = pointStart.clientY<pointEnd.clientY?pointStart.clientY:pointEnd.clientY;
                var x2 = pointStart.clientX<pointEnd.clientX?pointEnd.clientX:pointStart.clientX;
                var y2 = pointStart.clientY<pointEnd.clientY?pointEnd.clientY:pointStart.clientY;
                var centerX = Math.abs(x1-x2)+x1;
                var centerY = Math.abs(y1-y2)+y1;

                return {clientX:centerX,clientY:centerY};
            },
            /**
             * Destroy.
             */
            destroy: function() {
                this._scope.$destroy();
            },

            _destroy: function() {
                this._scope = this._attrs = this._element = null;
            }
        });
        MicroEvent.mixin(HyImageScanView);
        return HyImageScanView;
    });
})();

/**
 * @ngdoc directive
 * @name hyImageScan
 * @module haiyiMobile
 * @description   图片浏览组件，可实现图片的缩放以及单双击事件
 * @params
 * 		hya-image:图片对象，必须包含src属性，可包含desc属性
 * 		hya-image-click：图片单击回调事件，参数是传入的图片对象
 * 		hya-image-double-click：图片双击的回调事件，参数是传入的图片对象
 * @returns
 * @usage <hy-image-scan></hy-image-scan>
 * @author GuoLinHao
 * @date 2016-01-20
 * @version V1.0
 */

(function(){
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen','hmTouchEvents']);
	}
	var template = '<div class="hy-image-scan" ' +
		'hm-tap="onTap" ' +
		'hm-doubletap="onDoubletap" ' +
		'hm-panstart="onPanstart" ' +
		'hm-panmove="onPanmove" ' +
		'hm-pinchstart="onPinchstart" ' +
		'hm-pinchin="onPinchin" ' +
		'hm-pinchout="onPinchout" ' +
        'hm-pinchend="onPinchend"> ' +
		'<div class="gesture-body"> ' +
			'<img class="gesture-body-img" ng-src="{{hyaImage.src}}" ' +
            'style="position:absolute;width:{{hyaImage.size.w}}px;height:{{hyaImage.size.h}}px;top:{{top}}px;left:{{left}}px"/>'+
		'</div> ' +
		'<ons-scroller class="desc-body" ng-if="hyaImage.desc"> ' +
			'<div>{{hyaImage.desc}}</div> ' +
		'</ons-scroller> ' +
	'</div>';

	module.directive('hyImageScan',['$onsen','HyImageScanView', function($onsen,HyImageScanView) {
		return {
			restrict: 'E',
      		replace: true,
      		transclude: true,
      		scope: {
      			hyaSrc:'@',//图片地址信息的数组
                hyaDesc:'@',//图片描述信息的数组
      			hyaImageClick:'&',//图片的点击事件
      			hyaImageDoubleClick:'&'//图片的双击事件
      		},
      		template:template,
      		link:function(scope,element,attrs){
                var hyImageScanView = new HyImageScanView(scope,element,attrs);

                $onsen.declareVarAttribute(attrs,hyImageScanView);
      		},
		};
	}]);
})();
/**
 * @ngdoc element
 * @name hyImg  图片缓存标签
 * @module haiyiMobile
 * @description 用于缓存图片
 *
 * @author linzhiyong
 * @time 2016-4-11 16:17:05
 *
 * @attribute
 *     hyaSrc        {String}    图片下载路径
 *     hyaLoadingImg {String}    加载时显示的图片
 *     hyaErrorImg   {String}    加载失败显示的图片
 *     hyaParams     {Object}    下载缓存参数
 *     hyaParams = {
 *         reload: false,   {Boolean}  是否重新加载，默认false
 *         headers: {},     {Object}   headers请求头部
 *     }
 *
 * @usage <hy-img hya-src=""></hy-img>
 */

(function () {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('ImgView', ['$onsen', '$hyHttp', function ($onsen, $hyHttp) {
        var ImgView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._scope.src = null;
                this._element = element;
                this._attrs = attrs;
                this._visible = true;
                this._img = angular.element(element[0].querySelector('.hy-img'));
                this._scope.$on('$destroy', this._destroy.bind(this));
                this._checkArgs();
            },

            /**
             * 检查标签attrs中是否存在hyaSrc和cache属性,存在则根据路径获取并进行缓存操作
             * @private
             */
            _checkArgs: function () {
                var self = this;
                // 监听hyaSrc值变化
                this._scope.$watch('hyaSrc', function (nv, ov) {
                    var params = self._scope.hyaParams || {};
                    params.cache = true; // 设置缓存模式
                    // 调用服务，缓存图片
                    self.reloadImg(self._scope.hyaSrc, params);
                });
                // 监听params参数变化
                this._scope.$watch('hyaParams', function (nv, ov) {
                    var params = self._scope.hyaParams || {};
                    params.cache = true; // 设置缓存模式
                    // 调用服务，缓存图片
                    if (nv !== ov) {
                        self.reloadImg(self._scope.hyaSrc, params);
                    }
                });
            },

            /**
             * 调用服务，缓存图片
             * @param url     {String}    图片路径
             * @param params  {Object}    下载缓存参数
             */
            reloadImg: function (url, params) {
                var self = this;
                if (self._scope.hyaLoadingImg) {
                    self._scope.src = self._scope.hyaLoadingImg;
                }
                $hyHttp.getFile(url, params).success(function (filePath) {
                    self._scope.src = filePath;
                }).error(function (error) {
                    console.error("hyImg: error = " + JSON.stringify(error));
                    if(self._scope.hyaErrorImg) {
                        self._scope.src = self._scope.hyaErrorImg;
                    }
                }).progress(function (event) {

                });
            },

            /**
             * Destroy img.
             */
            destroy: function () {
                if (this._parentScope) {
                    this._parentScope.$destroy();
                    this._parentScope = null;
                } else {
                    this._scope.$destroy();
                }
            },

            _destroy: function () {
                this.emit('destroy');

                this._scope = this._attrs = this._element = this._img = null;
            },
        });
        MicroEvent.mixin(ImgView);

        return ImgView;
    }]);

    module.directive('hyImg', ['$onsen', 'ImgView', function ($onsen, ImgView) {
        return {
            restrict: 'E',
            template: '<img ng-src="{{src}}"/>',
            replace: true,
            scope: {
                hyaSrc: "@",         //  {String}    图片下载路径
                hyaLoadingImg: "@",  //  {String}    加载时显示的图片
                hyaErrorImg: "@",    //  {String}    加载失败显示的图片
                hyaParams: "@",      //  {Object}    参数，见注释
            },
            link: {
                pre: function (scope, element, attrs) {
                    var img = new ImgView(scope, element, attrs);
                    //绑定var声明的对象到js和AngularJS的全局作用域中
                    $onsen.declareVarAttribute(attrs, img);
                    $onsen.registerEventHandlers(img, 'destroy');
                    element.data('hy-img', img);
                    scope.$on('$destroy', function () {
                        img._events = undefined;
                        $onsen.removeModifierMethods(img);
                        element.data('hy-img', undefined);
                        element = null;
                    });

                },
                post: function (scope, element) {
                    $onsen.fireComponentEvent(element[0], 'init');
                }
            }
        };
    }]);

})();
/**
 * Created by ym on 2017/4/21.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .directive('hyImgAuto', HyImgAutoDirective);


    /**
     * hyImgAuto
     * @author mageeYang
     * @ngdoc directive
     * @name imgAuto
     * @description
     *   [ch]自动根据img长宽控制大小[/ch]
     * @example
     *
     */

    function HyImgAutoDirective() {

        return {
            restrict: 'A',
            priority: 200,
            compile: function (element, attr) {
                return {
                    pre: function (scope, element, attrs) {
                        element.on('load', function () {
                            var width = element[0].clientWidth;
                            var height = element[0].clientHeight;
                            if (width >= height) {
                                element.css({
                                    height: '100%'
                                })
                            } else {
                                element.css({
                                    width: '100%'
                                })
                            }
                        });
                    },
                    post: function (scope, element) {
                    }
                }
            }
        };
    }
})();
/**
 * hy-img-btn - v1.0.0 - 2016-01-14
 * @author liukeyu
 * @ngdoc directive
 * @name haiyi-img-btn
 * @description
 *   [ch]图片按钮，用文字图片和文字组合为按钮.[/en]
 * @example
 * <hy-img-btn >
 * </hy-img-btn>
 */
(function() {
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
  module.factory('HyImgBtnView',["$compile", "$rootScope", "$sce", function($compile,$rootScope,$sce){
  	/**
	 * 获取位置
	 */
	function getPosition(position){
		position = position.toLowerCase();
		var iconPosition = 'top';
		var labelPosition = 'bottom';
		switch (position) {
			case 'left':
				iconPosition = 'left';
				labelPosition = 'right';
				break;
			case 'right':
				iconPosition = 'right';
				labelPosition = 'left';
				break;
			case 'bottom':
				iconPosition = 'bottom';
				labelPosition = 'top';
				break;
			default:
				break;
		}
		return {icon:iconPosition,label:labelPosition};
	}

	function createBtnBody(position,scope){
		scope.content = $sce.trustAsHtml(scope.label||'');
		var icon = '<div class="haiyi-icon" >';
		icon += '<img ng-if="iconImg" ng-src="{{tabIconImg}}" class="icon-img"/>';
		icon += '<ons-icon ng-if="icon && !iconImg" icon="{{tabIcon}}"></ons-icon>';
		icon += '</div>';

		var label = '<div class="haiyi-label" ng-bind-html="content"></div>';
		var html = '';
		html += '<table>';

		if (position.icon=='top') {
			html += '<tr ng-if="icon || iconImg">';
			html += '<td>';
			html += icon;
			html += '</td>';
			html += '</tr>';
			html += '<tr ng-if="label">';
			html += '<td>';
			html += label;
			html += '</td>';
			html += '</tr>';
		}else if (position.icon=='bottom') {
			html += '<tr ng-if="label">';
			html += '<td>';
			html += label;
			html += '</td>';
			html += '</tr>';
			html += '<tr ng-if="icon || iconImg">';
			html += '<td>';
			html += icon;
			html += '</td>';
			html += '</tr>';
		}else if (position.icon=='left') {
			html += '<tr>';
			html += '<td ng-if="icon || iconImg">';
			html += icon;
			html += '</td>';
			html += '<td ng-if="label">';
			html += label;
			html += '</td>';
			html += '</tr>';
		}else if (position.icon=='right') {
			html += '<tr>';
			html += '<td ng-if="label">';
			html += label;
			html += '</td>';
			html += '<td ng-if="icon || iconImg">';
			html += icon;
			html += '</td>';
			html += '</tr>';
		}

		html += '</table>';
		return html;
	}

  	var HyImgBtnView = Class.extend({
  		/**
		 * @param {Object} scope
		 * @param {jqLite} element
		 * @param {Object} attrs
		 */
		init: function(scope, element, attrs) {
			this._element = element;
			this._attrs = attrs;


			//位置
			scope.position = scope.position || 'top'
			this.position = getPosition(scope.position);

			scope.iconPosition = this.position.icon;
			scope.labelPosition = this.position.label;
			this._scope = scope;

			var html = createBtnBody(this.position,this._scope);
			var btnEle = angular.element(html);
			$compile(btnEle)(this._scope);
            setImmediate(function(){
                var img =  angular.element(btnEle[0].querySelector('img.icon-img'));
                if(this._attrs.hyaImgWidth && this._attrs.hyaImgWidth.length>0){
                    img.css({'width':this._attrs.hyaImgWidth,'max-width':this._attrs.hyaImgWidth});
                }
                if(this._attrs.hyaImgHeight && this._attrs.hyaImgHeight.length>0){
                    img.css({'height':this._attrs.hyaImgHeight,'max-height':this._attrs.hyaImgHeight});
                }
            }.bind(this));

            this._element.html('');
            this._element.append(btnEle);

			var eventName = 'click';
			this._element.on(eventName, function(event) {
				var callback = function() {
					this.toggle();
					//clickFn(scope.$parent, {$event:event});
				}.bind(this);
				if ($rootScope.$$phase) {
					this._scope.$evalAsync(callback);
				} else {
					this._scope.$apply(callback);
				}
			}.bind(this));

			this._scope.$on('$destroy', this._destroy.bind(this));
		},

		// Make this tab active.
		setActive : function() {
			this._element.addClass('active');
			if (this._scope.activeIcon) {
				this._scope.tabIcon = this._scope.activeIcon;
			}
			if (this._scope.activeIconImg) {
				this._scope.tabIconImg = this._scope.activeIconImg;
			}
		},

		// Make this tab inactive.
		setInactive : function() {
			this._element.removeClass('active');
			this._scope.tabIcon = this._scope.icon;
			this._scope.tabIconImg = this._scope.iconImg;
		},

		/**
		 * @return {Boolean}
		 */
		isActive : function() {
			return this._element.hasClass('active');
		},

		toggle : function(){
			if (this.isActive()) {
				this.setInactive();
			}else{
				this.setActive();
			}
		},

		/**
		 * Destroy.
		 */
		destroy: function() {
			this._scope.$destroy();
		},

		_destroy: function() {
			this._scope = this._attrs = this._element = null;
		}
  	});
	  MicroEvent.mixin(HyImgBtnView);
  	return HyImgBtnView;
  }]);

  module.directive('hyImgBtn', tab);

  function tab($onsen,$rootScope,HyImgBtnView) {
    return {
      restrict: 'E',
      scope: {
        icon: '@hyaIcon',
        iconImg: '@hyaIconImg',
        activeIcon: '@hyaActiveIcon',
        activeIconImg: '@hyaActiveIconImg',
        label: '@hyaLabel',
        position:'@hyaPosition'
      },
      compile: function(element, attrs) {
		element.addClass('haiyi-img-btn button');
		var html = element.html();
		return function(scope, element, attrs) {
			var content = scope.label || (html?html:'');
			//scope.label ='<span>'+scope.label+'</span>';

			scope.label = content;
			scope.tabIcon = scope.icon;
			scope.tabIconImg = scope.iconImg;
			var imgBtn = new HyImgBtnView(scope, element, attrs);
			if (imgBtn.isActive()) {
				imgBtn.setActive();
			}

			$onsen.declareVarAttribute(attrs, imgBtn);
        };

      }
    };
  }
  tab.$inject = ['$onsen','$rootScope','HyImgBtnView'];
})();
/**
 * hy-input - v1.0.0 - 2016-05-11
 * @author liukeyu
 * @ngdoc directive
 * @name hy-input
 * @description
 *   [ch]解决input被软键盘遮挡问题.[/en]
 * @example
 * <input hy-input='' />
 *
 * @modify mageeYang 2016-08-11
 * 修改该指令，扩展到E标签
 * HTML5 INPUT标签的type=search自带删除按钮，但是弹出的键盘中确定按钮是搜索，还有有些不方便
 * 因此封装INPUT输入框，使普通的输入框输入内容后带清除按钮，
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyInput', ['$timeout', 'HyInputView', '$onsen', function ($timeout, HyInputView, $onsen) {
        return {
            restrict: 'EA',
            template: getTemplate,
            scope: {
                value: '=hyValue', //折叠标题
                placeholder: '@placeholder', //是否开启，默认是false，折叠状态
                hyaInputClass: '@',
                hyaIcon: '@',
                type: '@',
                hyaIconClass: '@',
                hyaScrollHei:'@'
            },
            link: function (scope, element, attrs) {

                var inputView = new HyInputView(scope, element, attrs);
                $onsen.declareVarAttribute(attrs, inputView);

                element.data('hy-input', inputView);

                scope.$on('destory', function () {
                    inputView._events = undefined;
                    $onsen.removeModifierMethods(inputView);
                    element.data('hy-input', undefined);
                    element = null;
                });
                $onsen.fireComponentEvent(element[0], 'init');
            }
        }

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attrs) {
            if (!angular.isDefined(attrs.hyInput)) {
                return '<div style="position: relative;flex-shrink: 1;">' +
                    '<input type="{{type}}" placeholder="{{placeholder}}" class="hy-input-delete {{hyaInputClass}}" ng-model="value" />' +
                    '<i  ng-click="deleteText()"  class="hy-input-delete-icon {{hyaIcon}} {{hyaIconClass}} {{hyaIconShow}} "></i>' +
                    '</div>';
            }
            return "";
        }
    }]);

    module.factory('HyInputView', ['$onsen', '$q', '$timeout', function ($onsen, $q, $timeout) {
        var HyInputView = Class.extend({
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this.timer;
                this._scope.placeholder = this._scope.placeholder || '请输入';
                this._scope.hyaIcon = this._scope.hyaIcon || 'ion-close-circled';
                this._scope.type = this._scope.type || 'text';
                this._scope.deleteText = angular.bind(this, this._deleteText);

                this.pickerDiv = angular.element(this._element[0].querySelector('.hy-input-delete'));
                var self = this;
                this._scope.$watch('value', function () {
                    if (self._scope.value !== null && self._scope.value !== undefined && self._scope.value !== "") {
                        self._scope.hyaIconShow = "hy-input-delete-icon-show";
                    } else {
                        self._scope.hyaIconShow = "";
                    }
                })
                var self = this;
                this.ewHei = 10;
                if(this._scope.hyaScrollHei) this.ewHei = parseInt(this._scope.hyaScrollHei);
                if(angular.isDefined(this._attrs.hyInput)){
                    this._element.bind('click',function(){
                        self._scrollStart(self._element);
                    });
                }else{
                    this.pickerDiv.bind('click',function(){
                        self._scrollStart(self.pickerDiv);
                    });
                }
            },
            _deleteText: function () {
                this._scope.value = "";
                this._scope.hyaIconShow = "";
            },
            _scrollStart: function (element) {
                if (this.timer) $timeout.cancel(this.timer);
                var self = this;
                this.element = element;
                this.timer = $timeout(function () {
                    var scrollEle = self._findScrollContent(self.element);
                    var scroll = self._getNeedScroll(scrollEle, self.element[0]);
                    if (scroll === false) {
                        if (self.timer) $timeout.cancel(self.timer);
                        return;
                    }
                    scrollEle.scrollTop = scroll;
                    //scrollAnimate(scrollEle,{scroll:scroll,time:30});
                    //self._scrollStart();
                }, 300);
            },
            _getNeedScroll: function (scrollEle, element) {
                var offset = element.getBoundingClientRect().top +this.ewHei;
                var height = element.offsetHeight;
                var offsetTop = scrollEle.getBoundingClientRect().top;
                var scrollHeight = scrollEle.offsetHeight;
                var scrollTop = scrollEle.scrollTop;

                return (offset < offsetTop) ? scrollTop + offset - offsetTop : ((offset + height > scrollHeight + offsetTop) ? scrollTop + offset + height - scrollHeight - offsetTop : false);
            },
            _findScrollContent: function (element) {
                var e = element[0];
                while (e.parentNode) {
                    e = e.parentNode;
                    if (e.style.overflow != 'hidden'
                        && e.scroll != 'no'
                        && e.scrollHeight > e.offsetHeight) {
                        break;
                    }
                    if (e.className) {
                        if (e.className.split(/\s+/).indexOf('page__content') >= 0) {
                            break;
                        }
                    }
                }
                return e;
            },

        });
        MicroEvent.mixin(HyInputView);
        return HyInputView;
    }
    ])
    ;
})
();
/**
 * hy-input-clear - v1.0.0 - 2017-01-21
 * @author mageeYang
 * @ngdoc directive
 * @name hy-input-clear
 * @description
 *   [ch]用于input输入框，带清除按钮的输入框[/en]
 * @example
 * <hy-input-clear></hy-input-clear>
 * @modify
 * 2017-12-22 给组件增加了一个readyOnly属性，并增加了一个blur的事件监听
 *
 */
(function () {
    'use strict';
    HyInputClearDirective.$inject = ["$onsen", "$hyInputClearView"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    module.factory('$hyInputClearView', HyInputClearView)
        .directive('hyInputClear', HyInputClearDirective);

    function HyInputClearView() {
        var hyInputClearView = Class.extend({
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._scope.placeholder = this._scope.placeholder || '请输入';
                this._scope.readonly = this._attrs.hasOwnProperty('readonly');
                //如果存在图标的样式文件，则清空字体图标样式，如果没有则默认赋值字体样式
                if(!this._scope.hyaIconClass){
                    this._scope.hyaIcon = this._scope.hyaIcon || 'ion-close-circled';
                }else{
                    this._scope.hyaIcon = "";
                }
                this._scope.type = this._scope.type || 'text';
                this._scope.hyChange = this._scope.hyChange || angular.noop();
                this._scope.isForce = false;
                //绑定方法到作用域上
                this._scope.clearHyInputText = angular.bind(this,this._clearText);
                this._scope.initIconShow = angular.bind(this,this._initIconShow);
                this._scope.hideIcon = angular.bind(this,this._hideIcon);
                this._scope.setForce = angular.bind(this,this._setForce);
                this._scope.setBlur = angular.bind(this,this._setBlur);
                //监听指令vlaue值得变化
                this._scope.$watch('value', this._initIconShow.bind(this));
            },
            /**
             * 初始化图标的状态
             * @private
             */
            _initIconShow:function(){
                if (!this.readonly&&this._scope.isForce && this._scope.value !== null && this._scope.value !== undefined && this._scope.value !== "") {
                    this._scope.hyaIconShow = "show";
                } else {
                    this._scope.hyaIconShow = "";
                }
            },
            _setForce: function () {
                if (this._scope.readonly)
                    return;
                this._scope.isForce = true;
                this._initIconShow();
            },
            _setBlur:function(){
                this._scope.isForce = false;
                this._scope.hyaIconShow = "";
                if(this._scope.hyBlur){
                    this._scope.hyBlur.call(this);
                }
            },
            /**
             * 隐藏图标
             * @private
             */
            _hideIcon:function(){
                this._scope.hyaIconShow = "";
            },
            /**
             * 清除文本
             * @private
             */
            _clearText: function () {
                this._scope.value = "";
                this._scope.hyaIconShow = "";
                this._scope.$evalAsync();
            }
        });
        MicroEvent.mixin(hyInputClearView);
        return hyInputClearView;
    }

    function HyInputClearDirective($onsen, $hyInputClearView) {
        //获取指令模板
        function getTemplate(element, attrs) {
            var template = '<div class="hy-input-clear-content">' +
                '<input ng-readonly="readonly" type="{{type}}" class="hy-input-clear" pattern="{{pattern}}" ng-focus="setForce()" ng-change="hyChange()" ng-blur="setBlur()" placeholder="{{placeholder}}" ng-model="value"/>' +
                '<div  ng-click="clearHyInputText()"  class="hy-input-clear-icon {{hyaIcon}} {{hyaIconClass}} {{hyaIconShow}} "></div>' +
                '</div>';
            return template;
        }

        return {
            restrict: 'E',
            template: getTemplate,
            replace: true,
            scope: {
                value: '=hyValue',
                type: '@type',
                placeholder:'@placeholder',
                hyaIconClass: '@',
                hyChange:'&',
                hyBlur:'&',
                pattern:'@pattern'
            },
            compile: function (element, attrs) {
                return {
                    pre: function (scope, element, attrs) {
                        var hyinputclear = new $hyInputClearView(scope, element, attrs);
                        $onsen.declareVarAttribute(attrs, hyinputclear);

                        element.data('hy-input-clear', hyinputclear);

                        scope.$on('destory', function () {
                            hyinputclear._events = undefined;
                            $onsen.removeModifierMethods(hyinputclear);
                            element.data('hy-input-clear', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element) {
                        //日历控件服务初始化操作
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        }
    }
})
();
/*
 * author:chenchuanyin
 * hyaContentShow:浮层要显示的内容，请根据文字设置恰当的宽度。
 * hyaWidth:浮层的宽度，按占屏幕百分比设置。
 * hyaColor:浮层的背景颜色。
 * hyaLocation:浮层的显示位置，顶部或底部。
 */

(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.factory('LoadModal',['$onsen','$timeout',function($onsen,$timeout){
		var LoadModal = Class.extend({
			init:function(scope,element,attrs){
				this._scope = scope;
				this._element = element;
				this._attrs = attrs;
				this._visible = true;
				this._modal = angular.element(element[0].querySelector('.Modal'));
				this._modalContent = angular.element(element[0].querySelector('.ModalContent'));
				this._scope.$on('$destroy', this._destroy.bind(this));
			},
			show:function(time){
				if(this._desTime){
					$timeout.cancel(this._desTime);
				}
				this._modal.css('height','24px');
				this._modal.css('display', 'block');
				this._modalContent.css('height','20px');
				this._visible = true;
				this._time = time || 1000;
				var self = this;
				this._desTime = $timeout(function(){
					self._modal.css('height', '0');
					self._modalContent.css('height', '0');
					self._visible = false;
					if(this._desTime){
						$timeout.cancel(this._desTime);
					}
				}.bind(this),self._time);
			},
			hide:function(){
				/*渐变隐藏*/
				this._modal.css('height', '0');
				this._modalContent.css('height', '0');
				/*直接隐藏*/
				/*this._element.css('display', 'none');
				this._element.css('opacity', '0');
				this._modal.css('display', 'none');
				this._modal.css('opacity', '0');*/
				this._visible = false;
			},
			toggle:function(){
				if(this._visible){
					return this.hide().apply(this,arguments);
				}else{
					return this.show.apply(this,arguments);
				}
			},
			_destroy: function() {
				this.emit('destroy');
				this._element.remove();
				this._scope = this._attrs = this._element = this._modal = null;
			},
		});
		MicroEvent.mixin(LoadModal);
		return LoadModal;
	}]);
	module.directive('hyLoadModal',['$onsen','LoadModal',function($onsen,LoadModal){
		return {
			restrict:'E',
			scope:{
				hyaContentShow:'@',
				hyaWidth:'@',
				hyaColor:'@',
				hyaLocation:'@',
			},
			template:'<div class="Modal" style="width:{{hyaWidth}};left:{{left}};background-color: {{hyaColor}};position: {{position}};bottom: {{bottom}}">\
						 <div class = "ModalContent">{{hyaContentShow}}</div>\
					  </div>',
			compile:function(element,attrs){
				return{
					pre:function(scope,element,attrs){
						var modal = new LoadModal(scope,element,attrs);
						$onsen.declareVarAttribute(attrs,modal);
						$onsen.registerEventHandlers(modal,'destroy');
						element.data('hy-load-modal',modal);
						scope.$on('$destroy',function(){
							modal._events = undefined;
							$onsen.removeModifierMethods(modal);
							element.data('hy-load-modal', undefined);
							element = null;
						});
						scope.left = (parseInt(100)-parseInt(scope.hyaWidth))/parseInt(2)+'%';
						if(scope.hyaLocation == "bottom"){
							scope.position = 'absolute';
							scope.bottom = '0';
						}else{
							scope.position = 'absolute';
						}
					},
					post:function(scope,element,attrs){

					},
				}
			}
		};
	}]);
})();



/**
 * HyGeolocationView - v1.0.0 - 2016-03-10
 * @author liukeyu
 * @ngdoc service
 * @name HyGeolocationView
 * @description
 *   [ch]定位服务.[/en]
 * @example
 */
(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('HyGeolocationView', ["$onsen", function ($onsen) {
        var HyGeolocationView = Class.extend({
            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (success, error, options) {
                this.type = 0;//Cordova原生定位
                this._success = success;
                this._error = error;
                this._options = options || {enableHighAccuracy: true,timeout: 60000};
                this._geolocation;
                if (navigator && navigator.geolocation) {
                    this._geolocation = navigator.geolocation;
                }
            },
            location: function (success, error, options) {
                success = success || this._success;
                error = error || this._error;
                options = options || this._options;
                if (!this._geolocation) {
                    if(error) error({message:'没有开启定位。'});
                    return;
                }

                navigator.geolocation.getCurrentPosition(success, error, options);
            }
        });

        MicroEvent.mixin(HyGeolocationView);
        return HyGeolocationView;
    }]);
})();
/**
 * hy-map - v1.0.0 - 2016-03-10
 * @author liukeyu
 * @ngdoc directive
 * @name hy-password
 * @description
 *   [ch]地图.[/en]
 * @example
 * <hy-map>
 * </hy-map>
 */
(function() {
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}

    module.factory('HyMapView',["$onsen", "HyGeolocationView", function($onsen,HyGeolocationView){

        var HyMapView = Class.extend({
            _baiduAk:null,//百度地图秘钥4bf143876353861a3ff7312b9e786a19
            _defaultOptions:{
                location:{//中心点（北京）
                    latitude:116.404,
                    longitude:39.915
                }
                ,level:15//地图级别
            },
            _defaultControls:[
                {name:'MapTypeControl',options:null}//地图类型
                ,{name:'ScaleControl',options:null}//比例尺
                ,{name:'NavigationControl',options:null}//缩放控件
                ,{name:'GeolocationControl',options:null}//定位
            ],

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function(scope, element,attrs) {
                this._element = element;
                this._attrs = attrs;
                this._scope = scope;

                this._scope._haiyiMap = this._getBaiduBMap();
                if (!this._scope._haiyiMap){
                    return;
                }

                this._selfControls = [];

                this.setMapCenter = this._setMapCenter;
                this.getDistance = this._getDistance;
                this.addMarkerPoint = function(x,y,opts){
                    var HMap = this._scope._haiyiMap;
                    if(!this.map) return;
                    opts = this._translateOptions(HMap,opts);
                    var marker = this._createMarkerPoint(x,y,opts);
                    this.map.addOverlay(marker);
                    return marker;
                }.bind(this);

                this.addMarkerCircle = function(point,r,opts){
                    var HMap = this._scope._haiyiMap;
                    if(!this.map) return;
                    if(!(point instanceof HMap.Point)){
                        point = new HMap.Point(point.lng,point.lat);
                    }
                    opts = this._translateOptions(HMap,opts);
                    var marker = this._createMarkerCircle(point,r,opts);
                    this.map.addOverlay(marker);
                    return marker;
                }.bind(this);

                this.createMarkerPoint = this._createMarkerPoint;
                this.createMarkerCircle = this._createMarkerCircle;

                this.removeOverlay = function(overlay){
                    if(!this.map) return;
                    if(!overlay)
                        this.map.clearOverlays();
                    else
                        this.map.removeOverlay(overlay);
                };

                this.options ={};
                if (this._attrs.hyaLevel && parseInt(this._attrs.hyaLevel)>0){
                    this.options.level = this._attrs.hyaLevel;
                }
                this.options = angular.extend({}, this._defaultOptions, this.options);
                //获取要加载的控制器
                if (!this._scope.controls || !angular.isArray(this._scope.controls)){
                    this._scope.controls = this._defaultControls;
                }
                /*
                this._getLocation(function (location) {
                    if(!this.map || !location) return;
                    this.options.location = location;
                    var HMap = this._scope._haiyiMap;
                    var point = new HMap.Point(location.latitude, location.longitude);// 创建点坐标
                    this._setMapCenter(this.map,point);// 初始化地图，设置中心点坐标和地图级别
                }.bind(this));//获取中心点或定位
                */

                this.geoSuccess = this._geoSuccess.bind(this);
                this.geoFail = this._geoFail.bind(this);
                var mapInitBack = function(map){
                    if(!map) return;
                    this.map = map;

                    /*//地图类型
                    var mapType = this._createMapType();
                    if (mapType) map.addControl(mapType);//默认：2D图，卫星图

                    //比例尺
                    var scaleControl = this._createScaleControl();
                    if (scaleControl) map.addControl(scaleControl);

                    //缩放控件
                    var navigation = this._createNavigation();
                    if (navigation) map.addControl(navigation);
                    */
                    this._addControls(this._scope.controls);
                    //定位
                    if(!this.geolocationControl)
                        this.geolocationControl = this._createGeolocationControl(this.geoSuccess,this.geoFail);

                    this._scope.init({$event:this});
                };
                this._createMap(this.options,mapInitBack);
                this._scope.$on('$destroy', this._destroy.bind(this));
            },
            /**
             * 移除百度Logo
             * @private
             */
            _removeBaiduLogo:function(){
                var anchorBLEle = this._element[0].querySelectorAll('.anchorBL');
                if(!anchorBLEle || anchorBLEle.length<=0) return;
                for(var i = anchorBLEle.length-1;i>=0;i--){
                    var baiduLogo = anchorBLEle[i];
                    var baiduImg = baiduLogo.querySelector('img');
                    if(baiduImg && baiduImg.src=='http://api0.map.bdimg.com/images/copyright_logo_hd.png'){
                        angular.element(baiduLogo).remove();
                        break;
                    }
                }
                //angular.element(baiduLogo).remove();
            },
            /**
             * 获取百度地图对象
             * @private
             */
            _getBaiduBMap:function(){
                if(!window.BMap){
                    window.__bMapInit= function(){
                        this.init(this._scope,this._element,this._attrs);
                    }.bind(this);
                    var script = document.createElement("script");
                    var baiduKey = this._attrs.hyaAk || this._baiduAk;//百度地图秘钥
                    script.src = 'http://api.map.baidu.com/api?v=2.0&ak='+baiduKey+'&callback=__bMapInit';//此为v2.0版本的引用方式
                    // http://api.map.baidu.com/api?v=1.4&ak=您的密钥&callback=initialize"; //此为v1.4版本及以前版本的引用方式
                    document.body.appendChild(script);
                    return null;
                }
                return window.BMap;
            },
            /**
             * 创建地图
             * @param options
             * @private
             */
            _createMap:function(options,callback){
                if (!this._scope._haiyiMap){
                    return null;
                }

                var HMap = this._scope._haiyiMap;
                var map = new HMap.Map(this._element[0]);// 创建地图实例
                var centerBack = function(center){
                    if (center.type=='point'){
                        map.centerAndZoom(center.point,options.level);// 初始化地图，设置中心点坐标和地图级别
                        //var marker = this._createMarkerPoint(center.point.lng,center.point.lat);
                        //map.addOverlay(marker);
                    }else {
                        map.centerAndZoom(center.city,options.level);// 初始化地图，设置中心点坐标和地图级别
                    }
                    if (callback && angular.isFunction(callback)){
                        callback.call(this,map);
                    }
                }.bind(this);
                this._initMapCenter(options,centerBack);
                return map;
            },
            /**
             * 初始化用户中心
             * @private
             */
            _initMapCenter: function(options,callback){
                var HMap = this._scope._haiyiMap;
                var centerStr = this._attrs.hyaCenter;
                var center = {};
                center.type = 'point';
                center.latitude = options.location.latitude;
                center.longitude = options.location.longitude;
                if (!centerStr){
                    center.point = new HMap.Point(center.latitude, center.longitude);// 创建点坐标
                    if (callback && angular.isFunction(callback)){
                        callback.call(this,center);
                    }
                    return center;
                }
                centerStr = typeof centerStr === 'string' ? centerStr.trim() : centerStr;
                var centerArr = centerStr.split(',');
                if (!centerArr || centerArr.length!=2
                    || isNaN(parseFloat(centerArr[0]))
                    || isNaN(parseFloat(centerArr[1]))){
                    center.type = 'city';
                    center.city = centerStr;
                    if (callback && angular.isFunction(callback)){
                        callback.call(this,center);
                    }
                    return center;
                }
                center.type = 'point';
                center.latitude = parseFloat(centerArr[0]);
                center.longitude = parseFloat(centerArr[1]);
                center.point = new HMap.Point(center.latitude, center.longitude);// 创建点坐标
                var centerType = this._attrs.hyaCenterType || 5;

                if (centerType==5 && callback && angular.isFunction(callback)){
                    callback.call(this,center);
                    return center;
                }
                if (!callback || !angular.isFunction(callback)){
                    return center;
                }
                this._translateLocation(center.point,function(point,status){
                    if (status === 0){
                        center.point = point;
                    }else{
                        center.point = new HMap.Point(options.location.latitude, options.location.longitude);// 创建点坐标
                    }
                    callback.call(this,center);
                }.bind(this),centerType,5);
                return center;
            },

            _translateOptions: function(HMap,opts){
                if(!opts) return opts;
                if(angular.isFunction(opts)){
                    opts = opts.call(this);
                    return this._translateOptions(opts);
                }

                if(opts.offset){
                    opts.offset = new HMap.Size(opts.offset.h || 18 ,opts.offset.v || 18);
                }
                if(opts.icon){
                    var iconOpts = null;
                    if(opts.icon.opts){
                        iconOpts = this._translateOptions(HMap,opts.icon.opts);
                    }
                    opts.icon = new HMap.Icon(opts.icon.src,new HMap.Size(opts.icon.w || 14,opts.icon.h|| 14),iconOpts);
                }
                if(opts.locationIcon){
                    opts.locationIcon = new HMap.Icon(opts.locationIcon.src,new HMap.Size(opts.locationIcon.w || 14,opts.locationIcon.h|| 14));
                }
                if(opts.shadow){
                    opts.shadow = new HMap.Icon(opts.shadow.src,new HMap.Size(opts.shadow.w || 14,opts.shadow.h|| 14));
                }

                if (opts.anchor && angular.isObject(opts.anchor)){
                    opts.anchor  = new HMap.Size(opts.anchor.w || 0 ,opts.anchor.h || 0);
                }
                if (opts.imageOffset && angular.isObject(opts.imageOffset)){
                    opts.imageOffset  = new HMap.Size(opts.imageOffset.w,opts.imageOffset.h);
                }
                return opts;
            },

            /**
             * 定位成功后操作
             * @param e
             * @private
             */
            _geoSuccess:function(e){

                var position ={};// e;
                position.lng = e.coords.longitude;
                position.lat = e.coords.latitude;
                var self = this;
                this._translateLocation(position,function(point,state){
                    var res = {};
                    res.point = point;
                    res.state = state;
                    res.addressComponent ={};
                    //res.addressComponent.province = ;
                    //res.addressComponent.city;
                    //res.addressComponent.district;
                    //res.addressComponent.street;
                    //res.addressComponent.streetNumber;
                    if (self._autoGeo){
                        self._setMapCenter(this.map,point);//自动定位（执行location()方法）
                        self._autoGeo = false;
                    }
                    self._scope.geolocation.call(self,{$event:res,$map:self});
                },1,5);
            },
            /**
             * 定位失败操作
             * @param e
             * @private
             */
            _geoFail:function(e){
                e.point = null;
                this._scope.geolocation.call(this,{$event:e,$map:this});
            },
            /**
             * 定位控件
             * @param success
             * @param fail
             * @returns {*}
             * @private
             */
            _createGeolocationControl:function(success,fail,opts){
                if (!this._scope._haiyiMap){
                    return null;
                }
                //var HMap = this._scope._haiyiMap;
                ////opts = this._translateOptions(HMap,opts);
                //
                //opts = opts || {anchor: BMAP_ANCHOR_BOTTOM_LEFT
                //        ,offset:new HMap.Size(18,18)
                //       // ,locationIcon:new HMap.Icon('http://api0.map.bdimg.com/images/blank.gif'
                //       // ,new HMap.Size(14,14))
                //    };//左下角
                //// 添加定位控件
                //var geolocationControl = new HMap.GeolocationControl(opts);
                //geolocationControl.addEventListener("locationSuccess", function(e){
                //    // 定位成功事件
                //    if (success && angular.isFunction(success)){
                //        success.call(this,e);
                //    }
                //});
                //geolocationControl.addEventListener("locationError",function(e){
                //    // 定位失败事件
                //    if (fail && angular.isFunction(fail)){
                //        fail.call(this,e);
                //    }
                //});
                var geolocationControl = new HyGeolocationView(success,fail);
                return geolocationControl;
            },

            /**
             * 创建地图类型控件
             * @private
             */
            _createMapTypeControl: function(opts){
                if (!this._scope._haiyiMap){
                    return null;
                }
                opts = opts || {
                        anchor: BMAP_ANCHOR_TOP_RIGHT
                        //,type:
                        ,mapTypes: [
                            BMAP_NORMAL_MAP	//此地图类型展示普通街道视图。
                            //,BMAP_PERSPECTIVE_MAP//此地图类型展示透视图像视图。
                            //,BMAP_SATELLITE_MAP	//此地图类型展示卫星视图。(自 1.2 新增)
                            ,BMAP_HYBRID_MAP //此地图类型展示卫星和路网的混合视图。(自 1.2 新增)
                        ]};
                var HMap = this._scope._haiyiMap;
                var mapType = new HMap.MapTypeControl(opts);
                return mapType;
            },
            /**
             * 创建比例尺
             * @param opts
             * @returns {*}
             * @private
             */
            _createScaleControl: function(opts){
                if (!this._scope._haiyiMap){
                    return null;
                }

                var HMap = this._scope._haiyiMap;
                //opts = this._translateOptions(HMap,opts);
                opts = opts || {anchor: BMAP_ANCHOR_BOTTOM_LEFT};//左下角

                var scaleControl = new HMap.ScaleControl(opts);//比例尺
                return scaleControl;
            },
            /**
             * 创建缩放控件
             * @param opts
             * @returns {*}
             * @private
             */
            _createNavigation: function(opts){
                if (!this._scope._haiyiMap){
                    return null;
                }

                var HMap = this._scope._haiyiMap;
                //opts = this._translateOptions(HMap,opts);
                /*
                缩放控件type有四种类型:
                 BMAP_NAVIGATION_CONTROL_SMALL：仅包含平移和缩放按钮；
                 BMAP_NAVIGATION_CONTROL_PAN:仅包含平移按钮；
                 BMAP_NAVIGATION_CONTROL_ZOOM：仅包含缩放按钮
                 */
                opts = opts || {anchor: BMAP_ANCHOR_BOTTOM_RIGHT, type: BMAP_NAVIGATION_CONTROL_ZOOM};

                var navigation = new HMap.NavigationControl(opts);
                return navigation;
            },

            /**
             * 改变地图中心点
             * @param point null：自动定位
             * @private
             */
            _setMapCenter : function(map,point){
                if(map && point){
                    map.panTo(point);
                    return;
                }
                /*this._getLocation(function (location) {
                    if(!location) return;
                    //this.options.location = location;
                    var HMap = this._scope._haiyiMap;
                    var point = new HMap.Point(location.latitude, location.longitude);// 创建点坐标
                    this._setMapCenter(map,point);// 初始化地图，设置中心点坐标和地图级别
                }.bind(this));//获取中心点或定位
                */
                if(this.geolocationControl) {//定位
                    this._autoGeo = true;
                    this.geolocationControl.location();
                }

            },

            /**
             * 创建点
             * @param points
             * @returns {HMap.marker}
             * @private
             */
            _createMarkerPoint:function(x,y,opts){
                if (!this._scope._haiyiMap){
                    return null;
                }
                var HMap = this._scope._haiyiMap;
                //opts = this._translateOptions(HMap,opts);
                var marker = new HMap.Marker(new BMap.Point(x,y),opts); // 创建点
                return marker;
            },
            /**
             * 创建折线
             * @param points
             * @returns {HMap.Polyline}
             * @private
             */
            _createMarkerPolyline:function(points,opts){
                if (!this._scope._haiyiMap){
                    return null;
                }
                var HMap = this._scope._haiyiMap;
                //opts = opts || this.defaultMarkerOptions;
                var polyline = new HMap.Polyline(points,opts);   //创建折线
                return polyline;
            },
            /**
             * 创建圆
             * @param point
             * @param r
             * @returns {*}
             * @private
             */
            _createMarkerCircle:function(point,r,opts){
                if (!this._scope._haiyiMap){
                    return null;
                }
                //opts = opts || this.defaultMarkerOptions;
                var HMap = this._scope._haiyiMap;
                var circle = new HMap.Circle(point,r,opts); //创建圆
                return circle;
            },
            /**
             * 坐标转换
             * @param points ：点集合
             * @param callback ：回调
             * @param type ：类型 1：原始坐标 3：google坐标 5：百度坐标
             * @private
             */
            translateLocation : function(points,callback,fType,tType){
               this._translateLocation(points,callback,fType,tType);
            },
            /**
             * 坐标转换
             * @param points ：点集合
             * @param callback ：回调
             * @param type ：类型 1：原始坐标 3：google坐标 5：百度坐标
             * @private
             */
            _translateLocation: function(points,callback,fType,tType){
                if (!points || !this._scope._haiyiMap){
                    return;
                }
                var HMap = this._scope._haiyiMap;
                var pl = angular.isArray(points);//批量操作
                if(!pl){
                    var point = points;
                    points = [];
                    points.push(point);
                }

                for (var k in points){
                    if(!(points[k] instanceof HMap.Point)){
                        points[k] = new HMap.Point(points[k].lng,points[k].lat);
                    }
                }

                fType = fType || 1;
                tType = tType || 5;
                //坐标转换完之后的回调函数
                var translateCallback = function (data){
                    if (!callback || !angular.isFunction(callback)) return;
                    var backData = null;
                    if(data.status === 0) {
                        backData = pl?data.points:data.points[0];
                    }
                    callback.call(this,backData,data.status);
                };
                if(fType==tType) {
                    translateCallback.call(this,{points:points,status:1});
                }

                var convertor = new HMap.Convertor();
                convertor.translate(points, fType, tType, translateCallback);
            },

            /**
             * 获取坐标
             * @param success
             * @param fail
             * @returns {*}
             * @private
             */
            _getLocation:function(success,fail) {
                //获取坐标
                this._getLocationByHtml5(success,fail);
            },
            /**
             * HTML5方法获取坐标
             * @private
             */
            _getLocationByHtml5:function(success,fail,opts){
                if (navigator && navigator.geolocation) {//支持
                    opts = opts || {
                            // 指示浏览器获取高精度的位置，默认为false
                            enableHighAcuracy: true,
                            // 指定获取地理位置的超时时间，默认不限时，单位为毫秒
                            timeout: 5000,
                            // 最长有效期，在重复获取地理位置时，此参数指定多久再次获取位置。
                            maximumAge: 3000
                        };
                    navigator.geolocation.getCurrentPosition(function(position){
                        var location={
                            latitude:position.coords.latitude,
                            longitude:position.coords.longitude
                        }
                        if (success && angular.isFunction(success)){
                            success.call(this,location);
                        }
                    },function(error){
                        //错误
                        if (fail && angular.isFunction(fail)){
                            fail.call(this,error);
                        }
                    },opts);
                }
            },
            _isSelfControl:function(HMap,name){
                if (!HMap) {
                    return false;
                }
                return !HMap[name];
            },
            _addControls: function(controls){
                var HMap = this._scope._haiyiMap;
                if (!this.map || !HMap) {
                    return;
                }
                for (var i=controls.length-1;i>=0;i--){
                    var item = controls[i];
                    var control = this._createSelfControl(HMap,item);
                    if (control) this.map.addControl(control);
                }
            },
            _createControlByName : function(HMap,name,opts){
                if (!HMap) {
                    return null;
                }
                opts = this._translateOptions(HMap,opts);
                if(name == 'GeolocationControl'){
                    var geo = this._createGeolocationControl(this.geoSuccess,this.geoFail,opts);
                    this.geolocationControl = geo;
                    return geo;
                }
                var control = this['_create'+name];
                if (control && angular.isFunction(control)){
                    return control.call(this,opts);
                }
                control = HMap[name];
                if (control){
                    return new control(opts);
                }
            },
            /**
             * 添加自定义控件
             * @param control
             */
            _addSelfControl:function(control){
                var HMap = this._scope._haiyiMap;
                if (!this.map || !HMap) {
                    return;
                }
                var c = this._createSelfControl(HMap,control);
                if(c) this.map.addControl(c);
            },
            /**
             *  创建自定义控件并返回实例
             * @param HMap
             * @returns {null}
             * @private
             */
            _createSelfControl: function(HMap,control){
                HMap = HMap || this._scope._haiyiMap;
                if (!HMap || !control || !control.name) {
                    return null;
                }
                var name = control.name;
                if (!this._isSelfControl(HMap,name)) {
                    return this._createControlByName(HMap,name,control.options);
                }

                HMap[name] = function(){
                    // 默认停靠位置和偏移量
                    this.defaultAnchor = control.anchor;
                    this.defaultOffset = new HMap.Size(control.offset.h||0, control.offset.v||0);
                };
                HMap[name].prototype = new HMap.Control();
                var self = this;
                HMap[name].prototype.initialize = function(map){
                    var ele = control.initialize.call(self,map);
                    // 添加DOM元素到地图中
                    map.getContainer().appendChild(ele);
                    return ele;
                };
                this._selfControls.push(name);
                return new HMap[name]();
            },
            /**
             * 获取两点间距离
             * @private
             */
            _getDistance:function(p0,p1){
                var HMap = this._scope._haiyiMap;
                if (!HMap) {
                    return 0;
                }
                if(!(p0 instanceof HMap.Point)){
                    p0 = new HMap.Point(p0.lng,p0.lat);
                }
                if(!(p1 instanceof HMap.Point)){
                    p1 = new HMap.Point(p1.lng,p1.lat);
                }
                return (this.map.getDistance(p0,p1)).toFixed(2);
            },
            /**
             * 获取地图坐标点
             * @param point
             */
            getMapPoint:function(point){
                var HMap = this._scope._haiyiMap;
                if (!HMap || !point) {
                    return null;
                }
                if(!(point instanceof HMap.Point)){
                    point = new HMap.Point(point.lng,point.lat);
                }
                return point;
            },
            /**
             * Destroy.
             */
            destroy: function() {
                this._scope.$destroy();
            },

            _destroy: function() {
                var HMap = this._scope._haiyiMap;
                if(HMap){
                    for(var i=this._selfControls.length-1;i>=0;i--){
                        var name = this._selfControls[i];
                        if(HMap[name]) HMap[name] = null;
                    }
                    HMap = this._scope._haiyiMap = null;
                }

                this._scope = this._attrs = this._element = this.map = this.geolocationControl = null;
            }
        });

        MicroEvent.mixin(HyMapView);
        return HyMapView;
    }]);

    module.directive('hyMap', ["HyMapView", "$onsen", function(HyMapView,$onsen){
        return {
            restrict: 'EA',
            scope:{
                controls:'=hyaControls',
                geolocation:'&hyaGeolocation',
                init:'&hyaInit'
            },
            compile: function(element,attrs) {
                element.addClass('hyc-map');
                return function(scope,element,attrs) {
                    var hyMapView = new HyMapView(scope,element,attrs);
                    $onsen.declareVarAttribute(attrs, hyMapView);
                };
            }
        };
    }]);
})();
/**
 * Created by ym on 2017/5/25.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    module.run(['$templateCache', function ($templateCache) {
        'use strict';
        $templateCache.put('templates/hy_multi_drop_list_dialog.tpl',
            '<ons-dialog cancelable class="hy-multi-drop-dialog">\
                <div class="hy-multi-drop-dialog-title">\
                    <div class="hy-multi-drop-search-content hy-layout-row hy-layout-align-start-center"> \
                        <div class="hy-layout-row hy-layout-align-center-center" style="width:50px;height:30px"> \
                            <ons-icon icon="search" size="20px" class="hy-multi-drop-search-icon"></ons-icon> \
                        </div> \
                        <hy-input-clear  type="text" placeholder="请输入过滤条件" hy-value="search_text" class="tf-input-clear"></hy-input-clear> \
                    </div>\
                </div>\
                <div class="hy-multi-drop-dialog-content">\
                <ons-list class="hy-multi-drop-ons-list"> \
                        <ons-list-item class="hy-multi-drop-item" ng-repeat="item in items | hyListFilter : search_text : [\'title\']" ng-class="{active:$index==selectedIndex}">\
                             <hy-checkbox class="hy-multi-drop-checkbox" ng-checked="exists(item)" ng-click="toggle(item)">{{ item.title }} </hy-checkbox>\
                        </ons-list-item> \
                    </ons-list>\
                </div>\
                <div class="hy-multi-drop-dialog-bottom">\
                    <div class="hy-layout-row hy-layout-align-start-center" style="width:100%;height:100%"> \
                         <div class="hy-multi-drop-bottom-button border-right" ng-click="selectedEmpty()">清空</div>\
                         <div class="hy-multi-drop-bottom-button" ng-click="selectedOk()">确定</div>\
                    </div>\
                </div>\
            </ons-dialog>' +
            '');
    }]);

    module.directive('hyMultiDropList', ['HyMultiDropListService', '$onsen', function (HyMultiDropListService, $onsen) {
        return {
            restrict: 'E',
            require : '?ngModel',
            scope   : {
                items     : '=',
                selectedFn: '&hyaSelected',
                hyaSeparator:'@'
            },
            replace : true,
            template: '<div class="hy-layout-row hy-layout-align-space-between-center hy-multi-drop-list" ng-click="selectChange();">' +
            '<div class="hy-multi-drop-list-title" ng-class="{\'hy-multi-drop-no-select\':selectedIndex<0}">{{placeholder}}</div>' +
            '<ons-icon ng-if="!hideArrow" icon="fa-angle-down" class="hy-multi-drop-list-arrow"></ons-icon>' +
            '</div>',
            compile : function (element, attrs) {
                return function (scope, element, attrs, ngModel) {
                    var hyMultiDropList = new HyMultiDropListService(scope, element, attrs, ngModel);
                    $onsen.declareVarAttribute(attrs, hyMultiDropList);
                    hyMultiDropList.initVal();
                    scope.$watch('items', function (v) {
                        hyMultiDropList.itemsChange();
                    });
                };
            }
        };
    }]);

    module.factory('HyMultiDropListService', ["$onsen", function ($onsen) {
        var HyMultiDropListService = Class.extend({
            selectedIndex   : -1,
            selectedItem    : null,
            init            : function (scope, element, attrs, ctrl) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;
                this._ctrl = ctrl;
                this._scope.placeholder = this._attrs.placeholder || '------';
                this._scope.hideArrow = this._attrs.hyaHideArrow && this._attrs.hyaHideArrow.length > 0 && this._attrs.hyaHideArrow !== 'false';
                this._scope.selectedIndex = -1;
                if (!this._scope.items) {
                    this._scope.items = [];
                }
                this._scope.selectedList = [];
                this._scope.hyaSeparator = this._scope.hyaSeparator || ',';
                this._scope.$on('$destroy', this._destroy.bind(this));
                this._scope.showOptionTitle = this._showOptionTitle.bind(this);
                this._scope.selectChange = this.showDialog.bind(this);
                this._scope.exists = this._exists.bind(this);
                this._scope.toggle = this._toggle.bind(this);
                this._scope.selectedOk = this._selectedOk.bind(this);
                this._scope.selectedEmpty = this._selectedEmpty.bind(this);
                this.key = this._attrs.hyaValueKey || 'id';
                //this.initVal();
                //this._downElement = this._element.children();
            },
            initVal         : function () {
                if (typeof this._ctrl === 'undefined' || !this._ctrl) {
                    return;
                }
                /**
                 * 当Model改变值得时候赋值。
                 */
                this._ctrl.$render = function () {
                    var codeString = this._ctrl.$viewValue;
                    this._initSelectedList(codeString);
                }.bind(this);
                //this._ctrl.$render();
            },
            _initSelectedList :function(codeString){
                this._scope.selectedList.length = 0;
                codeString =  codeString || '';
                var codeList = codeString.split(this._scope.hyaSeparator);
                var titleString = "";
                for(var i=0;i<codeList.length;i++){
                    for(var j=0;j<this._scope.items.length;j++){
                        if(this._scope.items[j][this.key]===codeList[i]){
                            this._scope.selectedList.push(this._scope.items[j]);
                            titleString = titleString + this._scope.items[j].title + this._scope.hyaSeparator;
                            break;
                        }
                    }
                }
                if(titleString !==""){
                    this._scope.placeholder = titleString.substring(0,titleString.length-1);
                }
                this._checkSelectList();
            },
            _checkSelectList :function(){
                if(this._scope.selectedList.length>0){
                    this._scope.selectedIndex = 1;
                }else{
                    this._scope.selectedIndex = -1;
                }
            },

            itemsChange     : function () {
                if (typeof this._ctrl === 'undefined' || !this._ctrl) {
                    this._scope.selectedList.length = 0;
                    return;
                }
                var codeString = this._ctrl.$viewValue;
                this._initSelectedList(codeString);
            },
            _createDialog   : function () {
                if (this._scope.dialog) {
                    this._setDialog(this._scope.dialog);
                    return;
                }
                var page = $onsen.DIRECTIVE_TEMPLATE_URL + '/hy_multi_drop_list_dialog.tpl';
                ons.createDialog(page, {parentScope: this._scope}).then(function (dialog) {
                    this._setDialog(dialog);
                }.bind(this));
            },
            _selectedOk   : function () {
                this._checkSelectList();
                if(this._scope.selectedList.length<=0){
                    this._scope.placeholder = this._attrs.placeholder || '------';
                    return;
                }
                var titleString = "";
                var codeString = "";
                for(var i=0;i<this._scope.selectedList.length;i++){
                    titleString = titleString + this._scope.selectedList[i].title+this._scope.hyaSeparator;
                    codeString = codeString + this._scope.selectedList[i][this.key]+this._scope.hyaSeparator;
                }
                titleString = titleString.substring(0,titleString.length-1);
                codeString = codeString.substring(0,codeString.length-1);
                this.closeDialog();
                this._scope.placeholder = titleString;
                if (this._ctrl ) {
                    this._ctrl.$setViewValue(codeString);
                }
                this._scope.selectedFn({$value: codeString, $item: this._scope.selectedList});
            },
            _selectedEmpty:function(){
                this._scope.selectedList.length = 0;
                this._scope.placeholder = this._attrs.placeholder || '------';
                this._checkSelectList();
                this.closeDialog();
                if (this._ctrl) {
                    this._ctrl.$setViewValue("");
                }
                this._scope.selectedFn({$value: "", $item: this._scope.selectedList});
            },
            _setDialog      : function (dialog) {
                this._scope.dialog = dialog;
                this._scope.dialog._element.addClass('hy-multi-drop-list-dialog');

                this._scope.dialog.show();
            },
            _showOptionTitle: function (item) {
                if (!item) return this._scope.placeholder;
                if (angular.isObject(item)) {
                    var key = this._attrs.hyaTitleKey || 'title';
                    return item[key];
                }
                return item;
            },
            closeDialog     : function () {
                if (!this._scope.dialog) return;
                this._scope.dialog.hide();
            },
            showDialog      : function () {
                if (this._attrs.hasOwnProperty('disabled') && this._attrs['disabled'])
                    return;
                if (!this._scope.dialog) {
                    this._createDialog();
                } else {
                    this._setDialog(this._scope.dialog);
                }
            },
            _exists         : function (item) {
                return this._scope.selectedList.indexOf(item) > -1;
            },
            _toggle         : function (item) {
                var idx = this._scope.selectedList.indexOf(item);
                if (idx > -1) {
                    this._scope.selectedList.splice(idx, 1);
                }
                else {
                    this._scope.selectedList.push(item);
                }
            },


            destroy : function () {
                this._scope.$destroy();
            },
            _destroy: function () {
                this._scope = undefined;
                this._element = undefined;
                this._attrs = undefined;
            }
        });

        MicroEvent.mixin(HyMultiDropListService);
        return HyMultiDropListService;
    }]);

})();

/**
 * Created by ym on 2017/1/16.
 */

(function(){
    'use strict';


    HyNavigatorFactory.$inject = ["$http", "$parse", "$templateCache", "$compile", "$onsen", "$timeout", "SimpleSlideTransitionAnimator", "NavigatorTransitionAnimator", "LiftTransitionAnimator", "NullTransitionAnimator", "IOSSlideTransitionAnimator", "FadeTransitionAnimator", "$hyLoginFilter", "$loginService", "$hyHttp", "$hyUtil"];
    HyNavigatorDirective.$inject = ["$compile", "$hyNavigatorView", "$onsen"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    var NavigatorPageObject = Class.extend({
        /**
         * @param {Object} params
         * @param {Object} params.page
         * @param {Object} params.element
         * @param {Object} params.pageScope
         * @param {Object} params.options
         * @param {Object} params.navigator
         */
        init: function(params) {
            this.page = params.page;
            this.name = params.page;
            this.element = params.element;
            this.pageScope = params.pageScope;
            this.options = params.options;
            this.navigator = params.navigator;

            // Block events while page is being animated to stop scrolling, pressing buttons, etc.
            this._blockEvents = function(event) {
                if (this.navigator._isPopping || this.navigator._isPushing) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }.bind(this);

            this.element.on(this._pointerEvents, this._blockEvents);
        },

        _pointerEvents: 'touchmove',

        /**
         * @return {PageView}
         */
        getPageView: function() {
            if (!this._pageView) {
                this._pageView = this.element.inheritedData('ons-page');
                if (!this._pageView) {
                    throw new Error('Fail to fetch PageView from ons-page element.');
                }
            }
            return this._pageView;
        },

        destroy: function() {
            this.pageScope.$destroy();

            this.element.off(this._pointerEvents, this._blockEvents);
            this.element.remove();
            this.element = null;

            this._pageView = null;
            this.pageScope = null;
            this.options = null;

            var index = this.navigator.pages.indexOf(this);
            if (index !== -1) {
                this.navigator.pages.splice(index, 1);
            }

            this.navigator = null;
        }
    });


    module.factory('$hyNavigatorView',HyNavigatorFactory)
        .provider('$hyLoginFilter',HyLoginFilterProvider)
        .directive('hyNavi',HyNavigatorDirective);



    function HyLoginFilterProvider(){
        var configFilter ={};
        var filterFlag = false;
        this.setFilter = function(filter){
            for (var i = 0; i < filter.length; i++){
                configFilter[filter[i].target] = filter[i];
            }
            if(filter.length>0){
                filterFlag = true;
            }

        };
        this.$get = function(){
            return {
                getFilter:function(){
                    return configFilter;
                },
                isFilter:function(){
                    return filterFlag;
                }
            }
        };


    }


    function HyNavigatorFactory($http, $parse, $templateCache, $compile, $onsen, $timeout,
                                SimpleSlideTransitionAnimator, NavigatorTransitionAnimator, LiftTransitionAnimator,
                                NullTransitionAnimator, IOSSlideTransitionAnimator, FadeTransitionAnimator,$hyLoginFilter,$loginService,$hyHttp,$hyUtil){
        /**
         * Manages the page navigation backed by page stack.
         *
         * @class NavigatorView
         */
        var NavigatorView = Class.extend({

            /**
             * @member {jqLite} Object
             */
            _element: undefined,

            /**
             * @member {Object} Object
             */
            _attrs: undefined,

            /**
             * @member {Array}
             */
            pages: undefined,

            /**
             * @member {Object}
             */
            _scope: undefined,

            /**
             * @member {DoorLock}
             */
            _doorLock: undefined,

            /**
             * @member {Boolean}
             */
            _profiling: false,

            /**
             * @param {Object} scope
             * @param {jqLite} element jqLite Object to manage with navigator
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {

                this._element = element || angular.element(window.document.body);
                this._scope = scope || this._element.scope();
                this._attrs = attrs;
                this._doorLock = new DoorLock();
                this.pages = [];

                this._isPopping = this._isPushing = false;

                this._deviceBackButtonHandler = $onsen.DeviceBackButtonHandler.create(this._element, this._onDeviceBackButton.bind(this));
                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _destroy: function () {
                this.emit('destroy');

                this.pages.forEach(function (page) {
                    page.destroy();
                });

                this._deviceBackButtonHandler.destroy();
                this._deviceBackButtonHandler = null;

                this._element = this._scope = this._attrs = null;
            },

            _onDeviceBackButton: function (event) {
                if (this.pages.length > 1) {
                    this._scope.$evalAsync(this.popPage.bind(this));
                } else {
                    event.callParentHandler();
                }
            },

            /**
             * @param element jqLite Object
             * @return jqLite Object
             */
            _normalizePageElement: function (element) {
                for (var i = 0; i < element.length; i++) {
                    if (element[i].nodeType === 1) {
                        return angular.element(element[i]);
                    }
                }

                throw new Error('invalid state');
            },

            _createPageElementAndLinkFunction: function (templateHTML, pageScope, done) {
                var div = document.createElement('div');
                div.innerHTML = templateHTML.trim();
                var pageElement = angular.element(div);

                var hasPage = div.childElementCount === 1 &&
                    div.childNodes[0].nodeName.toLowerCase() === 'ons-page';
                if (hasPage) {
                    pageElement = angular.element(div.childNodes[0]);
                } else {
                    throw new Error('You can not supply no "ons-page" element to "ons-navigator".');
                }

                var link = $compile(pageElement);
                return {
                    element: pageElement,
                    link: function () {
                        link(pageScope);
                        safeApply(pageScope);
                    }
                };

                function safeApply(scope) {
                    var phase = scope.$root.$$phase;
                    if (phase !== '$apply' && phase !== '$digest') {
                        scope.$apply();
                    }
                }
            },

            /**
             * Insert page object that has the specified pageUrl into the page stack and
             * if options object is specified, apply the options.
             *
             * @param {Number} index
             * @param {String} page
             * @param {Object} [options]
             * @param {String/NavigatorTransitionAnimator} [options.animation]
             */
            insertPage: function (index, page, options) {
                options = options || {};

                if (options && typeof options != 'object') {
                    throw new Error('options must be an object. You supplied ' + options);
                }

                if (index === this.pages.length) {
                    return this.pushPage.apply(this, [].slice.call(arguments, 1));
                }

                this._doorLock.waitUnlock(function () {
                    var unlock = this._doorLock.lock();

                    $onsen.getPageHTMLAsync(page).then(function (templateHTML) {

                        var pageScope = this._createPageScope();
                        var object = this._createPageElementAndLinkFunction(templateHTML, pageScope);
                        var element = object.element;
                        var link = object.link;

                        element = this._normalizePageElement(element);

                        var pageObject = this._createPageObject(page, element, pageScope, options);

                        if (this.pages.length > 0) {
                            index = normalizeIndex(index);

                            this._element[0].insertBefore(element[0], this.pages[index] ? this.pages[index].element[0] : null);
                            this.pages.splice(index, 0, pageObject);
                            link();

                            setTimeout(function () {
                                if (this.getCurrentPage() !== pageObject) {
                                    element.css('display', 'none');
                                }
                                unlock();
                                element = null;
                            }.bind(this), 1000 / 60);

                        } else {
                            this._element.append(element);
                            this.pages.push(pageObject);
                            link();
                            unlock();
                            element = null;
                        }
                    }.bind(this), function () {
                        unlock();
                        throw new Error('Page is not found: ' + page);
                    });
                }.bind(this));

                var normalizeIndex = function (index) {
                    if (index < 0) {
                        index = this.pages.length + index;
                    }
                    return index;
                }.bind(this);
            },

            /**
             * Pushes the specified pageUrl into the page stack and
             * if options object is specified, apply the options.
             *
             * @param {String} page
             * @param {Object} [options]
             * @param {String/NavigatorTransitionAnimator} [options.animation]
             * @param {Function} [options.onTransitionEnd]
             */
            pushPage: function (page, options,isLogin) {
                var config = {
                    responseType:'json',
                    cache:false
                };
                if($hyLoginFilter.isFilter()&&!isLogin){
                    var loginFilter = $hyLoginFilter.getFilter();
                    var targetObj = loginFilter[page];
                    if(targetObj && targetObj.target && targetObj.type =='push') {
                        var userInfo = $loginService.getUserInfo();
                        if(!userInfo){

                            $loginService.show({
                                targetUrl:page,
                                hideMode:'other',
                                callback :function () {
                                    if(targetObj.callback){
                                        targetObj.callback.call(this,this._scope,page,options);
                                        return;
                                    }
                                    var pushFlag = true;
                                    if(pushFlag && targetObj.toTarget){
                                        this.replacePage(page,options,true);
                                    }
                                }.bind(this)
                            });
                            return ;
                        }else{
                            if (options.cancelIfRunning && this._isPushing) {
                                return;
                            }
                            this._isPushing = true;
                            config.headers = $loginService.getLoginArgs();
                            $hyHttp.post('userInfo',config).success(function(data, status, headers, config){
                                var code = data.code;
                                this._isPushing = false;
                                if(code==0&&!!data.content){
                                    $loginService.saveUserInfo(data.content);
                                    this.pushPage(page,options,true);
                                }else{
                                    $loginService.show({
                                        targetUrl:page,
                                        hideMode:'other',
                                        callback : function () {
                                            if(targetObj.callback){
                                                targetObj.callback.call(this,this._scope,page,options);
                                                return;
                                            }
                                            var pushFlag = true;
                                            if(pushFlag && targetObj.toTarget){
                                                this.replacePage(page,options,true);
                                            }
                                        }.bind(this)
                                    });
                                }
                            }.bind(this))
                                .error(function(){
                                    this._isPushing = false;
                                    // $loginService.login({
                                    //     targetUrl:page,
                                    //     hideMode:'other',
                                    //     callback : function () {
                                    //
                                    //         var pushFlag = true;
                                    //         if(pushFlag && targetObj.toTarget){
                                    //             this.replacePage(page,options,true);
                                    //         }
                                    //     }.bind(this)
                                    // });
                                    hyMui.toast({message: "網絡異常，請稍後重試！", duration: 3000, position: 'bottom', addPixelsY: -60});
                                }.bind(this));
                            return;
                        }
                    }

                }
                if (this._profiling) {
                    console.time('pushPage');
                }

                options = options || {};

                if (options.cancelIfRunning && this._isPushing) {
                    return;
                }

                if (options && typeof options != 'object') {
                    throw new Error('options must be an object. You supplied ' + options);
                }

                if (this._emitPrePushEvent()) {
                    return;
                }

                //设置isPushing为true状态，用于下一个pushPage方法的判断，屏蔽按钮的快速多次点击事件。
                this._isPushing = true;

                this._doorLock.waitUnlock(function () {
                    this._pushPage(page, options);
                }.bind(this));
            },

            _pushPage: function (page, options) {
                var unlock = this._doorLock.lock();
                var done = function () {
                    //如果运行过程中出错，则设置isPushing状态为false，解除状态锁定；
                    this._isPushing = false;
                    unlock();
                    if (this._profiling) {
                        console.timeEnd('pushPage');
                    }
                }.bind(this);

                $onsen.getPageHTMLAsync(page).then(function (templateHTML) {
                    var pageScope = this._createPageScope();
                    var object = this._createPageElementAndLinkFunction(templateHTML, pageScope);

                    setImmediate(function () {
                        this._pushPageDOM(page, object.element, object.link, pageScope, options, done);
                        object = null;
                    }.bind(this));
                }.bind(this), function () {
                    done();
                    throw new Error('Page is not found: ' + page);
                }.bind(this));
            },

            getDeviceBackButtonHandler: function () {
                return this._deviceBackButtonHandler;
            },

            /**
             * @param {Object} options pushPage()'s options parameter
             * @param {NavigatorTransitionAnimator} [defaultAnimator]
             */
            _getAnimatorOption: function (options, defaultAnimator) {
                var animator = null;

                if (options.animation instanceof NavigatorTransitionAnimator) {
                    return options.animation;
                }

                if (typeof options.animation === 'string') {
                    animator = NavigatorView._transitionAnimatorDict[options.animation];
                }

                if (!animator && this._element.attr('animation')) {
                    animator = NavigatorView._transitionAnimatorDict[this._element.attr('animation')];
                }

                if (!animator) {
                    animator = defaultAnimator || NavigatorView._transitionAnimatorDict['default'];
                }

                if (!(animator instanceof NavigatorTransitionAnimator)) {
                    throw new Error('"animator" is not an instance of NavigatorTransitionAnimator.');
                }

                return animator;
            },


            _createPageScope: function () {
                return this._scope.$new();
            },

            /**
             * @param {String} page
             * @param {jqLite} element
             * @param {Object} pageScope
             * @param {Object} options
             */
            _createPageObject: function (page, element, pageScope, options) {
                options.animator = this._getAnimatorOption(options);

                return new NavigatorPageObject({
                    page: page,
                    element: element,
                    pageScope: pageScope,
                    options: options,
                    navigator: this
                });
            },

            /**
             * @param {String} page Page name.
             * @param {Object} element
             * @param {Function} link
             * @param {Object} pageScope
             * @param {Object} options
             * @param {Function} [unlock]
             */
            _pushPageDOM: function (page, element, link, pageScope, options, unlock) {
                if (this._profiling) {
                    console.time('pushPageDOM');
                }

                unlock = unlock || function () {
                    };
                options = options || {};
                element = this._normalizePageElement(element);

                var pageObject = this._createPageObject(page, element, pageScope, options);

                var event = {
                    enterPage: pageObject,
                    leavePage: this.pages[this.pages.length - 1],
                    navigator: this
                };

                this.pages.push(pageObject);

                var done = function () {
                    if (this.pages[this.pages.length - 2]) {
                        this.pages[this.pages.length - 2].element.css('display', 'none');
                    }

                    if (this._profiling) {
                        console.timeEnd('pushPageDOM');
                    }

                    this._isPushing = false;
                    unlock();

                    this.emit('postpush', event);

                    if (typeof options.onTransitionEnd === 'function') {
                        options.onTransitionEnd();
                    }
                    element = null;
                }.bind(this);

                this._isPushing = true;

                if (this.pages.length > 1) {
                    var leavePage = this.pages.slice(-2)[0];
                    var enterPage = this.pages.slice(-1)[0];

                    this._element.append(element);
                    link();
                    options.animator.push(enterPage, leavePage, done);
                    element = null;
                } else {
                    this._element.append(element);
                    link();
                    done();
                    element = null;
                }
            },

            /**
             * @return {Boolean} Whether if event is canceled.
             */
            _emitPrePushEvent: function () {
                var isCanceled = false;
                var self = this;
                var prePushEvent = {
                    navigator: this,
                    currentPage: this.getCurrentPage(),
                    cancel: function () {
                        self._isPushing = false;
                        isCanceled = true;
                    }
                };

                this.emit('prepush', prePushEvent);

                return isCanceled;
            },

            /**
             * @return {Boolean} Whether if event is canceled.
             */
            _emitPrePopEvent: function () {
                var isCanceled = false;
                var leavePage = this.getCurrentPage();
                var self = this;
                var prePopEvent = {
                    navigator: this,
                    currentPage: leavePage,
                    leavePage: leavePage,
                    enterPage: this.pages[this.pages.length - 2],
                    cancel: function () {
                        self._isPopping = false;
                        isCanceled = true;
                    }
                };

                this.emit('prepop', prePopEvent);

                return isCanceled;
            },

            /**
             * Pops current page from the page stack.
             * @param {Object} [options]
             * @param {Function} [options.onTransitionEnd]
             */
            popPage: function (options) {
                options = options || {};

                if (options.cancelIfRunning && this._isPopping) {
                    return;
                }

                this._doorLock.waitUnlock(function () {
                    if (this.pages.length <= 1) {
                        throw new Error('NavigatorView\'s page stack is empty.');
                    }

                    if (this._emitPrePopEvent()) {
                        return;
                    }
                    //设置isPopping为true状态，用于下一个popPage方法的判断，屏蔽按钮的快速多次点击事件。
                    this._isPopping = false;
                    this._popPage(options);
                }.bind(this));
            },

            _popPage: function (options) {
                var unlock = this._doorLock.lock();

                var leavePage = this.pages.pop();

                if (this.pages[this.pages.length - 1]) {
                    this.pages[this.pages.length - 1].element.css('display', 'block');
                }

                var enterPage = this.pages[this.pages.length - 1];

                var event = {
                    leavePage: leavePage,
                    enterPage: this.pages[this.pages.length - 1],
                    navigator: this
                };

                var callback = function () {
                    leavePage.destroy();

                    this._isPopping = false;
                    unlock();
                    this.emit('postpop', event);

                    event.leavePage = null;

                    if (typeof options.onTransitionEnd === 'function') {
                        options.onTransitionEnd();
                    }
                }.bind(this);

                this._isPopping = true;

                var animator = this._getAnimatorOption(options, leavePage.options.animator);
                animator.pop(enterPage, leavePage, callback);
            },
            /**
             * Remove specified page
             *
             * @param index
             * @param options
             */
            removePage: function (index, options) {
                options = options || {};
                if (index < 0) {
                    index = this.pages.length + index;
                }
                if (index < this.pages.length - 1) {
                    var leavePage = this.pages[index];
                    var enterPage = this.pages[this.pages.length - 1];
                    this.pages.splice(index, 1);
                    if (this.pages[this.pages.length - 1]) {
                        this.pages[this.pages.length - 1].element.css('display', 'block');
                    }
                    var event = {
                        leavePage: leavePage,
                        enterPage: enterPage,
                        navigator: this
                    };
                    var callback = function () {
                        leavePage.destroy();
                        this.emit('postpop', event);
                        event.leavePage = null;
                        if (typeof options.onTransitionEnd === 'function') {
                            options.onTransitionEnd();
                        }
                    }.bind(this);
                    var animator = this._getAnimatorOption(options, NavigatorView._transitionAnimatorDict['none']);
                    animator.pop(enterPage, leavePage, callback);
                } else {
                    return this.popPage(options);
                }
            },
            /**
             * Replaces the current page with the specified one.
             *
             * @param {String} page
             * @param {Object} [options]
             */
            replacePage: function (page, options,isLogin) {
                options = options || {};

                var onTransitionEnd = options.onTransitionEnd || function () {
                    };

                options.onTransitionEnd = function () {
                    if (this.pages.length > 1) {
                        this.pages[this.pages.length - 2].destroy();
                    }
                    onTransitionEnd();
                }.bind(this);

                this.pushPage(page, options,isLogin);
            },

            /**
             * Clears page stack and add the specified pageUrl to the page stack.
             * If options object is specified, apply the options.
             * the options object include all the attributes of this navigator.
             *
             * @param {String} page
             * @param {Object} [options]
             */
            resetToPage: function (page, options) {
                options = options || {};

                if (!options.animator && !options.animation) {
                    options.animation = 'none';
                }

                var onTransitionEnd = options.onTransitionEnd || function () {
                    };
                var self = this;

                options.onTransitionEnd = function () {
                    while (self.pages.length > 1) {
                        self.pages.shift().destroy();
                    }
                    onTransitionEnd();
                };

                this.pushPage(page, options);
            },

            /**
             * Get current page's navigator item.
             *
             * Use this method to access options passed by pushPage() or resetToPage() method.
             * eg. ons.navigator.getCurrentPage().options
             *
             * @return {Object}
             */
            getCurrentPage: function () {
                return this.pages[this.pages.length - 1];
            },

            /**
             * Retrieve the entire page stages of the navigator.
             *
             * @return {Array}
             */
            getPages: function () {
                return this.pages;
            },

            /**
             * @return {Boolean}
             */
            canPopPage: function () {
                return this.pages.length > 1;
            }
        });

        // Preset transition animators.
        NavigatorView._transitionAnimatorDict = {
            'default': $onsen.isAndroid() ? new SimpleSlideTransitionAnimator() : new IOSSlideTransitionAnimator(),
            'slide': $onsen.isAndroid() ? new SimpleSlideTransitionAnimator() : new IOSSlideTransitionAnimator(),
            'simpleslide': new SimpleSlideTransitionAnimator(),
            'lift': new LiftTransitionAnimator(),
            'fade': new FadeTransitionAnimator(),
            'none': new NullTransitionAnimator()
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        NavigatorView.registerTransitionAnimator = function (name, animator) {
            if (!(animator instanceof NavigatorTransitionAnimator)) {
                throw new Error('"animator" param must be an instance of NavigatorTransitionAnimator');
            }

            this._transitionAnimatorDict[name] = animator;
        };

        MicroEvent.mixin(NavigatorView);

        return NavigatorView;

    }

    function HyNavigatorDirective($compile,$hyNavigatorView, $onsen){
        return {
            restrict: 'E',

            // NOTE: This element must coexists with ng-controller.
            // Do not use isolated scope and template's ng-transclude.
            transclude: false,
            scope: true,

            compile: function (element) {

                var html = $onsen.normalizePageHTML(element.html());
                element.contents().remove();

                return {
                    pre: function (scope, element, attrs, controller) {
                        var navigator = new $hyNavigatorView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, navigator);
                        $onsen.registerEventHandlers(navigator, 'prepush prepop postpush postpop destroy');

                        if (attrs.page) {
                            navigator.pushPage(attrs.page, {});
                        } else {
                            var pageScope = navigator._createPageScope();
                            var pageElement = angular.element(html);
                            var linkScope = $compile(pageElement);
                            var link = function () {
                                linkScope(pageScope);
                            };

                            navigator._pushPageDOM('', pageElement, link, pageScope, {});
                            pageElement = null;
                        }

                        element.data('hy-navi', navigator);

                        element.data('_scope', scope);

                        scope.$on('$destroy', function () {
                            element.data('_scope', undefined);
                            navigator._events = undefined;
                            element.data('hy-navi', undefined);
                            element = null;
                        });

                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }

})();
/**
 * @ngdoc element
 *
 * @name hyNineGrid 九宫格
 *  说明：根据传递的菜单数组，自动生成九宫格菜单，每行的菜单数量可定制
 * @module haiyiMobile
 * @description        九宫格组件，默认3列，可以自定义列数，点击事件
 * hyaNumOfRows        每行几列
 * hyaImages           图片数组
 * hyaGridTextClass    九宫格字体样式
 * hyaGridImgClass     九宫格图片样式
 * hyaImageClick       点击图片方法
 * hasborder        是否显示边框，默认没有边框
 * hyaRowHeight        设置每行的高度，默认是80px
 *
 * @usage <hyNineGrids></hyNineGrids> or <div hyNineGrids></div>
 */

(function() {'use strict';
	var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
	module.factory('NineGridView',['$onsen',function($onsen){
		var NineGridView = Class.extend({
			init: function (scope, element, attrs) {
				this._element = element;
				this._scope = scope;
				this._attrs = attrs;
				var self = this;
				//设置默认的每行列数
				this._scope.hyaNumOfRows = this._scope.hyaNumOfRows?this._scope.hyaNumOfRows:3;
				//设置默认的每行的高度
				this._scope.hyaRowHeight = this._scope.hyaRowHeight?this._scope.hyaRowHeight:80;

				this.hyGridPane = angular.element(this._element[0].querySelector('.hy-grid-pane'));

				//监听图片数组属性值
				this._scope.$watch('hyaImages',function(){
					self._initImageList();
					self._initGridSize();
				});

				//判断是否有边框
				if(this._element[0].hasAttribute('hasborder')){
					this._scope.rowBorder = 'hy-grid-row-border';
					this._scope.colBorder = 'hy-grid-col-border';
				}

				//绑定事件
				this._scope.selectMenu = angular.bind(this, this._selectMenu);

				this._bindresizeGrid = angular.bind(this,this._resizeGrid);
				//添加页面变动的事件监听
				angular.element(window).on('resize', this._bindresizeGrid);
			},
			/**
			 * 初始化菜单数组
			 * @private
			 */
			_initImageList:function(){
				if(this._scope.hyaImages&&this._scope.hyaImages.length>0){
					this.rows = this._scope.hyaImages.length/this._scope.hyaNumOfRows;
					if(this._scope.hyaImages.length%this._scope.hyaNumOfRows!=0){
						this.rows = parseInt((this._scope.hyaImages.length)/this._scope.hyaNumOfRows)+1
					}
					this._scope.rowItems = [];
					var num = 0;
					for(var i=0;i<this.rows;i++){
						var colArray = new Array();
						for(var j=0;j<this._scope.hyaNumOfRows;j++){
							num = this._scope.hyaNumOfRows*i + j;
							var menuObj = {};
							if(num<this._scope.hyaImages.length){
								for(var key in this._scope.hyaImages[num] ){
									menuObj[key] = this._scope.hyaImages[num][key];
								}
								menuObj['hyFlag'] = true;
							}else{
								menuObj['hyFlag'] = false;
							}
							colArray.push(menuObj);
						}
						this._scope.rowItems.push(colArray);
					}
				}
			},
			/**
			 * 初始化计算九宫格的内部宽度、高度大小
			 * @private
			 */
			_initGridSize:function(){
				this._scope.colWidth = (100/this._scope.hyaNumOfRows)+'%';
				if(this.hyGridPane[0].scrollWidth!=0) {
					this.colWidth_t = this.hyGridPane[0].scrollWidth / this._scope.hyaNumOfRows;
					this.colHeight_t = this._scope.hyaRowHeight - 35;
					this._scope.imgWidth = Math.min(this.colHeight_t, this.colWidth_t) - 5;
					this._scope.imgStyle = 'width:' + this._scope.imgWidth + 'px;height:' + this._scope.imgWidth + 'px;'
				}
			},
			/**
			 * 重新刷新九宫格
			 * @private
			 */
			_resizeGrid:function(){
				this._initGridSize();
				this._scope.$apply();
			},
			/**
			 * 点击某一个九宫格菜单的触发事件
			 * @param item
			 * @private
			 */
			_selectMenu:function(item){
				if(item.hyFlag){
					if(this._scope.hyaImageClick){
						this._scope.hyaImageClick({item:item});
					}
				}
			}
		});
		MicroEvent.mixin(NineGridView);
		return NineGridView;
	}]);

	module.directive('hyNineGrids', ['$onsen','NineGridView', function ($onsen,NineGridView) {
		return {
			restrict: 'E',
			scope: {
				hyaNumOfRows: '@',//每行几个
				hyaImages: '=', //图片数组
				hyaGridTextClass: '@',//九宫格字体样式
				hyaGridImgClass: '@', //九宫格图片样式
				hyaImageClick: '&',//点击方法
				hyaHasBorder:'@', //是否有边框线
				hyaRowHeight:'@', //九宫格每行的高度
			},
			template: getTemplate,
			compile: function(element, attr){
				return  {
					pre: function (scope, element, attrs) {
						var nineGrid = new NineGridView(scope, element, attrs);
						$onsen.declareVarAttribute(nineGrid);

						element.data('hy-nine-grid', nineGrid);

						scope.$on('destory', function () {
							nineGrid._events = undefined;
							$onsen.removeModifierMethods(nineGrid);
							element.data('hy-nine-grid', undefined);
							element = null;
						});
					},
					post: function (scope, element) {
						$onsen.fireComponentEvent(element[0], 'init');
					}
				}
			}
		};

		/**
		 * 获取不同的模板数据
		 * @param element
		 * @param attr
		 * @returns {*}
		 */
		function getTemplate(element, attr) {

			return '<div class="hy-grid-pane">' +
				'<div class="hy-grid-row {{rowBorder}}" style="height:{{hyaRowHeight}}px" ng-repeat="rows in rowItems">' +
				'<div class="hy-grid-col {{colBorder}}" style="width:{{colWidth}}" hy-active="{{col.hyFlag}}" ng-click="selectMenu(col)" ng-repeat="col in rows">' +
				'<div ng-if="col.hyFlag" class="hy-grid-col-top"><img class="hy-grid-img {{hyaGridImgClass}}" style="{{imgStyle}}" ng-src="{{col.imgSrc}}" /></div>' +
				'<div ng-if="col.hyFlag" class="hy-grid-col-bottom"><span class="hy-grid-text {{hyaGridTextClass}}">{{col.menuName}}</span></div>' +
				'</div>' +
				'</div>' +
				'</div>';
		}
	}]);
})();
/**
 *数字选择器
 *
 * 其中属性hyaNumSeparator和hyaNumSeparatorLen 必须同时出现
 *
 * 属性 ：hyaNumMax 输入框最大输入数字
 *       hyaNumMin 输入框最小输入数字
 *       hyaNumInputWidth 输入框宽度 支持百分数
 *       hyaNumInputHeight 输入框高度
 *       hyaNumAlignType 对齐方式 左中右
 *       hyaNumStep 步长  每次增加减少数值
 *       hyaNumValue 默认数字
 *       hyaNumSeparator : 分隔符采用的符号
 *       hyaNumSeparatorLen :每隔几位添加一个分隔符
 *       hyaNumStyle :左右按钮外观布局
 */
(function() {
	'use strict';
	var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
	module.directive('hyNoSelector', function() {
		return {
			restrict : 'E',
			scope : {
				hyaNumSeparatorLen : '@', //每隔几位添加一个分隔符
				hyaNumSeparator : '@', //分隔符采用的符号
				hyaNumMax : '@', //默认最大输入数字
				hyaNumMin : '@', //默认最小输入数字
				hyaNumInputWidth : '@', //输入框宽度
				hyaNumAlignType : '@', //left right center输入框对齐方式
				hyaNumStep : '@', //每次增加减少步长
				hyaNumInputHeight : '@', //输入框高度
				hyaNumStyle : '@', //左右按钮样式
				hyaNumValue : '=' //文本框默认起始数字

			},
			template : "<div class='button-bar haiyi-numselector' style ='float：left;'>" +
							"<div  class='button-bar button-bar__item {{hyaNumStyle}}'  >" +
								"<div class='button-bar__item'>" +
									"<button class='button-bar__button' ng-click = 'sub()'><i class='ion-minus-round'></i>-</button>" +
								"</div>" +
							"</div>" +
							"<div  class='button-bar button-bar__item {{hyaNumStyle}}'  >" +
								"<div class='button-bar__item'>" +
									"<button class='button-bar__button' ng-click = 'sub()'><i class='ion-minus-round'></i></button>" +
								"</div>" +
								"<div class='button-bar__item '>" +
									"<button class='button-bar__button' ng-click = 'add()'><i class='ion-plus-round'></i></button>" +
								"</div> " +
							"</div>" +
							"<div  button-bar__item>" +
								"<input type='text'  class='text-input text-input--underbar' style='width:{{hyaNumInputWidth}};height:{{ hyaNumInputHeight}}'   ng-model='hyaNumValue'/>" +
							"</div>" +
							"<div  class='button-bar button-bar__item {{hyaNumStyle}}'  >" +
								"<div class='button-bar__item'>" +
									"<button class='button-bar__button' ng-click = 'add()'><i class='ion-plus-round'></i></button>" +
								"</div>" +
							"</div>" +
							"<div  class='button-bar button-bar__item {{hyaNumStyle}} ' >" +
								"<div class='button-bar__item '>" +
									"<button class='button-bar__button' ng-click = 'add()'><i class='ion-plus-round'></i></button>" +
								"</div>" +
								"<div class='button-bar__item ' >" +
									"<button class='button-bar__button' ng-click = 'sub()'><i class='ion-minus-round'></i></button>" +
								"</div> " +
							"</div>" +
						"</div>",
			link : function(scope, elem, attrs) {
				var ZS_REGEXP = /^-?\d+$/;
				//正负整数
				var O_REGEXP = /^-?\d+\.?\d*$/;
				//正负实数
				if (!scope.hyaNumStep) {
					scope.hyaNumStep = 1;
				}
				if (!scope.hyaNumValue) {
					scope.hyaNumValue = 1;
				}
				if (!scope.hyaNumInputWidth) {
					scope.hyaNumInputWidth = '150px';
				}
				if (!scope.hyaNumMax) {
					scope.hyaNumMax = 100;
				}
				if (!scope.hyaNumMin) {
					scope.hyaNumMin = 1;
				}
				if (!scope.hyaNumSeparatorLen) {
					scope.hyaNumSeparatorLen = 3;
				}
				if (!scope.hyaNumInputHeight) {
					scope.hyaNumInputHeight = '32px';
				}
				scope.$watch('hyaNumValue', function(newv, oldv) {
					if (scope.hyaNumSeparator) {
						newv = replaceAll(newv, '', scope.hyaNumSeparator);
						oldv = replaceAll(oldv, '', scope.hyaNumSeparator);
					}
					if (newv && parseFloat(newv) > parseFloat(scope.hyaNumMax)) {
						console.log('输入的数字超过最大' + scope.hyaNumMax + '范围');
						scope.hyaNumValue = oldv;
						patterns(oldv);
						return;
					}
					if (newv && parseFloat(newv) < parseFloat(scope.hyaNumMin)) {
						console.log('输入的数字不能小于' + scope.hyaNumMin);
						scope.hyaNumValue = scope.hyaNumMin;
						patterns(oldv);
						return;
					}
					if (!O_REGEXP.test(newv)) {
						scope.hyaNumValue = oldv;
						patterns(oldv);
						return;
					}
					patterns(newv);

				});

				if (!scope.hyaNumAlignType || scope.hyaNumAlignType == 'center') {
					scope.hyaNumAlignType = 'center';
					angular.element(elem.find("div")[3]).css('display', 'none');
					angular.element(elem.find("div")[9]).css('display', 'none');
				} else if (scope.hyaNumAlignType == 'left') {
					angular.element(elem.find("div")[1]).css('display', 'none');
					angular.element(elem.find("div")[7]).css('display', 'none');
					angular.element(elem.find("div")[9]).css('display', 'none');
				} else if (scope.hyaNumAlignType == 'right') {
					angular.element(elem.find("div")[1]).css('display', 'none');
					angular.element(elem.find("div")[3]).css('display', 'none');
					angular.element(elem.find("div")[7]).css('display', 'none');
				}
				scope.sub = function sub() {
					var res = replaceAll(scope.hyaNumValue, '', scope.hyaNumSeparator);
					scope.hyaNumValue = parseFloat(res) - parseFloat(scope.hyaNumStep);
					if (ZS_REGEXP.test(scope.hyaNumValue)) {//如果结果是整数，就直接返回
						return;
					}
					//如果结果包含小数，那么小数保留位数就根据步长设置的小数位数决定
					var strStep = (scope.hyaNumStep + '');
					if (strStep.indexOf('.') != -1) {//步长为小数的时候,保留小数位数为步长的位数
						var len = strStep.substring(strStep.indexOf('.') + 1, strStep.length).length;
						var rx = scope.hyaNumValue.toFixed(len);
						var sult = (rx + '');
						scope.hyaNumValue = sult.substr(0, parseInt(sult.indexOf('.')) + parseInt(len) + 1);
					}
				}
				scope.add = function add() {
					var res = replaceAll(scope.hyaNumValue, '', scope.hyaNumSeparator);
					scope.hyaNumValue = parseFloat(res) + parseFloat(scope.hyaNumStep);
					if (ZS_REGEXP.test(scope.hyaNumValue)) {//如果结果是整数，就直接返回
						return;
					}
					//如果结果包含小数，那么小数保留位数就根据步长设置的小数位数决定
					var strStep = (scope.hyaNumStep + '');
					if (strStep.indexOf('.') != -1) {//步长为小数的时候,保留小数位数为步长的位数
						var len = strStep.substring(strStep.indexOf('.') + 1, strStep.length).length;
						var rx = scope.hyaNumValue.toFixed(len);
						var sult = (rx + '');
						scope.hyaNumValue = sult.substr(0, parseInt(sult.indexOf('.')) + parseInt(len) + 1);
					}
				}
				function patterns(newv) {
					var numStr = newv + "";
					if (scope.hyaNumSeparator && numStr.length > parseFloat(scope.hyaNumSeparatorLen)) {
						var str = "";
						var preNum = numStr;
						var lastNum = '';
						if (numStr.lastIndexOf('.') != -1) {
							lastNum = numStr.substring(numStr.lastIndexOf('.'), numStr.length);
							preNum = numStr.substring(0, numStr.lastIndexOf('.'));
						}
						var intPos = preNum.length % (scope.hyaNumSeparatorLen);
						var count = Math.ceil(preNum.length / (scope.hyaNumSeparatorLen));
						if (intPos == 0) {
							for (var i = 0; i < count; i++) {
								if (i == count - 1) {
									str = str + preNum.substr((i * scope.hyaNumSeparatorLen), scope.hyaNumSeparatorLen) + scope.hyaNumSeparator;
								} else {
									str = str + preNum.substr(i * scope.hyaNumSeparatorLen, scope.hyaNumSeparatorLen) + scope.hyaNumSeparator;
								}
							}
						} else {
							for (var i = 0; i < count; i++) {
								if (i == 0) {
									str = str + preNum.substr(i, intPos) + scope.hyaNumSeparator;
								} else {
									str = str + preNum.substr(((i - 1) * scope.hyaNumSeparatorLen) + intPos, scope.hyaNumSeparatorLen) + scope.hyaNumSeparator;
								}
							}
						}
						if (str.lastIndexOf(scope.hyaNumSeparator) != -1) {
							str = str.substring(0, str.length - 1);
						}
						scope.hyaNumValue = str + lastNum;
					}
				}

				function replaceAll(s1, rep, reg) {
					return (s1 + '').replace(new RegExp(reg, "gm"), rep);
				}

			}
		};
	});
})();
/**
 * hy-password - v1.0.0 - 2016-03-07
 * @author liukeyu
 * @ngdoc directive
 * @name hy-password
 * @description
 *   [ch]密码框可明文.[/en]
 * @example
 * <hy-password>
 * </hy-password>
 */
(function() {
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}

    module.factory('HyPasswordView',["$onsen", function($onsen){

        var HyPasswordView = Class.extend({

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function(scope, element,attrs,controller) {
                this._element = element;
                this._attrs = attrs;
                this._scope = scope;
                this._controller = controller;

                this._scope.plaintPassword = this.toggle.bind(this);

                //this._element.addClass('hyc-password');
                this._scope.password_plaintext = this._attrs.hasOwnProperty('hyaPlaintext') && this._attrs.hyaPlaintext;
                this._scope.password_value = this._attrs.hasOwnProperty('hyaValue')?this._attrs.hyaValue:'';
                this._scope.placeholder = this._attrs.hasOwnProperty('placeholder')?this._attrs.placeholder:'';

                this._setPassword();

                this._element.append(this._createPassInput());//密码宽
                this._element.append(this._createPlainTextPassInput());//明文框
                this._element.append(this._createPlainBtn());//切换按钮
                this._element.append(this._createHidePassInput());//隐藏框（验证用）

                this._scope.$on('$destroy', this._destroy.bind(this));
            },
            /**
             * 设置密码值
             * @private
             */
            _setPassword:function(){
                if(!this._controller){
                    return;
                }
                var controller = this._controller;
                if (this._scope.password_value && 0<this._scope.password_value.length){
                    controller.$setViewValue(this._scope.password_value);
                }else{
                    this._scope.password_value = controller.$viewValue;
                }
                //this._setInputClass();
                this._setHidePasswordVal(this._scope.password_value);
                this._scope.$watch('password_value',function(v){
                    //this._setInputClass();
                    this._setHidePasswordVal(v);
                    if (v==controller.$viewValue){
                        return;
                    }
                    controller.$setViewValue(v);
                }.bind(this));
                /**
                 * 当Model改变值得时候赋值。
                 */
                controller.$render = function () {
                    var password = controller.$isEmpty(controller.$viewValue) ? '' : controller.$viewValue;
                    this._scope.password_value = password;
                }.bind(this);
            },
            _isVaidClass:function(calss){
                var regExp = /^ng-(dirty|valid|invalid)/i;
                return regExp.test(calss);
            },
            _setInputClass:function(){
                var classStrs = this._element.attr('class');
                if (!classStrs) return;
                var classArr = classStrs.split(/\s+/);
                var len = classArr.length;
                var validClass = [];
                for (var i=0;i<len;i++){
                    var c = classArr[i];
                    if (this._isVaidClass(c)){
                        validClass.push(c);
                    }
                }
                var inputEle = this._element[0].querySelector('.hyc-password-input');
                var plaintEle = this._element[0].querySelector('.hyc-password-plaint-input');
                if (inputEle){
                    inputEle = angular.element(inputEle);
                    inputEle.removeClass();
                    inputEle.addClass('hyc-password-input');
                    inputEle.addClass('text-input text-input--underbar');
                    inputEle.addClass(validClass.join(' '));
                }
                if (plaintEle){
                    plaintEle = angular.element(plaintEle);
                    plaintEle.removeClass();
                    plaintEle.addClass('hyc-password-plaint-input');
                    plaintEle.addClass('text-input text-input--underbar');
                    plaintEle.addClass(validClass.join(' '));
                }

            },
            _copyEleAttrs:function(input){
                var attrs = this._attrs;
                if (!input || !attrs){
                    return input;
                }

                for(var key in attrs.$attr){
                    if (key.toLowerCase() == 'type'
                        || key =='hyPassword'
                        || key =='ngModel'
                        || key.toLowerCase() == 'class'
                        || key.toLowerCase() == 'name'
                        || key.toLowerCase() == 'id'){
                        continue;
                    }
                    input.attr(attrs.$attr[key],attrs[key]);
                }
                return input;
            },
            _createPassInput:function(){
                var scope = this._scope;
                var html = '<input type="password" ' +
                            'ng-show="!password_plaintext" ' +
                            'placeholder="{{placeholder}}" ' +
                            'ng-model="password_value" ' +
                            'class="hyc-password-input"/>';
                var input = angular.element(html);
                input.addClass('text-input text-input--underbar');
                return ons.$compile(input)(scope);
            },
            _createPlainTextPassInput:function(){
                var scope = this._scope;
                var html = '<input type="text" ' +
                    'ng-show="password_plaintext" ' +
                    'placeholder="{{placeholder}}" ' +
                    'ng-model="password_value" ' +
                    'class="hyc-password-plaint-input"/>';
                var input = angular.element(html);
                input.addClass('text-input text-input--underbar');
                return ons.$compile(input)(scope);
            },
            _createHidePassInput:function(){
                var scope = this._scope;
                var html = '<input type="text" ' +
                    'ng-show="1==0" ' +
                    'placeholder="{{placeholder}}" ' +
                    //'ng-model="password_value" ' +
                    'class="hyc-password-hide-input"/>';
                var input = angular.element(html);
                if (this._attrs.name){
                    input.attr('name',this._attrs.name);
                }
                /*var model = 'password_value';
                if (this._attrs.hasOwnProperty('ngModel')){
                    model = this._attrs.ngModel;
                }
                input.attr('ng-model',model);
                */
                return ons.$compile(this._copyEleAttrs(input))(scope);
            },
            _createPlainBtn:function(){
                var scope = this._scope;
                var html = '<ons-icon icon="fa-eye-slash" ' +
                            'ng-click="plaintPassword();" ' +
                            'class="hyc-eye" ' +
                            'ng-if="!password_plaintext">' +
                            '</ons-icon>';
                html += '<ons-icon icon="fa-eye" ' +
                    'ng-click="plaintPassword();" ' +
                    'class="hyc-eye active" ' +
                    'ng-if="password_plaintext">' +
                    '</ons-icon>';
                var btn = angular.element(html);
                return ons.$compile(btn)(scope);
            },
            _setHidePasswordVal:function(val){
                var hideEle = this._element[0].querySelector('.hyc-password-hide-input');
                if (!hideEle) return;
                hideEle = angular.element(hideEle);
                hideEle.val(val);
            },
            // Make this tab active.
            setActive : function() {
                this._scope.password_plaintext = true;
            },

            // Make this tab inactive.
            setInactive : function() {
                this._scope.password_plaintext = false;
            },

            /**
             * @return {Boolean}
             */
            isActive : function() {
                return this._scope.password_plaintext;
            },

            toggle : function(){
                if (this.isActive()) {
                    this.setInactive();
                }else{
                    this.setActive();
                }
            },
            /**
             * Destroy.
             */
            destroy: function() {
                this._scope.$destroy();
            },

            _destroy: function() {
                this._scope = this._attrs = this._element = null;
            }
        });

        MicroEvent.mixin(HyPasswordView);
        return HyPasswordView;
    }]);

    module.directive('hyPassword', ["HyPasswordView", "$onsen", function(HyPasswordView,$onsen){
        return {
            restrict: 'E',
            scope:{},
            require : '?^ngModel',
            /*replace:true,
            template:'<div ng-class="{active:password_plaintext}">' +
                    '<input type="password" ng-show="!password_plaintext" ng-model="password_value" class="hyc-password-input text-input text-input--underbar"/>' +
                    '<input type="text" ng-show="password_plaintext" ng-model="password_value" placeholder="{{placeholder}}" class="hyc-password-plaint-input text-input text-input--underbar"/>' +
                    '<ons-icon icon="fa-eye" ng-click="plaintPassword();" class="hyc-eye"></ons-icon>' +
                    '</div>',
            */
            compile: function(element) {
                element.addClass('hyc-password');
                return function(scope,element,attrs,controller) {
                    var hyPasswordView = new HyPasswordView(scope,element,attrs,controller);
                    $onsen.declareVarAttribute(attrs, hyPasswordView);
                };
            }
        };
    }]);
})();

/**
 * haiyi-position-list - v1.0.0 - 2016-02-22
 * @author liukeyu
 * @ngdoc directive
 * @name haiyi-position-list
 * @description
 *   [ch]可定位列表.[/ch]
 * @example
 * <haiyi-position-list >
 * </haiyi-position-list>
 */
(function() {
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}

    /**
     * find if a array contains the object using indexOf or a simple polyFill
     * @param {Array} src
     * @param {String} find
     * @param {String} [findByKey]
     * @return {Boolean|Number} false when not found, or the index
     */
    function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) {
            return src.indexOf(find);
        } else {
            var i = 0;
            while (i < src.length) {
                if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
                    return i;
                }
                i++;
            }
            return -1;
        }
    }
	module.factory('PositionListView',["$onsen", function($onsen){

		var PositionListView = Class.extend({

			/**
			* @param {Object} scope
			* @param {jqLite} element
			* @param {Object} attrs
			*/
			init: function(scope, element, attrs) {
				this._element = element;
				this._attrs = attrs;
				this._scope = scope;

				this._scope._otherDataKey = '#';

				this._scope.itemTouch = function(item,$event){
                    /*if(!item || this._scope._activePosition == item){
                        return;
                    }*/
					this._itemTouch(item,$event);
                    var phase = this._scope.$root.$$phase;
                    if (phase !== '$apply' && phase !== '$digest') {
                        this._scope.$apply(function(){
                            this._scope._activePosition = item;
                        }.bind(this));
                    }else{
                        this._scope._activePosition = item;
                    }
				}.bind(this);

                this._scope.repeatList = this._scope.repeatList || [];
				//定位元素列表
				this._scope.positionItems = this._scope.positionItems || [];
				//this._scope._activePosition = null;
				//this._list = this._scope.repeatList || [];

				this._element.addClass('haiyi-position-list slider');
				//列表配置信息
				//获取定位列表
                this._scope.positionItems = this._getPositionItems(this._scope);
                this._scope._activePosition = this._scope.positionItems[0] || null;
				//更新列表数据
                this._scope.positionList = this._getPositionList(this._scope);
				//生成列表
				var items = this._createListItem();
				this._element.html('');
				this._element.append(items);
                this._prepareListEventListeners(items[0]);
				//生成定位列表
				var position = this._createPositionItem();
                this._prepareEventListeners(position[0]);
				this._element.append(position);
				this._scope.$on('$destroy', this._destroy.bind(this));
			},

            /**
             * 定位菜单标题初始化
             */
            _initPositionHeader:function(header){
                return header?header.toUpperCase():null;
            },

            _initPositionItems : function(items){
                var len = items.length;
                for(var i=0;i< len;i++){
                    items[i] = this._initPositionHeader(items[i]);
                }
                return items;
            },

            /**
             * 获取定位列表
             */
            _getPositionItems : function(scope){
                var key = scope.key || 'header';
                scope.key = key;
                if (scope.positionItems && 0<scope.positionItems.length){
                    return this._initPositionItems(scope.positionItems);
                }
                var items = [];
                var len = scope.repeatList.length;
                for(var i=0;i< len;i++){
                    var val = scope.repeatList[i][key];
                    val = this._initPositionHeader(val);
                    if (val && inArray(items,val)<0){
                        items.push(val);
                    }
                }
                return items;
            },

            /**
             * 更新数据
             */
            _getPositionList : function(scope){
                var position = scope.positionItems.sort();
                var key = scope.key;
                var listMap = {};
                var list = [];

                var len = scope.repeatList.length;
                for(var i=0;i< len;i++){
                    var header = scope.repeatList[i][key];
                    header = this._initPositionHeader(header);
                    if (!header || inArray(position,header)<0){
                        header = this._initPositionHeader(scope._otherDataKey);
                        if (inArray(position,header)<0){
                            position.push(header);
                        }
                    }
                    listMap[header] = listMap[header] || [];
                    listMap[header].push(scope.repeatList[i]);
                }
                len = position.length;
                for (var i=0;i<len;i++){
                    var k = position[i];
                    var v = listMap[k] || [];
                    list.push({key:k,val:v});
                }
                return list;
            },

            /**
             * 定位
			 */
			_itemTouch:function(item,$event){
				//var scope = this._scope;
                //item = this._initPositionHeader(item);
				var slider = this._element[0].querySelector('.slider-content');
				var ele = slider.querySelector('[position-header="'+item+'"]');
				if(!ele){
					return;
				}

				//slider = angular.element(slider);
				//ele = angular.element(ele);

				var eleOffsetTop = ele.offsetTop;
				var sliderOffsetTop = slider.offsetTop;
				//console.log(ele);
				var height = 0;//
				var scroll = (eleOffsetTop - sliderOffsetTop) - height/8;
                /*
				angular.element(slider.querySelectorAll('[position-header]')).removeClass('selected');
				angular.element(ele).addClass('selected');

                angular.element(this._element[0].querySelectorAll('.slider-nav li')).removeClass('active');
                angular.element(this._element[0].querySelector('.slider-nav li[position-key="'+item+'"]')).addClass('active');
                */
				this._scrollAnimate(slider,{scroll:scroll,time:300});
				/*
				animit(slider).queue({
					w:'translate3d(0px, ' + (-scroll) + 'px, 0px)';
				}, {
					duration: 0.5,
					timing: 'cubic-bezier(.1, .7, .1, 1)'
				}).play(callback);//.play(); slider.stop().animate({scrollTop: '+=' + scroll + 'px'});
				//if(o.debug) $('#debug span', slider).html(offset);
				*/
			},
			/**
			 * 动画
			 */
			_scrollAnimate : function(elem, options){
				//动画初始值
				var start = elem.scrollTop;
				//动画结束值
				var end = options.scroll;
                if (start == end) return;
				//动画id
				var timerId;
				var createTime = function(){
					return  (+new Date)
				};
				var startTime = createTime();

				//每13毫秒要跑的位置
                var duration = options.time;

				//开始执行动画
				timerId = setInterval(tick, 13);

                function tick(){
                    //每次变化的时间
                    var remaining = Math.max(0, startTime + duration - createTime());
                    var temp = remaining / duration || 0;
                    var percent = 1 - temp;
                    var stop = function(){
                        //停止动画
                        if(timerId){
                            clearInterval(timerId);
                            timerId = null;
                        }
                    };
                    var setStyle = function(value){
                        elem.scrollTop = value;
                    };
                    //移动的距离
                    var now = (end - start) * percent + start;
                    if(percent === 1){
                        setStyle(now);
                        stop();
                    }else{
                        setStyle(now);
                    }
                }
			},
			/**
			 * 创建列表
			 */
			_createListItem:function(){
				var scope = this._scope;
                //var defaultHtml = '<ons-list-item>{{item.title}}</ons-list-item>';
				var elementHtml = scope.hyaElementHtml || this._element.html();

                scope.hyaElementHtml = elementHtml;

				var html = '<div class="slider-content">' +
					'<ons-list ng-repeat="header in positionList" class="list-content"' +
                    '   ng-class="{\'selected\':_activePosition==header.key,\'no-header\':hideHeader}"' +
                    '   position-header="{{header.key}}">' +
					'<ons-list-header ng-bind="header.key" ng-click="itemTouch(header.key,$event)" ng-if="!hideHeader"></ons-list-header>' +
                    '<div ng-repeat="item in header.val">'+
                    elementHtml+
                    "</div>"+
                    '</ons-list>' +
					'</div>';
				html = angular.element(html);
				return ons.$compile(html)(scope);
			},

			/**
			 * 创建定位列表
			 */
			_createPositionItem:function(){
				var scope = this._scope;
				var len = scope.positionItems.length;
				if(len<=0){
					return '';
				}
                //scope.positionHeight = this._getPositionHeight();
				var html = '<div class="slider-nav">' + //垂直居中 slider-vertical-middle
					'<ul class="slider-nav-ul">' +
					'<li class="slider-nav-li" ng-repeat="p in positionItems" ' +
                    '   hy-touch="itemTouch(p,$event)"' +
                    '   position-key="{{p}}"' +
                    '   ng-class="{\'active\':_activePosition==p}"' +
					'	>' + //style="max-height:{{positionHeight}}px;min-height:{{positionHeight}}px;line-height:{{positionHeight}}px;"
					'<a ng-bind="p"></a>' +
					'</li>' +
					'</ul>' +
					'</div>';
				html = angular.element(html);
				return ons.$compile(html)(scope);
			},

            _getPositionHeight : function(){
                var height = this._element[0].clientHeight;
                var positions = this._scope.positionItems;
                var len = positions?positions.length:0;
                if(len<=0){
                    return height;
                }
                return (height-12)/len;
            },

            _getPositionItemByTop:function(top){
                top = top || 0;
                var sliderNav = this._element[0].querySelector('.slider-nav');
                if (!sliderNav){
                    return null;
                }
                var item = null;
                var sliderNavLi = sliderNav.querySelector('ul').querySelectorAll('li.slider-nav-li');
                for(var i=0;i<sliderNavLi.length;i++){
                    var navLi = sliderNavLi[i];
                    if (navLi.offsetTop<=top && top< navLi.offsetTop+navLi.offsetHeight){
                        item = navLi;
                        break;
                    }
                }
                return item;
            },
            _prepareListEventListeners: function(sliderList) {
                sliderList = sliderList || this._element[0].querySelector('.slider-content');
                if (!sliderList){
                    return;
                }
                //this._hammerList = new Hammer(sliderList);
                //
                //this._hammerList.on('panend', this._bindOnPanEnd.bind(this));
                this._bindOnScroll = this._onScroll.bind(this);
                angular.element(sliderList).on('scroll', this._bindOnScroll);
            },
            _prepareEventListeners: function(sliderNav) {
                sliderNav = sliderNav || this._element[0].querySelector('.slider-nav');
                if (!sliderNav){
                    return;
                }
                //this._bindedOnResize = this._onResize.bind(this);
                this._hammer = new Hammer(sliderNav);

                this._hammer.on('panstart', this._bindOnPanStart.bind(this));
                this._hammer.on('pan panup pandown', this._bindOnPan.bind(this));
                this._hammer.on('panend', this._bindOnPanEnd.bind(this));

                //angular.element(window).on('resize', this._bindedOnResize);
            },

            _bindOnPan: function(event) {
                /*
                var direction = event.direction;
                if ((this._isVertical() && (direction === Hammer.DIRECTION_LEFT || direction === Hammer.DIRECTION_RIGHT)) || (!this._isVertical() && (direction ===Hammer.DIRECTION_UP || direction === Hammer.DIRECTION_DOWN))) {
                    return;
                }
                */
                var top = this._getSliderOffsetTop(event);
                var item = this._getPositionItemByTop(top);
                item = angular.element(item);
                var key = item.attr('position-key');
                if (!key || this._scope._activePosition==key){
                    return;
                }

                this._scope.itemTouch(key);
            },
            _bindOnPanStart: function(event) {
                var target = angular.element(this._element[0].querySelector('.slider-nav'));
                if (target){
                    target.addClass('slider-nav-pan');
                }
            },
            _bindOnPanEnd: function(event) {
                var target = angular.element(this._element[0].querySelector('.slider-nav'));
                if (target){
                    target.removeClass('slider-nav-pan');
                }
            },

            _getTouchEvents: function() {
                var EVENTS = [
                    'pan', 'panstart', 'panend',
                    'panup', 'pandown'
                ];

                return EVENTS.join(' ');
            },

            _getSliderOffsetTop: function(event) {
                var target = this._element[0].querySelector('.slider-nav');
                var top = target.getBoundingClientRect().top;

                return event.center.y-top;
            },

            _onScroll: function(event) {
                var key = this._getScrollSliderKey(event.target);
                if (!key || this._scope._activePosition==key){
                    return;
                }
                this._scope._activePosition = key;
                this._scope.$evalAsync();
            },

            _getScrollSliderKey:function(target){
                var key = null;
                var eles = target.querySelectorAll('[position-header]');
                if(!eles || eles.length<=0){
                    return key;
                }
                var scrollTop = target.scrollTop;
                var offsetTop = target.offsetTop;
                var len = eles.length;
                var headerHeight = 25;
                var index = 0;
                for(var i=0;i<len;i++){
                    var position = eles[i];
                    var eleOffsetTop = position.offsetTop;
                    if(eleOffsetTop+headerHeight-offsetTop-scrollTop<0){
                        continue;
                    }
                    if(target.offsetHeight<eleOffsetTop+headerHeight-offsetTop-scrollTop){
                        index = i-1;
                        break;
                    }
                    index = i;
                    break;
                }
                index = index<0?0:((len-1)<index?len-1:index);
                var activePositin = angular.element(eles[index]);
                key = activePositin.attr('position-header');
                return key;
            },


            refresh:function(){
                this.init(this._scope,this._element,this._attrs);
            },
			/**
			* Destroy.
			*/
			destroy: function() {
				this._scope.$destroy();
			},

			_destroy: function() {
                if(this._hammer){
                    this._hammer.off('pan panstart panup pandown panend');
                    //angular.element(window).off('resize', this._bindedOnResize);
                }
				this._scope = this._attrs = this._element = null;
			}
		});

		MicroEvent.mixin(PositionListView);
		return PositionListView;
	}]);
    module.directive('hyTouch', ["$onsen", function($onsen){
        return {
            restrict: 'EA',
            scope: {
                touch:'&hyTouch'
            },
            link: function(scope, element,attrs) {

                //element[0].addEventListener('mouseover', handleEvent, true);

                //element[0].addEventListener('touchmove', handleEvent, false);

                 var EVENTS = ('tap').split(/ +/);
                 var hammer = new Hammer(element[0]);
                 hammer.on(EVENTS.join(' '), handleEvent);

                 $onsen.cleaner.onDestroy(scope, function() {
                     hammer.off(EVENTS.join(' '), handleEvent);
                     $onsen.clearComponent({
                         scope: scope,
                         element: element,
                         attrs: attrs
                     });
                     hammer.element = scope = element = attrs = null;
                 });

                function handleEvent(event){
                    event.target = element;
                    scope.touch({$event: event});
                }
            }
        };
    }]);
	module.directive('hyPositionList', ["$onsen", "PositionListView", function($onsen,PositionListView){
		return {
			restrict: 'E',
			scope: {
				repeatList:'=hyaRepeatList',
				positionItems:'=hyaPositionItems',
                key:'@hyaHeaderKey',
                hideHeader:'@hyaHideHeader'
			},
			compile: function() {
				return function(scope, element,attrs) {
					var positionListView = new PositionListView(scope, element, attrs);
					$onsen.declareVarAttribute(attrs, positionListView);

                    scope.$watch('repeatList',function(){
                        //positionListView.destroy();
                        positionListView.refresh();
                    });
				};
			}
		};
	}]);
})();

(function(){
    'use strict';
    /**
     * @ngdoc module
     * @name hyProgressCircular
     * @description 圆形进度条
     */

    HyProgressCircularDirective.$inject = ["$window", "$hyProgressCircular", "$interval"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyProgressCircular', HyProgressCircularDirective)
        .provider("$hyProgressCircular", HyProgressCircularProvider);

    /**
     * @ngdoc directive
     * @name hyProgressCircular
     * @module haiyiMobile
     * @restrict E
     *
     * @description
     * 圆形进度框指令用于用户在查看内容或与内容进行交互时看到的视觉变化量，
     * 使您的应用在内容展示前提供友好的交互体验。
     *
     * 每个用户操作只应该由一个活动进度条表示，
     * 例如：一个刷新操作不应同时显示刷新栏和加载圈。
     *
     * 对于可以确定已完成操作百分比的操作，请使用determinate进度框。
     * 它能让用户快速了解操作需要多长时间。
     *
     * 对于特殊操作，当用户被要求等待一段时间，而需要多长时间是不定的，只有等待后台程序结束后才完成，则使用indeterminate进度框。
     *
     * @param {string} hy-mode 选择这4种模式的其中之一: determinate, indeterminate, buffer 或 query.
     *
     * Note: 如果 `hy-mode` 的值被设置能 undefined 或者没有指定4个有效值中之一，则`indeterminate`默认被自动指定为进度条的模式。
     * Note: 如果没有配置，则`hy-mode="indeterminate"` 会自动作为属性被注入。如果`value=""` 也被指定，则`hy-mode="determinate"`会被注入并替换原来的
     *
     * @param {number=} value 在determinate和buffer模式下，此数字表示进度框的百分比。 默认值：0
     *
     * @param {number=} hy-diameter 指定圆形进度框的直径。 该值是像素大小值（例如“100”）。如果此属性不存在，则默认值为“50px”。
     * @param {boolean=} ng-disabled 确定是否禁用进度条元素。
     *
     * @usage
     * <hljs lang="html">
     * <hy-progress-circular hy-mode="determinate" value="..."></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="determinate" ng-value="..."></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="determinate" value="..." hy-diameter="100"></hy-progress-circular>
     *
     * <hy-progress-circular hy-mode="indeterminate"></hy-progress-circular>
     * </hljs>
     */

    /* @ngInject */
    function HyProgressCircularDirective($window, $hyProgressCircular, $interval) {

        var rAF = $window.requestAnimationFrame ||
            $window.webkitRequestAnimationFrame ||
            angular.noop;

        var cAF = $window.cancelAnimationFrame ||
            $window.webkitCancelAnimationFrame ||
            $window.webkitCancelRequestAnimationFrame ||
            angular.noop;

        var DEGREE_IN_RADIANS = $window.Math.PI / 180;
        var MODE_DETERMINATE = 'determinate';
        var MODE_INDETERMINATE = 'indeterminate';
        var DISABLED_CLASS = '_hy-progress-circular-disabled';
        var INDETERMINATE_CLASS = 'hy-mode-indeterminate';

        return {
            restrict: 'E',
            scope: {
                value: '@',
                hyDiameter: '@',
                hyMode: '@'
            },
            template:
            '<svg xmlns="http://www.w3.org/2000/svg">' +
            '<path fill="none"/>' +
            '</svg>',
            compile: function(element, attrs) {
                element.attr({
                    'aria-valuemin': 0,
                    'aria-valuemax': 100,
                    'role': 'progressbar'
                });

                if (angular.isUndefined(attrs.hyMode)) {
                    var hasValue = angular.isDefined(attrs.value);
                    var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                    attrs.$set('hyMode', mode);
                } else {
                    attrs.$set('hyMode', attrs.hyMode.trim());
                }

                return hyProgressCircularLink;
            }
        };

        function hyProgressCircularLink(scope, element, attrs) {
            var node = element[0];
            var svg = angular.element(node.querySelector('svg'));
            var path = angular.element(node.querySelector('path'));
            var startIndeterminate = $hyProgressCircular.startIndeterminate;
            var endIndeterminate = $hyProgressCircular.endIndeterminate;
            var rotationIndeterminate = 0;
            var lastAnimationId = 0;
            var lastDrawFrame;
            var interval;

            element.toggleClass(DISABLED_CLASS, attrs.hasOwnProperty('disabled'));

            //如果模式是不确定的，则不需要等待下一digest。 它可以马上开始。
            if(scope.hyMode === MODE_INDETERMINATE){
                startIndeterminateAnimation();
            }

            scope.$on('$destroy', function(){
                cleanupIndeterminateAnimation();

                if (lastDrawFrame) {
                    cAF(lastDrawFrame);
                }
            });

            scope.$watchGroup(['value', 'hyMode', function() {
                var isDisabled = node.disabled;
                if (isDisabled === true || isDisabled === false){
                    return isDisabled;
                }
                return angular.isDefined(element.attr('disabled'));

            }], function(newValues, oldValues) {
                var mode = newValues[1];
                var isDisabled = newValues[2];
                var wasDisabled = oldValues[2];

                if (isDisabled !== wasDisabled) {
                    element.toggleClass(DISABLED_CLASS, !!isDisabled);
                }

                if (isDisabled) {
                    cleanupIndeterminateAnimation();
                } else {
                    if (mode !== MODE_DETERMINATE && mode !== MODE_INDETERMINATE) {
                        mode = MODE_INDETERMINATE;
                        attrs.$set('hyMode', mode);
                    }

                    if (mode === MODE_INDETERMINATE) {
                        startIndeterminateAnimation();
                    } else {
                        var newValue = clamp(newValues[0]);

                        cleanupIndeterminateAnimation();

                        element.attr('aria-valuenow', newValue);
                        renderCircle(clamp(oldValues[0]), newValue);
                    }
                }

            });

            scope.$watch('hyDiameter', function(newValue) {
                var diameter = getSize(newValue);
                var strokeWidth = getStroke(diameter);
                var transformOrigin = (diameter / 2) + 'px';
                var dimensions = {
                    width: diameter + 'px',
                    height: diameter + 'px'
                };

                svg[0].setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);
                svg
                    .css(dimensions)
                    .css('transform-origin', transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin);

                element.css(dimensions);
                path.css('stroke-width',  strokeWidth + 'px');
            });

            function renderCircle(animateFrom, animateTo, easing, duration, rotation) {
                var id = ++lastAnimationId;
                var startTime = new Date().getTime();
                var changeInValue = animateTo - animateFrom;
                var diameter = getSize(scope.hyDiameter);
                var pathDiameter = diameter - getStroke(diameter);
                var ease = easing || $hyProgressCircular.easeFn;
                var animationDuration = duration || $hyProgressCircular.duration;

                if (animateTo === animateFrom) {
                    path.attr('d', getSvgArc(animateTo, diameter, pathDiameter, rotation));
                } else {
                    lastDrawFrame = rAF(function animation() {
                        var currentTime = $window.Math.max(0, $window.Math.min(new Date().getTime() - startTime, animationDuration));

                        path.attr('d', getSvgArc(
                            ease(currentTime, animateFrom, changeInValue, animationDuration),
                            diameter,
                            pathDiameter,
                            rotation
                        ));

                        if (id === lastAnimationId && currentTime < animationDuration) {
                            lastDrawFrame = rAF(animation);
                        }
                    });
                }
            }

            function animateIndeterminate() {
                renderCircle(
                    startIndeterminate,
                    endIndeterminate,
                    $hyProgressCircular.easeFnIndeterminate,
                    $hyProgressCircular.durationIndeterminate,
                    rotationIndeterminate
                );

                rotationIndeterminate = (rotationIndeterminate + endIndeterminate) % 100;

                var temp = startIndeterminate;
                startIndeterminate = -endIndeterminate;
                endIndeterminate = -temp;
            }

            function startIndeterminateAnimation() {
                if (!interval) {
                    interval = $interval(
                        animateIndeterminate,
                        $hyProgressCircular.durationIndeterminate + 50,
                        0,
                        false
                    );

                    animateIndeterminate();

                    element
                        .addClass(INDETERMINATE_CLASS)
                        .removeAttr('aria-valuenow');
                }
            }

            function cleanupIndeterminateAnimation() {
                if (interval) {
                    $interval.cancel(interval);
                    interval = null;
                    element.removeClass(INDETERMINATE_CLASS);
                }
            }
        }

        /**
         * 按照SVG弧语法生成弧。
         *
         * @param {number} current 当前的百分比值
         * @param {number} diameter 容器的半径
         * @param {number} pathDiameter path的半径
         * @param {number=0} rotation 半圆应该开始渲染的点。 用于不确定的动画。
         *
         * @returns {string} String SVG弧的表示。
         */
        function getSvgArc(current, diameter, pathDiameter, rotation) {
            var maximumAngle = 359.99 / 100;
            var startPoint = rotation || 0;
            var radius = diameter / 2;
            var pathRadius = pathDiameter / 2;

            var startAngle = startPoint * maximumAngle;
            var endAngle = current * maximumAngle;
            var start = polarToCartesian(radius, pathRadius, startAngle);
            var end = polarToCartesian(radius, pathRadius, endAngle + startAngle);
            var arcSweep = endAngle < 0 ? 0 : 1;
            var largeArcFlag;

            if (endAngle < 0) {
                largeArcFlag = endAngle >= -180 ? 0 : 1;
            } else {
                largeArcFlag = endAngle <= 180 ? 0 : 1;
            }

            return 'M' + start + 'A' + pathRadius + ',' + pathRadius +
                ' 0 ' + largeArcFlag + ',' + arcSweep + ' ' + end;
        }

        /**
         * 将极坐标转换为笛卡尔坐标。
         *
         * @param {number} radius 容器的半径。
         * @param {number} pathRadius 路径元素的半径
         * @param {number} angleInDegress 放置点的角度。
         *
         * @returns {string} Cartesian 坐标格式为`x，y`。
         */
        function polarToCartesian(radius, pathRadius, angleInDegrees) {
            var angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;

            return (radius + (pathRadius * $window.Math.cos(angleInRadians))) +
                ',' + (radius + (pathRadius * $window.Math.sin(angleInRadians)));
        }

        /**
         * 判断value是否是0-100的有效值
         */
        function clamp(value) {
            return $window.Math.max(0, $window.Math.min(value || 0, 100));
        }

        /**
         * 基于提供的值，以以下格式确定进度圆的大小：`X`，`Ypx`，`Z％`。
         */
        function getSize(value) {
            var defaultValue = $hyProgressCircular.progressSize;

            if (value) {
                var parsed = parseFloat(value);

                if (value.lastIndexOf('%') === value.length - 1) {
                    parsed = (parsed / 100) * defaultValue;
                }

                return parsed;
            }

            return defaultValue;
        }

        /**
         * 根据提供的直径确定圆的笔画宽度。
         */
        function getStroke(diameter) {
            return $hyProgressCircular.strokeWidth / 100 * diameter;
        }
    }


    /**
     * @ngdoc service
     * @name $hyProgressCircular
     * @module haiyiMobile
     *
     * @description
     * 允许用户为`progressCircular`指令指定默认选项。
     *
     * @property {number} progressSize 进度园的直径（以像素为单位）。
     * @property {number} strokeWidth 圆的边框宽度，以圆的大小的百分比表示。
     * @property {number} duration 圆形动画的时长（以毫秒为单位）.
     * @property {function} easeFn 默认缓动动画功能。
     * @property {object} easingPresets 收集预定义的缓动函数。
     *
     * @property {number} durationIndeterminate 不确定动画的持续时间。
     * @property {number} startIndeterminate 不确定动画开始点。
     * @property {number} endIndeterminate 不确定动画结束点。
     * @property {function} easeFnIndeterminate 在不确定值之间进行动画处理时使用的缓动函数。
     *
     * @property {(function(object): object)} configure用于修改默认选项。
     *
     * @usage
     * <hljs lang="js">
     *   myAppModule.config(function($hyProgressCircularProvider) {
 *
 *     // 修改园型进度条的选型
 *     $hyProgressCircularProvider.configure({
 *       progressSize: 100,
 *       strokeWidth: 20,
 *       duration: 800
 *     });
 * });
     * </hljs>
     *
     */


    function HyProgressCircularProvider() {
        var progressConfig = {
            progressSize: 50,
            strokeWidth: 10,
            duration: 100,
            easeFn: linearEase,

            durationIndeterminate: 500,
            startIndeterminate: 3,
            endIndeterminate: 80,
            easeFnIndeterminate: materialEase,

            easingPresets: {
                linearEase: linearEase,
                materialEase: materialEase
            }
        };

        return {
            configure: function(options) {
                progressConfig = angular.extend(progressConfig, options || {});
                return progressConfig;
            },
            $get: function() { return progressConfig; }
        };

        function linearEase(t, b, c, d) {
            return c * t / d + b;
        }

        function materialEase(t, b, c, d) {
            var ts = (t /= d) * t;
            var tc = ts * t;
            return b + c * (6 * tc * ts + -15 * ts * ts + 10 * tc);
        }
    }
})();


/**
 * 进度条
 class: 定义进度条所占区域的样式<br>
 hy-progressbar: 进度条数据<br>
 hy-location:标题位置，top上方，bottom下方，默认居中<br>
 hy-title-style:标题样式<br>
 hy-bar-style：进度条样式<br>
 hy-bg-bar-style：进度条背景样式<br>
 hy-orientation：进度条方向，vertical垂直风格
 对于垂直进度条，应该定义hyBgBarStyle属性中的宽度定义进度条的高度。
 */
(function(){
	'use strict';
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.directive("hyProgressBar", function() {
		return {
			restrict: 'E',
			scope: {
				hyaProgressbar: '=',
				hyaLocation: '@',
				hyaTitleStyle: '@',
				hyaBarStyle: '@',
				hyaBgBarStyle: '@',
				hyaOrientation: '@'
			},
			link: function postLink(scope,iElement,iAttrs) {
				var setBarWidth = function(bar, title, field, nv, ov) {
					var ow = 100*ov/field.max;
					var nw = 100*nv/field.max;
					if (nw > 100) {
						nw = 100;
					}
					var time = (nw-ow)*10;
					bar.css('-webkit-transition', 'width ' + time + 'ms linear');
					bar.css('width', nw+'%');
					var curVal = nv;
					if (curVal > field.max) {
						curVal = field.max;
					}
					if (title != null) {
						title.text(curVal + "/" + field.max);
					}
				};

				if (scope.hyaProgressbar.progressFn === undefined) {
					scope.hyaProgressbar.progressFn = setBarWidth;
				}

				var tmp = "<div class='" + iAttrs['class'] + "'></div>";
				var container = angular.element(tmp);
				iElement.append(container);

				var title = null;
				if (scope.hyaLocation == "top" || scope.hyaLocation == "bottom") {
					tmp = "<div style='text-align:center'></div>";
					title = angular.element(tmp);
				}

				tmp = "<span style='position:relative; text-align:center; z-index:0; display:block;'></span>";
				var bar = angular.element(tmp);
				bar.addClass(scope.hyaBarStyle || 'hy-progressbar');

				tmp = "<div style='overflow:hidden; -webkit-transform-origin:left top 0px;'></div>";
				var bt = angular.element(tmp);
				bt.append(bar);
				bt.addClass(scope.hyaBgBarStyle || 'hy-hbgProgressbar');

				if (scope.hyaLocation == "top") {
					container.append(title);
					container.append(bt);
				}
				else if (scope.hyaLocation == "bottom") {
					container.append(bt);
					container.append(title);
				}
				else {
					if (scope.hyaLocation == "center") {
						title = bar;
					}
					container.append(bt);
				}

				if (title != null) {
					tmp = "<span></span>";
					var t = angular.element(tmp);
					title.addClass(scope.hyaTitleStyle || 'hy-progressbar-text');
					title.append(t);
				}

				if (scope.hyaOrientation && scope.hyaOrientation.toLowerCase() == "vertical") {
					var translateX = -1*bt[0].clientWidth;
					var translateY = (container[0].clientWidth/2)-bt[0].clientHeight/2;
					bt.css('-webkit-transform', 'rotate(-90deg) translate('+ translateX +'px, ' + translateY + 'px)');

					if (scope.hyaLocation == "bottom") {
						var downOffset = container[0].clientHeight - (container[0].clientHeight - bt[0].clientWidth)*2;
						title.css('-webkit-transform', 'translate(0px,' + downOffset  + 'px)');
					}
				}
				scope.hyaProgressbar.progressFn(bar, title, scope.hyaProgressbar, scope.hyaProgressbar.value, 0);
				scope.$watch('hyaProgressbar.value', function(n, o) {
					if (n == o) {
						return;
					}
					if (o === undefined) {
						o = 0;
					}
                    if (scope.hyaProgressbar.progressFn && angular.isFunction(scope.hyaProgressbar.progressFn)) {
                        scope.hyaProgressbar.progressFn(bar, title, scope.hyaProgressbar, n, o);
                    }
				});
			}
		};
	});
}());

/**
 * hy-pul-hook - v1.0.0 - 2016-03-18
 * @author liukeyu
 * @ngdoc service
 * @name HyPullHookView
 * @description
 *   [ch]上下拉刷新.[/ch]
 * @example
 *
 */

(function(){
	'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

	module.factory('HyPullHookView', ['$onsen', '$parse', function($onsen, $parse) {

		var HyPullHookView = Class.extend({

			STATE_INITIAL: 'initial',
			STATE_PREACTION: 'preaction',
			STATE_ACTION: 'action',
            DIRECTION_DOWN: 'down',
            DIRECTION_UP: 'up',

			/**
			 * @param {Object} scope
			 * @param {jqLite} element
			 * @param {Object} attrs
			 */
			init: function(scope, element, attrs) {
				this._element = element;
				this._scope = scope;
				this._attrs = attrs;

				this._scrollElement = this._createScrollElement();
				this._pageElement = this._scrollElement.parent();

				if (!this._pageElement.hasClass('page__content') && !this._pageElement.hasClass('ons-scroller__content')) {
					throw new Error('<ons-pull-hook> must be a direct descendant of an <ons-page> or an <ons-scroller> element.');
				}

				this._currentTranslation = 0;

				this._createEventListeners();
				this._setState(this.STATE_INITIAL, true);
				this._setStyle();

				this._scope.$on('$destroy', this._destroy.bind(this));
			},

			_createScrollElement: function() {
                if (this._element.parent().hasClass('scroll')){
                    return this._element.parent();
                }
				var scrollElement = angular.element('<div style="min-height: 100%;">')
					.addClass('scroll');

				var pageElement = this._element.parent(),
					children = pageElement.children();

				pageElement.append(scrollElement);
				scrollElement.append(children);

				return scrollElement;
			},

			_setStyle: function() {
                var direction = this.getDirection();
                var h = this._getHeight();
				this._element.css({
					height: h + 'px',
					lineHeight: h + 'px'
				});
                if (direction == this.DIRECTION_UP){
                    var bottom = -h;
                    this._element.css({
                        bottom: -h + 'px'
                    });
                    //this._element.addClass('hyc-hide');
                }else{
                    this._element.css({
                        top: -h + 'px'
                    });
                }
			},

			_onScroll: function(event) {
				var el = this._pageElement[0];

				if (el.scrollTop < 0) {
					el.scrollTop = 0;
				}
			},

			_generateTranslationTransform: function(scroll) {
				return 'translate3d(0px, ' + scroll + 'px, 0px)';
			},

			_onDrag: function(event) {
				if (this.isDisabled()) {
					return;
				}

				// Ignore when dragging left and right.
				if (event.direction === Hammer.DIRECTION_LEFT || event.direction === Hammer.DIRECTION_RIGHT) {
					return;
				}

				// Hack to make it work on Android 4.4 WebView. Scrolls manually near the top of the page so
				// there will be no inertial scroll when scrolling down. Allowing default scrolling will
				// kill all 'touchmove' events.
				var el = this._pageElement[0];
				el.scrollTop = this._startScroll - event.deltaY;
				if (el.scrollTop < window.innerHeight
                    && ((event.direction !== Hammer.DIRECTION_UP
                            && this.getDirection() !== this.DIRECTION_UP)
                        ||  (event.direction !== Hammer.DIRECTION_DOWN
                        && this.getDirection() !== this.DIRECTION_DOWN)
                    )) {
					event.preventDefault();
				}

				if (this._currentTranslation === 0 && this._getCurrentScroll() === 0) {
					this._transitionDragLength = event.deltaY;

					//var direction = event.interimDirection;
					var direction = event.direction;
					if (direction === Hammer.DIRECTION_DOWN) {
						this._transitionDragLength -= 1;
					}
					else {
						this._transitionDragLength += 1;
					}
				}
                event.srcEvent.stopPropagation();

                var scroll;
                if(this.getDirection() === this.DIRECTION_DOWN && event.deltaY>0) {
                    scroll = event.deltaY - this._startScroll;
                    scroll = Math.max(scroll, 0);
                }
                if(this.getDirection() === this.DIRECTION_UP && event.deltaY<0){
                    scroll = this._getCurrentScroll() - this._startScroll + event.deltaY ;
                    scroll = Math.min(scroll, 0);
                }

                if(typeof scroll == 'undefined') return;

                //scroll = Math.abs(scroll);
				if (this._thresholdHeightEnabled() && Math.abs(scroll) >= this._getThresholdHeight()) {
					this._hammer.stop();

					setImmediate(function() {
						this._setState(this.STATE_ACTION);
                        var scrollHei = this.getDirection()==this.DIRECTION_UP?-this._getHeight():this._getHeight();
                        this._translateTo(scrollHei, {animate: true});

						this._waitForAction(this._onDone.bind(this));
					}.bind(this));
				}
				else if (Math.abs(scroll) >= this._getHeight()) {
					this._setState(this.STATE_PREACTION);
				}
				else {
					this._setState(this.STATE_INITIAL);
				}

				this._translateTo(scroll);
			},

			_onDragStart: function(event) {
				if (this.isDisabled()) {
					return;
				}

                this._startScroll = this._getCurrentScroll();
                if (document.activeElement) {
                    document.activeElement.blur();
                }
			},

			_onDragEnd: function(event) {
				if (this.isDisabled()) {
					return;
				}
				if (this._currentTranslation != 0) {
					var scroll = this._currentTranslation;

					if ((scroll > this._getHeight()&&this.getDirection()==this.DIRECTION_DOWN)
                        || (-scroll > this._getHeight()&&this.getDirection()==this.DIRECTION_UP)) {
						this._setState(this.STATE_ACTION);
                        var scrollHei = this.getDirection()==this.DIRECTION_UP?-this._getHeight():this._getHeight();
						this._translateTo(scrollHei, {animate: true});

						this._waitForAction(this._onDone.bind(this));
					}
					else {
						this._translateTo(0, {animate: true});
					}
				}
			},

			_waitForAction: function(done) {
				if (this._attrs.ngAction) {
					this._scope.$eval(this._attrs.ngAction, {$done: done,$direction:this.getDirection()});
				}
				else if (this._attrs.onAction) {
					/*jshint evil:true */
					eval(this._attrs.onAction);
				}
				else {
					done();
				}
			},

			_onDone: function(done) {
				// Check if the pull hook still exists.
				if (this._element) {
					this._translateTo(0, {animate: true});
					this._setState(this.STATE_INITIAL);
				}
			},

            getDirection:function(){
                return this._attrs.hyaDirection == this.DIRECTION_UP?this.DIRECTION_UP:this.DIRECTION_DOWN;
            },

			_getHeight: function() {
				return parseInt(this._element[0].getAttribute('height') || '64', 10);
			},

			setHeight: function(height) {
				this._element[0].setAttribute('height', height + 'px');

				this._setStyle();
			},

			setThresholdHeight: function(thresholdHeight) {
				this._element[0].setAttribute('threshold-height', thresholdHeight + 'px');
			},

			_getThresholdHeight: function() {
				return parseInt(this._element[0].getAttribute('threshold-height') || '96', 10);
			},

			_thresholdHeightEnabled: function() {
				var th = this._getThresholdHeight();
				return th > 0 && th >= this._getHeight();
			},

			_setState: function(state, noEvent) {
				var oldState = this._getState();

				this._scope.$evalAsync(function() {
					this._element[0].setAttribute('state', state);

					if (!noEvent && oldState !== this._getState()) {
						this.emit('changestate', {
							state: state,
                            direction:this.getDirection,
							pullHook: this
						});
					}
				}.bind(this));
			},

			_getState: function() {
				return this._element[0].getAttribute('state');
			},

			getCurrentState: function() {
				return this._getState();
			},

			_getCurrentScroll: function() {
				return this._pageElement[0].scrollTop;
			},

			isDisabled: function() {
				return this._element[0].hasAttribute('disabled');
			},

			setDisabled: function(disabled) {
				if (disabled) {
					this._element[0].setAttribute('disabled', '');
				}
				else {
					this._element[0].removeAttribute('disabled');
				}
			},

			_translateTo: function(scroll, options) {
				options = options || {};

				this._currentTranslation = scroll;

				if (options.animate) {
					animit(this._scrollElement[0])
						.queue({
							transform: this._generateTranslationTransform(scroll)
						}, {
							duration: 0.3,
							timing: 'cubic-bezier(.1, .7, .1, 1)'
						})
						.play(options.callback);
				}
				else {
					animit(this._scrollElement[0])
						.queue({
							transform: this._generateTranslationTransform(scroll)
						})
						.play(options.callback);
				}
			},

			_getMinimumScroll: function() {
				var scrollHeight = this._scrollElement[0].getBoundingClientRect().height,
					pageHeight = this._pageElement[0].getBoundingClientRect().height;

				if (scrollHeight > pageHeight) {
					return -(scrollHeight - pageHeight);
				}
				else {
					return 0;
				}

			},

			_createEventListeners: function() {
				var element = this._scrollElement.parent();

				this._hammer = new Hammer(element[0], {
					dragMinDistance: 1,
					dragDistanceCorrection: false
				});

				// Event listeners
				this._bindedOnDrag = this._onDrag.bind(this);
				this._bindedOnDragStart = this._onDragStart.bind(this);
				this._bindedOnDragEnd = this._onDragEnd.bind(this);
				this._bindedOnScroll = this._onScroll.bind(this);

				// Bind listeners
				this._hammer.on('pan', this._bindedOnDrag);
				this._hammer.on('panstart', this._bindedOnDragStart);
				this._hammer.on('panend', this._bindedOnDragEnd);
				element.on('scroll', this._bindedOnScroll);
			},

			_destroyEventListeners: function() {
				var element = this._scrollElement.parent();

				this._hammer.off('pan', this._bindedOnDrag);
				this._hammer.off('panstart', this._bindedOnDragStart);
				this._hammer.off('panend', this._bindedOnDragEnd);
				element.off('scroll', this._bindedOnScroll);
			},

			_destroy: function() {
				this.emit('destroy');
				this._destroyEventListeners();
				this._element = this._scope = this._attrs = null;
			}
		});

		MicroEvent.mixin(HyPullHookView);
		return HyPullHookView;
	}]);
})();

/**
 * hy-pul-hook - v1.0.0 - 2016-03-18
 * @author liukeyu
 * @ngdoc directive
 * @name hy-pul-hook
 * @description
 *   [ch]上下拉刷新.[/ch]
 * @example
 * <hy-pul-hook >
 * </hy-pul-hook>
 */
(function() {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * Pull hook directive.
     */
    module.directive('hyPullHook', ['$onsen', 'HyPullHookView', function($onsen, HyPullHookView) {
        return {
            restrict: 'E',
            replace: false,
            scope: true,
            compile: function(element, attrs) {
                return {
                    pre: function(scope, element, attrs) {
                        var pullHook = new HyPullHookView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, pullHook);
                        $onsen.registerEventHandlers(pullHook, 'changestate destroy');
                        element.data('hy-pull-hook', pullHook);

                        scope.$on('$destroy', function() {
                            pullHook._events = undefined;
                            element.data('hy-pull-hook', undefined);
                            scope = element = attrs = null;
                        });
                    },
                    post: function(scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();
/**
 * Created by ym on 2017/1/12.
 */

(function(){
    'use strict';
    HyRadioGroupDirective.$inject = ["$hyUtil"];
    HyRadioButtonDirective.$inject = ["$hyUtil", "$hyActive"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyRadioGroup', HyRadioGroupDirective)
        .directive('hyRadioButton', HyRadioButtonDirective);

    /**
     * @ngdoc directive
     * @module hymui.components.radioButton
     * @name hyRadioGroup
     *
     * @restrict E
     *
     * @description
     * `<hy-radio-group>` 指令用于对1..n个单选按钮进行分组管理，内部需使用`<hy-radio-button>` 标签.
     *
     * 单选控件默认采用辅助色(accent)，如果需要使用主色调，需要给标签添加`hy-primary` 样式类。
     *
     *
     * @param {string} ng-model 双向绑定的数据
     *
     * @usage
     * <hljs lang="html">
     * <hy-radio-group ng-model="selected">
     *
     *   <hy-radio-button
     *        ng-repeat="d in colorOptions"
     *        ng-value="d.value" aria-label="{{ d.label }}">
     *
     *          {{ d.label }}
     *
     *   </hy-radio-button>
     *
     * </hy-radio-group>
     * </hljs>
     *
     */
    function HyRadioGroupDirective($hyUtil) {
        RadioGroupController.prototype = createRadioGroupControllerProto();

        return {
            restrict: 'E',
            controller: ['$element', RadioGroupController],
            require: ['hyRadioGroup', '?ngModel'],
            link: { pre: linkRadioGroup }
        };

        function linkRadioGroup(scope, element, attr, ctrls) {
            element.addClass('_hy');
            // $hyTheming(element);

            var rgCtrl = ctrls[0];
            var ngModelCtrl = ctrls[1] || $hyUtil.fakeNgModel();

            rgCtrl.init(ngModelCtrl);

            element
                .attr({
                    'role': 'radiogroup',
                    'tabIndex': element.attr('tabindex') || '0'
                });

        }

        function RadioGroupController($element) {
            this._radioButtonRenderFns = [];
            this.$element = $element;
        }

        function createRadioGroupControllerProto() {
            return {
                init: function(ngModelCtrl) {
                    this._ngModelCtrl = ngModelCtrl;
                    this._ngModelCtrl.$render = angular.bind(this, this.render);
                },
                add: function(rbRender) {
                    this._radioButtonRenderFns.push(rbRender);
                },
                remove: function(rbRender) {
                    var index = this._radioButtonRenderFns.indexOf(rbRender);
                    if (index !== -1) {
                        this._radioButtonRenderFns.splice(index, 1);
                    }
                },
                render: function() {
                    this._radioButtonRenderFns.forEach(function(rbRender) {
                        rbRender();
                    });
                },
                setViewValue: function(value, eventType) {
                    this._ngModelCtrl.$setViewValue(value, eventType);
                    this.render();
                },
                getViewValue: function() {
                    return this._ngModelCtrl.$viewValue;
                },
                selectNext: function() {
                    return changeSelectedButton(this.$element, 1);
                },
                selectPrevious: function() {
                    return changeSelectedButton(this.$element, -1);
                },
                setActiveDescendant: function (radioId) {
                    this.$element.attr('aria-activedescendant', radioId);
                },
                isDisabled: function() {
                    return this.$element[0].hasAttribute('disabled');
                }
            };
        }
        /**
         * 根据提供的值改变单选组内的选项，如果没有选中的，则默认选中第一个
         */
        function changeSelectedButton(parent, increment) {
            var buttons = $hyUtil.iterator(parent[0].querySelectorAll('hy-radio-button'), true);

            if (buttons.count()) {
                var validate = function (button) {
                    return !angular.element(button).attr("disabled");
                };

                var selected = parent[0].querySelector('hy-radio-button.hy-checked');
                var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();
                angular.element(target).triggerHandler('click');
            }
        }

    }

    /**
     * @ngdoc directive
     * @module hymui.components.radioButton
     * @name hyRadioButton
     *
     * @restrict E
     *
     * @description
     *
     * `<hy-radio-button>`指令是必须在`<hy-radio-group>` 内部使用的子指令。
     *
     * 该指令虽然类似于`<input type =“radio”ng-model =“”value =“”>`指令，但是额外提供了波纹效果、激活效果和组的支持。
     *
     * 默认带激活效果，如果不需要则添加hy-no-active属性即可
     *
     * @param {string} ngModel 双向绑定的数据
     * @param {string=} ngChange 当用户与输入元素交互而导致值发生变化时需要执行的表达式。
     * @param {string} ngValue 设置在选择时应设置表达式的值。
     * @param {string} hy-no-active 添加该属性则关闭默认的点击激活效果
     * @param {string} value 选择时应设置表达式的值。
     * @param {string=} name 控件在表单中的属性名称。
     * @param {boolean=} hy-ink-ripple-radio 使用波纹效果
     * @param {string=} aria-label 为标签添加可访问性的文本值。 默认为单选组件的文本。
     *
     * @usage
     * <hljs lang="html">
     *
     * <hy-radio-button value="1" aria-label="Label 1">
     *   标签一
     * </hy-radio-button>
     *
     * <hy-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">
     *   绿色
     * </hy-radio-button>
     *
     * </hljs>
     *
     */
    function HyRadioButtonDirective($hyUtil,$hyActive) {

        var CHECKED_CSS = 'hy-checked';

        function getTemplate(element, attrs) {
            var hasInkString = '<div class="hy-container" hy-ink-ripple hy-ink-ripple-checkbox>' +
                '<div class="hy-off"></div>' +
                '<div class="hy-on"></div>' +
                '</div>' +
                '<div ng-transclude class="hy-label"></div>';
            var noInkString = '<div class="hy-container" >' +
                '<div class="hy-off"></div>' +
                '<div class="hy-on"></div>' +
                '</div>' +
                '<div ng-transclude class="hy-label"></div>';

            return attrs.hasOwnProperty('hyInkRippleRadio')
                ? hasInkString
                : noInkString;

        }


        return {
            restrict: 'E',
            require: '^hyRadioGroup',
            transclude: true,
            template: getTemplate,
            link: link
        };

        function link(scope, element, attr, rgCtrl) {
            var lastChecked;

            // $hyTheming(element);
            configureAria(element, scope);
            if(!attr.hasOwnProperty('hyNoActive')){
                $hyActive.attach(element);
            }
            initialize();

            /**
             *
             */
            function initialize() {
                if (!rgCtrl) {
                    throw 'RadioButton: No RadioGroupController could be found.';
                }

                rgCtrl.add(render);
                attr.$observe('value', render);

                element
                    .on('click', listener)
                    .on('$destroy', function() {
                        rgCtrl.remove(render);
                    });
            }

            /**
             *
             */
            function listener(ev) {
                if (element[0].hasAttribute('disabled') || rgCtrl.isDisabled()) return;

                scope.$apply(function() {
                    rgCtrl.setViewValue(attr.value, ev && ev.type);
                });
            }

            /**
             *  为单选按钮添加或删除`.hy-checked`类
             */
            function render() {
                var checked = (rgCtrl.getViewValue() == attr.value);
                if (checked === lastChecked) {
                    return;
                }

                lastChecked = checked;
                element.attr('aria-checked', checked);

                if (checked) {
                    markParentAsChecked(true);
                    element.addClass(CHECKED_CSS);

                    rgCtrl.setActiveDescendant(element.attr('id'));

                } else {
                    markParentAsChecked(false);
                    element.removeClass(CHECKED_CSS);
                }

                function markParentAsChecked(addClass ) {
                    if ( element.parent()[0].nodeName != "HY-RADIO-GROUP") {
                        element.parent()[ !!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);
                    }

                }
            }

            /**
             * 为每一个单选按钮指定ARIA属性
             */
            function configureAria( element, scope ){
                scope.ariaId = buildAriaID();

                element.attr({
                    'id' :  scope.ariaId,
                    'role' : 'radio',
                    'aria-checked' : 'false'
                });

                // $hyAria.expectWithText(element, 'aria-label');

                /**
                 * 生成唯一ID，如果已指定则采用指定的ID，如果没有自动生成一个
                 * @returns {*|string}
                 */
                function buildAriaID() {
                    return attr.id || ( 'radio' + "_" + $hyUtil.nextUid() );
                }
            }
        }
    }



})();

/**
 * Created by Administrator on 2016/10/18.
 */
(function(){
    'use strict';
    var module = angular.module('onsen');

    module.factory('hyRefreshView', ['$onsen', '$parse', function($onsen, $parse) {

        var hyRefreshView = Class.extend({

            STATE_INITIAL: 'initial',
            STATE_PREACTION: 'preaction',
            STATE_ACTION: 'action',

            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function(scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;

                this._scrollElement = this._createScrollElement();
                this._pageElement = this._scrollElement.parent();

                if (!this._pageElement.hasClass('page__content') && !this._pageElement.hasClass('ons-scroller__content')) {
                    throw new Error('<ons-pull-hook> must be a direct descendant of an <ons-page> or an <ons-scroller> element.');
                }

                this._currentTranslation = 0;

                this._createEventListeners();
                this._setState(this.STATE_INITIAL, true);
                this._setStyle();

                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _createScrollElement: function() {
                var scrollElement = angular.element('<div>')
                    .addClass('scroll');

                var pageElement = this._element.parent(),
                    children = pageElement.children();

                pageElement.append(scrollElement);
                scrollElement.append(children);

                return scrollElement;
            },

            _setStyle: function() {
                var h = this._getHeight();

                this._element.css({
                    top: '-' + h + 'px',
                    height: h + 'px',
                    lineHeight: h + 'px'
                });
            },

            _onScroll: function(event) {
                var el = this._pageElement[0];

                if (el.scrollTop < 0) {
                    el.scrollTop = 0;
                }
            },

            _generateTranslationTransform: function(scroll) {
                return 'translate3d(0px, ' + scroll + 'px, 0px)';
            },

            _onDrag: function(event) {
                if (this.isDisabled()) {
                    return;
                }

                // Ignore when dragging left and right.
                if (event.direction === Hammer.DIRECTION_LEFT || event.direction === Hammer.DIRECTION_RIGHT) {
                    return;
                }

                // Hack to make it work on Android 4.4 WebView. Scrolls manually near the top of the page so
                // there will be no inertial scroll when scrolling down. Allowing default scrolling will
                // kill all 'touchmove' events.
                var el = this._pageElement[0];
                el.scrollTop = this._startScroll - event.deltaY;
                if (el.scrollTop < window.innerHeight && event.direction !== Hammer.DIRECTION_UP) {
                    event.preventDefault();
                }

                if (this._currentTranslation === 0 && this._getCurrentScroll() === 0) {
                    this._transitionDragLength = event.deltaY;

                    //var direction = event.interimDirection;
                    var direction = event.direction;
                    if (direction === Hammer.DIRECTION_DOWN) {
                        this._transitionDragLength -= 1;
                    }
                    else {
                        this._transitionDragLength += 1;
                    }
                }

                var scroll = event.deltaY - this._startScroll;

                scroll = Math.max(scroll, 0);


                if (this._thresholdHeightEnabled() && scroll >= this._getThresholdHeight()) {

                    this._hammer.stop();

                    setImmediate(function() {
                        this._setState(this.STATE_ACTION);
                        this._translateTo(this._getHeight(), {animate: true});

                        this._waitForAction(this._onDone.bind(this));
                    }.bind(this));
                }
                else if (scroll >= this._getHeight()) {
                    this._setState(this.STATE_PREACTION);
                }
                else {
                    this._setState(this.STATE_INITIAL);
                }

                event.srcEvent.stopPropagation();
                this._translateTo(scroll);
                this.emit('scrollChange',scroll);
            },

            _onDragStart: function(event) {
                if (this.isDisabled()) {
                    return;
                }

                this._startScroll = this._getCurrentScroll();
            },

            _onDragEnd: function(event) {
                if (this.isDisabled()) {
                    return;
                }

                if (this._currentTranslation > 0) {
                    var scroll = this._currentTranslation;

                    if (scroll > this._getHeight()) {
                        this._setState(this.STATE_ACTION);

                        this._translateTo(this._getHeight(), {animate: true});

                        this._waitForAction(this._onDone.bind(this));
                    }
                    else {
                        this._translateTo(0, {animate: true});
                    }
                }
            },

            _waitForAction: function(done) {
                if (this._attrs.ngAction) {
                    this._scope.$eval(this._attrs.ngAction, {$done: done});
                }
                else if (this._attrs.onAction) {
                    /*jshint evil:true */
                    eval(this._attrs.onAction);
                }
                else {
                    done();
                }
            },

            _onDone: function(done) {
                // Check if the pull hook still exists.
                if (this._element) {
                    this._translateTo(0, {animate: true});
                    this._setState(this.STATE_INITIAL);
                }
            },

            _getHeight: function() {
                return parseInt(this._element[0].getAttribute('height') || '64', 10);
            },

            setHeight: function(height) {
                this._element[0].setAttribute('height', height + 'px');

                this._setStyle();
            },

            setThresholdHeight: function(thresholdHeight) {
                this._element[0].setAttribute('threshold-height', thresholdHeight + 'px');
            },

            _getThresholdHeight: function() {
                return parseInt(this._element[0].getAttribute('threshold-height') || '96', 10);
            },

            _thresholdHeightEnabled: function() {
                var th = this._getThresholdHeight();
                return th > 0 && th >= this._getHeight();
            },

            _setState: function(state, noEvent) {
                console.log("state change = "+state);

                var oldState = this._getState();

                this.emit('stateChange',state);
                this._scope.$evalAsync(function() {
                    this._element[0].setAttribute('state', state);

                    if (!noEvent && oldState !== this._getState()) {
                        this.emit('changestate', {
                            state: state,
                            pullHook: this
                        });
                    }
                }.bind(this));
            },

            _getState: function() {
                return this._element[0].getAttribute('state');
            },

            getCurrentState: function() {
                return this._getState();
            },

            _getCurrentScroll: function() {
                return this._pageElement[0].scrollTop;
            },

            isDisabled: function() {
                return this._element[0].hasAttribute('disabled');
            },

            setDisabled: function(disabled) {
                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                }
                else {
                    this._element[0].removeAttribute('disabled');
                }
            },

            _translateTo: function(scroll, options) {
                options = options || {};

                this._currentTranslation = scroll;

                if (options.animate) {
                    animit(this._scrollElement[0])
                        .queue({
                            transform: this._generateTranslationTransform(scroll)
                        }, {
                            duration: 0.3,
                            timing: 'cubic-bezier(.1, .7, .1, 1)'
                        })
                        .play(options.callback);
                }
                else {
                    animit(this._scrollElement[0])
                        .queue({
                            transform: this._generateTranslationTransform(scroll)
                        })
                        .play(options.callback);
                }
            },

            _getMinimumScroll: function() {
                var scrollHeight = this._scrollElement[0].getBoundingClientRect().height,
                    pageHeight = this._pageElement[0].getBoundingClientRect().height;

                if (scrollHeight > pageHeight) {
                    return -(scrollHeight - pageHeight);
                }
                else {
                    return 0;
                }

            },

            _createEventListeners: function() {
                var element = this._scrollElement.parent();

                this._hammer = new Hammer(element[0], {
                    dragMinDistance: 1,
                    dragDistanceCorrection: false
                });

                // Event listeners
                this._bindedOnDrag = this._onDrag.bind(this);
                this._bindedOnDragStart = this._onDragStart.bind(this);
                this._bindedOnDragEnd = this._onDragEnd.bind(this);
                this._bindedOnScroll = this._onScroll.bind(this);

                // Bind listeners
                this._hammer.on('pan', this._bindedOnDrag);
                this._hammer.on('panstart', this._bindedOnDragStart);
                this._hammer.on('panend', this._bindedOnDragEnd);
                element.on('scroll', this._bindedOnScroll);
            },

            _destroyEventListeners: function() {
                var element = this._scrollElement.parent();

                this._hammer.off('pan', this._bindedOnDrag);
                this._hammer.off('panstart', this._bindedOnDragStart);
                this._hammer.off('panend', this._bindedOnDragEnd);
                element.off('scroll', this._bindedOnScroll);
            },

            _destroy: function() {
                this.emit('destroy');
                this._destroyEventListeners();
                this._element = this._scope = this._attrs = null;
            }
        });

        MicroEvent.mixin(hyRefreshView);
        return hyRefreshView;
    }]);
})();

(function() {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * Pull hook directive.
     */
    module.directive('hyRefresh', ['$onsen', 'hyRefreshView', function($onsen, hyRefreshView) {
        return {
            restrict: 'E',
            replace: false,
            scope: true,

            compile: function(element, attrs) {
                return {
                    pre: function(scope, element, attrs) {
                        var pullHook = new hyRefreshView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, pullHook);
                        $onsen.registerEventHandlers(pullHook, 'changestate destroy');
                        element.data('hy-pull-hook', pullHook);

                        scope.$on('$destroy', function() {
                            pullHook._events = undefined;
                            element.data('hy-pull-hook', undefined);
                            scope = element = attrs = null;
                        });
                    },
                    post: function(scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();
/**
 * Created by MageeYang on 2016/7/15.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * @ngdoc attribute
     * @name hyRepeatFinish repeat监听
     * @module haiyiMobile
     * @description 当repeat渲染结束后，触发对应的监听事件
     * @usage
     */

    module.directive('hyRepeatFinish',function(){
        return {
            link: function(scope,element,attr){
                var event = attr['hyRepeatFinish']?attr['hyRepeatFinish']:"rf";
                if(scope.$last == true){
                    //向父控制器传递事件
                    scope.$emit(event+'-to-parent');
                    //向子控制器传递事件
                    scope.$broadcast(event+'-to-child');
                }
            }
        }
    })
})();
/*
 * author:chenchuanyin
 * hyaScoreNum:评分组件图片个数
 * hyaScoreFontSrc:评分组件字体图标来源
 * hyaScoreImgSrc:评分组件自定义图片来源
 * hyaScoreActiveImgSrc:评分组件自定义图片选中显示图片来源
 * hyaScoreFontClass:用户对字体图标添加的自定义样式
 * hyaScoreImgClass:用户对自定义图标添加的自定义样式
 * hyaFontActiveColor:点击字体图标以后评分组件图片的颜色(默认为红色)
 * hyaActiveNum:评分组件默认的选中个数
 * hyaOnlyShow:评分组件只是显示，不能进行操作
 * hyaCallBack:单击事件以后的回调函数
 */


/**
 * @ngdoc element+attribute
 * @name hyScore 评分组件
 * @module haiyiMobile
 * @author chenchuanyin
 * @modify mageeyang 2016-08-09  该组件存在设计问题，对其简单的修改
 * 使参数值双向绑定，取消回调函数，并监听数值的变化
 * @description
 * hyaScoreNum:评分组件图片个数
 * hyaScoreFontSrc:评分组件字体图标来源
 * hyaScoreImgSrc:评分组件自定义图片来源
 * hyaScoreActiveImgSrc:评分组件自定义图片选中显示图片来源
 * hyaScoreFontClass:用户对字体图标添加的自定义样式
 * hyaScoreImgClass:用户对自定义图标添加的自定义样式
 * hyaFontActiveColor:点击字体图标以后评分组件图片的颜色(默认为红色)
 * hyaActiveNum:评分组件默认的选中个数
 * disabled:评分组件只是显示，不能进行操作
 */

(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.directive('hyScore',['$onsen',function($onsen){
		return {
			restrict : 'E',
			scope :{
				hyaScoreNum:"@",
				hyaScoreFontSrc:"@",
				hyaScoreImgSrc:"@",
				hyaScoreActiveImgSrc:"@",
				hyaScoreFontClass:"@",
                hyaScoreActiveFontSrc:"@",
				hyaScoreImgClass:"@",
				hyaFontActiveColor:"@",
				hyaActiveNum:"=",
				hyaOnlyShow:"@"
			},
			template:getTemplate,
			link : function(scope, element, attrs) {
				//初始化评分的图片个数，默认是5个
				scope.hyaScoreNum = scope.hyaScoreNum || "5";
				scope.scoreList = [];
				for(var i = 0; i < scope.hyaScoreNum; i++){
					scope.scoreList.push(i);
				};
				scope.hyaActiveNum = scope.hyaActiveNum || 0;

				scope.hyaScoreFontSrc = scope.hyaScoreFontSrc || "star";
                scope.hyaScoreActiveFontSrc = scope.hyaScoreActiveFontSrc || "star";

				scope.hyaScoreActiveImgSrc = scope.hyaScoreActiveImgSrc || scope.hyaScoreImgSrc;
				scope.hyaScoreFontClass = scope.hyaScoreFontClass || "11";
				scope.hyaFontActiveColor = scope.hyaFontActiveColor || "fontActive";

				scope.selectScore = function (index){
					if(!angular.isDefined(attrs.disabled)){
						scope.hyaActiveNum = index + 1;
					}
				};
				scope.$watch('hyaActiveNum',function(){
					scope.scoreList = [];
					for(var i = 0; i < scope.hyaScoreNum; i++){
						scope.scoreList.push(i);
					};
				})



			}
		};

		/**
		 * 获取不同的模板数据
		 * @param element
		 * @param attr
		 * @returns {*}
		 */
		function getTemplate(element, attr) {
			if (angular.isDefined(attr.hyaScoreImgSrc)) {
				return '<div class="hy-score-div">\
						<img  ng-repeat="score in scoreList" ng-src = "{{(score<hyaActiveNum)? hyaScoreActiveImgSrc :hyaScoreImgSrc}}"\
										  ng-click = "selectScore(score)" ng-class = "{ {{hyaScoreImgClass}}:true}" class = "imgStyle"/>\
						</div>';
			} else {

				return '<div class="hy-score-div">\
						<ons-icon  ng-repeat="score in scoreList" icon="{{(score<hyaActiveNum)? hyaScoreActiveFontSrc :hyaScoreFontSrc}}" ng-click = "selectScore(score)" \
						  ng-class = "{ {{hyaFontActiveColor}}:score<hyaActiveNum,{{hyaScoreFontClass}}:hyaScoreFontClass}" class = "fontStyle">\
						</ons-icon>\
			  </div>';


			}
		}
	}
	]);
})();



/**
 * Created by Administrator on 2016/8/12.
 */
/**
 * @ngdoc element
 * @name hyScroller 列表滚动组件
 * @module haiyiMobile
 * @description 用于对多项数据的列表滚动选择组件
 * hya-data        要展现的列表数据
 * hya-value   传递的选择数值
 * item-height      列表中每项的高度，默认是50px，如果修改的话需要同时修改hy-scroller-item及其他css中height的参数值，暂时没有提供自动处理的逻辑
 * @usage <hy-scroller hya-data="yearData" hya-value="selectValue" ></hy-scroller>
 */

(function () {
    "use strict";
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * 动画处理服务
     */
    module.service('hyAnimate', [function () {
        var hyAnimate = {};

        hyAnimate.time = Date.now || function () {
                return +new Date()
            };

        hyAnimate.running = {};
        hyAnimate.counter = 1;
        hyAnimate.desiredFrames = 60;   //每秒帧数,默认是60
        hyAnimate.millisecondsPerSecond = 1000;

        hyAnimate.requestAnimationFrame = (function () {
            var requestFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;
            return function (callback, root) {
                requestFrame(callback, root);
            }
        })();

        /**
         * 根据ID停止对应的动画任务
         * @param id
         * @returns {boolean}
         */
        hyAnimate.stop = function (id) {
            var cleared = hyAnimate.running[id] != null;
            if (cleared) {
                hyAnimate.running[id] = null;
            }
            return cleared;
        };

        /**
         * 根据ID获取动画是否正在进行
         * @param id
         * @returns {boolean}
         */
        hyAnimate.isRunning = function (id) {
            return hyAnimate.running[id] != null;
        };


        /**
         * 启动动画
         * @param stepCallback  每一帧动画的回调函数
         * @param verifyCallback    验证回调函数
         * @param completedCallback 动画完成的回调函数
         * @param duration  动画时长
         * @param easingMethod  动画缓动方式算法
         * @param root  操作的根节点
         * @returns {number}
         */
        hyAnimate.start = function (stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {
            var start = hyAnimate.time();
            var lastFrame = start;
            var percent = 0;
            var dropCounter = 0;
            var id = hyAnimate.counter++;

            if (!root) {
                root = document.body;
            }

            //每隔20个新动画则自动运行
            if (id % 20 === 0) {
                var newRunning = {};
                for (var usedId in hyAnimate.running) {
                    newRunning[usedId] = true;
                }
                hyAnimate.running = newRunning;
            }

            // 内部步骤方法，该方法每隔几毫秒运行一次
            var step = function (virtual) {
                var render = virtual !== true;
                var now = hyAnimate.time();

                // 执行下一个动画步骤之前进行验证执行
                if (!hyAnimate.running[id] || (verifyCallback && !verifyCallback(id))) {
                    hyAnimate.running[id] = null;
                    completedCallback && completedCallback(hyAnimate.desiredFrames - (dropCounter / ((now - start) / hyAnimate.millisecondsPerSecond)), id, false);
                    return;
                }

                // 如果动画时间超过16.7则内部再次进行帧数细分
                if (render) {
                    var droppedFrames = Math.round((now - lastFrame) / (hyAnimate.millisecondsPerSecond / hyAnimate.desiredFrames)) - 1;
                    for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
                        step(true);
                        dropCounter++;
                    }
                }

                // 计算百分比
                if (duration) {
                    percent = (now - start) / duration;
                    if (percent > 1) {
                        percent = 1;
                    }
                }

                // 执行每一帧的动画回调函数
                var value = easingMethod ? easingMethod(percent) : percent;
                if ((stepCallback(value, now, render) === false || percent === 1) && render) {
                    hyAnimate.running[id] = null;
                    completedCallback && completedCallback(hyAnimate.desiredFrames - (dropCounter / ((now - start) / hyAnimate.millisecondsPerSecond)), id, percent === 1 || duration == null);
                } else if (render) {
                    lastFrame = now;
                    hyAnimate.requestAnimationFrame(step, root);
                }
            };

            // 设置当前动画运行
            hyAnimate.running[id] = true;
            // 执行第一帧动画
            hyAnimate.requestAnimationFrame(step, root);
            // 返回动画的ID值
            return id;
        };

        return hyAnimate;
    }]);

    module.factory('hyScrollView', ['$onsen', '$q', '$hyUtil', 'hyAnimate', function ($onsen, $q, $hyUtil, hyAnimate) {
        var hyScrollerView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyUtil = $hyUtil;


                var self = this;
                this.__minScrollTop = 0;
                this.__maxScrollTop = 0;
                this.__isDecelerating = false;
                this.__isAnimating = false;
                this.__isTracking = false;
                this.__isDragging = false;

                this._scope.hyaData = this._scope.hyaData || [];    //默认数据为空
                this._scope.itemHeight = this._scope.itemHeight || 50;  //默认项目高度是50px
                this._scope.itemSize = this._scope.itemSize || 5;  //默认项目数量是5
                this._scope.activeClass = this._scope.activeClass || '';  //默认项目数量是5

                this._scope.totalHeight = this._scope.itemHeight * this._scope.itemSize;
                this._scope.middleHeight = this._scope.itemHeight * (this._scope.itemSize - 1) / 2;

                this._scrollerComponent = angular.element(this._element[0].querySelector('.hy-scroller-component'));

                this._scrollerContent = angular.element(this._element[0].querySelector('.hy-scroller-content'));

                this.__setDimensions(this._scrollerComponent[0].clientHeight);

                this._scope.$watch('hyaData.length',function(){
                    self.__setDimensions(self._scrollerComponent[0].clientHeight);
                });
                this._scope.$watch('hyaData',function(){
                    self.__setDimensions(self._scrollerComponent[0].clientHeight);
                });


                this._scope.getItemDisplay = angular.bind(this,this._getItemDisplay);

                this._scope.selectIndex = 0;

                this.__scrollTop = 0;


                //对传递过来的数组进行分类处理，如果是object数组，则去判断value属性的值
                //显示的文本是text属性值的值
                this._scope.$watch('hyaValue', function () {

                    for (var j = 0; j < self._scope.hyaData.length; j++) {

                        if ($hyUtil.isString(self._scope.hyaData[j]) || $hyUtil.isNumber(self._scope.hyaData[j])) {
                            if (self._scope.hyaData[j] == self._scope.hyaValue) {
                                self._scope.selectIndex = j;
                            }
                        } else {
                            if (self._scope.hyaData[j].value == self._scope.hyaValue) {
                                self._scope.selectIndex = j;
                            }
                        }
                    }
                    self.__scrollTop = self.__minScrollTop + self._scope.selectIndex * self.__itemHeight;
                    self.scrollTo(self.__scrollTop);

                });

                this._scope.$watch('selectIndex', function () {
                    self.__scrollTop = self.__minScrollTop + self._scope.selectIndex * self.__itemHeight;
                    self.scrollTo(self.__scrollTop);
                });

                //添加手势触摸和鼠标滑动事件
                this._addEventListener();
            },
            /**
             * 设置空间的内部尺寸
             * @param clientHeight  控件的高度
             * @private
             */
            __setDimensions: function (clientHeight) {

                this.__clientHeight = clientHeight;
                this.__itemHeight = this._scope.itemHeight;
                var totalItemCount = this._scope.hyaData.length;
                //计算控件内部可显示的元素个数
                var clientItemCount = Math.round(this.__clientHeight / this.__itemHeight);

                this.__minScrollTop = -this.__itemHeight * (clientItemCount / 2);
                this.__maxScrollTop = this.__minScrollTop + totalItemCount * this.__itemHeight - 0.1;

            },

            /**
             * 添加鼠标滑动或手势触摸事件
             * @private
             */
            _addEventListener: function () {

                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().move, angular.bind(this, handleTouchMove));
                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));

                function handleTouchStart(e) {
                    e.preventDefault();
                    var touches = e.touches;
                    var timeStamp = e.timeStamp;
                    if (touches.length == null) {
                        throw new Error('无效的触摸列表: ' + touches);
                    }
                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }


                    if (this.__isDecelerating) {
                        hyAnimate.stop(this.__isDecelerating);
                        this.__isDecelerating = false;
                    }

                    if (this.__isAnimating) {
                        hyAnimate.stop(this.__isAnimating);
                        this.__isAnimating = false;
                    }

                    // 当触摸多个点时取前两个点的中间值
                    var currentTouchTop;
                    var isSingleTouch = touches.length === 1;
                    if (isSingleTouch) {
                        currentTouchTop = touches[0].pageY;
                    } else {
                        currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
                    }

                    this.__initialTouchTop = currentTouchTop;
                    this.__lastTouchTop = currentTouchTop;
                    this.__lastTouchMove = timeStamp;
                    this.__enableScrollY = !isSingleTouch;
                    this.__isTracking = true;
                    this.__didDecelerationComplete = false;
                    this.__isDragging = !isSingleTouch;
                    this.__isSingleTouch = isSingleTouch;
                    this.__positions = [];

                }

                function handleTouchMove(e) {
                    var touches = e.touches;
                    var timeStamp = e.timeStamp;
                    if (touches.length == null) {
                        throw new Error('无效的触摸列表: ' + touches);
                    }
                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }

                    if (!this.__isTracking) {
                        return;
                    }

                    var currentTouchTop;

                    // 当触摸多个点时取前两个点的中间值
                    if (touches.length === 2) {
                        currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
                    } else {
                        currentTouchTop = touches[0].pageY;
                    }

                    var positions = this.__positions;

                    // 是否进入拖拽模式
                    if (this.__isDragging) {
                        var moveY = currentTouchTop - this.__lastTouchTop;
                        var scrollTop = this.__scrollTop;

                        if (this.__enableScrollY) {
                            scrollTop -= moveY;

                            var minScrollTop = this.__minScrollTop;
                            var maxScrollTop = this.__maxScrollTop;

                            if (scrollTop > maxScrollTop || scrollTop < minScrollTop) {
                                //判断是否滚动到上下边缘
                                if (scrollTop > maxScrollTop) {
                                    scrollTop = maxScrollTop;
                                } else {
                                    scrollTop = minScrollTop;
                                }
                            }
                        }

                        if (positions.length > 40) {
                            positions.splice(0, 20);
                        }

                        positions.push(scrollTop, timeStamp);
                        //滚动到位置
                        this.__publish(scrollTop);

                    } else {
                        //判断当前移动距离是否大于最小追踪距离5，如果大则启动拖动逻辑
                        var minimumTrackingForScroll = 0;
                        var minimumTrackingForDrag = 5;

                        var distanceY = Math.abs(currentTouchTop - this.__initialTouchTop);

                        this.__enableScrollY = distanceY >= minimumTrackingForScroll;

                        positions.push(this.__scrollTop, timeStamp);

                        this.__isDragging = this.__enableScrollY && (distanceY >= minimumTrackingForDrag);

                    }

                    // 更新最后的点击距离和时间戳
                    this.__lastTouchTop = currentTouchTop;
                    this.__lastTouchMove = timeStamp;

                }

                function handleTouchEnd(e) {
                    var self = this;
                    var timeStamp = e.timeStamp;

                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }

                    if (!this.__isTracking) {
                        return;
                    }
                    this.__isTracking = false;

                    // 判断拖动标记。同时检测手指移动速度是否够快，切换到加速的动画。
                    if (this.__isDragging) {
                        this.__isDragging = false;

                        // 开始减速
                        if (this.__isSingleTouch && (timeStamp - this.__lastTouchMove) <= 100) {

                            var positions = this.__positions;
                            var endPos = positions.length - 1;
                            var startPos = endPos;

                            // 获取到100毫秒前的数据
                            for (var i = endPos; i > 0 && positions[i] > (this.__lastTouchMove - 100); i -= 2) {
                                startPos = i;
                            }

                            // 如果启动和停止的位置是一样的，则不进行减速处理
                            if (startPos !== endPos) {
                                // 计算这两个点之间的相对运动
                                var timeOffset = positions[endPos] - positions[startPos];   //时间差
                                var movedTop = this.__scrollTop - positions[startPos - 1];    //移动距离

                                // 计算出减速速度
                                this.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

                                // 最小的减速速度是4
                                var minVelocityToStartDeceleration = 4;

                                // 判断我们是否有足够的速度进行减速处理
                                if (Math.abs(this.__decelerationVelocityY) > minVelocityToStartDeceleration) {
                                    this.__startDeceleration(timeStamp);
                                }
                            }
                        }
                    }

                    if (!this.__isDecelerating) {
                        self.scrollTo(self.__scrollTop);
                    }
                    this.__positions.length = 0;

                }
            },
            /**
             * 开始减速处理
             * @private
             */
            __startDeceleration: function () {

                this.__minDecelerationScrollTop = this.__minScrollTop;
                this.__maxDecelerationScrollTop = this.__maxScrollTop;

                var self = this;

                var step = function (percent, now, render) {
                    self.__stepThroughDeceleration(render);
                };

                // 设置最小的速度是0.5
                var minVelocityToKeepDecelerating = 0.5;

                // 判断是否继续执行动画
                var verify = function () {
                    var shouldContinue = Math.abs(self.__decelerationVelocityY) >= minVelocityToKeepDecelerating;
                    if (!shouldContinue) {
                        self.__didDecelerationComplete = true;
                    }
                    return shouldContinue;
                };

                var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
                    self.__isDecelerating = false;
                    if (self.__scrollTop <= self.__minScrollTop || self.__scrollTop >= self.__maxScrollTop) {
                        self.scrollTo(self.__scrollTop);
                        return
                    }
                    if (self.__didDecelerationComplete) {
                        self.__scrollingComplete();
                    }
                };

                // 开始减速动画
                self.__isDecelerating = hyAnimate.start(step, verify, completed);
            },
            __stepThroughDeceleration: function () {
                var self = this;

                var scrollTop = self.__scrollTop + self.__decelerationVelocityY;

                var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
                if (scrollTopFixed !== scrollTop) {
                    scrollTop = scrollTopFixed;
                    self.__decelerationVelocityY = 0;
                }

                if (Math.abs(self.__decelerationVelocityY) <= 1) {
                    if (Math.abs(scrollTop % self.__itemHeight) < 1) {
                        self.__decelerationVelocityY = 0;
                    }
                } else {
                    self.__decelerationVelocityY *= 0.95;
                }

                self.__publish(scrollTop);
            },
            /**
             * 滚动到指定的位置
             * @param top
             * @param animationDuration
             * @private
             */
            __publish: function (top, animationDuration) {
                var self = this;
                // 判断当前是否有动画在进行中
                var wasAnimating = this.__isAnimating;
                if (wasAnimating) {
                    hyAnimate.stop(wasAnimating);
                    this.__isAnimating = false;
                }

                //缓动模式计算方法，逐渐减速到0
                function easeOutCubic(pos) {
                    return (Math.pow((pos - 1), 3) + 1);
                }

                //缓动模式计算方法，有0逐渐加速，然后在缓慢减速到0
                function easeInOutCubic(pos) {
                    if ((pos /= 0.5) < 1) {
                        return 0.5 * Math.pow(pos, 3);
                    }
                    return 0.5 * (Math.pow((pos - 2), 3) + 2);
                }

                if (animationDuration) {

                    var oldTop = this.__scrollTop;
                    var diffTop = top - oldTop;

                    var step = function (percent, now, render) {
                        self.__scrollTop = oldTop + (diffTop * percent);
                    };

                    var verify = function (id) {
                        return self.__isAnimating === id;
                    };

                    var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
                        if (animationId === self.__isAnimating) {
                            self.__isAnimating = false;
                        }
                        if (self.__didDecelerationComplete || wasFinished) {
                            self.__scrollingComplete();
                        }
                    };

                    self.__isAnimating = hyAnimate.start(step, verify, completed, animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);
                } else {
                    this.__scrollTop = top;
                    this.__scrollTo(top);

                }
            },
            /**
             * 设置内部元素的滚动位置
             * @param top
             * @private
             */
            __scrollTo: function (top) {
                this._scrollerContent.css('transform', 'translate3d(0, ' + (-top) + 'px, 0)');
                this._scrollerContent.css('webkitTransform', 'translate3d(0, ' + (-top) + 'px, 0)');
            },
            scrollTo: function (top, animate) {
                var self = this;
                animate = (animate === undefined) ? true : animate;

                if (this.__isDecelerating) {
                    hyAnimate.stop(this.__isDecelerating);
                    this.__isDecelerating = false;
                }

                top = Math.round(top / this.__itemHeight) * this.__itemHeight;
                top = Math.max(Math.min(this.__maxScrollTop, top), this.__minScrollTop);


                self.__publish(top);
                self.__scrollingComplete();
            },
            __scrollingComplete: function () {

                var index = Math.round((this.__scrollTop - this.__minScrollTop - this.__itemHeight / 2) / this.__itemHeight);
                if (index == undefined || index == null) {
                    index = this._scope.selectIndex;
                }



                if(this._scope.hyaData.length>0){
                    if ($hyUtil.isString(this._scope.hyaData[index]) || $hyUtil.isNumber(this._scope.hyaData[index])) {
                        this._scope.hyaValue = this._scope.hyaData[index];
                    } else {
                        this._scope.hyaValue = this._scope.hyaData[index].value;
                    }
                    this._scope.$evalAsync();
                    if (this._scope.selectValue) {
                        this._scope.selectValue({data: this._scope.hyaData[index]});
                    }
                }
            },
            _getItemDisplay:function(item){
                if($hyUtil.isString(item) || $hyUtil.isNumber(item)){
                    return item;
                }else{
                    return item.text;
                }
            }
        });
        MicroEvent.mixin(hyScrollerView);
        return hyScrollerView;
    }]);


    module.directive('hyScroller', ['$onsen', 'hyScrollView', function ($onsen, hyScrollView) {
        return {
            restrict: 'E',
            scope: {
                hyaData: '=hyaData', //传递过来的列表数据
                hyaValue: '=',//传递的值,
                itemHeight: '@', //列表项目的高度，默认是34px
                itemSize:'@',//一屏显示的项目数量
                activeClass:'@',//当前选中日期样式
                selectValue:'&' //值改变的回调函数
            },
            template: getTemplate,
            link: function (scope, element, attrs) {
                var hyScrollerView = new hyScrollView(scope, element, attrs);
                $onsen.declareVarAttribute(attrs, hyScrollerView);

                element.data('hy-scroller', hyScrollerView);

                scope.$on('destory', function () {
                    hyScrollerView._events = undefined;
                    $onsen.removeModifierMethods(hyScrollerView);
                    element.data('hy-scroller', undefined);
                    element = null;
                });

                $onsen.fireComponentEvent(element[0], 'init');

            }
        };

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            return '<div class="hy-scroller-component" style="height:{{totalHeight}}px;">' +
                '<div class="hy-scroller-mask" ></div>' +
                '<div class="hy-scroller-indicator" style="height:{{itemHeight}}px;top:{{middleHeight}}px;"></div>' +
                '<div class="hy-scroller-content"><div ng-class="{\'{{activeClass}}\':selectIndex==$index}" class="hy-scroller-item" style="height:{{itemHeight}}px;line-height:{{itemHeight}}px;" ng-repeat=" item in hyaData" data-value="{{item}}">{{getItemDisplay(item)}}</div></div>' +
                '</div>';
        }
    }]);


})();
/**
 * Created by mageeyang on 2017/3/29.
 */
/**
 * @ngdoc element
 * @name hyScrollerDeg 列表带角度的滚动组件
 * @module haiyiMobile
 * @description 用于对多项数据的列表带角度的滚动选择组件，该组件依赖使用hyAnimate动画处理服务
 * hya-data        要展现的列表数据
 * hya-value   传递的选择数值
 * item-height      列表中每项的高度，默认是50px，如果修改的话需要同时修改hy-scroller-item及其他css中height的参数值，暂时没有提供自动处理的逻辑
 * @usage <hy-scroller-deg hya-data="yearData" hya-value="selectValue" ></hy-scroller-deg>
 */

(function () {
    "use strict";
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    module.factory('HyScrollDegView', ['$onsen', '$q', '$hyUtil', 'hyAnimate', function ($onsen, $q, $hyUtil, hyAnimate) {
        var hyScrollerDegView = Class.extend({

            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._$hyUtil = $hyUtil;


                var self = this;
                this.__minScrollTop = 0;
                this.__maxScrollTop = 0;
                this.__isDecelerating = false;
                this.__isAnimating = false;
                this.__isTracking = false;
                this.__isDragging = false;


                this._scope.hyaData = this._scope.hyaData || [];    //默认数据为空

                this._scrollerComponent = angular.element(this._element[0].querySelector('.hy-scroller-deg-component'));

                this._scrollerContent = angular.element(this._element[0].querySelector('.hy-scroller-deg-inner'));

                this._scope.height = this._scrollerComponent[0].clientHeight;

                this._scope.itemHeight = this._scope.itemHeight || 36;  //默认项目高度是36px
                this.__itemHeight = this._scope.itemHeight;


                this._initTopTran = (this._scope.height - this._scope.itemHeight) / 2;
                this._scope.innerTrans = (this._scope.height - this._scope.itemHeight) / 2;
                this.__scrollTo(this._scope.innerTrans);

                // this.__setDimensions(this._scrollerComponent[0].clientHeight);
                //
                // this._scope.$watch('hyaData.length',function(){
                //     self.__setDimensions(self._scrollerComponent[0].clientHeight);
                // });

                this._scope.diffNum = 0;
                this._scope.selectIndex = 0;

                this.__scrollTop = 0;

                this._scope.$watch('hyaData', function () {
                    self._initTopTran = (self._scope.height - self._scope.itemHeight) / 2;
                    self._scope.innerTrans = (self._scope.height - self._scope.itemHeight) / 2;
                    self.__minScrollTop = self._scope.innerTrans - ((self._scope.hyaData.length - 1) * self._scope.itemHeight);
                    self.__maxScrollTop = self._scope.innerTrans;
                    // self._scope.diffNum = 0;
                    self._scope.selectIndex = 0;
                    self._scope.$evalAsync();
                    self.__scrollTo(self._scope.innerTrans);
                });

                this._scope.$watch('hyaValue', function () {
                    for (var j = 0; j < self._scope.hyaData.length; j++) {
                        // 定位该元素位置
                        if ($hyUtil.isString(self._scope.hyaData[j]) || $hyUtil.isNumber(self._scope.hyaData[j])) {
                            if (self._scope.hyaData[j] == self._scope.hyaValue) {
                                self._scope.selectIndex = j;
                            }
                        } else {
                            if (self._scope.hyaData[j].value == self._scope.hyaValue) {
                                self._scope.selectIndex = j;
                            }
                        }
                    }
                    self._scope.innerTrans = self._initTopTran - (self._scope.selectIndex  * self.__itemHeight );
                    self.__scrollTo(self._scope.innerTrans);
                    self._scope.$evalAsync();
                });

                // this._scope.$watch('selectIndex', function () {
                //     self.__scrollTop = self.__minScrollTop + self._scope.selectIndex * self.__itemHeight;
                //     // self.scrollTo(self.__scrollTop);
                // });

                //添加手势触摸和鼠标滑动事件
                this._addEventListener();

                this._scope.getItemStyle = function (index, diff) {
                    var num = index - self._scope.selectIndex;
                    var style = {};
                    var trans = self._scope.selectIndex * 36;
                    var deg = 0;
                    if (diff != 0) {

                        deg = num * -18 - diff / 2;
                        trans = trans - diff;
                        if (deg >= 180) {
                            deg = 180;
                        } else if (deg <= -180) {
                            deg = -180;
                        }
                        var _min_num = (trans - 18) / 36;
                        var _max_num = (trans + 18) / 36;
                        if (index > _min_num && index < _max_num) {
                            style = {
                                transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(' + deg + 'deg)',
                                color: '#000000'
                            };
                        } else {
                            style = {transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(' + deg + 'deg)'};
                        }

                    } else {
                        if (num > 10) {
                            style = {transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(-180deg)'};
                        } else if (num < -10) {
                            style = {transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(180deg)'};
                        } else {
                            deg = num * -18;
                            if (num == 0) {
                                style = {
                                    transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(' + deg + 'deg)',
                                    color: '#000000'
                                };
                            } else {
                                style = {transform: 'translate3d(0px, ' + trans + 'px, -120px) rotateX(' + deg + 'deg)'};
                            }


                        }
                    }

                    return style;
                };

                this._scope.getItemValue = function (item) {
                    if ($hyUtil.isString(item) || $hyUtil.isNumber(item)) {
                        return item;
                    } else {
                        return item.display;
                    }
                }
            },
            /**
             * 添加鼠标滑动或手势触摸事件
             * @private
             */
            _addEventListener: function () {

                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().move, angular.bind(this, handleTouchMove));
                this._scrollerComponent.on(this._$hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));

                function handleTouchStart(e) {
                    e.preventDefault();
                    var touches = e.touches;
                    var timeStamp = e.timeStamp;
                    if (touches.length == null) {
                        throw new Error('无效的触摸列表: ' + touches);
                    }
                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }


                    if (this.__isDecelerating) {
                        hyAnimate.stop(this.__isDecelerating);
                        this.__isDecelerating = false;
                    }

                    if (this.__isAnimating) {
                        hyAnimate.stop(this.__isAnimating);
                        this.__isAnimating = false;
                    }

                    // 当触摸多个点时取前两个点的中间值
                    var currentTouchTop;
                    var isSingleTouch = touches.length === 1;
                    if (isSingleTouch) {
                        currentTouchTop = touches[0].pageY;
                    } else {
                        currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
                    }

                    this.__initialTouchTop = currentTouchTop;
                    this.__lastTouchTop = currentTouchTop;
                    this.__lastTouchMove = timeStamp;
                    this.__enableScrollY = !isSingleTouch;
                    if(this._scope.hyaData.length>0){
                        this.__isTracking = true;
                    }else{
                        this.__isTracking = false;
                    }

                    this.__didDecelerationComplete = false;
                    this.__isDragging = !isSingleTouch;
                    this.__isSingleTouch = isSingleTouch;
                    this.__positions = [];
                    this._scope.diffNum = 0;

                }

                function handleTouchMove(e) {
                    var touches = e.touches;
                    var timeStamp = e.timeStamp;
                    if (touches.length == null) {
                        throw new Error('无效的触摸列表: ' + touches);
                    }
                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }

                    if (!this.__isTracking) {
                        return;
                    }

                    var currentTouchTop;

                    // 当触摸多个点时取前两个点的中间值
                    if (touches.length === 2) {
                        currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
                    } else {
                        currentTouchTop = touches[0].pageY;
                    }

                    var positions = this.__positions;

                    // 是否进入拖拽模式
                    if (this.__isDragging) {
                        var moveY = currentTouchTop - this.__lastTouchTop;
                        var scrollTop = this._scope.innerTrans;
                        //
                        if (this.__enableScrollY) {
                            this._scope.innerTrans += moveY;


                            var minScrollTop = this.__minScrollTop;
                            var maxScrollTop = this.__maxScrollTop;

                            if (this._scope.innerTrans > maxScrollTop || this._scope.innerTrans < minScrollTop) {
                                //判断是否滚动到上下边缘
                                if (this._scope.innerTrans > maxScrollTop) {
                                    this._scope.innerTrans = maxScrollTop;
                                } else {
                                    this._scope.innerTrans = minScrollTop;
                                }
                            } else {
                                this._scope.diffNum += moveY;
                                this._scope.$apply();
                            }
                        }
                        //
                        if (positions.length > 40) {
                            positions.splice(0, 20);
                        }
                        //
                        positions.push(this._scope.innerTrans, timeStamp);
                        // //滚动到位置
                        this.__publish(this._scope.innerTrans);

                    } else {
                        //判断当前移动距离是否大于最小追踪距离5，如果大则启动拖动逻辑
                        var minimumTrackingForScroll = 0;
                        var minimumTrackingForDrag = 5;

                        var distanceY = Math.abs(currentTouchTop - this.__initialTouchTop);

                        this.__enableScrollY = distanceY >= minimumTrackingForScroll;

                        positions.push(this._scope.innerTrans, timeStamp);

                        this.__isDragging = this.__enableScrollY && (distanceY >= minimumTrackingForDrag);

                    }

                    // 更新最后的点击距离和时间戳
                    this.__lastTouchTop = currentTouchTop;
                    this.__lastTouchMove = timeStamp;

                }

                function handleTouchEnd(e) {
                    var self = this;
                    var timeStamp = e.timeStamp;


                    if (timeStamp instanceof Date) {
                        timeStamp = timeStamp.valueOf();
                    }
                    if (typeof timeStamp !== 'number') {
                        throw new Error('无效的时间戳数据: ' + timeStamp);
                    }

                    if (!this.__isTracking) {
                        return;
                    }
                    this.__isTracking = false;

                    // 判断拖动标记。同时检测手指移动速度是否够快，切换到加速的动画。
                    if (this.__isDragging && this._scope.isSwipe) {
                    // if (this.__isDragging ) {
                        this.__isDragging = false;
                        // 开始减速
                        if (this.__isSingleTouch && (timeStamp - this.__lastTouchMove) <= 100) {
                            console.log("开始减速");

                            var positions = this.__positions;
                            var endPos = positions.length - 1;
                            var startPos = endPos;

                            // 获取到100毫秒前的数据
                            for (var i = endPos; i > 0 && positions[i] > (this.__lastTouchMove - 100); i -= 2) {
                                startPos = i;
                            }

                            // 如果启动和停止的位置是一样的，则不进行减速处理
                            if (startPos !== endPos) {
                                // 计算这两个点之间的相对运动
                                var timeOffset = positions[endPos] - positions[startPos];   //时间差
                                var movedTop = positions[endPos - 1] - positions[startPos - 1];    //移动距离
                                console.log('减速距离是:'+movedTop);
                                // 计算出减速速度
                                this.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

                                // 最小的减速速度是4
                                var minVelocityToStartDeceleration = 4;

                                // 判断我们是否有足够的速度进行减速处理
                                if (Math.abs(this.__decelerationVelocityY) > minVelocityToStartDeceleration) {
                                    this.__startDeceleration(timeStamp);
                                }
                            }
                        }
                    }

                    if (!this.__isDecelerating) {
                        self._scope.diffNum = 0;
                        console.log("直接滚动");
                        self.scrollTo(self._scope.innerTrans);
                    }
                    this.__positions.length = 0;


                }
            }

            ,
            /**
             * 开始减速处理
             * @private
             */
            __startDeceleration: function () {

                this.__minDecelerationScrollTop = this.__minScrollTop;
                this.__maxDecelerationScrollTop = this.__maxScrollTop;

                var self = this;

                var step = function (percent, now, render) {
                    self.__stepThroughDeceleration(render);
                };

                // 设置最小的速度是0.5
                var minVelocityToKeepDecelerating = 0.5;

                // 判断是否继续执行动画
                var verify = function () {
                    var shouldContinue = Math.abs(self.__decelerationVelocityY) >= minVelocityToKeepDecelerating;
                    if (!shouldContinue) {
                        self.__didDecelerationComplete = true;
                    }
                    return shouldContinue;
                };

                var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
                    console.log("完成");
                    self.__isDecelerating = false;
                    self._scope.diffNum = 0;
                    if (self._scope.innerTrans <= self.__minScrollTop || self._scope.innerTrans >= self.__maxScrollTop) {
                        // self.scrollTo(self._scope.innerTrans);
                    }
                    if (self.__didDecelerationComplete) {
                        self.__scrollingComplete();
                        self.__scrollToByDuration(self._scope.innerTrans);
                    }
                };

                // 开始减速动画
                self.__isDecelerating = hyAnimate.start(step, verify, completed);
            }
            ,
            __stepThroughDeceleration: function () {
                var self = this;

                var scrollTop = self._scope.innerTrans + self.__decelerationVelocityY;

                self._scope.diffNum = self._scope.diffNum + self.__decelerationVelocityY;
                // console.log(scrollTop +"======"+self.__decelerationVelocityY);

                var scrollTopFixed = Math.max(Math.min(self.__maxDecelerationScrollTop, scrollTop), self.__minDecelerationScrollTop);
                console.log(scrollTopFixed);
                if (scrollTopFixed !== scrollTop) {
                    scrollTop = scrollTopFixed;
                    self.__decelerationVelocityY = 0;
                }

                if (Math.abs(self.__decelerationVelocityY) <= 1) {
                    if (Math.abs(scrollTop % self.__itemHeight) < 1) {
                        self.__decelerationVelocityY = 0;
                        // scrollTop = Math.round(scrollTop /self.__itemHeight) * self.__itemHeight;
                    }
                } else {
                    self.__decelerationVelocityY *= 0.95;
                }

                self.__publish(scrollTop);
            }
            ,
            /**
             * 滚动到指定的位置
             * @param top
             * @param animationDuration
             * @private
             */
            __publish: function (top, diffNum) {
                var self = this;
                // 判断当前是否有动画在进行中
                var wasAnimating = this.__isAnimating;
                if (wasAnimating) {
                    hyAnimate.stop(wasAnimating);
                    this.__isAnimating = false;
                }

                //缓动模式计算方法，逐渐减速到0
                function easeOutCubic(pos) {
                    return (Math.pow((pos - 1), 3) + 1);
                }

                //缓动模式计算方法，有0逐渐加速，然后在缓慢减速到0
                function easeInOutCubic(pos) {
                    if ((pos /= 0.5) < 1) {
                        return 0.5 * Math.pow(pos, 3);
                    }
                    return 0.5 * (Math.pow((pos - 2), 3) + 2);
                }

                if (false) {

                    var oldTop = this.__scrollTop;
                    var diffTop = top - oldTop;

                    var step = function (percent, now, render) {
                        self.__scrollTop = oldTop + (diffTop * percent);
                    };

                    var verify = function (id) {
                        return self.__isAnimating === id;
                    };

                    var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
                        if (animationId === self.__isAnimating) {
                            self.__isAnimating = false;
                        }
                        if (self.__didDecelerationComplete || wasFinished) {
                            self.__scrollingComplete();
                        }
                    };

                    self.__isAnimating = hyAnimate.start(step, verify, completed, animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);
                } else {
                    this.__scrollTop = top;
                    this._scope.innerTrans = top;
                    this._scope.$apply();
                    this.__scrollTo(top);
                    // this._scope.diffNum =diffNum;
                    // this._scope.$evalAsync();


                }
            }
            ,
            /**
             * 设置内部元素的滚动位置
             * @param top
             * @private
             */
            __scrollTo: function (top) {
                this._scrollerContent.css('transitionDuration', '0ms');
                this._scrollerContent.css('transform', 'translate3d(0, ' + (top) + 'px, 0)');
                this._scrollerContent.css('webkitTransform', 'translate3d(0, ' + (top) + 'px, 0)');
                // this._scope.$apply();
            },
            /**
             * 设置内部元素的滚动位置
             * @param top
             * @private
             */
            __scrollToByDuration: function (top) {
                this._scrollerContent.css('transitionDuration', '100ms');
                this._scrollerContent.css('transform', 'translate3d(0, ' + (top) + 'px, 0)');
                this._scrollerContent.css('webkitTransform', 'translate3d(0, ' + (top) + 'px, 0)');
                // this._scrollerContent.css('webkitTransform', 'translate3d(0, ' + (top) + 'px, 0)');
                // this._scope.$apply();
            }
            ,
            scrollTo: function (top, animate) {
                var self = this;
                animate = (animate === undefined) ? true : animate;

                if (this.__isDecelerating) {
                    hyAnimate.stop(this.__isDecelerating);
                    this.__isDecelerating = false;
                }

                top = Math.round((top - this._initTopTran) / this.__itemHeight) * this.__itemHeight + this._initTopTran;
                top = Math.max(Math.min(this.__maxScrollTop, top), this.__minScrollTop);


                self.__publish(top);
                self.__scrollingComplete();
            }
            ,
            __scrollingComplete: function () {

                var index = Math.round(( this._initTopTran - this._scope.innerTrans) / this.__itemHeight);
                if (index == undefined || index == null) {
                    index = this._scope.selectIndex;
                } else  {
                    this._scope.selectIndex = index;
                }
                this._scope.innerTrans = this._initTopTran - (this._scope.selectIndex  * this.__itemHeight );
                this._scope.diffNum = 0;
                if(this._scope.hyaData.length>0){
                    if ($hyUtil.isString(this._scope.hyaData[index]) || $hyUtil.isNumber(this._scope.hyaData[index])) {
                        this._scope.hyaValue = this._scope.hyaData[index];
                    } else {
                        this._scope.hyaValue = this._scope.hyaData[index].value;
                    }
                    this._scope.hyaValue = this._scope.hyaData[index];
                    this._scope.$apply();
                    if (this._scope.selectValue) {
                        this._scope.selectValue({data: this._scope.hyaValue});
                    }
                }


            }
        });
        MicroEvent.mixin(hyScrollerDegView);
        return hyScrollerDegView;
    }]);


    module.directive('hyScrollerDeg', ['$onsen', 'HyScrollDegView', function ($onsen, HyScrollDegView) {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                hyaData: '=hyaData', //传递过来的列表数据
                hyaValue: '=',//传递的值,
                itemHeight: '@', //列表项目的高度，默认是34px
                itemSize: '@',//一屏显示的项目数量
                selectValue: '&', //值改变的回调函数
                isSwipe:'@'
            },
            template: getTemplate,
            link: function (scope, element, attrs) {
                var hyScrollDegView = new HyScrollDegView(scope, element, attrs);
                $onsen.declareVarAttribute(attrs, hyScrollDegView);

                element.data('hy-scroller-deg', hyScrollDegView);

                scope.$on('destory', function () {
                    hyScrollDegView._events = undefined;
                    $onsen.removeModifierMethods(hyScrollDegView);
                    element.data('hy-scroller-deg', undefined);
                    element = null;
                });

                $onsen.fireComponentEvent(element[0], 'init');

            }
        };

        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            return '<div class="hy-scroller-deg"><div class="hy-scroller-deg-component" >' +
                '<div class="hy-scroller-deg-inner">' +
                '<div class="hy-scroller-deg-item" ng-style="getItemStyle($index,diffNum)" ng-repeat=" item in hyaData" data-value="{{item}}">{{getItemValue(item)}}</div>' +
                '</div>' +
                '</div></div>';
        }
    }]);





})();
/**
 * chenchuanyin
 * 2016/3/11.
 */
(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.directive("hySearchInput",['$onsen',function($onsen){
		return{
			restrict:'E',
			template:'<div style="height: 31px;padding: 6px"><input type="search" class="hySearchInputStyle" ng-model="search" placeholder="{{hyaSearchHolder}}"/></div>' +
			         '<i class = "ion-ios-search" style="position: absolute;top: 8px;left: 15px;font-size: 23px"></i>',
			link:function(scope,element,attrs){
				scope.hyaSearchHolder = attrs.hyaSearchHolder || 'search';
			},
		}
	}]);
}());
/**
 * chenchuanyin
 * 2016/2/19.
 */
(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.factory('haiyiListView', ['$onsen', function($onsen) {

		    var haiyiListView = Class.extend({
		      init: function(scope, element, attrs) {
		        this._element = element;
		        this._scope = scope;
		      }
		    });
		    MicroEvent.mixin(haiyiListView);
		    return haiyiListView;
		  }]);
	module.directive("hySearchList",['$onsen','haiyiListView',function($onsen,haiyiListView){
		return{
			restrict:'E',
		    scope:false,
		 	replace:false,
			transclude:false,
			compile: function(element, attrs) {
		        return function(scope, element, attrs) {
		          var searchList = new haiyiListView(scope, element, attrs);

		          $onsen.declareVarAttribute(attrs, searchList);
		          element.data('hy-search-list', searchList);

		          scope.$on('$destroy', function() {
		        	searchList._events = undefined;
		            $onsen.removeModifierMethods(searchList);
		            element.data('hy-search-list', undefined);
		            element = null;
		          });
		          var templater = $onsen.generateModifierTemplater(attrs);
		          element.addClass('list ons-list-inner');
		          element.addClass(templater('list--*'));

		          $onsen.addModifierMethods(searchList, 'list--*', element);
		          $onsen.fireComponentEvent(element[0], 'init');
		        };
		     }
		}
	}]);
	module.directive('hySearchListItem', ['$onsen', 'haiyiListView', function($onsen, haiyiListView) {
	    return {
	      restrict: 'E',
	      replace: false,
	      transclude: false,
	      compile: function() {
	        return function(scope, element, attrs) {
	          var searchListItem = new haiyiListView(scope, element, attrs);

	          $onsen.declareVarAttribute(attrs, searchListItem);

	          element.data('hy-search-list-item', searchListItem);

	          scope.$on('$destroy', function() {
	        	searchListItem._events = undefined;
	            $onsen.removeModifierMethods(searchListItem);
	            element.data('hy-search-list-item', undefined);
	            element = null;
	          });
	          var templater = $onsen.generateModifierTemplater(attrs);
	          element.addClass('list__item ons-list-item-inner');
	          element.addClass(templater('list__item--*'));

	          $onsen.addModifierMethods(searchListItem, 'list__item--*', element);

	          $onsen.fireComponentEvent(element[0], 'init');
	        };
	      }
	    };
	  }]);
	module.filter("hyListFilter",['$filter',function($filter){
		return function(array,searchValue,searchItem){
			if(!angular.isArray(array)){
				if(array == null){
					return array;
				}else{
					throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
				}
			}
			if(searchValue == null){
				return array;
			}
			if(searchItem && angular.isArray(searchItem)){
				if(searchItem.length != 0){
					var result = new Array;
					for(var i = 0;i < searchItem.length;i++){
						var obj = {};
						obj[searchItem[i]] = searchValue;
						result = result.concat($filter('filter')(array,obj));
					}
					return uniqueArray(result);
				}else{
					return $filter('filter')(array,searchValue);
				}

			}else{
				return $filter('filter')(array,searchValue);
			}
		};
	}]);
	function uniqueArray(array){
		array = array || [];
		var unique = {};
		array.forEach(function(item){
			unique[JSON.stringify(item)] = item;
		});
		array.length = 0;
		for(var i in unique){
			array[array.length] = unique[i];
		};
		return array;
	}
}());
/**
 * Created by HY-LIUKEYU on 2016/4/7.
 */

/* SlideNavigatorView - v1.0.0 - 2016-04-14
 * @author liukeyu
 * @ngdoc service
 * @name SlideNavigatorView
 * @description
 *   [ch]滑动导航栏服务.[/en]
 */

(function() {
    'use strict;';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('SlideNavigatorAnimator', function() {

        var SlideNavigatorAnimator = Class.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function(enterPage, leavePage, done) {
                throw new Error('This method must be implemented.');
            }
        });

        return SlideNavigatorAnimator;
    });

    module.factory('SlideNavigatorNoneAnimator', ['SlideNavigatorAnimator', function(SlideNavigatorAnimator) {

        var SlideNavigatorNoneAnimator = SlideNavigatorAnimator.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function(enterPage, leavePage, done) {
                done();
            }
        });

        return SlideNavigatorNoneAnimator;
    }]);

    module.factory('SlideNavigatorFadeAnimator', ['SlideNavigatorAnimator', function(SlideNavigatorAnimator) {

        var SlideNavigatorFadeAnimator = SlideNavigatorAnimator.extend({
            /**
             * @param {jqLite} enterPage
             * @param {jqLite} leavePage
             */
            apply: function(enterPage, leavePage, done) {
                animit.runAll(
                    animit(enterPage[0])
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 0
                        })
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 1
                        }, {
                            duration: 0.4,
                            timing: 'linear'
                        })
                        .resetStyle()
                        .queue(function(callback) {
                            done();
                            callback();
                        }),
                    animit(leavePage[0])
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 1
                        })
                        .queue({
                            transform: 'translate3D(0, 0, 0)',
                            opacity: 0
                        }, {
                            duration: 0.4,
                            timing: 'linear'
                        })
                );
            }
        });

        return SlideNavigatorFadeAnimator;
    }]);

    module.factory('SlideNavigatorView', ['$onsen', '$compile', 'SlideNavigatorAnimator', 'SlideNavigatorNoneAnimator', 'SlideNavigatorFadeAnimator'
        , function($onsen, $compile, SlideNavigatorAnimator, SlideNavigatorNoneAnimator, SlideNavigatorFadeAnimator) {
        var SlideNavigatorView = Class.extend({
            _slideNavigatorId: undefined,

            _navigatorItems: undefined,
            _maxNavigatorPage:4,
            _selectedItems:[],

            init: function(scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;

                this._slideNavigatorId = Date.now();
                this._navigatorItems = [];

                this._contentElement = angular.element(element[0].querySelector('.hyc-slide-navigator-content'));
                this._slideNavigatorElement = angular.element(element[0].querySelector('.hyc-navigator'));

                this._scope.$on('$destroy', this._destroy.bind(this));

                if (this._hasBottomNavigator()) {
                    this._prepareForBottomNavigator();
                }
            },

            _prepareForBottomNavigator: function() {
                setImmediate(function() {
                    this._contentElement.addClass('hyc-slide-navigator-content-bottom');
                    this._slideNavigatorElement.addClass('hyc-navigator-bottom');
                }.bind(this));
            },

            _hasBottomNavigator: function() {
                return this._attrs.position === 'bottom';
            },

            /**
             * @param {Number} index
             * @param {Object} [options]
             * @param {Boolean} [options.keepPage]
             * @param {String} [options.animation]
             * @return {Boolean} success or not
             */
            setActiveNavigator: function(index, options) {
                options = options || {};
                var previousNavigatorItem = this._navigatorItems[this.getActiveNavigatorIndex()];
                var selectedNavigatorItem = this._navigatorItems[index];

                if (index === this.getActiveNavigatorIndex()) {
                    this.emit('reactive', {
                        index: index,
                        navigatorItem: selectedNavigatorItem,
                    });
                    return false;
                }

                if (!selectedNavigatorItem) {
                    return false;
                }

                var canceled = false;
                this.emit('prechange', {
                    index: index,
                    navigatorItem: selectedNavigatorItem,
                    cancel: function() {
                        canceled = true;
                    }
                });

                if (canceled) {
                    selectedNavigatorItem.setInactive();
                    if (previousNavigatorItem) {
                        previousNavigatorItem.setActive();
                    }
                    return false;
                }

                selectedNavigatorItem.setActive();
                var needLoad = selectedNavigatorItem.page;
                if (needLoad) {
                    var removeElement = true;
                    if (previousNavigatorItem)
                        previousNavigatorItem._pageElement = this._currentPageElement;

                    var selectedNavigatorElement = this._getSelectedNavigatorEle(index);
                    var childNum = this._selectedItems.length;//this._contentElement.children().length;
                    var maxNavigatorPageNum = this._attrs.hasOwnProperty('hyaMaxPageNum')?parseInt(this._attrs.hyaMaxPageNum):this._maxNavigatorPage;
                    if(isNaN(maxNavigatorPageNum)) maxNavigatorPageNum = this._maxNavigatorPage;
                    if (childNum<maxNavigatorPageNum) {
                        removeElement = false;
                    }
                    var params = {
                        callback: function() {
                            this.emit('postchange', {index: index, navigatorItem: selectedNavigatorItem});
                        }.bind(this),
                        _removeElement: removeElement
                    };
                    if (options.animation) {
                        params.animation = options.animation;
                    }
                    this._selectedItems.push({index:index,page:needLoad});
                    if (selectedNavigatorElement) {
                        this._loadPersistentPageDOM(selectedNavigatorElement, params);
                    }
                    else {
                        this._loadPage(selectedNavigatorItem.page, params);
                    }
                }

                for (var i = 0; i < this._navigatorItems.length; i++) {
                    if (this._navigatorItems[i] != selectedNavigatorItem) {
                        this._navigatorItems[i].setInactive();
                    } else {
                        if (!needLoad) {
                            this.emit('postchange', {index: index, navigatorItem: selectedNavigatorItem});
                        }
                    }
                }

                return true;
            },
            _getSelectedNavigatorEle:function(index){
                var selectedNavigatorItem = this._navigatorItems[index];
                if(!selectedNavigatorItem) return null;
                if (!selectedNavigatorItem._pageElement) return null;
                var page = selectedNavigatorItem.page;
                var oldPage = null;
                var selectI = -1;
                for(var i= this._selectedItems.length-1;i>=0;i--){
                    var item = this._selectedItems[i];
                    if(item.index == index){
                        selectI = i;
                        oldPage = item.page;
                        break;
                    }
                }

                if(selectI>=0){
                    this._selectedItems.splice(selectI,1);
                }
                if(oldPage && oldPage==page) return selectedNavigatorItem._pageElement;
                return null;
            },

            /**
             * @param {Boolean} visible
             */
            setSlideNavigatorVisibility: function(visible) {
                this._scope.hideNavigators = !visible;
                this._onSlideNavigatorVisibilityChanged();
            },

            _onSlideNavigatorVisibilityChanged: function() {
                if (this._hasBottomNavigator()) {
                    if (this._scope.hideNavigators) {
                        this._contentElement.css('bottom', '0px');
                    } else {
                        this._contentElement.css('bottom', '');
                    }
                } else {
                    if (this._scope.hideNavigators) {
                        this._contentElement.css('top', '0px');
                    } else {
                        this._contentElement.css('top', '');
                    }
                }
            },

            /**
             * @param {Object} tabItem
             */
            addNavigatorItem: function(navigatorItem) {
                this._navigatorItems.push(navigatorItem);
            },

            /**
             * @return {Number} When active navigator is not found, returns -1.
             */
            getActiveNavigatorIndex: function() {
                var navigatorItem;
                for (var i = 0; i < this._navigatorItems.length; i++) {
                    navigatorItem = this._navigatorItems[i];
                    if (navigatorItem.isActive()) {
                        return i;
                    }
                }

                return -1;
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.animation]
             * @param {Object} [options.callback]
             */
            loadPage: function(page, options) {
                return this._loadPage(page, options);
            },

            /**
             * @param {String} page
             * @param {Object} [options]
             * @param {Object} [options.animation]
             */
            _loadPage: function(page, options) {

                $onsen.getPageHTMLAsync(page).then(function(html) {
                    var pageElement = angular.element(html.trim());
                    this._loadPageDOM(pageElement, options);

                }.bind(this), function(){
                    //throw new Error('Page is not found: ' + page);
                    var pageElement = angular.element('<div class="not-page"></div>');
                    this._loadPageDOM(pageElement, options);
                }.bind(this));
            },

            /**
             * @param {jqLite} element
             * @param {Object} scope
             * @param {Object} options
             * @param {Object} options.animation
             */
            _switchPage: function(element, options) {
                if (this._currentPageElement) {
                    var oldPageElement = this._currentPageElement;
                    //var oldPageScope = this._currentPageScope;

                    this._currentPageElement = element;
                    this._currentPageScope = element.data('_scope');

                    this._getAnimatorOption(options).apply(element, oldPageElement, function() {
                        oldPageElement.css('display', 'none');
                        if (options._removeElement && this._selectedItems.length>0) {
                            this._selectedItems[0].element.remove();
                            this._selectedItems[0].scope && this._selectedItems[0].scope.$destroy();
                            this._selectedItems.splice(0,1);
                        }
                        if (options.callback instanceof Function) {
                            options.callback();
                        }
                    }.bind(this));

                } else {
                    this._currentPageElement = element;
                    this._currentPageScope = element.data('_scope');

                    if (options.callback instanceof Function) {
                        options.callback();
                    }
                }
                var lastIndex = this._selectedItems.length-1;
                if(lastIndex<0) return;
                this._selectedItems[lastIndex].element = this._currentPageElement;
                this._selectedItems[lastIndex].scope = this._currentPageScope;
            },

            /**
             * @param {jqLite} element
             * @param {Object} options
             * @param {Object} options.animation
             */
            _loadPageDOM: function(element, options) {
                options = options || {};
                var pageScope = this._scope.$new();
                var link = $compile(element);

                this._contentElement.append(element);
                var pageContent = link(pageScope);

                pageScope.$evalAsync();

                this._switchPage(pageContent, options);
            },

            /**
             * @param {jqLite} element
             * @param {Object} options
             * @param {Object} options.animation
             */
            _loadPersistentPageDOM: function(element, options) {
                options = options || {};

                element.css('display', 'block');
                this._switchPage(element, options);
            },

            /**
             * @param {Object} options
             * @param {String} [options.animation]
             * @return {TabbarAnimator}
             */
            _getAnimatorOption: function(options) {
                var animationAttr = this._element.attr('animation') || 'default';

                return SlideNavigatorView._animatorDict[options.animation || animationAttr] || SlideNavigatorView._animatorDict['default'];
            },
            next:function(){
                var index = this.getActiveNavigatorIndex();
                var total = this._navigatorItems.length;
                if(index>total-1) return;
                index++;
                this._setNavigator(index,true);
            },
            prev:function(){
                var index = this.getActiveNavigatorIndex();
                var total = this._navigatorItems.length;
                if(index<0) return;
                index--;
                this._setNavigator(index,false);
            },
            setNavigator:function(index){
                this._setNavigator(index,true);
            },
            _setNavigator:function(index,next){
                var item = this._navigatorItems[index];
                var total = this._navigatorItems.length;
                if(index<0 || index>total-1) return;
                if(!item || item.disabled){
                    if(next){
                        index++;
                    }else {
                        index--;
                    }
                    this._setNavigator(index);
                    return;
                }
                item.setNavigatorAction();
            },

            _destroy: function() {
                this.emit('destroy');

                this._element = this._scope = this._attrs = null;
            }
        });
        MicroEvent.mixin(SlideNavigatorView);

        // Preset transition animators.
        SlideNavigatorView._animatorDict = {
            'default': new SlideNavigatorNoneAnimator(),
            'none': new SlideNavigatorNoneAnimator(),
            'fade': new SlideNavigatorFadeAnimator()
        };

        /**
         * @param {String} name
         * @param {NavigatorTransitionAnimator} animator
         */
        SlideNavigatorView.registerAnimator = function(name, animator) {
            if (!(animator instanceof SlideNavigatorAnimator)) {
                throw new Error('"animator" param must be an instance of TabbarAnimator');
            }

            this._animatorDict[name] = animator;
        };

        return SlideNavigatorView;
    }]);

})();

(function(module) {
    try { module = angular.module('templates-main'); }
    catch(err) { module = angular.module('templates-main', []); }
    module.run(['$templateCache', function($templateCache) {
        'use strict';
        $templateCache.put('templates/hy_slide_navigator.tpl',
            '<div class="hyc-slide-navigator-content"></div>\n' +
            '<div ng-hide="hideNavigators" class="hyc-navigator"></div>\n' +
            '');
    }]);
})();

/* hy-slide-navigator - v1.0.0 - 2016-04-14
 * @author liukeyu
 * @ngdoc directive
 * @name hy-slide-navigator
 * @description
 *   [ch]滑动导航栏.[/en]
 * @example
 * <hy-slide-navigator animation="fade">
 *   <hy-navigator hya-page="{{page}}" hya-active="true"
 *      hya-on-active-before="before($index,$event);"
 *      hya-on-active="active($index,$event);"
 *      hya-on-active-after="after($index,$event);"
 *      >title</hy-navigator>
 * </hy-slide-navigator>
 */

(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hySlideNavigator', ['$onsen', '$compile', 'SlideNavigatorView', function($onsen, $compile, SlideNavigatorView) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,
            scope: true,
            templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/hy_slide_navigator.tpl',
            compile: function (element, attrs) {
                element.addClass('hyc-slide-navigator');
                return function (scope, element, attrs, controller, transclude) {

                    scope.selectedTabItem = {source: ''};

                    var slideNavigatorView = new SlideNavigatorView(scope, element, attrs);

                    attrs.$observe('hideNavigators', function (hide) {
                        var visible = hide !== 'true';
                        slideNavigatorView.setSlideNavigatorVisibility(visible);
                    });

                    $onsen.registerEventHandlers(slideNavigatorView, 'reactive prechange postchange destroy');

                    scope._slideNavigatorId = slideNavigatorView._slideNavigatorId;

                    element.data('hy-slide-navigator', slideNavigatorView);
                    $onsen.declareVarAttribute(attrs, slideNavigatorView);

                    transclude(scope, function (cloned) {
                        angular.element(element[0].querySelector('.hyc-navigator')).append(cloned);
                    });

                    scope.$on('$destroy', function () {
                        slideNavigatorView._events = undefined;
                        element.data('hy-slide-navigator', undefined);
                    });

                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);
})();

/* hy_navigator - v1.0.0 - 2016-04-14
 * @author liukeyu
 * @ngdoc directive
 * @name hy_navigator
 * @description
 *   [ch]滑动导航栏菜单，必须在指令hy-slide-navigator里用.[/en]
 * @example
 * <hy-slide-navigator animation="fade">
 *   <hy-navigator hya-page="{{page}}" hya-active="true"
 *      hya-on-active-before="before($index,$event);"
 *      hya-on-active="active($index,$event);"
 *      hya-on-active-after="after($index,$event);"
 *      >title</hy-navigator>
 * </hy-slide-navigator>
 */

(function() {
    'use strict';
    var module = angular.module('onsen');

    module.directive('hyNavigator', navigator);
    module.directive('hySlideNavigatorItem', navigator); // for BC

    function navigator($onsen) {
        return {
            restrict: 'EA',
            //transclude: true,

            scope: {
                page: '@hyaPage',
                active: '@hyaActive',
                onActiveBefore:'&hyaOnActiveBefore',
                onActive:'&hyaOnActive',
                onActiveAfter:'&hyaOnActiveAfter'
            },
            //templateUrl: $onsen.DIRECTIVE_TEMPLATE_URL + '/tab.tpl',

            compile: function(element, attrs) {
                element.addClass('hyc-navigator-item');
                return function(scope, element, attrs, controller, transclude) {
                    var slideNavigatorView = element.inheritedData('hy-slide-navigator');
                    if (!slideNavigatorView) {
                        throw new Error('This hy-navigator element is must be child of hy-slide-navigator element.');
                    }
                    scope.disabled = false;
                    attrs.$observe('hyaDisabled', function (disabled) {
                        disabled = disabled === 'true';
                        scope.disabled = disabled;
                        if(disabled){
                            element.addClass('hyc-navigator-disabled');
                        }else{
                            element.removeClass('hyc-navigator-disabled');
                        }
                    });
                    scope._slideElement = element;
                    slideNavigatorView.addNavigatorItem(scope);

                    // Make this tab active.
                    scope.setActive = function() {
                        element.addClass('active');
                    };

                    // Make this tab inactive.
                    scope.setInactive = function() {
                        element.removeClass('active');
                    };

                    scope.isPersistent = function() {
                        return typeof scope.persistent != 'undefined';
                    };
                    var index = slideNavigatorView._navigatorItems.indexOf(scope);
                    /**
                     * @return {Boolean}
                     */
                    scope.isActive = function() {
                        return element.hasClass('active');
                    };

                    scope.tryToChange = function() {
                        slideNavigatorView.setActiveNavigator(index);
                        scope.onActive({$index:index,$event:scope});
                    };

                    scope.setNavigatorAction = function(event){
                        if(scope.disabled) return;
                        scrollPath(element);
                        if(attrs.hasOwnProperty('hyaOnActiveBefore')
                            && scope.onActiveBefore({$index:index,$event:scope})===false){
                            scope.$evalAsync();
                            return;
                        }
                        scope.tryToChange();
                        scope.onActiveAfter({$index:index,$event:scope});
                        scope.$evalAsync();
                    };

                    element.on('click',function(event){
                        scope.setNavigatorAction(event);
                    });

                    if (scope.active && scope.active !=='false') {
                        slideNavigatorView.setActiveNavigator(index);
                    }

                    $onsen.fireComponentEvent(element[0], 'init');
                    function scrollPath(element){
                        if(!element) return;
                        var parent = element.parent();
                        if(!parent) return;
                        var scrollLeft = parent[0].scrollLeft;
                        var offsetLeft = element[0].offsetLeft-scrollLeft;

                        if(offsetLeft==0){
                            return;
                        }
                        if(offsetLeft<0){
                            setImmediate(function(){
                                parent[0].scrollLeft = scrollLeft + offsetLeft;
                            });
                            return;
                        }
                        var paddingRight = window.getComputedStyle(parent[0], null).getPropertyValue('padding-right');
                        paddingRight = parseInt(paddingRight);
                        var parentWidth = parent[0].clientWidth-paddingRight;
                        var elementWidth = element[0].offsetWidth;

                        if(offsetLeft>0 && offsetLeft+elementWidth>parentWidth){
                            setImmediate(function(){
                                parent[0].scrollLeft = scrollLeft+offsetLeft+elementWidth-parentWidth;
                            });
                        }
                    }
                };
            }
        };
    }
    navigator.$inject = ['$onsen'];
})();

/*
 hyaString2html:需要转换成html的String字符串
*/
(function(){
    "use strict";
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('hyStringToHtml',function(){
        return {
            restrict: 'E',
            scope: {
                stringToHtml: '=hyaString2html',
            },
            compile: function (element, attr) {
                return {
                    pre: function (scope, element, attrs) {
                        if(scope.stringToHtml != ""){
                            var a = angular.element(scope.stringToHtml);
                            element.append(a);
                        }else{
                            console.log("你要转换的String字符串为空！");
                        }
                        scope.$watch("stringToHtml",function(){
                            element.empty();
                            var a = angular.element(scope.stringToHtml);
                            element.append(a);
                        });
                    },
                    post:function(){

                    }
                }
            }
        };
    });
})();

/**
 * HySuspendedToolView - v1.0.0 - 2016-04-19
 * @author liukeyu
 * @ngdoc service
 * @name HySuspendedToolView
 * @description
 *   [ch]悬浮导航.[/ch]
 * @example
 *
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('HySuspendedToolView', ['$onsen', '$parse', function ($onsen, $parse) {

        var HySuspendedToolView = Class.extend({

            POSITION_TOP_LEFT: 'top-left',
            POSITION_TOP_RIGHT: 'top-right',
            POSITION_BOTTOM_LEFT: 'bottom-left',
            POSITION_BOTTOM_RIGHT: 'bottom-right',
            /**
             * @param {Object} scope
             * @param {jqLite} element
             * @param {Object} attrs
             */
            init: function (scope, element, attrs) {
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                //this._initPosition = this._getInitPosition();
                this._dragElement = this._createDragElement();

                this._createEventListeners();
                this.boundaryHide = this._attrs.hyBoundaryHide;
                this._scope.$on('$destroy', this._destroy.bind(this));
            },

            _createDragElement: function () {
                var element = this._element.addClass('hyc-suspended-tool');
                var offset = this._getInitOffset();
                var horizontal = offset ? offset.horizontal : null;
                var vertical = offset ? offset.vertical : null;
                var cssObject = offset ? {} : null;

                var position = this._getInitPosition();

                switch (position) {
                    case this.POSITION_TOP_LEFT:
                        if (cssObject) {
                            cssObject.top = vertical;
                            cssObject.left = horizontal;
                        }
                        break;
                    case this.POSITION_TOP_RIGHT:
                        element.addClass('tool-right');
                        if (cssObject) {
                            cssObject.top = vertical;
                            cssObject.right = horizontal;
                        }
                        break;
                    case this.POSITION_BOTTOM_RIGHT:
                        element.addClass('tool-right');
                        element.addClass('tool-bottom');
                        if (cssObject) {
                            cssObject.bottom = vertical;
                            cssObject.right = horizontal;
                        }
                        break;
                    case this.POSITION_BOTTOM_LEFT:
                        element.addClass('tool-bottom');
                        if (cssObject) {
                            cssObject.bottom = vertical;
                            cssObject.left = horizontal;
                        }
                        break;
                    default:
                        break;
                }
                if (cssObject) {
                    element.css(cssObject);
                }
                return element;
            },

            _getInitPosition: function () {
                var position = this._attrs.position;
                if (!position) return this.POSITION_TOP_LEFT;
                position = position.toLowerCase();

                if (position.indexOf('right') >= 0 && position.indexOf('bottom') >= 0) {
                    return this.POSITION_BOTTOM_RIGHT;
                } else if (position.indexOf('right') >= 0) {
                    return this.POSITION_TOP_RIGHT;
                } else if (position.indexOf('bottom') >= 0) {
                    return this.POSITION_BOTTOM_LEFT;
                }
                return this.POSITION_TOP_LEFT;
            },

            _getInitOffset: function () {
                var offset = this._attrs.offset;
                if (!offset) return null;
                var offsetList = offset.toLowerCase().trim().split(/\s+/);
                var vertical = offsetList.length > 0 ? offsetList[0] : '0px';
                var horizontal = offsetList.length > 1 ? offsetList[1] : vertical;

                return {horizontal: horizontal, vertical: vertical};
            },
            _setDragPosition: function (position) {
                var callback = position.callback || function(){};
                var element = this._dragElement;
                var top = position.top || 0;
                var left = position.left || 0;
                if(!position.animit){
                    element.css({
                        top: top + 'px',
                        left: left + 'px',
                        right: 'auto',
                        bottom: 'auto'
                    });
                    callback.call(this);
                    return;
                }


                animit(element[0])
                    .queue({
                        top: top + 'px',
                        left: left + 'px',
                        right: 'auto',
                        bottom: 'auto'
                    }, {
                        duration: 0.3,
                        timing: 'cubic-bezier(.1, .7, .1, 1)'
                    })
                    .play(callback);
            },

            _onDrag: function (event) {
                if (this.isDisabled()) {
                    return;
                }

                var top = this._startPosition.top + event.deltaY;
                var left = this._startPosition.left + event.deltaX;
                var overLiTop = this._overflowLimitTop(top);
                var overLiLeft = this._overflowLimitLeft(left);
                if (overLiTop && overLiLeft) {
                    return;
                }
                if (overLiTop) {
                    top = this._dragElement[0].offsetTop;
                }

                if (overLiLeft) {
                    left = this._dragElement[0].offsetLeft;
                }
                this._setDragPosition({top: top, left: left});
                var dragEvent = angular.extend({}, event);
                dragEvent.target = this._dragElement[0];
                dragEvent.type = 'drag';
                this._scope.drag({$event: dragEvent});
                this._scope.$evalAsync();
            },
            _getMaxTop:function(){
                var parent = this._dragElement.parent();
                var max_top = parent[0].clientHeight - this._dragElement[0].clientHeight;
                return max_top;
            },
            _getMaxLeft:function(){
                var parent = this._dragElement.parent();
                var max_left = parent[0].clientWidth - this._dragElement[0].clientWidth;
                return max_left;
            },
            _overflowLimitTop: function (top) {
                var min_top = 0;
                var max_top = this._getMaxTop();

                if (top < min_top || top > max_top) {
                    return true;
                }
                return false;
            },
            _overflowLimitLeft: function (left) {
                var min_left = 0;
                var max_left = this._getMaxLeft();

                if (left < min_left || left > max_left) {
                    return true;
                }
                return false;
            },
            _overflowLimit: function (top, left) {
                return this._overflowLimitTop(top) || this._overflowLimitLeft(left);
            },
            _onDragStart: function (event) {
                if (this.isDisabled()) {
                    return;
                }

                this._startPosition = this._getCurrentPosition();

                var dragEvent = angular.extend({}, event);
                dragEvent.target = this._dragElement[0];
                dragEvent.type = 'drag-start';
                this._scope.dragStart({$event: dragEvent});
                this._scope.$evalAsync();
            },

            _onDragEnd: function (event) {
                if (this.isDisabled()) {
                    return;
                }
                var top = this._startPosition.top + event.deltaY;
                var left = this._startPosition.left + event.deltaX;
                var heigh = this._element[0].clientHeight;
                var width = this._element[0].clientWidth;
                var maxTop = this._getMaxTop();
                var maxLeft = this._getMaxLeft();
                if (top<0) {
                    top = -heigh/2;
                }

                if (left<0) {
                    left = -width/2;
                }

                if (top>maxTop) {
                    top = maxTop+heigh/2;
                }

                if (left>maxLeft) {
                    left = maxLeft+width/2;
                }
                var callback = function(){
                    this._startPosition = null;

                    var dragEvent = angular.extend({}, event);
                    dragEvent.target = this._dragElement[0];
                    dragEvent.type = 'drag-end';
                    this._scope.dragEnd({$event: dragEvent});
                    this._scope.$evalAsync();
                }.bind(this);
                this._setDragPosition({top: top, left: left,animit:true,callback:callback});

            },

            _getTop: function () {
                return parseInt(this._dragElement[0].offsetTop || 0, 10);
            },

            _getLeft: function () {
                return parseInt(this._dragElement[0].offsetLeft || 0, 10);
            },

            _getCurrentPosition: function () {
                var top = this._getTop();
                var left = this._getLeft();
                return {top: top, left: left};
            },

            isDisabled: function () {
                return this._element[0].hasAttribute('disabled');
            },

            setDisabled: function (disabled) {
                if (disabled) {
                    this._element[0].setAttribute('disabled', '');
                }
                else {
                    this._element[0].removeAttribute('disabled');
                }
            },
            hide: function () {
                this._element.css('display', 'none');
            },
            show: function () {
                this._element.css('display', 'block');
            },
            _createEventListeners: function () {
                var element = this._dragElement;//;

                this._hammer = new Hammer(element[0], {
                    dragMinDistance: 1,
                    dragDistanceCorrection: false
                });

                // Event listeners
                this._bindedOnDrag = this._onDrag.bind(this);
                this._bindedOnDragStart = this._onDragStart.bind(this);
                this._bindedOnDragEnd = this._onDragEnd.bind(this);
                //this._bindedOnScroll = this._onScroll.bind(this);

                // Bind listeners
                this._hammer.on('pan', this._bindedOnDrag);
                this._hammer.on('panstart', this._bindedOnDragStart);
                this._hammer.on('panend', this._bindedOnDragEnd);
                //element.on('scroll', this._bindedOnScroll);
            },

            _destroyEventListeners: function () {
                //var element = this._dragElement;

                this._hammer.off('pan', this._bindedOnDrag);
                this._hammer.off('panstart', this._bindedOnDragStart);
                this._hammer.off('panend', this._bindedOnDragEnd);
            },

            _destroy: function () {
                this.emit('destroy');
                this._destroyEventListeners();
                this._element = this._scope = this._attrs = null;
            }
        });

        MicroEvent.mixin(HySuspendedToolView);
        return HySuspendedToolView;
    }]);
})();


/**
 * hy-suspended-tool - v1.0.0 - 2016-03-18
 * @author liukeyu
 * @ngdoc directive
 * @name hy-suspended-tool
 * @description
 *   [ch]悬空导航按钮.[/ch]
 * @example
 * <hy-suspended-tool >
 * </hy-suspended-tool>
 */
(function() {
    'use strict';

    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     *
     */
    module.directive('hySuspendedTool', ['$onsen', 'HySuspendedToolView', function($onsen, HySuspendedToolView) {
        return {
            restrict: 'EA',
            replace: false,
            scope: {
                dragStart:'&hyaDragStart',
                drag:'&hyaDrag',
                dragEnd:'&hyaDragEnd'
            },
            compile: function(element, attrs) {
                return {
                    pre: function(scope, element, attrs) {
                        var hySuspendedToolView = new HySuspendedToolView(scope, element, attrs);

                        $onsen.declareVarAttribute(attrs, hySuspendedToolView);
                        element.data('hy-suspended-tool', hySuspendedToolView);

                        scope.$on('$destroy', function() {
							hySuspendedToolView._events = undefined;
                            element.data('hy-suspended-tool', undefined);
                            scope = element = attrs = null;
                        });
                    },
                    post: function(scope, element) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                };
            }
        };
    }]);

})();

/**
 * hyFloatActionButtonView - v1.0.0 - 2019-01-21
 * @author wangbin
 * @ngdoc service
 * @name hyFloatActionButtonView
 * @description
 *   [ch]悬浮菜单视图.[/ch]
 * @example
 *
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('hyFloatActionButtonView', ['$onsen', '$parse', function ($onsen, $parse) {
        var hyFloatActionButtonView = Class.extend({
            init:function(scope,element,attrs){
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                var self=this;
                //this._element.append($compile(angular.element(template))(scope));
                //this._scope.ccc = angular.element(this._element[0].querySelector('.speed-dial-buttons'));
                //console.log(this._scope.ccc);
                //
                //this.button = angular.element(element.find('button'));
                ////console.log(this.button);
                ////console.log(this._scope.ccc);
                //this._scope.ccc.append(this.button);
                this._model_mask=angular.element('<div class="hy-actions-modal-overlay"></div>');
                this.buttonbody=angular.element(this._element[0].querySelector('.speed-dial'));
                this.popover = this.buttonbody.find('div');
                this.onspage = angular.element(this._findPage());
                this._scope.$on('$destroy', this._destroy.bind(this));
                console.log(this.buttonbody);
                console.log(this._model_mask);
                this.button=angular.element(this.buttonbody);
                this.onspage.append(this.button);
                this.onspage.append(angular.element(this._model_mask));
                this._scope.buttoncolor=this._scope.buttoncolor?this._scope.butttoncolor:'blue';
                this._scope.iconshow='add';
                if(this._scope.iconhide!=null && this._scope.iconhide!=""){
                    console.log('true');
                    this.buttonbody.find('div').removeClass('popover');
                    this.buttonbody.find('div').addClass('popover2');
                    this._scope.showList = angular.bind(this,this._showlist);
                }else{
                    console.log('false');
                    this._scope.showList = angular.bind(this,this._showlist1);
                }

            },
            _showlist:function () {
                var self=this;

                this._model_mask[0].addEventListener('click',angular.bind(this, this.hide));
                this.popover.css('display','flex');
                this.popover.css('opacity','0');
                setTimeout(function(){   self.buttonbody.toggleClass('speed-dial-opened');

                },1);
                this._model_mask.toggleClass('hy-modal-overlay-visible');
            },
            _showlist1: function () {
                var self=this;
                this._model_mask[0].addEventListener('click',angular.bind(this, this.hide));
                this.popover.css('display','block');
                this.popover.css('opacity','0');
                this.popover.css('border-radius','50%');
                this.buttonbody.toggleClass('speed-dial-opened2');
                setTimeout(function(){   self.buttonbody.find('div').toggleClass('speed-dial-opened2');},1);
                this._model_mask.toggleClass('hy-modal-overlay-visible');

            },
            hide: function () {
                var self=this;
                if(this._scope.iconhide!=null && this._scope.iconhide!=""){
                    this._model_mask.removeClass('hy-modal-overlay-visible');
                    this.buttonbody.removeClass('speed-dial-opened');
                    this.buttonbody.find('div').removeClass('speed-dial-opened');
                    console.log(this.buttonbody.find('div').find('button'));
                    setTimeout(function(){   self.buttonbody.find('div').css('display','none');},400);

                }else{

                    this._model_mask.removeClass('hy-modal-overlay-visible');
                    this.buttonbody.removeClass('speed-dial-opened2');
                    this.buttonbody.find('div').removeClass('speed-dial-opened2');
                    setTimeout(function(){   self.buttonbody.find('div').css('display','none');},400);
                }


                // this.eee = angular.element(this._element[0].querySelector('.popover'));
                // this.eee.removeClass('speed-dial-opened');
                //// this.ddd.removeClass('speed-dial-opened');
                // setTimeout(function(){  self.ddd.removeClass('speed-dial-opened')},10);
            },
            _findPage: function() {
                var e = this._element[0];
                while(e.parentNode) {
                    e = e.parentNode;
                    if (e.className) {
                        if (e.className.indexOf('body') >= 0) {
                            console.log(e.className);
                            break;
                        }
                        if (e.className.indexOf('page') >= 0) {
                            console.log(e.className);
                            break;
                        }

                    }
                }
                return e;
            },
            _destroy:function(){
                this.button.remove();
                this._scope = this._attrs = this._element = this.onspage = null;
                this.emit('destroy');

            }
        });
        MicroEvent.mixin(hyFloatActionButtonView);
        return hyFloatActionButtonView;
    }]);
})();

/**
 * hy-float-action-button - v1.0.0 - 2018-01-21
 * @author wangbin
 * @ngdoc directive
 * @name hy-float-action-button
 * @description
 *   [ch]悬空菜单.[/ch]
 * @example
 * <hy-float-action-button >
 * </hy-float-action-button>
 */
(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    /**
     *
     */
    module.directive('hyFloatActionButton', ['$onsen', 'hyFloatActionButtonView', function($onsen, hyFloatActionButtonView) {
        return {
            restrict: 'E',
            template:getTemplate,
            transclude:true,
            scope: {
                iconshow:'@',
                iconhide:'@',
                buttoncolor:'@'
            },
            compile: function ( eleme, attrs) {

                //var childElements = eleme.getChildElement();
                //console.log(childElements);

                return function (scope, element, attrs){
                    var hyFloatActionButton = new hyFloatActionButtonView(scope, element, attrs);
                    $onsen.declareVarAttribute(attrs,hyFloatActionButton);
                    console.log(scope.iconhide);
                    element.data('hy-float-action-button', hyFloatActionButton);

                    scope.$on('destory', function () {


                        hyFloatActionButton._events = undefined;
                        $onsen.removeModifierMethods(hyFloatActionButton);
                        element.data('hy-float-action-button', undefined);
                        element = null;

                    });
                    $onsen.fireComponentEvent(element[0], 'init');

                }

            }
        };
        function getTemplate(element, scope,attr){
            return    '<div class="speed-dial"  >' +
                '<a  ng-click="showList()" class="floating-button " style="transition-property:all;background-color: {{buttoncolor}}" hy-ink-ripple="blue"><hy-icon  hy-font-icon="{{iconshow}}" class="f7ios-icons" ></hy-icon>' +
                '<hy-icon ng-if="!!iconhide" class="f7ios-icons" hy-font-icon="{{iconhide}}"></hy-icon></a>'+
                '<div class="popover" style=" display:none;transition-property:all;" ng-transclude>'+

                '</div>'+
                '</div>';
        }
    }]);

})();


/*
 * author:chenchuanyin
 */
(function(){
	"use strict";
	var module = null;
	try {
		module = angular.module('haiyiMobile');
	} catch (err) {
		module = angular.module('haiyiMobile', ['onsen']);
	}
	module.factory('SwipeView',['$onsen','$hyUtil',function($onsen,$hyUtil){
		var SwipeView = Class.extend({
			showState:11,
			leftWidth:null,
			centerWidth:null,
			init: function(scope, element, attrs) {
				this._scope = scope;
				this._element = element;
				this._attrs = attrs;
				this._$hyUtil = $hyUtil;
				this._swipeWrapper = angular.element(element[0].querySelector('.swipe-wrapper'));
				this._swipeLeft = angular.element(element[0].querySelector('.hy-swipe-left'));
				this._swipeLeftWidth = this._swipeLeft[0] ? this._swipeLeft[0].offsetWidth : 0;
				this._swipeCenter = angular.element(element[0].querySelector('.hy-swipe-center'));
				this._swipeCenterWidth = this._swipeCenter[0].offsetWidth;
				this._swipeRight = angular.element(element[0].querySelector('.hy-swipe-right'));
				this._swipeRightWidth = this._swipeRight[0] ? this._swipeRight[0].offsetWidth : 0;
				this._addEventListener();
                //绑定重新布局Item元素的方法
                this._bindedLayoutCarouselItems = this._resizeLayoutCarouselItem.bind(this);
                //angular.element(window).on('resize', this._bindedLayoutCarouselItems);
                //this._resizeLayoutCarouselItem();
			},
            /**
             * 重新对item进行布局
             * @private
             */
            _resizeLayoutCarouselItem: function () {
                var left = this._element[0].querySelector('.hy-swipe-left');
                var leftWidth = this.leftWidth ? this.leftWidth : (left ? left.offsetWidth:0);
                this.leftWidth = leftWidth;
                angular.element(left).css('transform','translateX('+ (0 - leftWidth)+ 'px)');
                angular.element(left).css('webkitTransform','translateX('+ (0 - leftWidth)+ 'px)');
                var center = this._element[0].querySelector('.hy-swipe-center');
                var centerWidth = this.centerWidth ? this.centerWidth : center.offsetWidth;
                this.centerWidth = centerWidth;
                var right = this._element[0].querySelector('.hy-swipe-right');
                var rightWidth = right ? right.offsetWidth : 0;
                angular.element(right).css('transform','translateX('+ (centerWidth)+ 'px)');
                angular.element(right).css('webkitTransform','translateX('+ (centerWidth)+ 'px)');
            },
            _destroy: function () {
                //angular.element(window).off('resize', this._bindedLayoutCarouselItems);
            },
            hide:function(){
                this._swipeWrapper.css('transform', 'translateX(' + (0) + 'px)');
                this._swipeWrapper.css('webkitTransform', 'translateX(' + (0) + 'px)');
                this.showState = 11;
			},

			_addEventListener:function(){
				var allowItemClick = true;
				//state = 1;//0:向右滑动    1：没有滑动   2：向左滑动
				//showState = 11; //10:左侧显示    11：中间显示   12：右侧显示
				var isTouched, isMoved, touchStartX, touchStartY, touchCurrentX, touchCurrentY,
					touchStartTime, touchEndTime, wrapperWidth, wrapperHeight, percentageLeft,
					percentageRight , touchesDiff, isScrolling, state = 1;
				this._swipeWrapper.on(this._$hyUtil.gettouchEvent().start,angular.bind(this,handleTouchStart));
				this._swipeWrapper.on(this._$hyUtil.gettouchEvent().move, angular.bind(this,handleTouchMove));
				this._swipeWrapper.on(this._$hyUtil.gettouchEvent().end, angular.bind(this,handleTouchEnd));

				//鼠标按下或者手指按下
				function handleTouchStart(e) {
					isTouched = true;
					touchStartX = touchCurrentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
					touchStartY = touchCurrentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
					touchStartTime = (new Date()).getTime();
					allowItemClick = true;
					isScrolling = undefined;
                    this._swipeRight = angular.element(this._element[0].querySelector('.hy-swipe-right'));
                    this._swipeRightWidth = this._swipeRight[0] ? this._swipeRight[0].offsetWidth : 0;
                    this._swipeLeft = angular.element(this._element[0].querySelector('.hy-swipe-left'));
                    this._swipeLeftWidth = this._swipeLeft[0] ? this._swipeLeft[0].offsetWidth : 0;
				};

				//开始移动
				function handleTouchMove(e) {
					if (!isTouched) return;
					touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;
					touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;
					if (typeof isScrolling === 'undefined') {
						isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));
					}
					if (isScrolling) {
						isTouched = false;
						return;
					}
					e.preventDefault();
					allowItemClick = false;
					if (!isMoved) {
						//第一次移动
						isMoved = true;
						wrapperWidth = this._swipeWrapper[0].offsetWidth;
						wrapperHeight = this._swipeWrapper[0].offsetHeight;
						this._swipeWrapper.css('transition', "0ms");
						this._swipeWrapper.css('webkitTransition', "0ms");
					}
					e.preventDefault();
					touchesDiff = touchCurrentX - touchStartX;
					if(touchesDiff > 0){
						if(this.showState === 12 && touchesDiff <= this._swipeRightWidth){
							this._swipeWrapper.css('transform', 'translateX(' + ((-this._swipeRightWidth) + touchesDiff) + 'px)');
							this._swipeWrapper.css('webkitTransform', 'translateX(' + ((-this._swipeRightWidth) + touchesDiff) + 'px)');
						}else if(this.showState === 11 && touchesDiff <= this._swipeLeftWidth){
							this._swipeWrapper.css('transform', 'translateX(' + touchesDiff + 'px)');
							this._swipeWrapper.css('webkitTransform', 'translateX(' + touchesDiff + 'px)');
						}
					}else if(touchesDiff < 0){
						if(this.showState === 10 && (-touchesDiff) <= this._swipeLeftWidth){
							this._swipeWrapper.css('transform', 'translateX(' + (this._swipeLeftWidth + touchesDiff) + 'px)');
							this._swipeWrapper.css('webkitTransform', 'translateX(' + (this._swipeLeftWidth + touchesDiff) + 'px)');
						}else if(this.showState === 11 && (-touchesDiff) <= this._swipeRightWidth){
							this._swipeWrapper.css('transform', 'translateX(' + touchesDiff + 'px)');
							this._swipeWrapper.css('webkitTransform', 'translateX(' + touchesDiff + 'px)');
						}
					}
				};

				//移动结束
				function handleTouchEnd(e) {
					if(touchesDiff>0){
						state = 0;//向右滑动
						percentageLeft = (touchesDiff > this._swipeLeftWidth ? this._swipeLeftWidth :touchesDiff) / this._swipeLeftWidth;
						percentageRight = (touchesDiff > this._swipeRightWidth ? this._swipeRightWidth :touchesDiff) / this._swipeRightWidth;
					}else if(touchesDiff == 0){
						state = 1;//没有滑动
					}else if(touchesDiff < 0){
						state = 2;//向左滑动
						percentageLeft = ((-touchesDiff) > this._swipeLeftWidth ? this._swipeLeftWidth : (-touchesDiff))/ this._swipeLeftWidth;
						percentageRight = ((-touchesDiff) > this._swipeRightWidth ? this._swipeRightWidth :(-touchesDiff)) / this._swipeRightWidth;
					}
					if (!isTouched || !isMoved) {
						isTouched = isMoved = false;
						return;
					}
					isTouched = isMoved = false;
					this._swipeWrapper.css('transition', "300ms");
					this._swipeWrapper.css('webkitTransition', "300ms");
					touchEndTime = new Date().getTime();
					if(state === 0){  //向右滑动
						if(this.showState === 12 && percentageRight > 0.5){         //如果右侧处于显示状态   且滑动距离超过右侧显示宽度的一半
							showCenter(this);
						}else if(this.showState === 12 && percentageRight < 0.5){   //如果右侧处于显示状态   且滑动距离不超过右侧显示宽度的一半
							showRight(this);
						}else if(this.showState === 11  && percentageLeft > 0.5){   //如果中间处于显示状态   且滑动距离超过左侧隐藏宽度的一半
							showLeft(this);
						}else if(this.showState === 11  && percentageLeft < 0.5){	 //如果中间处于显示状态   且滑动距离不超过左侧隐藏宽度的一半
							showCenter(this);
						}
					}else if(state === 2){   //向左滑动
						if(this.showState === 10 && percentageLeft > 0.5){         //如果左侧处于显示状态   且滑动距离超过左侧显示宽度的一半
							showCenter(this);
						}else if(this.showState === 10 && percentageLeft < 0.5){   //如果左侧处于显示状态   且滑动距离不超过左侧显示宽度的一半
							showLeft(this);
						}else if(this.showState === 11  && percentageRight > 0.5){   //如果中间处于显示状态   且滑动距离超过右侧隐藏宽度的一半
							showRight(this);
						}else if(this.showState === 11  && percentageRight < 0.5){	 //如果中间处于显示状态   且滑动距离不超过右侧隐藏宽度的一半
							showCenter(this);
						}
					}
					setTimeout(function () {
						allowItemClick = true;
					}, 100);
				}

				//显示中间部分
				function showCenter(self){
					self._swipeWrapper.css('transform', 'translateX(' + (0) + 'px)');
					self._swipeWrapper.css('webkitTransform', 'translateX(' + (0) + 'px)');
                    self.showState = 11;
				};

				//显示右边部分
				function showRight(self){
					self._swipeWrapper.css('transform', 'translateX(' + (-self._swipeRightWidth) + 'px)');
					self._swipeWrapper.css('webkitTransform', 'translateX(' + (-self._swipeRightWidth) + 'px)');
                    self.showState = 12;
				};

				//显示左边部分
				function showLeft(self){
					self._swipeWrapper.css('transform', 'translateX(' + (self._swipeLeftWidth) + 'px)');
					self._swipeWrapper.css('webkitTransform', 'translateX(' + (self._swipeLeftWidth) + 'px)');
                    self.showState = 10;
				};
			},
		});
		MicroEvent.mixin(SwipeView);
		return SwipeView;
	}]);

	window._hySwiperLeftValue= null;
    window._hySwiperCenterValue= null;
    window._hySwiperRightValue= null;
	module.directive('hySwipe',['$onsen','SwipeView',function($onsen,SwipeView){
		var _leftWidth = null;
		var _centerWidth = null;
		return {
			restrict:'E',
			compile:function(element,attrs){
				return{
					pre:function(scope,element,attrs) {
						var swipe = new SwipeView(scope, element, attrs);
						$onsen.declareVarAttribute(attrs, swipe);
						element.data('hy-swipe', swipe);
						scope.$on('$destroy', function() {
							swipe._events = undefined;
							$onsen.removeModifierMethods(swipe);
							element.data('hy-swipe', undefined);
							element = null;
						});
						var left = element[0].querySelector('.hy-swipe-left');
						var leftWidth = _hySwiperLeftValue ? _hySwiperLeftValue : (left?left.offsetWidth:0);
                        _hySwiperLeftValue = leftWidth;
						angular.element(left).css('transform','translateX('+ (0 - leftWidth)+ 'px)');
						angular.element(left).css('webkitTransform','translateX('+ (0 - leftWidth)+ 'px)');
						var center = element[0].querySelector('.hy-swipe-center');
						var centerWidth = _hySwiperCenterValue ? _hySwiperCenterValue :center.offsetWidth;
                        _hySwiperCenterValue= centerWidth;
						var right = element[0].querySelector('.hy-swipe-right');
						var rightWidth = _hySwiperRightValue?_hySwiperRightValue:(right ? right.offsetWidth : 0);
                        _hySwiperRightValue = rightWidth;
						angular.element(right).css('transform','translateX('+ (centerWidth)+ 'px)');
						angular.element(right).css('webkitTransform','translateX('+ (centerWidth)+ 'px)');
					},
					post:function(scope,element,attrs){

					},
				}
			}
		};
	}]);
})();



/**
 * Created by MageeYang on 2016/5/30.
 * modify by MageeYang on 2017/1/11
 * 去掉对ons-switch的使用，全新构造switch标签
 */
(function () {
    'use strict';
    HySwitch.$inject = ["hyCheckboxDirective", "$hyUtil", "$parse", "$hySwitch"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.factory('$hySwitch', HySwitchFactory)
        .directive('hySwitch', HySwitch);

    /**
     * @ngdoc service
     * @module hymui.components.switch
     * @name $hySwitch
     * @restrict E
     *
     * @description
     * `$hySwitch` 服务是开关组件内部使用的服务，主要用于对自定义的开关内部文本进行style的css处理和生成
     * 根据开发者指定的开关文本，动态生成css样式并进行存储。如果有多个同样的则css只生成一次，其他元素直接引用class样式名
     *
     *
     */

    /**
     * @ngdoc method
     * @name $hySwitch#createStyle
     * @description 根据传递的内容，动态生成css样式文本，只用于switch开关组件
     * @param {string} content 需要显示的true，false对应的文本
     * @param {object=} element 需要处理的元素对象
     */

    function HySwitchFactory() {
        var switchService = {};
        switchService.styleArray = [];

        switchService._put = function (key, className, node) {
            var temp = {};
            temp.key = key;
            temp.className = className;
            temp.styleNode = node;
            switchService.styleArray.push(temp);
        };

        switchService._get = function (content) {
            for (var i = 0; i < switchService.styleArray.length; i++) {
                if (switchService.styleArray[i].key === content) {
                    return switchService.styleArray[i];
                }
            }
            return {};
        };

        switchService._hasContent = function (content) {
            var hasContent = false;
            for (var i = 0; i < switchService.styleArray.length; i++) {
                if (switchService.styleArray[i].key === content) {
                    hasContent = true;
                }
            }
            return hasContent;
        };

        switchService.createStyle = function (content, element) {
            if (content !== null && content !== undefined && content !== "") {
                if (!switchService._hasContent(content)) {
                    if (content.indexOf(",") > 0) {
                        var contentArray = content.split(",");
                        var className = "hy-switch-label-" + switchService.styleArray.length;
                        var styleStr = 'hy-switch:not(.hy-android).hy-switch-label.' + className + ' .hy-container:before {content: "' + contentArray[0] + '";}  ' +
                            'hy-switch:not(.hy-android).hy-switch-label.' + className + ' .hy-bar:before {content: "' + contentArray[1] + '";}';
                        var nod = document.createElement('style');
                        nod.type = "text/css";
                        if (nod.styleSheet) {         //ie下
                            nod.styleSheet.cssText = styleStr;
                        } else {
                            nod.innerHTML = styleStr;       //或者写成 nod.appendChild(document.createTextNode(str))
                        }
                        document.getElementsByTagName("head")[0].appendChild(nod);

                        element.addClass(className);

                        switchService._put(content, className, nod);
                    }
                } else {
                    var styleObject = switchService._get(content);
                    element.addClass(styleObject.className);
                }

            }

        };
        return switchService;
    }

    /**
     * @ngdoc directive
     * @module hymui.components.switch
     * @name hySwitch
     * @restrict E
     *
     * @description
     * `hy-switch` 开关组件是checkbox中使用很频繁的功能
     *
     * 默认采用辅助色调(accent),如果希望使用主色调，则添加`hy-primary` class样式类.
     *
     *
     * @param {string} ng-model 数据双向绑定的表达式.
     * @param {string=} name 控件在表单中的属性名称。
     * @param {expression=} ng-true-value 选择true时应设置表达式的值。
     * @param {expression=} ng-false-value 选择false时应设置表达式的值。
     * @param {string=} ng-change 当用户与输入元素交互而导致值发生变化时需要执行的表达式。
     * @param {expression=} ng-disabled 判断是否可用的表达式
     * @param {string=} hya-display-value 生成内部带描述的开关组件，字符串格式为：`"男,女"`；只用于ios风格的switch开关
     * @param {string=} aria-label 为标签添加到可访问性的文本值。 默认为开关组件的文本。
     *
     * @usage
     * <hljs lang="html">
     * <hy-switch ng-model="isActive" aria-label="Finished?">
     *   是否完成
     * </hy-switch>
     *
     * <hy-switch hya-display-value="男,女" ng-model="hasInk" aria-label="display value">
     *   内部带描述的开关组件
     * </hy-switch>
     *
     * <hy-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
     *   不可用的组件
     * </hy-switch>
     *
     * </hljs>
     */
    function HySwitch(hyCheckboxDirective, $hyUtil, $parse, $hySwitch) {
        var checkboxDirective = hyCheckboxDirective[0];

        return {
            restrict: 'E',
            priority: 210, // 提供编译级别
            transclude: true,
            template: '<div class="hy-container">' +
            '<div class="hy-bar"></div>' +
            '<div class="hy-thumb-container">' +
            '<div class="hy-thumb"></div>' +
            '</div>' +
            '</div>' +
            '<div ng-transclude class="hy-label"></div>',
            require: '?ngModel',
            compile: hySwitchCompile
        };

        function hySwitchCompile(element, attr) {
            var checkboxLink = checkboxDirective.compile(element, attr).post;
            if (attr.hasOwnProperty('hyaDisplayValue')) {
                var content = attr['hyaDisplayValue'] ? attr['hyaDisplayValue'] : "";
                $hySwitch.createStyle(content, element)
                element.addClass('hy-switch-label');
            }

            return function (scope, element, attr, ngModel) {
                ngModel = ngModel || $hyUtil.fakeNgModel();

                var disabledGetter = null;
                if (attr.disabled != null) {
                    disabledGetter = function () {
                        return true;
                    };
                } else if (attr.ngDisabled) {
                    disabledGetter = $parse(attr.ngDisabled);
                }


                checkboxLink(scope, element, attr, ngModel);

                if (disabledGetter) {
                    scope.$watch(disabledGetter, function (isDisabled) {
                        element.attr('tabindex', isDisabled ? -1 : 0);
                    });
                }

            };
        }


    }

})();
/**
 * Created by MageeYang on 2016/5/30.
 */
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    /**
     * @ngdoc attribute
     * @name hyTaphold 长按触发事件
     * @module haiyiMobile
     * @description 用于页面元素长按时触发的事件
     * hyTaphold        触发事件后执行的回调函数
     * @usage <div  hy-taphold="callback()"></div>
     */

    module.directive('hyTaphold',['$hyUtil',function($hyUtil){
        return {
            restrict : 'A',
            scope : {
                tapHoldFunc : "&hyTaphold",
            },
            compile: function(element){
                return function(scope,element,attrs){
                    element.on($hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                    element.on($hyUtil.gettouchEvent().move, angular.bind(this,handleTouchMove));
                    element.on($hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));
                    var tapHoldTimeout;
                    function handleTouchStart(e) {
                        if (tapHoldTimeout) clearTimeout(tapHoldTimeout);
                        tapHoldTimeout = setTimeout(function(){
                            if (e && e.touches && e.touches.length > 1) return;
                            e.preventDefault();
                            scope.tapHoldFunc();
                        },1000);
                    };
                    function handleTouchMove(e){
                        if(tapHoldTimeout){
                            clearTimeout(tapHoldTimeout);
                        }
                    };
                    function handleTouchEnd(e) {
                        if(tapHoldTimeout){
                            clearTimeout(tapHoldTimeout);
                        }
                    }
                }
            }
        };

    }]);

})();

/**
 * Created by Administrator on 2016/9/29.
 */
(function() {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', '$onsen');
    }
    module.directive('hyTimeAxis', ['$onsen', 'TimeAxisView', function ($onsen, TimeAxisView) {
        return {
            restrict: 'E',
            template: getTemplate,
            transclude: true,
            scope: {
                hyTextSize: '@hyTestSize',   // 文字大小
                //  hyTrueImgClass:'@hyTrueImgClass',      //true?????
                // hyFalseImgClass:'@hyFalseImgClass',      //false?????
                hyPageList: '=hyPageList'        //时间轴数组
            },
            compile: function (element, attrs) {
                return function (scope, element, attrs) {
                    var TimeAxis = new TimeAxisView(scope, element, attrs);
                    $onsen.declareVarAttribute(attrs, TimeAxis);
                    element.data('hy-TimeAxis', TimeAxis);

                    scope.$on('destory', function () {
                        TimeAxis._events = undefined;
                        $onsen.removeModifierMethods(TimeAxis);
                        element.data('hy-TimeAxis', undefined);
                        element = null;

                    })
                    $onsen.fireComponentEvent(element[0], 'init');
                };

            }
        };
        function getTemplate(element, attrs) {
            return'<ul>'+
                '<li  class="layout-row layout-align-start hy-Time-Axis-li" ng-repeat="news in newslist" style=" color: {{news.color}};font-size: {{hyTextSize}} ;">'+
                '<div ng-class="{\'hy-TimeAxis-button1\':news.role,\'hy-TimeAxis-button2\':!(news.role),\'hy-TimeAxis-up1\':$first,\'hy-TimeAxis-up\':!($first)}" ></div>'+
                '<div class="hy-TimeAxis-img1" ></div>'+
                '<div  ng-class="{\'hy-TimeAxis-top1\':news.role,\'hy-TimeAxis-top2\':!(news.role)}">'+
                '<div><span ng-if="news.city">[{{news.city}}]<span></span>{{news.html}}</span></div> '+
                '<div class="hy-TimeAxis-divbottom" >{{news.time}}</div>'+
                '<div class="hy-TimeAxis-img2"></div>'+
                '</div>'+
                '</li>'+
                ' </ul>';
        }
    }]);
    module.factory('TimeAxisView', ['$onsen', '$q', function ($onsen, $q) {
        var TimeAxisView = Class.extend({
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;
                var self = this;

                //  this._scope.hyFalseImgClass = this._scope.hyFalseImgClass?this._scope.hyFalseImgClass:'hy-TimeAxis-button2';
                //  this._scope.hyTrueImgClass = this._scope.hyTrueImgClass?this._scope.hyTrueImgClass:'hy-TimeAxis-button1';
                this._scope.hyTextSize = this._scope.hyTextSize?this._scope.hyTextSize:15;
                this._scope.$watch('hyPageList', function () {
                    self._initPageList();
                });

                //this._scope.role = angular.bind(this,this._role);
            },
            _show:function(){


            },

            _initPageList: function () {
                if (this._scope.hyPageList && this._scope.hyPageList.length > 0) {
                    this.size = this._scope.hyPageList.length;

                    this._scope.newslist = [];


                    for (var i = 0; i < this.size; i++) {
                        var menuObj = {};
                        if(!this._scope.hyPageList[i].hasOwnProperty('html')){
                            this._scope.hyPageList[i].html="信息丢失请查询";
                        }
                        if(this._scope.hyPageList[i].hasOwnProperty('color')){
                        }else{
                            if(this._scope.hyPageList[i].role) {
                                this._scope.hyPageList[i].color='green';
                            }else{
                                this._scope.hyPageList[i].color='gray';
                            }
                        }
                        menuObj = this._scope.hyPageList[i];
                        this._scope.newslist.push(menuObj);
                    }

                }
            },

        });
        MicroEvent.mixin(TimeAxisView);
        return TimeAxisView;
    }]);
})();
/**
 * Created by ym on 2017/3/17.
 */

(function () {
    'use strict';
    HyTimeLineDirective.$inject = ["$onsen", "TimeLineView"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module
        .factory('TimeLineView',HyTimeLineView)
        .directive('hyTimeLine',HyTimeLineDirective);


    function HyTimeLineView(){
        var HyTimeLineView = Class.extend({
            init:function(scope,element,attrs){
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
            }
        });
        MicroEvent.mixin(HyTimeLineView);
        return HyTimeLineView;
    }

    function HyTimeLineDirective($onsen,TimeLineView){
        return {
            restrict: 'E',
            template: getTemplate,
            transclude:true,
            scope: {
                isLast: '=isLast', //是否是最后一个
                isStart: '=isStart' //是否是第一个
            },
            compile: function (element, attr) {

                return function (scope, element, attrs) {
                    var timeLineView = new TimeLineView(scope, element, attrs);
                    $onsen.declareVarAttribute(attrs,timeLineView);

                    element.data('hy-time-line', timeLineView);

                    scope.$on('destory', function () {
                        timeLineView._events = undefined;
                        $onsen.removeModifierMethods(timeLineView);
                        element.data('hy-time-line', undefined);
                        element = null;
                    });
                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
        /**
         * 获取不同的模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attrs) {
            return '<div class="hy-timeline-content">' +
                '<div class="hy-timeline-content-inner" ng-transclude></div>' +
                '<div class="hy-timeline-content-line " ng-class="{end:isLast}"></div>' +
                '<div class="hy-timeline-content-pointer " ng-class="{start:isStart}"></div>' +
                '<div class="hy-timeline-content-border" ng-hide="isStart"><div class="divider"></div></div>' +
                '</div>';
        }
    }
})();

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    module.directive('hyTimer', ['$onsen', 'TimerView', function ($onsen, TimerView) {
        return {
            restrict: 'E',
            template: getTemplate,
            scope: {
                inline: "@hyaInline",
                dateValue: "=hyaDateValue",
                dateChange: '&hyaDateChange',
            },
            compile: function (element, attrs) {
                return {
                    pre: function (scope, element, attrs) {
                        var timer = new TimerView(scope, element, attrs);
                        $onsen.declareVarAttribute(timer);

                        element.data('hy-timer', timer);

                        scope.$on('destory', function () {
                            timer._events = undefined;
                            $onsen.removeModifierMethods(timer);
                            element.data('hy-timer', undefined);
                            element = null;
                        });
                    },
                    post: function (scope, element, attrs) {
                        $onsen.fireComponentEvent(element[0], 'init');
                    }
                }
            }
        };
        /**
         * 获取模板数据
         * @param element
         * @param attr
         * @returns {*}
         */
        function getTemplate(element, attr) {
            var template = '<div class="hy-timer-pane"><div class="hy-timer-toolbar"><div class="hy-timer-toolbar-innner">' +
                '<div class="hy-timer-inner-span"><span class="hy-timer-hour-button" ng-click="hourClick()" >{{displayHours}}</span></div>' +
                '<div class="hy-timer-inner-span"><span>:</span></div>' +
                '<div class="hy-timer-inner-span"><span class="hy-timer-minutes-button" ng-click="minuteClick()">{{displayMinutes}}</span></div>' +
                '</div></div>' +
                '<div class="hy-timer-inner"><div class="hy-timer-wrapper"><div class="hy-timer-back-circle"></div>' +
                '<div class="hy-timer-circle-content"></div></div></div>' +
                '</div>';
            return template;
        }
    }]);

    module.factory('TimerView', ['$onsen', '$q', '$hyDateUtil', '$hyUtil', function ($onsen, $q, $hyDateUtil, $hyUtil) {
        //外圈时间偏移量
        var outerpositions = [
            [0, 5],
            [54.5, 16.6],
            [94.4, 59.5],
            [109, 114],
            [94.4, 168.5],
            [54.5, 208.4],
            [0, 223],
            [-54.5, 208.4],
            [-94.4, 168.5],
            [-109, 114],
            [-94.4, 59.5],
            [-54.5, 19.6],
        ];
        //内圈时间偏移量
        var innerPositions = [
            [0, 42],
            [37.9, 50.9],
            [63, 79],
            [74, 116],
            [64, 151],
            [37, 178],
            [0, 190],
            [-37, 178],
            [-64, 151],
            [-74, 116],
            [-63, 79],
            [-37.9, 50.9],
        ];
        var pointerLength = 80; //指针默认长度80
        var TimerView = Class.extend({
            init: function (scope, element, attrs) {
                this._scope = scope;
                this._element = element;
                this._attrs = attrs;
                this._$hyDateUtil = $hyDateUtil;
                this._$hyUtil = $hyUtil;
                if (this._scope.inline === 'true') {
                    angular.element(this._element[0].querySelector('.hy-timer-pane')).addClass('hy-timer-pane-inline');
                }
                //初始化显示的时间
                this._initDisplayTime();

                //获取界面元素
                this._clickContent = angular.element(this._element[0].querySelector('.hy-timer-circle-content'));
                this._hourButton = angular.element(this._element[0].querySelector('.hy-timer-hour-button'));
                this._minutesButton = angular.element(this._element[0].querySelector('.hy-timer-minutes-button'));

                //默认首次显示小时选择界面
                this._initHourClick();
                this._isHours = true;
                this._minutesButton.addClass('no-active');
                var self = this;

                this._scope.hourClick = function () {
                    self._isHours = true;
                    self._initHourClick();
                    self._minutesButton.addClass('no-active');
                    self._hourButton.removeClass('no-active');

                };
                this._scope.minuteClick = function () {
                    self._isHours = false;
                    self._initMinuteClick();
                    self._hourButton.addClass('no-active');
                    self._minutesButton.removeClass('no-active');
                };
                this._scope.$watch('dateValue', function () {
                    self._initDisplayTime();
                    self._initHourClick();
                    self._isHours = true;
                    self._minutesButton.addClass('no-active');
                    self._hourButton.removeClass('no-active');
                });
                this._addEventListener();
            },
            /**
             * 初始化toolbar中显示的小时和分钟
             * @private
             */
            _initDisplayTime: function () {
                if (this._scope.dateValue === undefined || this._scope.dateValue === 'undefined' || this._scope.dateValue === null) {
                    this._scope.displayHours = "00";
                    this._scope.hours = 0;
                    this._scope.displayMinutes = "00";
                    this._scope.minutes = 0;
                } else {
                    this._scope.hours = this._scope.dateValue.getHours();
                    this._scope.minutes = this._scope.dateValue.getMinutes();
                    this._scope.displayHours = this._scope.dateValue.getHours() > 9 ? this._scope.dateValue.getHours() : '0' + this._scope.dateValue.getHours();
                    this._scope.displayMinutes = this._scope.dateValue.getMinutes() > 9 ? this._scope.dateValue.getMinutes() : '0' + this._scope.dateValue.getMinutes();

                }
            },
            /**
             * 更新显示的小时和分钟
             * @param hour
             * @param minute
             * @private
             */
            _updateDisplayTime: function (hour, minute) {
                this._scope.displayHours = hour;
                this._scope.displayMinutes = minute;
            },
            /**
             * 生成小时选择的表盘
             * @private
             */
            _initHourClick: function () {
                var clickPointer = angular.element('<div class="hy-timer-click-pointer"><div class="hy-timer-click-pointer-drop"></div></div>');
                this._clickContent.empty();
                this._clickContent.append(clickPointer);
                for (var i = 0; i < 12; i++) {
                    var num = i;
                    if (i === 0) {
                        num = 12;
                    }
                    var cell = this._buildCell("out", num, outerpositions[i]);
                    cell.addClass('hy-click-out-' + i);
                    if (num === this._scope.hours) {
                        cell.addClass('select');
                        angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (i * 30) + 'deg)');
                        angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (i * 30) + 'deg)');
                    }
                    this._clickContent.append(cell);
                }
                for (var j = 0; j < 12; j++) {
                    var num = j;
                    if (j !== 0) {
                        num = 12 + j;
                    }
                    var cell = this._buildCell("in", num, innerPositions[j]);
                    cell.addClass('hy-click-in-' + j);
                    if (num === this._scope.hours) {
                        cell.addClass('select');
                        angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (j * 30) + 'deg)');
                        angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (j * 30) + 'deg)');
                        angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).addClass('hy-pointer-inner');
                    }
                    this._clickContent.append(cell);
                }
            },
            /**
             * 生成分钟选择的表盘
             * @private
             */
            _initMinuteClick: function () {
                var clickPointer = angular.element('<div class="hy-timer-click-pointer"><div class="hy-timer-click-pointer-drop"></div></div>');
                this._clickContent.empty();
                this._clickContent.append(clickPointer);
                for (var i = 0; i < 12; i++) {
                    var num = i * 5;
                    var cell = this._buildCell("out", num, outerpositions[i]);
                    cell.addClass('hy-click-min-' + i);
                    if (num === this._scope.minutes) {
                        cell.addClass('select');
                    }
                    this._clickContent.append(cell);
                }
                angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (this._scope.minutes * 6) + 'deg)');
                angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (this._scope.minutes * 6) + 'deg)');

            },
            /**
             * 生成表盘的单元格内容
             * @param type in表示内圈，out表示外圈
             * @param num  表示显示到数字
             * @param position 表示单元格的偏移位置
             * @returns {*}
             * @private
             */
            _buildCell: function (type, num, position) {
                var cell = angular.element('<span>');
                if (type === 'in') {
                    cell.addClass('hy-timer-click-hour-in');
                } else {
                    cell.addClass('hy-timer-click-hour-out');
                }
                cell.css('transform', 'translate(' + position[0] + 'px, ' + position[1] + 'px)');
                cell.css('webkitTransform', 'translate(' + position[0] + 'px, ' + position[1] + 'px)');
                cell.text(num);
                return cell;
            },
            _upateMinutes: function (num) {
                var index = num / 5;
                var oldCell = angular.element(this._clickContent[0].querySelector('.select'));
                oldCell.removeClass('select');
                if ((num % 5) === 0) {
                    var cell = angular.element(this._clickContent[0].querySelector('.hy-click-min-' + index));
                    cell.addClass('select');
                }
                if (num <= 9) {
                    this._scope.displayMinutes = '0' + num;
                } else {
                    this._scope.displayMinutes = num;
                }
                this._scope.minutes = num;

            },
            _upateHours: function (type, num) {
                var cell = angular.element(this._clickContent[0].querySelector('.hy-click-' + type + '-' + num));
                var oldCell = angular.element(this._clickContent[0].querySelector('.select'));
                oldCell.removeClass('select');
                cell.addClass('select');
                if (type === 'out') {
                    angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).removeClass('hy-pointer-inner');
                    if (num === 0) {
                        this._scope.displayHours = 12;
                        this._scope.hours = 12;
                    } else {
                        if (num <= 9) {
                            this._scope.displayHours = '0' + num;
                        } else {
                            this._scope.displayHours = num;
                        }
                        this._scope.hours = num;

                    }
                } else {
                    angular.element(this._clickContent[0].querySelector('.hy-timer-click-pointer')).addClass('hy-pointer-inner');
                    if (num === 0) {
                        this._scope.displayHours = '00';
                        this._scope.hours = 0;
                    } else {
                        this._scope.displayHours = num + 12;
                        this._scope.hours = num+12;
                    }
                }

            },
            /**
             * 添加鼠标滑动或手势触摸事件
             * @private
             */
            _addEventListener: function () {
                var self = this;
                var allowItemClick = true;
                var remoteNum = 0, offset, boundingRect, pointerLen;
                var isTouched, isMoved, touchStartX, touchStartY, touchCurrentX, touchCurrentY, touchStartTime, touchEndTime, startTranslate, currentTranslate, wrapperWidth, wrapperHeight, percentage, touchesDiff, isScrolling;
                this._clickContent.on(this._$hyUtil.gettouchEvent().start, angular.bind(this, handleTouchStart));
                this._clickContent.on(this._$hyUtil.gettouchEvent().move, angular.bind(this, handleTouchMove));
                this._clickContent.on(this._$hyUtil.gettouchEvent().end, angular.bind(this, handleTouchEnd));
                function createRemoteNum() {
                    pointerLen = Math.sqrt(offset.offsetX * offset.offsetX + offset.offsetY * offset.offsetY);
                    var c = Math.acos(offset.offsetY / pointerLen) / Math.PI * 180;
                    if (offset.offsetX < 0) {
                        c = 360 - c;
                    }
                    if (self._isHours) {
                        remoteNum = Math.round(c / 30);
                        if (remoteNum === 12) {
                            remoteNum = 0;
                        }
                    } else {
                        remoteNum = Math.round(c / 6);
                        if (remoteNum === 60) {
                            remoteNum = 0;
                        }
                    }
                };
                function handleTouchStart(e) {
                    isTouched = true;
                    var el = e.target;
                    boundingRect = self._clickContent[0].getBoundingClientRect();
                    touchCurrentX = e.type === 'touchstart' ? e.targetTouches[0].clientX : e.clientX;
                    touchCurrentY = e.type === 'touchstart' ? e.targetTouches[0].clientY : e.clientY;

                    offset = {
                        offsetX: touchCurrentX - boundingRect.left - 130,
                        offsetY: 140 - (touchCurrentY - boundingRect.top),
                    };
                    e.stopPropagation();
                    createRemoteNum();

                };
                function handleTouchMove(e) {
                    if (!isTouched) return;

                    touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;
                    touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;

                    offset = {
                        offsetX: touchCurrentX - boundingRect.left - 130,
                        offsetY: 140 - (touchCurrentY - boundingRect.top),
                    };
                    e.preventDefault();
                    createRemoteNum();
                    if (self._isHours) {

                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (remoteNum * 30) + 'deg)');
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (remoteNum * 30) + 'deg)');

                        if (pointerLen > pointerLength) {
                            self._scope.$apply(self._upateHours('out', remoteNum));
                        } else {
                            self._scope.$apply(self._upateHours('in', remoteNum));
                        }
                    } else {
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (remoteNum * 6) + 'deg)');
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (remoteNum * 6) + 'deg)');

                        self._scope.$apply(self._upateMinutes(remoteNum));

                    }
                };

                function handleTouchEnd(e) {
                    isTouched = false;
                    e.stopPropagation();
                    if (self._isHours) {

                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (remoteNum * 30) + 'deg)');
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (remoteNum * 30) + 'deg)');

                        if (pointerLen > pointerLength) {
                            self._scope.$apply(self._upateHours('out', remoteNum));
                        } else {
                            self._scope.$apply(self._upateHours('in', remoteNum));
                        }
                    } else {
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('transform', 'rotateZ(' + (remoteNum * 6) + 'deg)');
                        angular.element(self._clickContent[0].querySelector('.hy-timer-click-pointer')).css('webkitTransform', 'rotateZ(' + (remoteNum * 6) + 'deg)');

                        self._scope.$apply(self._upateMinutes(remoteNum));

                    }

                    if (self._isHours) {
                        self._isHours = false;
                        self._initMinuteClick();
                        self._hourButton.addClass('no-active');
                        self._minutesButton.removeClass('no-active');
                    } else {
                        self._scope.$apply(function () {

                            if ( self._scope.dateValue === undefined ||self._scope.dateValue === null || self._scope.dateValue === 'undefined') {
                                self._scope.dateValue = new Date(new Date().setHours(self._scope.hours, self._scope.minutes, 0, 0));
                            } else {
                                self._scope.dateValue = new Date(self._scope.dateValue.setHours(self._scope.hours, self._scope.minutes, 0, 0));
                            }
                            self._scope.dateChange({date: self._scope.dateValue});
                        });

                    }
                }
            },
        });
        MicroEvent.mixin(TimerView);
        return TimerView;
    }]);
})();
/**
 * Created by ym on 2017/8/22.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('toolbarModal', ['$hyUtil', function ($hyUtil) {
        return {
            restrict: 'A',
            compile: function (element, attr) {
                return {
                    //pre: function (scope, element, attrs) {
                    //    if ($hyUtil.isIOS()) {
                    //        element.addClass('ios-toolbar');
                    //    }
                    //},
                    //post: function (scope, element) {
                    //}
                }
            }
        };
    }]);
})();


(function () {
    'use strict';
    VirtualRepeatContainerController.$inject = ["$$rAF", "$hyUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs"];
    VirtualRepeatController.$inject = ["$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF", "$hyUtil"];
    VirtualRepeatDirective.$inject = ["$parse"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }


    /**
     * @ngdoc module
     * @name hymui.components.virtualRepeat
     */
    module
        .directive('hyVirtualRepeatContainer', VirtualRepeatContainerDirective)
        .directive('hyVirtualRepeat', VirtualRepeatDirective);


    /**
     * @ngdoc directive
     * @name hyVirtualRepeatContainer
     * @module hymui.components.virtualRepeat
     * @restrict E
     * @description
     * `hy-virtual-repeat-container` 指令为`hy-virtual-repeat` 提供可以滚动的容器。
     *
     * VirtualRepeat是ng-repeat的替代指令，它指令内部只渲染足够的DOM节点来填充容器，并在用户滚动时回收它们。
     *
     * 一旦某个元素不再可见，VirtualRepeat将循环使用这个元素，并通过将数据集内容替换为另一个可见的项来重用它。
     *
     *
     * @usage
     * <hljs lang="html">
     *
     * <hy-virtual-repeat-container hy-top-index="topIndex">
     *   <div hy-virtual-repeat="i in items" hy-item-size="20">Hello {{i}}!</div>
     * </hy-virtual-repeat-container>
     * </hljs>
     *
     * @param {number=} hy-top-index 指定位于滚动容器顶部的项的索引绑定到$scope。 它可以读取和设置滚动位置
     * @param {boolean=} hy-orient-horizontal 设置是否水平滚动，默认是垂直滚动
     * @param {boolean=} hy-auto-shrink 如果存在该属性，当该数量小于其原始大小时，容器将收缩以适合项目数量
     * @param {number=} hy-auto-shrink-min 最小的项目数，默认是0
     */
    function VirtualRepeatContainerDirective() {
        return {
            controller: VirtualRepeatContainerController,
            template: virtualRepeatContainerTemplate,
            compile: function virtualRepeatContainerCompile($element, $attrs) {
                $element
                    .addClass('hy-virtual-repeat-container')
                    .addClass($attrs.hasOwnProperty('hyOrientHorizontal')
                        ? 'hy-orient-horizontal'
                        : 'hy-orient-vertical');
            }
        };
    }


    function virtualRepeatContainerTemplate($element) {
        return '<div class="hy-virtual-repeat-scroller">' +
            '<div class="hy-virtual-repeat-sizer"></div>' +
            '<div class="hy-virtual-repeat-offsetter">' +
            $element[0].innerHTML +
            '</div></div>';
    }

    /**
     * 设置元素的最大尺寸（以像素为单位）。
     * 实际值在不同的浏览器之间有所不同，但IE11的大小只有1,533,917像素。
     * @const {number}
     */
    var MAX_ELEMENT_SIZE = 1533917;

    /**
     * 在容器内的可见区域上方和下方隐藏渲染的其他元素数。
     * 当在Safari中非常快速地滚动时，较高的数字导致较少的闪烁，
     * 但是具有较高的呈现和脏检查的成本。
     * @const {number}
     */
    var NUM_EXTRA = 5;

    /** @ngInject */
    function VirtualRepeatContainerController($$rAF, $hyUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {
        this.$rootScope = $rootScope;
        this.$scope = $scope;
        this.$element = $element;
        this.$attrs = $attrs;

        /** @type {number} 容器的宽度或高度 */
        this.size = 0;
        /** @type {number} 滚动的宽度或高度 */
        this.scrollSize = 0;
        /** @type {number} 滚动到left或top的偏移量 */
        this.scrollOffset = 0;
        /** @type {boolean} 当前是否是水平滚动 */
        this.horizontal = this.$attrs.hasOwnProperty('hyOrientHorizontal');
        /** @type {!VirtualRepeatController} 容器内部repeater的控制器 */
        this.repeater = null;
        /** @type {boolean} 是否自动收缩 */
        this.autoShrink = this.$attrs.hasOwnProperty('hyAutoShrink');
        /** @type {number} 自动收缩的最小值 */
        this.autoShrinkMin = parseInt(this.$attrs.hyAutoShrinkMin, 10) || 0;
        /** @type {?number} 当收缩时原始容器的大小 */
        this.originalSize = null;
        /** @type {number} 用于抵消总滚动大小的量。 */
        this.offsetSize = parseInt(this.$attrs.hyOffsetSize, 10) || 0;
        /** @type {?string} 在容器自动缩小之前的高度或宽度。 */
        this.oldElementSize = null;

        if (this.$attrs.hyTopIndex) {
            /** @type {function(angular.Scope): number} 绑定topIndex到作用域中 */
            this.bindTopIndex = $parse(this.$attrs.hyTopIndex);
            /** @type {number} 指定当前容器顶部项目的索引值 */
            this.topIndex = this.bindTopIndex(this.$scope);

            if (!angular.isDefined(this.topIndex)) {
                this.topIndex = 0;
                this.bindTopIndex.assign(this.$scope, 0);
            }

            this.$scope.$watch(this.bindTopIndex, angular.bind(this, function (newIndex) {
                if (newIndex !== this.topIndex) {
                    this.scrollToIndex(newIndex);
                }
            }));
        } else {
            this.topIndex = 0;
        }

        this.scroller = $element[0].querySelector('.hy-virtual-repeat-scroller');
        this.sizer = this.scroller.querySelector('.hy-virtual-repeat-sizer');
        this.offsetter = this.scroller.querySelector('.hy-virtual-repeat-offsetter');

        // 在dom渲染完成后，测量容器的初始尺寸，并在其变化时尽力重新测量。
        var boundUpdateSize = angular.bind(this, this.updateSize);

        $$rAF(angular.bind(this, function () {
            boundUpdateSize();

            var debouncedUpdateSize = $hyUtil.debounce(boundUpdateSize, 10, null, false);
            var jWindow = angular.element($window);

            if (!this.size) {
                debouncedUpdateSize();
            }

            jWindow.on('resize', debouncedUpdateSize);
            $scope.$on('$destroy', function () {
                jWindow.off('resize', debouncedUpdateSize);
            });

            $scope.$emit('$hy-resize-enable');
            $scope.$on('$hy-resize', boundUpdateSize);
        }));
    }


    /** 在启动时由容器内的hy-virtual-repeat调用，将hy-virtual-repeat控制器注册到容器指令内部*/
    VirtualRepeatContainerController.prototype.register = function (repeaterCtrl) {
        this.repeater = repeaterCtrl;

        angular.element(this.scroller)
            .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));
    };


    /** @return {boolean} 判断当前容器是否水平滚动 */
    VirtualRepeatContainerController.prototype.isHorizontal = function () {
        return this.horizontal;
    };


    /** @return {number} 容器的大小，高度或宽度*/
    VirtualRepeatContainerController.prototype.getSize = function () {
        return this.size;
    };


    /**
     * 重新设置容器的大小
     * @private
     * @param {number} size 新的大小值
     */
    VirtualRepeatContainerController.prototype.setSize_ = function (size) {
        var dimension = this.getDimensionName_();

        this.size = size;
        this.$element[0].style[dimension] = size + 'px';
    };


    VirtualRepeatContainerController.prototype.unsetSize_ = function () {
        this.$element[0].style[this.getDimensionName_()] = this.oldElementSize;
        this.oldElementSize = null;
    };


    /** 指示容器重新测量其大小。*/
    VirtualRepeatContainerController.prototype.updateSize = function () {
        // 如果原始大小已经确定，我们可以跳过更新。
        if (this.originalSize) return;

        this.size = this.isHorizontal()
            ? this.$element[0].clientWidth
            : this.$element[0].clientHeight;

        // 更新大小后重新检查滚动位置。
        this.handleScroll_();

        this.repeater && this.repeater.containerUpdated();
    };


    /** @return {number} 当前容器的滚动高度或滚动宽度*/
    VirtualRepeatContainerController.prototype.getScrollSize = function () {
        return this.scrollSize;
    };


    VirtualRepeatContainerController.prototype.getDimensionName_ = function () {
        return this.isHorizontal() ? 'width' : 'height';
    };


    /**
     * 将滚动元素设置为指定的大小。
     * @private
     * @param {number} size 新的大小.
     */
    VirtualRepeatContainerController.prototype.sizeScroller_ = function (size) {
        var dimension = this.getDimensionName_();
        var crossDimension = this.isHorizontal() ? 'height' : 'width';

        // 清空尺寸
        this.sizer.innerHTML = '';

        if (size < MAX_ELEMENT_SIZE) {
            this.sizer.style[dimension] = size + 'px';
        } else {
            this.sizer.style[dimension] = 'auto';
            this.sizer.style[crossDimension] = 'auto';

            // 将我们要渲染的总大小进行除，得到N个部分。
            var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);

            // 要为每个片段克隆的元素模板设置大小。
            var sizerChild = document.createElement('div');
            sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';
            sizerChild.style[crossDimension] = '1px';

            for (var i = 0; i < numChildren; i++) {
                this.sizer.appendChild(sizerChild.cloneNode(false));
            }
            sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';
            this.sizer.appendChild(sizerChild);
        }
    };


    /**
     * 如果启用自动缩减，则根据情况收缩或取消收缩。
     * @private
     * @param {number} size 新的大小.
     */
    VirtualRepeatContainerController.prototype.autoShrink_ = function (size) {
        var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());

        if (this.autoShrink && shrinkSize !== this.size) {
            if (this.oldElementSize === null) {
                this.oldElementSize = this.$element[0].style[this.getDimensionName_()];
            }

            var currentSize = this.originalSize || this.size;

            if (!currentSize || shrinkSize < currentSize) {
                if (!this.originalSize) {
                    this.originalSize = this.size;
                }

                this.setSize_(shrinkSize);
            } else if (this.originalSize !== null) {
                this.unsetSize_();

                var _originalSize = this.originalSize;
                this.originalSize = null;

                if (!_originalSize) this.updateSize();

                this.setSize_(_originalSize || this.size);
            }

            this.repeater.containerUpdated();
        }
    };


    /**
     * 根据其项目计数和项目大小调用，设置scrollHeight或scrollWidth
     * @param {number} itemsSize 项目的总大小.
     */
    VirtualRepeatContainerController.prototype.setScrollSize = function (itemsSize) {
        var size = itemsSize + this.offsetSize;
        if (this.scrollSize === size) return;

        this.sizeScroller_(size);
        this.autoShrink_(size);
        this.scrollSize = size;
    };


    /** @return {number} 当前容器的滚动偏移量. */
    VirtualRepeatContainerController.prototype.getScrollOffset = function () {
        return this.scrollOffset;
    };

    /**
     * 滚动到指定位置
     * @param {number} position
     */
    VirtualRepeatContainerController.prototype.scrollTo = function (position) {
        this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;
        this.handleScroll_();
    };

    /**
     * 滚动知道指定索引
     * @param {number} index
     */
    VirtualRepeatContainerController.prototype.scrollToIndex = function (index) {
        var itemSize = this.repeater.getItemSize();
        var itemsLength = this.repeater.itemsLength;
        if (index > itemsLength) {
            index = itemsLength - 1;
        }
        this.scrollTo(itemSize * index);
    };

    VirtualRepeatContainerController.prototype.resetScroll = function () {
        this.scrollTo(0);
    };


    VirtualRepeatContainerController.prototype.handleScroll_ = function () {
        var doc = angular.element(document)[0];
        var ltr = doc.dir != 'rtl' && doc.body.dir != 'rtl';
        if (!ltr && !this.maxSize) {
            this.scroller.scrollLeft = this.scrollSize;
            this.maxSize = this.scroller.scrollLeft;
        }
        var offset = this.isHorizontal() ?
            (ltr ? this.scroller.scrollLeft : this.maxSize - this.scroller.scrollLeft)
            : this.scroller.scrollTop;
        if (offset === this.scrollOffset || offset > this.scrollSize - this.size) return;

        var itemSize = this.repeater.getItemSize();
        if (!itemSize) return;

        var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);

        var transform = (this.isHorizontal() ? 'translateX(' : 'translateY(') +
            (!this.isHorizontal() || ltr ? (numItems * itemSize) : -(numItems * itemSize)) + 'px)';

        this.scrollOffset = offset;
        this.offsetter.style.webkitTransform = transform;
        this.offsetter.style.transform = transform;

        if (this.bindTopIndex) {
            var topIndex = Math.floor(offset / itemSize);
            if (topIndex !== this.topIndex && topIndex < this.repeater.getItemCount()) {
                this.topIndex = topIndex;
                this.bindTopIndex.assign(this.$scope, topIndex);
                if (!this.$rootScope.$$phase) this.$scope.$digest();
            }
        }

        this.repeater.containerUpdated();
    };


    /**
     * @ngdoc directive
     * @name hyVirtualRepeat
     * @module hymui.components.virtualRepeat
     * @restrict A
     * @priority 1000
     * @description
     * `hy-virtual-repeat` 指令通过使用虚拟的滚动循环生成某一个元素。
     *
     * Virtual repeat 是ng-repeat的有限替代指令，它只呈现足够的dom节点来填充容器，并在用户滚动时回收它们。
     * 支持迭代的数组，但不支持对象。 不支持跟踪。
     *
     * > <b>注意:</b> 查看
     *   <a ng-href="api/directive/hyVirtualRepeatContainer">VirtualRepeatContainer</a> API文档了解更多
     *
     * @usage
     * <hljs lang="html">
     * <hy-virtual-repeat-container>
     *   <div hy-virtual-repeat="i in items">Hello {{i}}!</div>
     * </hy-virtual-repeat-container>
     *
     * <hy-virtual-repeat-container hy-orient-horizontal>
     *   <div hy-virtual-repeat="i in items" hy-item-size="20">Hello {{i}}!</div>
     * </hy-virtual-repeat-container>
     * </hljs>
     *
     * @param {number=} hy-item-size 重复元素的高度或宽度（每个元素必须相同）。
     * 可选的。 如果没有指定，将尝试从dom读取大小，但仍假定所有重复的节点具有相同的高度或宽度。
     * @param {string=} hy-extra-name 指定一个附加名称，当前迭代项目可以分配到重复的范围（在`hy-autocomplete`指令中使用）。
     * @param {boolean=} hy-on-demand 当存在时，将hy-virtual-repeat参数视为对象而不是数组。

     *   **注意:** 此对象必须下方的两个方法接口:
     *
     *   - `getItemAtIndex: function(index) [object]` 该索引处的项目，如果尚未加载，则为null（在该情况下，应该开始下载项目）。
     *   - `getLength: function() [number]` 包含的数据长度。 理想情况下，当计数已知时，此方法应返回它。
     *   否则，返回比当前加载的项目更高的数字，以产生无限滚动行为。
     */
    function VirtualRepeatDirective($parse) {
        return {
            controller: VirtualRepeatController,
            priority: 1000,
            require: ['hyVirtualRepeat', '^^hyVirtualRepeatContainer'],
            restrict: 'A',
            terminal: true,
            transclude: 'element',
            compile: function VirtualRepeatCompile($element, $attrs) {
                var expression = $attrs.hyVirtualRepeat;
                var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);
                var repeatName = match[1];
                var repeatListExpression = $parse(match[2]);
                var extraName = $attrs.hyExtraName && $parse($attrs.hyExtraName);

                return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {
                    ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
                };
            }
        };
    }


    /** @ngInject */
    function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope,
                                     $$rAF, $hyUtil) {
        this.$scope = $scope;
        this.$element = $element;
        this.$attrs = $attrs;
        this.$browser = $browser;
        this.$document = $document;
        this.$rootScope = $rootScope;
        this.$$rAF = $$rAF;

        /** @type {boolean} 是否是特殊模式*/
        this.onDemand = $hyUtil.parseAttributeBoolean($attrs.hyOnDemand);

        this.browserCheckUrlChange = $browser.$$checkUrlChange;
        /** @type {number} 开始的索引（基于滚动偏移） */
        this.newStartIndex = 0;
        /** @type {number} 结束的索引（基于滚动偏移） */
        this.newEndIndex = 0;
        /** @type {number} 有效的索引（基于滚动偏移） */
        this.newVisibleEnd = 0;
        /** @type {number} 上一个重复索引（基于滚动偏移）*/
        this.startIndex = 0;
        /** @type {number} 下一个重复索引（基于滚动偏移） */
        this.endIndex = 0;

        /** @type {?number} 内部重复元素的高度或宽度 */
        this.itemSize = $scope.$eval($attrs.hyItemSize) || null;

        /** @type {boolean} 这是否是第一次展示项目。 */
        this.isFirstRender = true;

        /**
         * @private {boolean} 列表中的项目是否已更新
         */
        this.isVirtualRepeatUpdating_ = false;

        /** @type {number} 当前的项目长度。*/
        this.itemsLength = 0;

        /**
         * @type {!Function} Unwatch项目大小（当没有指定hy-items-size），否则为angular.noop。
         */
        this.unwatchItemSize_ = angular.noop;

        /**
         * 当前通过重复索引渲染块。
         */
        this.blocks = {};
        /** @type 当前未使用块的池。*/
        this.pooledBlocks = [];

        $scope.$on('$destroy', angular.bind(this, this.cleanupBlocks_));
    }


    /**
     * 表示重复项目的对象。
     */
    VirtualRepeatController.Block;


    /**
     * postlink函数
     * @param {!VirtualRepeatContainerController} 滚动容器的控制器.
     * @param {!Function} 绑定的转换函数transclude.
     * @param {string} repeatName重复表达式的左侧值，指示数组中每个项目的名称.
     * @param {!Function} repeat的表达式.
     * @param {string|undefined} 可选的，repeat的别名.
     */
    VirtualRepeatController.prototype.link_ =
        function (container, transclude, repeatName, repeatListExpression, extraName) {
            this.container = container;
            this.transclude = transclude;
            this.repeatName = repeatName;
            this.rawRepeatListExpression = repeatListExpression;
            this.extraName = extraName;
            this.sized = false;

            this.repeatListExpression = angular.bind(this, this.repeatListExpression_);

            this.container.register(this);
        };


    /** @private 清空渲染块 */
    VirtualRepeatController.prototype.cleanupBlocks_ = function () {
        angular.forEach(this.pooledBlocks, function cleanupBlock(block) {
            block.element.remove();
        });
    };


    /** @private 尝试通过测量dom中的重复元素来设置itemSize*/
    VirtualRepeatController.prototype.readItemSize_ = function () {
        if (this.itemSize) {
            return;
        }

        this.items = this.repeatListExpression(this.$scope);
        this.parentNode = this.$element[0].parentNode;
        var block = this.getBlock_(0);
        if (!block.element[0].parentNode) {
            this.parentNode.appendChild(block.element[0]);
        }

        this.itemSize = block.element[0][
                this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;

        this.blocks[0] = block;
        this.poolBlock_(0);

        if (this.itemSize) {
            this.containerUpdated();
        }
    };


    /**
     * 返回用户指定的重复列表，在滚动/动态加载模式的情况下将其转换为类似数组的对象。
     * @param {!angular.Scope} 作用域.
     * @return {!Array|!Object} 需要重复处理的数组.
     */
    VirtualRepeatController.prototype.repeatListExpression_ = function (scope) {
        var repeatList = this.rawRepeatListExpression(scope);

        if (this.onDemand && repeatList) {
            var virtualList = new VirtualRepeatModelArrayLike(repeatList);
            virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);
            return virtualList;
        } else {
            return repeatList;
        }
    };


    /**
     * 由滚动容器调用。 通知我们容器卷轴或大小已更改。
     */
    VirtualRepeatController.prototype.containerUpdated = function () {

        if (!this.itemSize) {

            if (this.unwatchItemSize_ && this.unwatchItemSize_ !== angular.noop) {
                this.unwatchItemSize_();
            }
            this.unwatchItemSize_ = this.$scope.$watchCollection(
                this.repeatListExpression,
                angular.bind(this, function (items) {
                    if (items && items.length) {
                        this.readItemSize_();
                    }
                }));
            if (!this.$rootScope.$$phase) this.$scope.$digest();

            return;
        } else if (!this.sized) {
            this.items = this.repeatListExpression(this.$scope);
        }

        if (!this.sized) {
            this.unwatchItemSize_();
            this.sized = true;
            this.$scope.$watchCollection(this.repeatListExpression,
                angular.bind(this, function (items, oldItems) {
                    if (!this.isVirtualRepeatUpdating_) {
                        this.virtualRepeatUpdate_(items, oldItems);
                    }
                }));
        }

        this.updateIndexes_();

        if (this.newStartIndex !== this.startIndex ||
            this.newEndIndex !== this.endIndex ||
            this.container.getScrollOffset() > this.container.getScrollSize()) {
            if (this.items instanceof VirtualRepeatModelArrayLike) {
                this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);
            }
            this.virtualRepeatUpdate_(this.items, this.items);
        }
    };


    /**
     * 由滚动容器调用，获取每一个项目的大小
     * @return {?number} 项目大小
     */
    VirtualRepeatController.prototype.getItemSize = function () {
        return this.itemSize;
    };


    /**
     * 由滚动容器调用，返回重复项目的个数
     * @return {?number} 项目个数
     */
    VirtualRepeatController.prototype.getItemCount = function () {
        return this.itemsLength;
    };


    /**
     * 更新内部虚拟列表项目
     * @private
     */
    VirtualRepeatController.prototype.virtualRepeatUpdate_ = function (items, oldItems) {
        this.isVirtualRepeatUpdating_ = true;

        var itemsLength = items && items.length || 0;
        var lengthChanged = false;

        if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {
            this.items = items;
            var previousScrollOffset = this.container.getScrollOffset();
            this.container.resetScroll();
            this.container.scrollTo(previousScrollOffset);
        }

        if (itemsLength !== this.itemsLength) {
            lengthChanged = true;
            this.itemsLength = itemsLength;
        }

        this.items = items;
        if (items !== oldItems || lengthChanged) {
            this.updateIndexes_();
        }

        this.parentNode = this.$element[0].parentNode;

        if (lengthChanged) {
            this.container.setScrollSize(itemsLength * this.itemSize);
        }

        if (this.isFirstRender) {
            this.isFirstRender = false;
            var startIndex = this.$attrs.hyStartIndex ?
                this.$scope.$eval(this.$attrs.hyStartIndex) :
                this.container.topIndex;
            this.container.scrollToIndex(startIndex);
        }

        // Detach and pool any blocks that are no longer in the viewport.
        Object.keys(this.blocks).forEach(function (blockIndex) {
            var index = parseInt(blockIndex, 10);
            if (index < this.newStartIndex || index >= this.newEndIndex) {
                this.poolBlock_(index);
            }
        }, this);

        this.$browser.$$checkUrlChange = angular.noop;

        var i, block,
            newStartBlocks = [],
            newEndBlocks = [];

        for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {
            block = this.getBlock_(i);
            this.updateBlock_(block, i);
            newStartBlocks.push(block);
        }

        for (; this.blocks[i] != null; i++) {
            this.updateBlock_(this.blocks[i], i);
        }
        var maxIndex = i - 1;

        for (; i < this.newEndIndex; i++) {
            block = this.getBlock_(i);
            this.updateBlock_(block, i);
            newEndBlocks.push(block);
        }

        if (newStartBlocks.length) {
            this.parentNode.insertBefore(
                this.domFragmentFromBlocks_(newStartBlocks),
                this.$element[0].nextSibling);
        }
        if (newEndBlocks.length) {
            this.parentNode.insertBefore(
                this.domFragmentFromBlocks_(newEndBlocks),
                this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
        }

        this.$browser.$$checkUrlChange = this.browserCheckUrlChange;

        this.startIndex = this.newStartIndex;
        this.endIndex = this.newEndIndex;

        this.isVirtualRepeatUpdating_ = false;
    };


    /**
     * @param {number} index 在重复列表中的索引值。
     * @return {!VirtualRepeatController.Block}
     * @private
     */
    VirtualRepeatController.prototype.getBlock_ = function (index) {
        if (this.pooledBlocks.length) {
            return this.pooledBlocks.pop();
        }

        var block;
        this.transclude(angular.bind(this, function (clone, scope) {
            block = {
                element: clone,
                new: true,
                scope: scope
            };

            this.updateScope_(scope, index);
            this.parentNode.appendChild(clone[0]);
        }));

        return block;
    };


    VirtualRepeatController.prototype.updateBlock_ = function (block, index) {
        this.blocks[index] = block;

        if (!block.new &&
            (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {
            return;
        }
        block.new = false;

        this.updateScope_(block.scope, index);

        if (!this.$rootScope.$$phase) {
            block.scope.$digest();
        }
    };


    VirtualRepeatController.prototype.updateScope_ = function (scope, index) {
        scope.$index = index;
        scope[this.repeatName] = this.items && this.items[index];
        if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];
    };


    VirtualRepeatController.prototype.poolBlock_ = function (index) {
        this.pooledBlocks.push(this.blocks[index]);
        this.parentNode.removeChild(this.blocks[index].element[0]);
        delete this.blocks[index];
    };


    VirtualRepeatController.prototype.domFragmentFromBlocks_ = function (blocks) {
        var fragment = this.$document[0].createDocumentFragment();
        blocks.forEach(function (block) {
            fragment.appendChild(block.element[0]);
        });
        return fragment;
    };


    VirtualRepeatController.prototype.updateIndexes_ = function () {
        var itemsLength = this.items ? this.items.length : 0;
        var containerLength = Math.ceil(this.container.getSize() / this.itemSize);

        this.newStartIndex = Math.max(0, Math.min(
            itemsLength - containerLength,
            Math.floor(this.container.getScrollOffset() / this.itemSize)));
        this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;
        this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);
        this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);
    };


    function VirtualRepeatModelArrayLike(model) {
        if (!angular.isFunction(model.getItemAtIndex) || !angular.isFunction(model.getLength)) {
            throw Error('When hy-on-demand is enabled, the Object passed to hy-virtual-repeat must implement ' +
                'functions getItemAtIndex() and getLength() ');
        }

        this.model = model;
    }


    VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function (start, end) {
        for (var i = start; i < end; i++) {
            if (!this.hasOwnProperty(i)) {
                this[i] = this.model.getItemAtIndex(i);
            }
        }
        this.length = this.model.getLength();
    };


    function abstractMethod() {
        throw Error('Non-overridden abstract method called.');
    }

})();
/**
 * Created by ym on 2017/1/11.
 */


(function(){
    'use strict';
    HyWhiteframeDirective.$inject = ["$log"];
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }

    //阴影效果
    module.directive('hyWhiteframe', HyWhiteframeDirective);

    function HyWhiteframeDirective($log) {
        var DISABLE_DP = -1;
        var MIN_DP = 1;
        var MAX_DP = 24;
        var DEFAULT_DP = 4;
        return {
            link: postLink
        };

        function postLink(scope, element, attr) {
            var oldClass = '';
            attr.$observe('hyWhiteframe', function (elevation) {
                elevation = parseInt(elevation, 10) || DEFAULT_DP;

                if (elevation != DISABLE_DP && (elevation > MAX_DP || elevation < MIN_DP)) {
                    $log.warn('hy-whiteframe attribute value is invalid. It should be a number between ' + MIN_DP + ' and ' + MAX_DP, element[0]);
                    elevation = DEFAULT_DP;
                }

                var newClass = elevation == DISABLE_DP ? '' : 'hy-whiteframe-' + elevation + 'dp';
                attr.$updateClass(newClass, oldClass);
                oldClass = newClass;
            });
        }
    }
})();

/**
 * Created by ym on 2017/3/1.
 */

(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    module.directive('hyScroll', ['$onsen','HyScrollView', function ($onsen,HyScrollView) {
        return {
            restrict: 'E',
            replace: false,
            transclude: true,
            scope: {
                pullDownOption: '=',
                pullDownLoad: '&',
                pullUpOption:'=',
                pullUpLoad:'&',
                direction:'@'
            },
            compile: function (element, attr) {
                var content = element.addClass('hy-scroll').children().remove();
                return function (scope, element, attrs,controller, transclude) {
                    if (attrs.ngController) {
                        throw new Error('"hy-scroll" can\'t accept "ng-controller" directive.');
                    }
                    var scroll = new HyScrollView(scope, element, attrs,transclude);
                    $onsen.declareVarAttribute(attrs,scroll);

                    element.data('hy-scroll', scroll);

                    scope.$on('destory', function () {
                        scroll._events = undefined;
                        $onsen.removeModifierMethods(scroll);
                        element.data('hy-scroll', undefined);
                        element = null;
                    });
                    $onsen.fireComponentEvent(element[0], 'init');
                };
            }
        };
    }]);

    module.factory('HyScrollView', ['$onsen', '$q', function ($onsen, $q){
        var defaultPullOption = {
            autoRefresh:false
        };
        var ScrollPullView = Class.extend({
            init:function(scope,element,attrs,transclude){
                this._element = element;
                this._scope = scope;
                this._attrs = attrs;
                this._transclude = transclude;
                //初始化数据
                this._scope.direction = this._scope.direction || 'Y';
                this._scope.pullDownOption = this._scope.pullDownOption || null;
                this._scope.pullUpOption = this._scope.pullUpOption || null;

                this._xsContainer = angular.element('<div class="xs-container"></div>');
                this._xsContent = angular.element('<div class="xs-content"></div>');
                this._xsContainer.append(this._xsContent);
                this._element.append(this._xsContainer);
                this.pullDownDone = angular.bind(this,this._pullDownDone);
                this.pullUpDone = angular.bind(this,this._pullUpDone);
                this.XScroll = null;
                this._transclude(scope.$parent, function(cloned) {
                    this._xsContent.append(cloned);
                    this._xsContent = null;
                    setTimeout(function(){
                        if(this._scope.direction =='Y'){
                            this.XScroll = new XScroll({
                                renderTo:this._element[0],
                                scrollbarX:false,
                                scrollbarY:true,
                                lockX:true,
                                lockY:false
                            });
                            if(this._scope.pullDownOption != null){
                                var pullDownConfig = angular.extend({},defaultPullOption,this._scope.pullDownOption);
                                this.pullDown = new XScroll.Plugins.PullDown(pullDownConfig);
                                this.XScroll.plug(this.pullDown);
                                this.pullDown.on("loading",function(){
                                    if(this._scope.pullDownLoad){
                                        this._scope.pullDownLoad({$done:  this.pullDownDone});
                                    }else{
                                        this.pullDownDone();
                                    }
                                    // this.pullDown.reset();
                                }.bind(this));
                            }
                            if(this._scope.pullUpOption != null){
                                var pullUpConfig = angular.extend({},defaultPullOption,this._scope.pullUpOption);
                                this.pullUp = new XScroll.Plugins.PullUp(pullUpConfig);
                                this.XScroll.plug(this.pullUp);
                                this.pullUp.on("loading",function(){
                                    if(this._scope.pullUpLoad){
                                        this._scope.pullUpLoad({$done:  this.pullUpDone});
                                    }else{
                                        this.pullUpDone();
                                    }
                                }.bind(this));
                            }
                        }else{
                            this.XScroll = new XScroll({
                                renderTo:this._element[0],
                                scrollbarY:false,
                                lockX:false,
                                lockY:true
                            });
                        }
                        this.XScroll.render();
                    }.bind(this),100);

                }.bind(this));

            },
            _pullDownDone:function(){
                this.pullDown.reset();

            },
            _pullUpDone:function(){
                this.pullUp.complete();
            },
            pullUpDisable:function(){
                this.XScroll.unplug(this.pullUp);
            },
            pullUpEnable:function(){
                this.XScroll.plug(this.pullUp);
            }
        });
        MicroEvent.mixin(ScrollPullView);
        return ScrollPullView;
    }]);
})();
(function () {
    'use strict';
    var module = null;
    try {
        module = angular.module('haiyiMobile');
    } catch (err) {
        module = angular.module('haiyiMobile', ['onsen']);
    }
    var nextUniqueId = 0;

    module.factory('$hyUtil', ['$document', '$timeout', '$compile', '$rootScope', '$interpolate', '$log', function ($document, $timeout, $compile, $rootScope, $interpolate, $log) {
        var $hyUtil = {
            /**
             * 向上遍历Dom树，寻找匹配的tagName父元素
             * @param {element} el    开始遍历的元素对象
             * @param {string} tagName   要寻找的元素标签名
             * @param {boolean} onlyParent    是否只找上一级父节点
             * @returns {element} 父元素对象或者null
             */
            getClosest: function getClosest(el, tagName, onlyParent) {
                if (el instanceof angular.element) el = el[0];
                tagName = tagName.toUpperCase();
                if (onlyParent) el = el.parentNode;
                if (!el) return null;
                do {
                    if (el.nodeName === tagName) {
                        return el;
                    }
                } while (el = el.parentNode);
                return null;
            },
            /**
             * 返回一个函数，只要它继续被调用，就不会被触发。该函数将被触发N毫秒后执行。
             * @param func  要执行的函数
             * @param wait  等待的时间(毫秒)
             * @param scope 作用域
             * @param invokeApply   如果超时则触发$digest()检查
             * @returns {Function}
             */
            debounce: function (func, wait, scope, invokeApply) {
                var timer;

                return function debounced() {
                    var context = scope,
                        args = Array.prototype.slice.call(arguments);

                    $timeout.cancel(timer);
                    timer = $timeout(function () {

                        timer = undefined;
                        func.apply(context, args);

                    }, wait || 10, invokeApply);
                };
            },
            fakeNgModel: function () {
                return {
                    $fake: true,
                    $setTouched: angular.noop,
                    $setViewValue: function (value) {
                        this.$viewValue = value;
                        this.$render(value);
                        this.$viewChangeListeners.forEach(function (cb) {
                            cb();
                        });
                    },
                    $isEmpty: function (value) {
                        return ('' + value).length === 0;
                    },
                    $parsers: [],
                    $formatters: [],
                    $viewChangeListeners: [],
                    $render: angular.noop
                };
            },
            parseAttributeBoolean: function (value, negatedCheck) {
                return value === '' || !!value && (negatedCheck === false || value !== 'false' && value !== '0');
            },
            validateScope: function (element) {
                var hasScope = element && angular.isDefined(element.scope());
                if (!hasScope) {
                    $log.warn("element.scope()未定义");
                }
                return hasScope;
            },
            nextUid: function () {
                return '' + nextUniqueId++;
            },
            /**
             * 创建一个无延时的事件处理栈，并进行脏数据检查
             *
             * @param callback
             * @param digest
             * @returns {*}
             */
            nextTick: function (callback, digest, scope) {
                //-- grab function reference for storing state details
                var nextTick = $hyUtil.nextTick;
                var timeout = nextTick.timeout;
                var queue = nextTick.queue || [];

                //-- add callback to the queue
                queue.push(callback);

                //-- set default value for digest
                if (digest == null) digest = true;

                //-- store updated digest/queue values
                nextTick.digest = nextTick.digest || digest;
                nextTick.queue = queue;

                //-- either return existing timeout or create a new one
                return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));


                function processQueue() {
                    var skip = scope && scope.$$destroyed;
                    var queue = !skip ? nextTick.queue : [];
                    var digest = !skip ? nextTick.digest : null;

                    nextTick.queue = [];
                    nextTick.timeout = null;
                    nextTick.digest = false;

                    queue.forEach(function (callback) {
                        callback();
                    });

                    if (digest) $rootScope.$digest();
                }
            },
            /**
             * 创建一个隐式的getter来缓存 `getter()`的查找值
             */
            valueOnUse: function (scope, key, getter) {
                var value = null, args = Array.prototype.slice.call(arguments);
                var params = (args.length > 3) ? args.slice(3) : [];

                Object.defineProperty(scope, key, {
                    get: function () {
                        if (value === null) value = getter.apply(scope, params);
                        return value;
                    }
                });
            },
            // 当前元素之外滚动无效
            disableScrollAround: function (element, parent) {
                $hyUtil.disableScrollAround._count = $hyUtil.disableScrollAround._count || 0;
                ++$hyUtil.disableScrollAround._count;
                if ($hyUtil.disableScrollAround._enableScrolling) return $hyUtil.disableScrollAround._enableScrolling;
                element = angular.element(element);
                var body = $document[0].body,
                    restoreBody = disableBodyScroll(),
                    restoreElement = disableElementScroll(parent);

                return $hyUtil.disableScrollAround._enableScrolling = function () {
                    if (!--$hyUtil.disableScrollAround._count) {
                        restoreBody();
                        restoreElement();
                        delete $hyUtil.disableScrollAround._enableScrolling;
                    }
                };

                // 创建一个虚拟的滚动层
                function disableElementScroll(element) {
                    element = angular.element(element || body)[0];
                    var zIndex = 50;
                    var scrollMask = angular.element(
                        '<div class="hy-scroll-mask" style="z-index: ' + zIndex + '">' +
                        '  <div class="hy-scroll-mask-bar"></div>' +
                        '</div>');
                    element.appendChild(scrollMask[0]);

                    scrollMask.on('wheel', preventDefault);
                    scrollMask.on('touchmove', preventDefault);
                    $document.on('keydown', disableKeyNav);

                    return function restoreScroll() {
                        scrollMask.off('wheel');
                        scrollMask.off('touchmove');
                        scrollMask[0].parentNode.removeChild(scrollMask[0]);
                        $document.off('keydown', disableKeyNav);
                        delete $hyUtil.disableScrollAround._enableScrolling;
                    };

                    // Prevent keypresses from elements inside the body
                    // used to stop the keypresses that could cause the page to scroll
                    // (arrow keys, spacebar, tab, etc).
                    function disableKeyNav(e) {

                    }

                    function preventDefault(e) {
                        e.preventDefault();
                    }
                }

                // 转换body
                function disableBodyScroll() {
                    var htmlNode = body.parentNode;
                    var restoreHtmlStyle = htmlNode.getAttribute('style') || '';
                    var restoreBodyStyle = body.getAttribute('style') || '';
                    var scrollOffset = $hyUtil.scrollTop(body);
                    var clientWidth = body.clientWidth;

                    if (body.scrollHeight > body.clientHeight) {
                        applyStyles(body, {
                            position: 'fixed',
                            width: '100%',
                            top: -scrollOffset + 'px'
                        });

                        applyStyles(htmlNode, {
                            overflowY: 'scroll'
                        });
                    }

                    if (body.clientWidth < clientWidth) {
                        applyStyles(body, {overflow: 'hidden'})
                    }

                    return function restoreScroll() {
                        body.setAttribute('style', restoreBodyStyle);
                        htmlNode.setAttribute('style', restoreHtmlStyle);
                        body.scrollTop = scrollOffset;
                    };
                }

                function applyStyles(el, styles) {
                    for (var key in styles) {
                        el.style[key] = styles[key];
                    }
                }
            },
            enableScrolling: function () {
                var method = this.disableScrollAround._enableScrolling;
                return method && method();
            },
            /**
             * 计算滚动Top偏移量
             */
            scrollTop: function (element) {
                element = angular.element(element || $document[0].body);

                var body = (element[0] == $document[0].body) ? $document[0].body : undefined;
                var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;

                // Calculate the positive scroll offset
                return scrollTop || Math.abs(element[0].getBoundingClientRect().top);
            },
            /**
             * 计算滚动Top偏移量
             */
            gettouchEvent: function () {
                return {
                    start: !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) ? 'touchstart' : 'mousedown',
                    move: !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) ? 'touchmove' : 'mousemove',
                    end: !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) ? 'touchend' : 'mouseup'
                };
            },
            /**
             * Ajax调用，并返回数据
             */
            ajax: function (options) {
                var defaults = {
                    method: 'GET',
                    data: false,
                    async: true,
                    cache: true,
                    user: '',
                    password: '',
                    headers: {},
                    xhrFields: {},
                    statusCode: {},
                    processData: true,
                    dataType: 'text',
                    contentType: 'application/x-www-form-urlencoded',
                    timeout: 0
                };
                var callbacks = ['beforeSend', 'error', 'complete', 'success', 'statusCode'];

                function ajaxCallback(callbackName) {
                    var a = arguments;
                    //if (eventName) $(document).trigger(eventName, eventData);
                    if (callbackName) {
                        // Options callback
                        if (options[callbackName]) options[callbackName](a[1], a[2], a[3], a[4]);
                    }
                }

                for (var def in defaults) {
                    if (typeof options[def] === 'undefined') {
                        options[def] = defaults[def];
                    }
                }
                if (!options.url) {
                    options.url = window.location.toString();
                }


                var _method = options.method.toUpperCase();
                var xhr = new XMLHttpRequest();

                xhr.open(_method, options.url, options.async, options.user, options.password);

                var xhrTimeout;

                xhr.onload = function (e) {
                    if (xhrTimeout) clearTimeout(xhrTimeout);
                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {
                        var responseData;
                        if (options.dataType === 'json') {
                            try {
                                responseData = JSON.parse(xhr.responseText);
                                ajaxCallback('success', responseData, xhr.status, xhr);
                            }
                            catch (err) {
                                ajaxCallback('error', xhr, 'parseerror');
                            }
                        }
                        else {
                            responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;
                            ajaxCallback('success', responseData, xhr.status, xhr);
                        }
                    }
                    else {
                        ajaxCallback('error', xhr, xhr.status);
                    }

                    ajaxCallback('complete', xhr, xhr.status);
                };

                xhr.onerror = function (e) {
                    if (xhrTimeout) {
                        clearTimeout(xhrTimeout)
                    }
                    ajaxCallback('error', xhr, xhr.status);
                };
                xhr.send();


                // Timeout
                if (options.timeout > 0) {
                    xhrTimeout = setTimeout(function () {
                        xhr.abort();
                        ajaxCallback('error', xhr, 'timeout');
                        ajaxCallback('complete', xhr, 'timeout');
                    }, options.timeout);
                }
                return xhr;

            },
            /**
             * @return {Boolean}
             */
            isAndroid: function () {
                return !!window.navigator.userAgent.match(/android/i);
            },
            /**
             * @return {Boolean}
             */
            isIOS: function () {
                return !!window.navigator.userAgent.match(/(ipad|iphone|ipod touch)/i);
            },
            /**
             * 判断是否是web浏览器
             * @return {Boolean}    是否web浏览器
             */
            isWebView: function () {
                if (document.readyState === 'loading' || document.readyState == 'uninitialized') {
                    throw new Error('isWebView() method is available after dom contents loaded.');
                }

                return !!(window.cordova || window.phonegap || window.PhoneGap);

            },
            /**
             * 判断是否是微信平台
             * @return {Boolean}    是否微信平台
             */
            isWeiXin: function () {
                return !!window.navigator.userAgent.match(/MicroMessenger/i);
            },
            /**
             * 获取设备的UUID，如果没有则默认返回_haiyisoft_
             * @returns {string}    返回UUID
             */
            getUUID: function () {
                return window.device ? window.device.uuid : '_haiyisoft_';
            },
            /**
             * 获取MD5加密
             * @param oriStr    返回MD5处理的字符串
             */
            getMD5Encrypt: function (oriStr) {
                //返回MD5后的base64格式
                return CryptoJS.enc.Base64.stringify(CryptoJS.MD5(CryptoJS.enc.Utf8.parse(oriStr)));
            },
            /**
             * 获取Des加密后的字符串
             * @param sourceStr  原始字符串
             * @param key   秘钥
             * @returns {*|string}  加密后的字符串
             */
            getDESEncStr: function (sourceStr, key) {
                var keyHex = CryptoJS.enc.Utf8.parse(key);
                var encrypted = CryptoJS.DES.encrypt(sourceStr, keyHex, {
                    mode: CryptoJS.mode.ECB,
                    padding: CryptoJS.pad.Pkcs7
                });
                return encrypted.toString();
            },
            /**
             * 获取Des解密后的字符串
             * @param {string} encrypted 加密字符串
             * @param {string} key   秘钥
             * @returns {string}    解密后的字符串
             */
            getDESDecStr: function (encrypted, key) {
                var keyHex = CryptoJS.enc.Utf8.parse(key);
                var decrypted = CryptoJS.DES.decrypt({
                    ciphertext: CryptoJS.enc.Base64.parse(encrypted)
                }, keyHex, {
                    mode: CryptoJS.mode.ECB,
                    padding: CryptoJS.pad.Pkcs7
                });
                var temp = '';
                try {
                    temp = decrypted.toString(CryptoJS.enc.Utf8);
                } catch (e) {
                    console.log(e);
                }
                return temp;
            },
            /**
             * 创建签名
             * @param username 用户名
             * @param key 秘钥
             * @param timeStr 时间戳
             * @returns {*|string}  获取处理好的登录签名
             */
            createLoginSignature: function (username, password, timeStr) {
                var key = this.getMD5Encrypt(password);
                var array = [username, key, timeStr];
                array.sort();
                var arrayStr = array[0] + array[1] + array[2];
                return this.getMD5Encrypt(arrayStr);
            },
            arraySort: function (array, attr) {
                function compare(attrs) {
                    return function (a, b) {
                        if (attrs) {
                            var value1 = a[attrs];
                            var value2 = b[attrs];
                            return value1 - value2;
                        } else {
                            return a - b;
                        }
                    }
                }

                return array.sort(compare(attr));
            },
            /**
             * 按照某一个属性对数组对象中分组
             * @param array
             * @param attr
             * @returns {Array}
             */
            arrayGroupBy: function (array, attr, isDate) {
                var arrayObject = {};
                array.forEach(function (item, index) {
                    var key = "";
                    if (isDate) {
                        key = item[attr] ? item[attr].substr(0, 10) : "NULL";
                    } else {
                        key = item[attr];
                    }
                    arrayObject[key] = arrayObject[key] || [];
                    arrayObject[key].push(item);
                });
                var arrayGroup = [];
                for (var prop in arrayObject) {
                    var obj = {
                        list: arrayObject[prop]
                    };
                    obj[attr] = prop;
                    arrayGroup.push(obj);
                }
                return arrayGroup;
            },
            isString: function (str) {
                return (typeof str === 'string') && str.constructor === String;
            },
            isNumber: function (obj) {
                return (typeof obj === 'number') && obj.constructor === Number;
            },
            isArray: function (obj) {
                return (typeof obj === 'object') && obj.constructor === Array;
            },
            isEmpty: function (info) {
                return (info === undefined || info === null || info === '');
            },
            saveLocal: function (key, value) {
                localStorage.setItem(key, JSON.stringify(value));
            },
            getLocal: function (key) {
                return JSON.parse(localStorage.getItem(key));
            },
            removeLocal: function (key) {
                localStorage.removeItem(key);
            },
            convertToArray: function (_object) {
                var _array = [];
                if (angular.isArray(_object)) {
                    _array = _object;
                } else {
                    _array.push(_object);
                }
                return _array;
            },
            /**
             * 验证是否是手机号
             * @param mobileNumber
             * @returns {boolean}
             */
            isMobileNumber: function (mobileNumber) {
                if (!mobileNumber) {
                    return false;
                }
                mobileNumber = (mobileNumber + "").replace("+86", "");
                var phoneReg = /^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
                return phoneReg.test(mobileNumber);
            },
            /**
             * 验证密码是否符合规则
             * 验证密码规则（8-16位,包含字母、数字和特殊字符中至少2种。）
             * @param password
             * @returns {boolean}
             */
            isValidPassword: function (password) {
                if (!password) {
                    return false;
                }
                if (password.length < 8 || password.length > 16) {
                    return false;
                }
                var matchCount = 0;
                var regLetter = '[a-zA-Z]';
                var regNumber = '[0-9]';
                var regSpecial = '(([\x21-\x7e]+)[^A-Za-z0-9])';
                if (password.match(regLetter)) {
                    matchCount++;
                }
                if (password.match(regNumber)) {
                    matchCount++;
                }
                if (password.match(regSpecial)) {
                    matchCount++;
                }
                if (matchCount >= 2) {
                    return true;
                } else {
                    return false;
                }
            },
            /**
             * 验证是否是邮箱地址
             * @param email
             * @returns {boolean}
             */
            isEmail: function (email) {
                if (!email) {
                    return false;
                }
                var emailReg = /^([\.a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/;
                return emailReg.test(email);
            },
            hexEncode: function (str) {
                var hex, i;
                var result = "";
                for (i = 0; i < str.length; i++) {
                    hex = str.charCodeAt(i).toString(16);
                    result += ("000" + hex).slice(-4);
                }
                return result
            },
            hexDecode: function (str) {
                var j;
                var hexes = str.match(/.{1,4}/g) || [];
                var back = "";
                for (j = 0; j < hexes.length; j++) {
                    back += String.fromCharCode(parseInt(hexes[j], 16));
                }
                return back;
            }


        };

        return $hyUtil;
    }]);
    module.factory('$hyDateUtil', [function () {
        return {
            getFirstDateOfMonth: getFirstDateOfMonth,
            getNumberOfDaysInMonth: getNumberOfDaysInMonth,
            getDateInNextMonth: getDateInNextMonth,
            getDateInPreviousMonth: getDateInPreviousMonth,
            isInNextMonth: isInNextMonth,
            isInPreviousMonth: isInPreviousMonth,
            getDateMidpoint: getDateMidpoint,
            isSameMonthAndYear: isSameMonthAndYear,
            getWeekOfMonth: getWeekOfMonth,
            incrementDays: incrementDays,
            incrementMonths: incrementMonths,
            getLastDateOfMonth: getLastDateOfMonth,
            isSameDay: isSameDay,
            getMonthDistance: getMonthDistance,
            isValidDate: isValidDate,
            setDateTimeToMidnight: setDateTimeToMidnight,
            createDateAtMidnight: createDateAtMidnight,
            isDateWithinRange: isDateWithinRange,
            getDateInPreviousYear: getDateInPreviousYear,
            getDateInNextYear: getDateInNextYear
        };

        /**
         * 获取给定日期的当月第一天
         * @param {Date} date
         * @returns {Date}
         */
        function getFirstDateOfMonth(date) {
            return new Date(date.getFullYear(), date.getMonth(), 1);
        }

        /**
         * 获取给定日期的月份的天数。
         * @param date
         * @returns {number}
         */
        function getNumberOfDaysInMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
        }

        /**
         * 获取给定日期的下一个月第一天
         * @param date
         * @returns {Date}
         */
        function getDateInNextMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() + 1, 1);
        }

        /**
         * 获取给定日期的上一个月的第一天
         * @param date
         * @returns {Date}
         */
        function getDateInPreviousMonth(date) {
            return new Date(date.getFullYear(), date.getMonth() - 1, 1);
        }

        /**
         * 获取给定日期的下一个月第一天
         * @param date
         * @returns {Date}
         */
        function getDateInNextYear(date) {
            return new Date(date.getFullYear() + 1, date.getMonth(), 1);
        }

        /**
         * 获取给定日期的上一个月的第一天
         * @param date
         * @returns {Date}
         */
        function getDateInPreviousYear(date) {
            return new Date(date.getFullYear() - 1, date.getMonth(), 1);
        }

        /**
         * 判断两个日期是否是同一年同一月
         * @param {Date} d1
         * @param {Date} d2
         * @returns {boolean}
         */
        function isSameMonthAndYear(d1, d2) {
            return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();
        }

        /**
         * 判断两个日期是否是同一天
         * @param {Date} d1
         * @param {Date} d2
         * @returns {boolean}
         */
        function isSameDay(d1, d2) {
            return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);
        }

        /**
         * 判断endDate是否是startDate的下一个月的日期
         * @param {Date} 基准日期
         * @param {Date} 判断日期
         * @returns {boolean}
         */
        function isInNextMonth(startDate, endDate) {
            var nextMonth = getDateInNextMonth(startDate);
            return isSameMonthAndYear(nextMonth, endDate);
        }

        /**
         * 判断endDate是否是startDate的上一个月的日期
         * @param {Date} 基准日期
         * @param {Date} 判断日期
         * @returns {boolean}
         */
        function isInPreviousMonth(startDate, endDate) {
            var previousMonth = getDateInPreviousMonth(startDate);
            return isSameMonthAndYear(endDate, previousMonth);
        }

        /**
         * 获取日期之间的中点。
         * @param {Date} d1
         * @param {Date} d2
         * @returns {Date}
         */
        function getDateMidpoint(d1, d2) {
            return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);
        }

        /**
         * 得到一个给定日期在一周内的位置
         * @param {Date} date
         * @returns {number} Index of the week of the month (zero-based).
         */
        function getWeekOfMonth(date) {
            var firstDayOfMonth = getFirstDateOfMonth(date);
            return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);
        }

        /**
         * 通过给定一个叠加的日期数字，得到一个新的日期，
         * @param {Date} date
         * @param {number} numberOfDays
         * @returns {Date}
         */
        function incrementDays(date, numberOfDays) {
            return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);
        }

        /**
         * 通过给定一个叠加的月份数字，得到一个新的日期
         * @param {Date} date
         * @param {number} numberOfMonths
         * @returns {Date}
         */
        function incrementMonths(date, numberOfMonths) {
            var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);
            var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);
            if (numberOfDaysInMonth < date.getDate()) {
                dateInTargetMonth.setDate(numberOfDaysInMonth);
            } else {
                dateInTargetMonth.setDate(date.getDate());
            }

            return dateInTargetMonth;
        }

        /**
         * 得到2个月之间的整数距离。
         * @param {Date} start
         * @param {Date} end
         * @returns {number}如果end比start小，则得到的是负数
         */
        function getMonthDistance(start, end) {
            return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());
        }

        /**
         * 获取给定日期当月的最后一天
         * @param {Date} date
         * @returns {Date}
         */
        function getLastDateOfMonth(date) {
            return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));
        }

        /**
         * 判断当前是否是日期对象
         * @param {Date} date
         * @return {boolean}
         */
        function isValidDate(date) {
            return date != null && date.getTime && !isNaN(date.getTime());
        }

        /**
         * 设置一个午夜的时间（0:0:0）
         * @param {Date} date
         */
        function setDateTimeToMidnight(date) {
            if (isValidDate(date)) {
                date.setHours(0, 0, 0, 0);
            }
        }

        /**
         * 创建一个午夜时间的日期
         * @param {number=} opt_value
         * @return {Date} 带时间的日期
         */
        function createDateAtMidnight(opt_value) {
            var date;
            if (angular.isUndefined(opt_value)) {
                date = new Date();
            } else {
                date = new Date(opt_value);
            }
            setDateTimeToMidnight(date);
            return date;
        }

        /**
         * 判断日期是否在区间范围内
         * @param {Date} date
         * @param {Date} minDate
         * @param {Date} maxDate
         */
        function isDateWithinRange(date, minDate, maxDate) {
            return (!angular.isDate(minDate) || minDate <= date) &&
                (!angular.isDate(maxDate) || maxDate >= date);
        }
    }]);
    module.factory('$hyDateLocale', ['$locale', function ($locale) {
        var defaultMsgCalendar = 'Calendar';
        var defaultMsgOpenCalendar = 'Open calendar';
        var defaultDates = Array(32);
        for (var i = 1; i <= 31; i++) {
            defaultDates[i] = i;
        }
        var shortDayText = {
            Sunday: "日",
            Monday: "一",
            Tuesday: "二",
            Wednesday: "三",
            Thursday: "四",
            Friday: "五",
            Saturday: "六"
        };
        var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function (day) {
            return shortDayText[day];
        });
        return {
            months: $locale.DATETIME_FORMATS.MONTH,
            shortMonths: $locale.DATETIME_FORMATS.SHORTMONTH,
            days: $locale.DATETIME_FORMATS.DAY,
            shortDays: defaultShortDays,
            dates: defaultDates,
            firstDayOfWeek: this.firstDayOfWeek || 0,
            formatDate: function (date, formatStr) {
                var str = formatStr;
                var Week = ['日', '一', '二', '三', '四', '五', '六'];

                str = str.replace(/yyyy|YYYY/, date.getFullYear());
                str = str.replace(/yy|YY/, (date.getYear() % 100) > 9 ? (date.getYear() % 100) + '' : '0' + (date.getYear() % 100));

                str = str.replace(/MM/, date.getMonth() > 8 ? (date.getMonth() + 1) + '' : '0' + (date.getMonth() + 1));
                str = str.replace(/M/g, (date.getMonth() + 1));

                str = str.replace(/w|W/g, Week[date.getDay()]);

                str = str.replace(/dd|DD/, date.getDate() > 9 ? date.getDate() + '' : '0' + date.getDate());
                str = str.replace(/d|D/g, date.getDate());

                str = str.replace(/hh|HH/, date.getHours() > 9 ? date.getHours() + '' : '0' + date.getHours());
                str = str.replace(/h|H/g, date.getHours());
                str = str.replace(/mm/, date.getMinutes() > 9 ? date.getMinutes() + '' : '0' + date.getMinutes());
                str = str.replace(/m/g, date.getMinutes());

                str = str.replace(/ss|SS/, date.getSeconds() > 9 ? date.getSeconds() + '' : '0' + date.getSeconds());
                str = str.replace(/s|S/g, date.getSeconds());

                return str;
            },
            parseDate: defaultParseDate,
            isDateComplete: defaultIsDateComplete,
            monthHeaderFormatter: defaultMonthHeaderFormatter,
            weekNumberFormatter: defaultWeekNumberFormatter,
            longDateFormatter: defaultLongDateFormatter,
            msgCalendar: defaultMsgCalendar,
            msgOpenCalendar: defaultMsgOpenCalendar,
            getTimerFromDate: function (date) {
                var hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours().toString();
                var min = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes().toString();

                return hours + ':' + min;

            },
        };


        /**
         * 默认的字符串转换日期的方法
         * @param {string} dateString
         * @returns {!Date}
         */
        function defaultParseDate(dateString) {
            if (dateString && angular.isString(dateString)) {
                while (dateString.indexOf('-') >= 0) {
                    dateString = dateString.replace('-', '/');
                }
                if (dateString.length === 7) {
                    dateString += '/01';
                }
                dateString = dateString.replace('.0', '');
            }
            return new Date(dateString);
        }

        /**
         * 确定字符串是否有意义解析为日期对象。
         * @param {string} dateString
         * @returns {boolean}
         */
        function defaultIsDateComplete(dateString) {
            dateString = dateString.trim();

            // Looks for three chunks of content (either numbers or text) separated
            // by delimiters.
            var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;
            return re.test(dateString);
        }

        /**
         * 默认的格式化日期为年月的文本格式
         * @param {!Date} date
         * @returns {string}
         */
        function defaultMonthHeaderFormatter(date) {
            return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();
        }

        /**
         * 格式化为周字符格式
         * @param number
         * @returns {string}
         */
        function defaultWeekNumberFormatter(number) {
            return 'Week ' + number;
        }

        /**
         *
         * @param {!Date} date
         * @returns {string}
         */
        function defaultLongDateFormatter(date) {
            // Example: 'Thursday June 18 2015'
            return [
                $locale.DATETIME_FORMATS.DAY[date.getDay()],
                $locale.DATETIME_FORMATS.MONTH[date.getMonth()],
                defaultDates[date.getDate()],
                date.getFullYear()
            ].join(' ');
        }
    }]);


    module.factory('$hyColorUtil', [function () {
        /**
         * 转换16进制数值为RGBA的字符串
         * @param color {string}
         * @returns {string}
         */
        function hexToRgba(color) {
            var hex = color[0] === '#' ? color.substr(1) : color,
                dig = hex.length / 3,
                red = hex.substr(0, dig),
                green = hex.substr(dig, dig),
                blue = hex.substr(dig * 2);
            if (dig === 1) {
                red += red;
                green += green;
                blue += blue;
            }
            return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';
        }

        /**
         * 转换RGBA的字符串为16进制数值
         * @param color {string}
         * @returns {string}
         */
        function rgbaToHex(color) {
            color = color.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);

            var hex = (color && color.length === 4) ? "#" +
                ("0" + parseInt(color[1], 10).toString(16)).slice(-2) +
                ("0" + parseInt(color[2], 10).toString(16)).slice(-2) +
                ("0" + parseInt(color[3], 10).toString(16)).slice(-2) : '';

            return hex.toUpperCase();
        }

        /**
         * 转换RGB为RGBA
         * @param color {string}
         * @returns {string}
         */
        function rgbToRgba(color) {
            return color.replace(')', ', 0.1)').replace('(', 'a(');
        }

        /**
         * 转换RGBA为RGB
         * @param color {string}
         * @returns {string}
         */
        function rgbaToRgb(color) {
            return color
                ? color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')')
                : 'rgb(0,0,0)';
        }

        return {
            rgbaToHex: rgbaToHex,
            hexToRgba: hexToRgba,
            rgbToRgba: rgbToRgba,
            rgbaToRgb: rgbaToRgb
        }
    }]);
})();}catch(e){alert(JSON.stringify(e));}
